{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/fleet.cattle.io.gitrepo.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/fleet.cattle.io.gitrepo.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Vue","exceptionToErrorsArray","mapGetters","AUTH_TYPE","FLEET","NORMAN","SECRET","VIRTUAL_HARVESTER_PROVIDER","set","ArrayList","Banner","CreateEditView","CruResource","InputWithSelect","jsyaml","LabeledInput","LabeledSelect","Labels","Loading","NameNsDescription","YamlEditor","base64Decode","base64Encode","SelectOrCreateAuthSecret","_CREATE","isHarvesterCluster","CAPI","CATALOG","FLEET_LABELS","SECRET_TYPES","checkSchemasForFindAllHash","Checkbox","_VERIFY","_SKIP","_SPECIFY","name","components","mixins","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hash","tls","wrap","_callee$","_context","prev","next","allClusters","inStoreType","type","CLUSTER","allClusterGroups","CLUSTER_GROUP","$store","sent","value","spec","insecureSkipTLSVerify","caBundle","e","tlsMode","correctDrift","undefined","enabled","updateTargets","stop","data","_this$value$spec","_this$value$spec2","targetInfo","targetCluster","cluster","targetClusterGroup","clusterGroup","targetAdvanced","advanced","ref","revision","refValue","targetMode","mode","realMode","concat","stepRepoInfo","title","t","label","subtext","descriptionKey","ready","weight","stepTargetInfo","addRepositorySteps","sort","a","b","allWorkspaces","tempCachedValues","username","password","publicKey","privateKey","targetAdvancedErrors","matchingClusters","displayHelmRepoURLRegex","computed","_objectSpread","isLocal","metadata","namespace","isTls","_this$value","repo","startsWith","targetOptions","_this2","out","clusters","filter","x","map","nameDisplay","length","push","kind","disabled","apply","_toConsumableArray","groups","clusterNames","_this3","clusterGroupNames","_this4","tlsOptions","stepOneRequires","watch","workspace","neu","isCreate","created","registerBeforeHook","cleanTLS","doCreateSecrets","Date","getTime","methods","updateCachedAuthVal","val","key","selected","toggleHelmRepoURLRegex","_NONE","updateAuth","active","_this$value$spec3","helmRepoURLRegex","match","targets","clusterSelector","matchExpressions","PROVIDER","operator","values","clusterName","parsed","load","stepOneReady","changeRef","_ref","text","branch","_this5","_callee2","_callee2$","_context2","clientSecretName","doCreate","helmSecretName","credentials","_this6","_callee3","secret","publicField","privateField","_callee3$","_context3","_SSH","_BASIC","_S3","includes","abrupt","dispatch","CLOUD_CREDENTIAL","s3credentialConfig","accessKey","secretKey","_MANAGEMENT","generateName","labels","_defineProperty","MANAGED","t0","SSH","BASIC","Error","_type","save","$nextTick","updateTlsMode","event","onUpdateRepoName","$set","updateTls","trim","liveValue"],"sources":["node_modules/@rancher/shell/edit/fleet.cattle.io.gitrepo.vue"],"sourcesContent":["<script>\nimport Vue from 'vue';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { mapGetters } from 'vuex';\nimport {\n  AUTH_TYPE, FLEET, NORMAN, SECRET, VIRTUAL_HARVESTER_PROVIDER\n} from '@shell/config/types';\nimport { set } from '@shell/utils/object';\nimport ArrayList from '@shell/components/form/ArrayList';\nimport { Banner } from '@components/Banner';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport InputWithSelect from '@shell/components/form/InputWithSelect';\nimport jsyaml from 'js-yaml';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport Labels from '@shell/components/form/Labels';\nimport Loading from '@shell/components/Loading';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport YamlEditor from '@shell/components/YamlEditor';\nimport { base64Decode, base64Encode } from '@shell/utils/crypto';\nimport SelectOrCreateAuthSecret from '@shell/components/form/SelectOrCreateAuthSecret';\nimport { _CREATE } from '@shell/config/query-params';\nimport { isHarvesterCluster } from '@shell/utils/cluster';\nimport { CAPI, CATALOG, FLEET as FLEET_LABELS } from '@shell/config/labels-annotations';\nimport { SECRET_TYPES } from '@shell/config/secret';\nimport { checkSchemasForFindAllHash } from '@shell/utils/auth';\nimport Checkbox from '@components/Form/Checkbox/Checkbox.vue';\n\nconst _VERIFY = 'verify';\nconst _SKIP = 'skip';\nconst _SPECIFY = 'specify';\n\nexport default {\n  name: 'CruGitRepo',\n\n  components: {\n    Checkbox,\n    ArrayList,\n    Banner,\n    CruResource,\n    InputWithSelect,\n    Labels,\n    LabeledInput,\n    LabeledSelect,\n    Loading,\n    NameNsDescription,\n    YamlEditor,\n    SelectOrCreateAuthSecret,\n  },\n\n  mixins: [CreateEditView],\n\n  async fetch() {\n    const hash = await checkSchemasForFindAllHash({\n      allClusters: {\n        inStoreType: 'management',\n        type:        FLEET.CLUSTER\n      },\n\n      allClusterGroups: {\n        inStoreType: 'management',\n        type:        FLEET.CLUSTER_GROUP\n      }\n    }, this.$store);\n\n    this.allClusters = hash.allClusters || [];\n    this.allClusterGroups = hash.allClusterGroups || [];\n\n    let tls = _VERIFY;\n\n    if ( this.value.spec.insecureSkipTLSVerify ) {\n      tls = _SKIP;\n    } else if ( this.value.spec.caBundle ) {\n      try {\n        this.caBundle = base64Decode(this.value.spec.caBundle);\n        tls = _SPECIFY;\n      } catch (e) {\n        // Hmm...\n      }\n    }\n\n    this.tlsMode = tls;\n\n    if (this.value.spec.correctDrift === undefined) {\n      Vue.set(this.value.spec, 'correctDrift', { enabled: false });\n    }\n\n    this.updateTargets();\n  },\n\n  data() {\n    const targetInfo = this.value.targetInfo;\n    const targetCluster = targetInfo.cluster;\n    const targetClusterGroup = targetInfo.clusterGroup;\n    const targetAdvanced = targetInfo.advanced;\n\n    const ref = ( this.value.spec?.revision ? 'revision' : 'branch' );\n    const refValue = this.value.spec?.[ref] || '';\n\n    let targetMode = targetInfo.mode;\n\n    if ( this.realMode === _CREATE ) {\n      targetMode = 'all';\n    } else if ( targetMode === 'cluster' ) {\n      targetMode = `cluster://${ targetCluster }`;\n    } else if ( targetMode === 'clusterGroup' ) {\n      targetMode = `group://${ targetClusterGroup }`;\n    }\n\n    const stepRepoInfo = {\n      name:           'stepRepoInfo',\n      title:          this.t('fleet.gitRepo.add.steps.repoInfo.title'),\n      label:          this.t('fleet.gitRepo.add.steps.repoInfo.label'),\n      subtext:        this.t('fleet.gitRepo.add.steps.repoInfo.subtext'),\n      descriptionKey: 'fleet.gitRepo.add.steps.repoInfo.description',\n      ready:          false,\n      weight:         30\n    };\n\n    const stepTargetInfo = {\n      name:           'stepTargetInfo',\n      title:          this.t('fleet.gitRepo.add.steps.targetInfo.title'),\n      label:          this.t('fleet.gitRepo.add.steps.targetInfo.label'),\n      subtext:        this.t('fleet.gitRepo.add.steps.targetInfo.subtext'),\n      descriptionKey: 'fleet.gitRepo.steps.add.targetInfo.description',\n      ready:          true,\n      weight:         30\n    };\n\n    const addRepositorySteps = [stepRepoInfo, stepTargetInfo].sort((a, b) => (b.weight || 0) - (a.weight || 0));\n\n    return {\n      allClusters:             [],\n      allClusterGroups:        [],\n      allWorkspaces:           [],\n      tempCachedValues:        {},\n      username:                null,\n      password:                null,\n      publicKey:               null,\n      privateKey:              null,\n      tlsMode:                 null,\n      caBundle:                null,\n      targetAdvancedErrors:    null,\n      matchingClusters:        null,\n      ref,\n      refValue,\n      targetMode,\n      targetCluster,\n      targetClusterGroup,\n      targetAdvanced,\n      stepRepoInfo,\n      stepTargetInfo,\n      addRepositorySteps,\n      displayHelmRepoURLRegex: false\n    };\n  },\n\n  computed: {\n    ...mapGetters(['workspace']),\n\n    _SPECIFY() {\n      return _SPECIFY;\n    },\n\n    isLocal() {\n      return this.value.metadata.namespace === 'fleet-local';\n    },\n\n    isTls() {\n      return !(this.value?.spec?.repo || '').startsWith('http://');\n    },\n\n    targetOptions() {\n      const out = [\n        {\n          label: 'No Clusters',\n          value: 'none'\n        },\n        {\n          label: 'All Clusters in the Workspace',\n          value: 'all',\n        },\n        {\n          label: 'Advanced',\n          value: 'advanced'\n        },\n      ];\n\n      const clusters = this.allClusters\n        .filter((x) => {\n          return x.metadata.namespace === this.value.metadata.namespace;\n        })\n        .filter((x) => !isHarvesterCluster(x))\n        .map((x) => {\n          return { label: x.nameDisplay, value: `cluster://${ x.metadata.name }` };\n        });\n\n      if ( clusters.length ) {\n        out.push({ kind: 'divider', disabled: true });\n        out.push({\n          kind:     'title',\n          label:    'Clusters',\n          disabled: true,\n        });\n\n        out.push(...clusters);\n      }\n\n      const groups = this.allClusterGroups\n        .filter((x) => x.metadata.namespace === this.value.metadata.namespace)\n        .map((x) => {\n          return { label: x.nameDisplay, value: `group://${ x.metadata.name }` };\n        });\n\n      if ( groups.length ) {\n        out.push({ kind: 'divider', disabled: true });\n        out.push({\n          kind:     'title',\n          label:    'Cluster Groups',\n          disabled: true\n        });\n\n        out.push(...groups);\n      }\n\n      return out;\n    },\n\n    clusterNames() {\n      const out = this.allClusters\n        .filter((x) => x.metadata.namespace === this.value.metadata.namespace)\n        .map((x) => x.metadata.name);\n\n      return out;\n    },\n\n    clusterGroupNames() {\n      const out = this.allClusterGroups\n        .filter((x) => x.metadata.namespace === this.value.metadata.namespace)\n        .map((x) => x.metadata.name);\n\n      return out;\n    },\n\n    tlsOptions() {\n      return [\n        { label: this.t('fleet.gitRepo.tls.verify'), value: _VERIFY },\n        { label: this.t('fleet.gitRepo.tls.specify'), value: _SPECIFY },\n        { label: this.t('fleet.gitRepo.tls.skip'), value: _SKIP },\n      ];\n    },\n\n    stepOneRequires() {\n      return !!this.value.metadata.name && !!this.refValue;\n    },\n  },\n\n  watch: {\n    'value.metadata.namespace': 'updateTargets',\n    targetMode:                 'updateTargets',\n    targetCluster:              'updateTargets',\n    targetClusterGroup:         'updateTargets',\n    targetAdvanced:             'updateTargets',\n    tlsMode:                    'updateTls',\n    caBundle:                   'updateTls',\n\n    workspace(neu) {\n      if ( this.isCreate ) {\n        set(this.value, 'metadata.namespace', neu);\n      }\n    },\n  },\n\n  created() {\n    this.registerBeforeHook(this.cleanTLS, 'cleanTLS');\n    this.registerBeforeHook(this.doCreateSecrets, `registerAuthSecrets${ new Date().getTime() }`, 99);\n  },\n\n  methods: {\n    set,\n\n    cleanTLS() {\n      if (!this.isTls) {\n        delete this.value.spec.insecureSkipTLSVerify;\n        delete this.value.spec.caBundle;\n      }\n    },\n\n    updateCachedAuthVal(val, key) {\n      this.tempCachedValues[key] = typeof val === 'string' ? { selected: val } : { ...val };\n\n      if (key === 'helmSecretName') {\n        this.toggleHelmRepoURLRegex(val && val.selected !== AUTH_TYPE._NONE);\n      }\n    },\n\n    updateAuth(val, key) {\n      const spec = this.value.spec;\n\n      if ( val ) {\n        spec[key] = val;\n      } else {\n        delete spec[key];\n      }\n\n      this.updateCachedAuthVal(val, key);\n    },\n\n    toggleHelmRepoURLRegex(active) {\n      this.displayHelmRepoURLRegex = active;\n\n      if (!active) {\n        delete this.value.spec?.helmRepoURLRegex;\n      }\n    },\n\n    updateTargets() {\n      const spec = this.value.spec;\n      const mode = this.targetMode;\n\n      let kind, value;\n      const match = mode.match(/([^:]+)(:\\/\\/(.*))?$/);\n\n      if ( match ) {\n        kind = match[1];\n        value = match[3];\n      }\n\n      if ( kind === 'all' ) {\n        spec.targets = [{\n          clusterSelector: {\n            matchExpressions: [{\n              key:      CAPI.PROVIDER,\n              operator: 'NotIn',\n              values:   [\n                VIRTUAL_HARVESTER_PROVIDER\n              ],\n            }],\n          },\n        }];\n      } else if ( kind === 'none' ) {\n        spec.targets = [];\n      } else if ( kind === 'cluster' ) {\n        spec.targets = [\n          { clusterName: value },\n        ];\n      } else if ( kind === 'group' ) {\n        spec.targets = [\n          { clusterGroup: value }\n        ];\n      } else if ( kind === 'advanced' ) {\n        try {\n          const parsed = jsyaml.load(this.targetAdvanced);\n\n          spec.targets = parsed;\n          this.targetAdvancedErrors = null;\n        } catch (e) {\n          this.targetAdvancedErrors = exceptionToErrorsArray(e);\n        }\n      } else {\n        spec.targets = [];\n      }\n\n      this.stepOneReady();\n    },\n\n    changeRef({ text, selected }) {\n      this.ref = selected;\n      this.refValue = text;\n      const spec = this.value.spec;\n\n      if ( selected === 'branch' ) {\n        spec.branch = text;\n        delete spec.revision;\n      } else {\n        delete spec.branch;\n        spec.revision = text;\n      }\n\n      this.stepOneReady();\n    },\n\n    async doCreateSecrets() {\n      if (this.tempCachedValues.clientSecretName) {\n        await this.doCreate('clientSecretName', this.tempCachedValues.clientSecretName);\n      }\n\n      if (this.tempCachedValues.helmSecretName) {\n        await this.doCreate('helmSecretName', this.tempCachedValues.helmSecretName);\n      }\n    },\n\n    async doCreate(name, credentials) {\n      const { selected, publicKey, privateKey } = credentials;\n\n      if ( ![AUTH_TYPE._SSH, AUTH_TYPE._BASIC, AUTH_TYPE._S3].includes(selected) ) {\n        return;\n      }\n\n      let secret;\n\n      if ( selected === AUTH_TYPE._S3 ) {\n        secret = await this.$store.dispatch(`rancher/create`, {\n          type:               NORMAN.CLOUD_CREDENTIAL,\n          s3credentialConfig: {\n            accessKey: publicKey,\n            secretKey: privateKey,\n          },\n        });\n      } else {\n        secret = await this.$store.dispatch(`${ CATALOG._MANAGEMENT }/create`, {\n          type:     SECRET,\n          metadata: {\n            namespace:    this.value.metadata.namespace,\n            generateName: 'auth-',\n            labels:       { [FLEET_LABELS.MANAGED]: 'true' }\n          }\n        });\n\n        let type, publicField, privateField;\n\n        switch ( selected ) {\n        case AUTH_TYPE._SSH:\n          type = SECRET_TYPES.SSH;\n          publicField = 'ssh-publickey';\n          privateField = 'ssh-privatekey';\n          break;\n        case AUTH_TYPE._BASIC:\n          type = SECRET_TYPES.BASIC;\n          publicField = 'username';\n          privateField = 'password';\n          break;\n        default:\n          throw new Error('Unknown type');\n        }\n\n        secret._type = type;\n        secret.data = {\n          [publicField]:  base64Encode(publicKey),\n          [privateField]: base64Encode(privateKey),\n        };\n      }\n\n      await secret.save();\n\n      await this.$nextTick(() => {\n        this.updateAuth(secret.metadata.name, name);\n      });\n\n      return secret;\n    },\n\n    updateTlsMode(event) {\n      this.tlsMode = event;\n    },\n\n    onUpdateRepoName() {\n      this.stepOneReady();\n    },\n\n    stepOneReady() {\n      this.$set(this.addRepositorySteps[0], 'ready', this.stepOneRequires);\n    },\n\n    updateTls() {\n      const spec = this.value.spec;\n\n      if ( this.tlsMode === _SPECIFY ) {\n        spec.insecureSkipTLSVerify = false;\n        const caBundle = (this.caBundle || '').trim();\n\n        if ( caBundle ) {\n          spec.caBundle = base64Encode(`${ caBundle }\\n`);\n        } else {\n          delete spec.caBundle;\n        }\n      } else {\n        if ( this.tlsMode === _SKIP ) {\n          spec.insecureSkipTLSVerify = true;\n        } else {\n          spec.insecureSkipTLSVerify = false;\n        }\n\n        if ( this.liveValue.caBundle ) {\n          spec.caBundle = this.liveValue.caBundle;\n        } else {\n          delete spec.caBundle;\n        }\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n\n  <CruResource\n    v-else\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"true\"\n    :errors=\"errors\"\n    :steps=\"addRepositorySteps\"\n    :edit-first-step=\"true\"\n    :finish-mode=\"'finish'\"\n    class=\"wizard\"\n    @cancel=\"done\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n  >\n    <template #noticeBanner>\n      <Banner\n        v-if=\"isLocal && mode === 'create'\"\n        color=\"info\"\n      >\n        {{ t('fleet.gitRepo.createLocalBanner') }}\n      </Banner>\n    </template>\n    <template #stepRepoInfo>\n      <NameNsDescription\n        v-if=\"!isView\"\n        v-model=\"value\"\n        :namespaced=\"false\"\n        :mode=\"mode\"\n        @change=\"onUpdateRepoName\"\n      />\n\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <Banner\n            color=\"info col span-6\"\n          >\n            <div>\n              {{ t('fleet.gitRepo.repo.protocolBanner') }}\n            </div>\n          </Banner>\n        </div>\n      </div>\n      <div\n        class=\"row\"\n        :class=\"{'mt-20': isView}\"\n      >\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.spec.repo\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.repo.label\"\n            :placeholder=\"t('fleet.gitRepo.repo.placeholder', null, true)\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <InputWithSelect\n            :data-testid=\"`gitrepo-${ref}`\"\n            :mode=\"mode\"\n            :select-label=\"t('fleet.gitRepo.ref.label')\"\n            :select-value=\"ref\"\n            :text-label=\"t(`fleet.gitRepo.ref.${ref}Label`)\"\n            :text-placeholder=\"t(`fleet.gitRepo.ref.${ref}Placeholder`)\"\n            :text-value=\"refValue\"\n            :text-required=\"true\"\n            :options=\"[{label: t('fleet.gitRepo.ref.branch'), value: 'branch'}, {label: t('fleet.gitRepo.ref.revision'), value: 'revision'}]\"\n            @input=\"changeRef($event)\"\n          />\n        </div>\n      </div>\n      <SelectOrCreateAuthSecret\n        :value=\"value.spec.clientSecretName\"\n        :register-before-hook=\"registerBeforeHook\"\n        :namespace=\"value.metadata.namespace\"\n        :delegate-create-to-parent=\"true\"\n        in-store=\"management\"\n        :pre-select=\"tempCachedValues.clientSecretName\"\n        :mode=\"mode\"\n        generate-name=\"gitrepo-auth-\"\n        label-key=\"fleet.gitRepo.auth.git\"\n        :cache-secrets=\"true\"\n        @input=\"updateAuth($event, 'clientSecretName')\"\n        @inputauthval=\"updateCachedAuthVal($event, 'clientSecretName')\"\n      />\n      <SelectOrCreateAuthSecret\n        data-testid=\"gitrepo-helm-auth\"\n        :value=\"value.spec.helmSecretName\"\n        :register-before-hook=\"registerBeforeHook\"\n        :namespace=\"value.metadata.namespace\"\n        :delegate-create-to-parent=\"true\"\n        in-store=\"management\"\n        :mode=\"mode\"\n        generate-name=\"helmrepo-auth-\"\n        label-key=\"fleet.gitRepo.auth.helm\"\n        :pre-select=\"tempCachedValues.helmSecretName\"\n        :cache-secrets=\"true\"\n        @input=\"updateAuth($event, 'helmSecretName')\"\n        @inputauthval=\"updateCachedAuthVal($event, 'helmSecretName')\"\n      />\n\n      <div\n        v-if=\"displayHelmRepoURLRegex\"\n        class=\"row mt-20\"\n      >\n        <div\n          class=\"col span-6\"\n          data-testid=\"gitrepo-helm-repo-url-regex\"\n        >\n          <LabeledInput\n            v-model=\"value.spec.helmRepoURLRegex\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.helmRepoURLRegex\"\n          />\n        </div>\n      </div>\n\n      <template v-if=\"isTls\">\n        <div class=\"spacer\" />\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              :label=\"t('fleet.gitRepo.tls.label')\"\n              :mode=\"mode\"\n              :value=\"tlsMode\"\n              :options=\"tlsOptions\"\n              @input=\"updateTlsMode($event)\"\n            />\n          </div>\n          <div\n            v-if=\"tlsMode === _SPECIFY\"\n            class=\"col span-6\"\n          >\n            <LabeledInput\n              v-model=\"caBundle\"\n              :mode=\"mode\"\n              type=\"multiline\"\n              label-key=\"fleet.gitRepo.caBundle.label\"\n              placeholder-key=\"fleet.gitRepo.caBundle.placeholder\"\n            />\n          </div>\n        </div>\n      </template>\n      <div class=\"spacer\" />\n      <h2 v-t=\"'fleet.gitRepo.resources.label'\" />\n      <div>\n        <Checkbox\n          v-model=\"value.spec.correctDrift.enabled\"\n          data-testid=\"GitRepo-correctDrift-checkbox\"\n          class=\"check\"\n          type=\"checkbox\"\n          label-key=\"fleet.gitRepo.resources.correctDrift\"\n          :mode=\"mode\"\n        />\n        <Banner\n          data-testid=\"GitRepo-correctDrift-banner\"\n          color=\"info\"\n        >\n          {{ t('fleet.gitRepo.resources.correctDriftBanner') }}\n        </Banner>\n      </div>\n\n      <Checkbox\n        v-model=\"value.spec.keepResources\"\n        class=\"check\"\n        type=\"checkbox\"\n        label-key=\"fleet.gitRepo.resources.keepResources\"\n        :mode=\"mode\"\n      />\n      <Banner\n        color=\"info\"\n      >\n        {{ t('fleet.gitRepo.resources.keepResourcesBanner') }}\n      </Banner>\n      <div class=\"spacer\" />\n      <h2 v-t=\"'fleet.gitRepo.paths.label'\" />\n      <ArrayList\n        v-model=\"value.spec.paths\"\n        data-testid=\"gitRepo-paths\"\n        :mode=\"mode\"\n        :initial-empty-row=\"false\"\n        :value-placeholder=\"t('fleet.gitRepo.paths.placeholder')\"\n        :add-label=\"t('fleet.gitRepo.paths.addLabel')\"\n      >\n        <template #empty>\n          <Banner label-key=\"fleet.gitRepo.paths.empty\" />\n        </template>\n      </ArrayList>\n    </template>\n    <template #stepTargetInfo>\n      <h2 v-t=\"isLocal ? 'fleet.gitRepo.target.labelLocal' : 'fleet.gitRepo.target.label'\" />\n\n      <template v-if=\"!isLocal\">\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              v-model=\"targetMode\"\n              :options=\"targetOptions\"\n              option-key=\"value\"\n              :mode=\"mode\"\n              :selectable=\"option => !option.disabled\"\n              :label=\"t('fleet.gitRepo.target.selectLabel')\"\n              data-testid=\"fleet-gitrepo-target-cluster\"\n            >\n              <template v-slot:option=\"opt\">\n                <hr v-if=\"opt.kind === 'divider'\">\n                <div v-else-if=\"opt.kind === 'title'\">\n                  {{ opt.label }}\n                </div>\n                <div v-else>\n                  {{ opt.label }}\n                </div>\n              </template>\n            </LabeledSelect>\n          </div>\n        </div>\n\n        <div\n          v-if=\"targetMode === 'advanced'\"\n          class=\"row mt-10\"\n        >\n          <div class=\"col span-12\">\n            <YamlEditor v-model=\"targetAdvanced\" />\n          </div>\n        </div>\n\n        <Banner\n          v-for=\"(err, i) in targetAdvancedErrors\"\n          :key=\"i\"\n          color=\"error\"\n          :label=\"err\"\n        />\n      </template>\n\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.spec.serviceAccount\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.serviceAccount.label\"\n            placeholder-key=\"fleet.gitRepo.serviceAccount.placeholder\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.spec.targetNamespace\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.targetNamespace.label\"\n            placeholder-key=\"fleet.gitRepo.targetNamespace.placeholder\"\n            label=\"Target Namespace\"\n            placeholder=\"Optional: Require all resources to be in this namespace\"\n          />\n        </div>\n      </div>\n      <div class=\"spacer\" />\n      <Labels\n        :value=\"value\"\n        :mode=\"mode\"\n        :display-side-by-side=\"false\"\n      />\n    </template>\n  </CruResource>\n</template>\n"],"mappings":"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","ignoreList":[]}]}