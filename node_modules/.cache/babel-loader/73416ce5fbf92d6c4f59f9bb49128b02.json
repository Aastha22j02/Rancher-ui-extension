{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/dashboard-store/getters.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/dashboard-store/getters.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SCHEMA","COUNT","matches","typeMunge","typeRef","SIMPLE_TYPES","Resource","mutations","keyFieldFor","normalizeType","lookup","garbageCollect","paginationUtils","urlFor","state","getters","type","id","opt","url","schema","schemaFor","Error","concat","links","collection","startsWith","baseUrl","config","replace","urlOptions","matchingCounts","typeObj","namespaces","namespaced","byNamespace","count","out","_iterator","_createForOfIteratorHelper","_step","s","n","done","_typeObj$byNamespace$","namespace","value","err","e","f","all","rootState","typeRegistered","console","warn","registerType","gcUpdateLastAccessed","types","list","matching","selector","arguments","length","undefined","skipSelector","filter","obj","byId","entry","map","get","pathExistsInSchema","path","schemas","keyField","keyFieldForType","find","x","thisOne","endsWith","schemaName","res","arrayRes","Array","isArray","entries","sort","a","b","fuzzy","allowThrow","close","defaultFor","rootSchema","schemaDefinitions","resourceFields","requiresResourceFields","_schemaDefinitions$ty","key","field","mapOf","arrayOf","referenceTo","includes","canList","hasLink","typeEntry","haveAll","haveAllNamespace","haveNamespace","havePaginatedPage","pagination","havePage","_entry$havePage$reque","request","_entry$havePage$reque2","aNamespace","aPagination","_namespace$pagination","_namespace$pagination2","bNamespace","bPagination","paginationEqual","_state$types$type","_state$types$type2","haveSelector","storeName","defaultModel","classify","_obj$metadata","metadata","name","cleanResource","existing","data","isClusterStore","loadCounter","gcIgnoreTypes","rootGetters","_typeObj3","_typeObj","_typeObj2","JSON","stringify","_getters$all","_schema$attributes","counts","summary","revision","attributes","Object","keys","activeNamespaceCache","generation","paginationEnabled","store","resource","isEnabled"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/dashboard-store/getters.js"],"sourcesContent":["\nimport { SCHEMA, COUNT } from '@shell/config/types';\n\nimport { matches } from '@shell/utils/selector';\nimport { typeMunge, typeRef, SIMPLE_TYPES } from '@shell/utils/create-yaml';\nimport Resource from '@shell/plugins/dashboard-store/resource-class';\nimport mutations from './mutations';\nimport { keyFieldFor, normalizeType } from './normalize';\nimport { lookup } from './model-loader';\nimport garbageCollect from '@shell/utils/gc/gc';\nimport paginationUtils from '@shell/utils/pagination-utils';\n\nexport const urlFor = (state, getters) => (type, id, opt) => {\n  opt = opt || {};\n  type = getters.normalizeType(type);\n  let url = opt.url;\n\n  let schema;\n\n  if ( !url ) {\n    schema = getters.schemaFor(type);\n\n    if ( !schema ) {\n      throw new Error(`Unknown schema for type: ${ type }`);\n    }\n\n    url = schema.links.collection;\n\n    if ( !url ) {\n      throw new Error(`You don't have permission to list this type: ${ type }`);\n    }\n\n    if ( id ) {\n      url += `/${ id }`;\n    }\n  }\n\n  if ( !url.startsWith('/') && !url.startsWith('http') ) {\n    const baseUrl = state.config.baseUrl.replace(/\\/$/, '');\n\n    url = `${ baseUrl }/${ url }`;\n  }\n\n  url = getters.urlOptions(url, opt, schema);\n\n  return url;\n};\n\n/**\n * Find the number of resources given\n * - if the type is namespaced\n * - if there are any counts per namespace\n * - if there are no namespaces\n * - if there is no total count\n */\nfunction matchingCounts(typeObj, namespaces) {\n  // That was easy\n  if ( !typeObj.namespaced || !typeObj.byNamespace || namespaces === null || typeObj.count === null) {\n    return typeObj.count;\n  }\n\n  let out = 0;\n\n  // Otherwise start with 0 and count up\n  for ( const namespace of namespaces ) {\n    out += typeObj.byNamespace[namespace]?.count || 0;\n  }\n\n  return out;\n}\n\nexport default {\n\n  /**\n   * Get all entries in the store. This might not mean all entries of this type\n   */\n  all: (state, getters, rootState) => (type) => {\n    type = getters.normalizeType(type);\n\n    if ( !getters.typeRegistered(type) ) {\n      // Yes this is mutating state in a getter... it's not the end of the world..\n      // throw new Error(`All of ${ type } is not loaded`);\n      console.warn(`All of ${ type } is not loaded yet`); // eslint-disable-line no-console\n      mutations.registerType(state, type);\n    }\n\n    garbageCollect.gcUpdateLastAccessed({\n      state, getters, rootState\n    }, type);\n\n    return state.types[type].list;\n  },\n\n  matching: (state, getters, rootState) => (type, selector, namespace, config = { skipSelector: false }) => {\n    let matching = getters['all'](type);\n\n    // Filter first by namespace if one is provided, since this is efficient\n    if (namespace && typeof namespace === 'string') {\n      matching = matching.filter((obj) => obj.namespace === namespace);\n    }\n\n    garbageCollect.gcUpdateLastAccessed({\n      state, getters, rootState\n    }, type);\n\n    // Looks like a falsy selector is a thing, so if we're not interested in filtering by the selector... explicitly avoid it\n    if (config.skipSelector) {\n      return matching;\n    }\n\n    return matching.filter((obj) => {\n      return matches(obj, selector);\n    });\n  },\n\n  byId: (state, getters, rootState) => (type, id) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      garbageCollect.gcUpdateLastAccessed({\n        state, getters, rootState\n      }, type);\n\n      return entry.map.get(id);\n    }\n  },\n\n  /**\n   * Checks a schema for the given path\n   *\n   * Given that schema are primarily a rancher thing most logic is in the `steve` store\n   */\n  pathExistsInSchema: (state, getters) => (type, path) => {\n    return false;\n  },\n\n  // @TODO resolve difference between this and schemaFor and have only one of them.\n  schema: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const schemas = state.types[SCHEMA];\n    const keyField = getters.keyFieldForType(SCHEMA);\n\n    return schemas.list.find((x) => {\n      const thisOne = getters.normalizeType(x[keyField]);\n\n      return thisOne === type || thisOne.endsWith(`.${ type }`);\n    });\n  },\n\n  // Fuzzy search to find a matching schema name for plugins/lookup\n  schemaName: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const schemas = state.types[SCHEMA];\n    const keyField = getters.keyFieldForType(SCHEMA);\n    const res = schemas.list.find((x) => {\n      const thisOne = getters.normalizeType(x[keyField]);\n\n      return thisOne === type || thisOne.endsWith(`.${ type }`);\n    });\n\n    if (!res) {\n      return;\n    }\n    const arrayRes = Array.isArray(res) ? res : [res];\n    const entries = arrayRes.map((x) => {\n      return x[keyField];\n    }).sort((a, b) => {\n      return a.length - b.length;\n    });\n\n    if ( entries[0] ) {\n      return entries[0];\n    }\n\n    return type;\n  },\n\n  // Fuzzy is only for plugins/lookup, do not use in real code\n  schemaFor: (state, getters) => (type, fuzzy = false, allowThrow = true) => {\n    const schemas = state.types[SCHEMA];\n\n    type = getters.normalizeType(type);\n\n    if ( !schemas ) {\n      if ( allowThrow ) {\n        throw new Error(\"Schemas aren't loaded yet\");\n      } else {\n        return null;\n      }\n    }\n\n    const out = schemas.map.get(type);\n\n    if ( !out && fuzzy ) {\n      const close = getters.schemaName(type);\n\n      if ( close ) {\n        return getters.schemaFor(close);\n      }\n    }\n\n    return out;\n  },\n\n  defaultFor: (state, getters) => (type, rootSchema, schemaDefinitions = null) => {\n    let resourceFields;\n\n    if (!schemaDefinitions) {\n      // Depth 0. Get the schemaDefinitions that will contain the child schema resourceFields for recursive calls\n\n      schemaDefinitions = rootSchema.schemaDefinitions || {}; // norman...\n      resourceFields = rootSchema.resourceFields || {};\n    } else {\n      if (rootSchema.requiresResourceFields) {\n        resourceFields = schemaDefinitions[type]?.resourceFields || {};\n      } else {\n        const schema = getters['schemaFor'](type);\n\n        resourceFields = schema?.resourceFields || {};\n      }\n    }\n\n    const out = {};\n\n    for ( const key in resourceFields ) {\n      const field = resourceFields[key];\n\n      if ( !field ) {\n        // Not much to do here...\n        continue;\n      }\n\n      const type = typeMunge(field.type);\n      const mapOf = typeRef('map', type, field);\n      const arrayOf = typeRef('array', type, field);\n      const referenceTo = typeRef('reference', type);\n\n      if ( mapOf || type === 'map' || type === 'json' ) {\n        out[key] = getters.defaultFor(type, rootSchema, schemaDefinitions);\n      } else if ( arrayOf || type === 'array' ) {\n        out[key] = [];\n      } else if ( referenceTo ) {\n        out[key] = undefined;\n      } else if ( SIMPLE_TYPES.includes(type) ) {\n        if ( typeof field['default'] === 'undefined' ) {\n          out[key] = undefined;\n        } else {\n          out[key] = field['default'];\n        }\n      } else {\n        out[key] = getters.defaultFor(type, rootSchema, schemaDefinitions);\n      }\n    }\n\n    return out;\n  },\n\n  canList: (state, getters) => (type) => {\n    const schema = getters.schemaFor(type);\n\n    return schema && schema.hasLink('collection');\n  },\n\n  typeRegistered: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return !!state.types[type];\n  },\n\n  typeEntry: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type];\n  },\n\n  haveAll: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveAll || false;\n    }\n\n    return false;\n  },\n\n  haveAllNamespace: (state, getters) => (type, namespace) => {\n    if (!namespace) {\n      return false;\n    }\n\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveNamespace === namespace;\n    }\n\n    return false;\n  },\n\n  havePaginatedPage: (state, getters) => (type, opt) => {\n    if (!opt.pagination) {\n      return false;\n    }\n\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry?.havePage ) {\n      const { namespace: aNamespace = undefined, pagination: aPagination } = entry.havePage.request;\n      const { namespace: bNamespace = undefined, pagination: bPagination } = {\n        namespace:  opt.namespaced,\n        pagination: opt.pagination\n      };\n\n      return entry.havePage && aNamespace === bNamespace && paginationUtils.paginationEqual(aPagination, bPagination);\n    }\n\n    return false;\n  },\n\n  haveNamespace: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type]?.haveNamespace || null;\n  },\n\n  havePage: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type]?.havePage || null;\n  },\n\n  haveSelector: (state, getters) => (type, selector) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveSelector[selector] || false;\n    }\n\n    return false;\n  },\n\n  normalizeType: () => (type) => {\n    return normalizeType(type);\n  },\n\n  keyFieldForType: () => (type) => {\n    return keyFieldFor(type);\n  },\n\n  urlFor,\n\n  urlOptions: () => (url, opt, schema) => {\n    return url;\n  },\n\n  storeName: (state) => {\n    return state.config.namespace;\n  },\n\n  defaultModel: () => () => {\n    return undefined;\n  },\n\n  classify: (state, getters, rootState) => (obj) => {\n    return lookup(state.config.namespace, obj?.type, obj?.metadata?.name, rootState) || Resource;\n  },\n\n  cleanResource: () => (existing, data) => {\n    return data;\n  },\n\n  isClusterStore: (state) => {\n    return state.config.isClusterStore;\n  },\n\n  // Increment the load counter for a resource type\n  // This is used for incremental loading do detect when a page changes occur of the a reload happend\n  // While a previous incremental loading operation is still in progress\n  loadCounter: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    if (!!state.types[type]) {\n      return state.types[type].loadCounter;\n    }\n\n    return 0;\n  },\n\n  gcIgnoreTypes: () => {\n    return {};\n  },\n\n  /**\n   * For the given type, and it's settings, find the number of resources associated with it\n   *\n   * This takes into account if the type is namespaced.\n   *\n   * Used in currently two places\n   * - Type\n   * - getTree\n   *\n   * @param typeObj see inners for properties. must have at least `name` (resource type)\n   *\n   */\n  count: (state, getters, rootState, rootGetters) => (typeObj) => {\n    let _typeObj = typeObj;\n    const { name: type, count } = _typeObj;\n\n    if (!type) {\n      throw new Error(`Resource type required to calc count: ${ JSON.stringify(typeObj) }`);\n    }\n\n    if (!count) {\n      const schema = getters.schemaFor(type);\n      const counts = getters.all(COUNT)?.[0]?.counts || {};\n      const count = counts[type];\n\n      // This object aligns with `Type.vue` `type`\n      _typeObj = {\n        count:       count ? count.summary.count || 0 : null,\n        byNamespace: count ? count.namespaces : {},\n        revision:    count ? count.revision : null,\n        namespaced:  schema?.attributes?.namespaced\n      };\n    }\n\n    const namespaces = _typeObj?.namespaced ? Object.keys(rootGetters.activeNamespaceCache || {}) : [];\n\n    return matchingCounts(_typeObj, namespaces.length ? namespaces : null);\n  },\n\n  generation: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.generation;\n    }\n\n    return undefined;\n  },\n\n  paginationEnabled: (state, getters, rootState, rootGetters) => (type = null) => {\n    const store = state.config.namespace;\n    const resource = type ? { id: type } : null;\n\n    return paginationUtils.isEnabled({ rootGetters }, { store, resource });\n  }\n};\n"],"mappings":"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","ignoreList":[]}]}