{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/components/SideNav.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/components/SideNav.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["debounce","isEqual","mapGetters","mapState","mapPref","FAVORITE_TYPES","getVersionInfo","addObjects","replaceWith","clear","addObject","sameContents","sortBy","ucFirst","HCI","UI","SCHEMA","HARVESTER_NAME","HARVESTER","NAME","EXPLORER","TYPE_MODES","NAVLINKS","Group","name","components","data","groups","gettingGroups","created","queueUpdate","getGroups","mounted","_this","$nextTick","syncNav","watch","allSchemasIds","a","b","allNavLinksIds","favoriteTypes","locale","namespaceMode","namespaces","clusterReady","rootProduct","$route","_this2","computed","_objectSpread","availableLocales","supportLink","product","supportRoute","params","cluster","clusterId","concat","displayVersion","_this$isSingleProduct","isSingleProduct","_this$isSingleProduct2","$store","_getVersionInfo","singleProductAbout","_this$isSingleProduct3","aboutPage","harvesterVersion","_this$$store$getters$","getters","SETTING","value","showProductFooter","isVirtualProduct","allNavLinks","NAV_LINK","managementReady","currentProduct","inStore","map","s","id","sort","methods","out","loadProducts","isExplorer","productMap","activeProducts","reduce","acc","p","_defineProperty","_iterator","_createForOfIteratorHelper","_step","n","done","err","e","f","getProductsGroups","getExplorerGroups","apply","_toConsumableArray","currentType","resource","_iterator2","_step2","productId","modes","BASIC","push","FAVORITE","USED","typesByMode","_i","_modes","length","mode","types","more","_productMap$productId","root","find","x","other","filter","group","label","children","weight","toAdd","haveGroup","_iterator3","_step3","obj","link","groupLabel","spec","groupSlug","normalizedGroup","entry","_key","target","actualTarget","labelDisplay","sideLabel","iconSrc","description","isRoot","route","groupSelected","selected","$refs","forEach","grp","canCollapse","isExpanded","collapseAll","switchLocale","dispatch","_this3","refs","canExpand","expanded","hasActiveRoute","isActive"],"sources":["node_modules/@rancher/shell/components/SideNav.vue"],"sourcesContent":["<script>\nimport debounce from 'lodash/debounce';\nimport isEqual from 'lodash/isEqual';\nimport { mapGetters, mapState } from 'vuex';\nimport {\n  mapPref,\n  FAVORITE_TYPES\n} from '@shell/store/prefs';\nimport { getVersionInfo } from '@shell/utils/version';\nimport {\n  addObjects, replaceWith, clear, addObject, sameContents\n} from '@shell/utils/array';\nimport { sortBy } from '@shell/utils/sort';\nimport { ucFirst } from '@shell/utils/string';\n\nimport { HCI, UI, SCHEMA } from '@shell/config/types';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport { TYPE_MODES } from '@shell/store/type-map';\nimport { NAME as NAVLINKS } from '@shell/config/product/navlinks';\nimport Group from '@shell/components/nav/Group';\n\nexport default {\n  name:       'SideNav',\n  components: { Group },\n  data() {\n    return {\n      groups:        [],\n      gettingGroups: false\n    };\n  },\n\n  created() {\n    // Ensure that changes to resource that change often don't resort to spamming redraw of the side nav\n    this.queueUpdate = debounce(this.getGroups, 500);\n\n    this.getGroups();\n  },\n\n  mounted() {\n    // Sync the navigation tree on fresh load\n    this.$nextTick(() => this.syncNav());\n  },\n\n  watch: {\n\n    /**\n     * Keep this simple, we're only interested in new / removed schemas\n     */\n    allSchemasIds(a, b) {\n      if ( !sameContents(a, b) ) {\n        this.queueUpdate();\n      }\n    },\n\n    allNavLinksIds(a, b) {\n      if ( !sameContents(a, b) ) {\n        this.queueUpdate();\n      }\n    },\n\n    /**\n     * Note - There's no watch on prefs, so this only catches in session changes\n     */\n    favoriteTypes(a, b) {\n      if ( !isEqual(a, b) ) {\n        this.queueUpdate();\n      }\n    },\n\n    locale(a, b) {\n      if ( !isEqual(a, b) ) {\n        this.getGroups();\n      }\n    },\n\n    // Queue namespaceMode and namespaces\n    // Changes to namespaceMode can also change namespaces, so keep this simple and execute both in a shortened queue\n\n    namespaceMode(a, b) {\n      if ( a !== b ) {\n        this.queueUpdate();\n      }\n    },\n\n    namespaces(a, b) {\n      if ( !isEqual(a, b) ) {\n        this.queueUpdate();\n      }\n    },\n\n    clusterReady(a, b) {\n      if ( !isEqual(a, b) ) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    rootProduct(a, b) {\n      if (a?.name !== b?.name) {\n        // Immediately update because you'll see it come in later\n        this.getGroups();\n      }\n    },\n\n    $route(a, b) {\n      this.$nextTick(() => this.syncNav());\n    },\n\n  },\n\n  computed: {\n    ...mapState(['managementReady', 'clusterReady']),\n    ...mapGetters(['productId', 'clusterId', 'currentProduct', 'rootProduct', 'isSingleProduct', 'namespaceMode', 'isExplorer', 'isVirtualCluster']),\n    ...mapGetters({ locale: 'i18n/selectedLocaleLabel', availableLocales: 'i18n/availableLocales' }),\n    ...mapGetters('type-map', ['activeProducts']),\n\n    favoriteTypes: mapPref(FAVORITE_TYPES),\n\n    supportLink() {\n      const product = this.rootProduct;\n\n      if (product?.supportRoute) {\n        return { ...product.supportRoute, params: { ...product.supportRoute.params, cluster: this.clusterId } };\n      }\n\n      return { name: `c-cluster-${ product?.name }-support` };\n    },\n\n    displayVersion() {\n      if (this.isSingleProduct?.getVersionInfo) {\n        return this.isSingleProduct?.getVersionInfo(this.$store);\n      }\n      const { displayVersion } = getVersionInfo(this.$store);\n\n      return displayVersion;\n    },\n\n    singleProductAbout() {\n      return this.isSingleProduct?.aboutPage;\n    },\n\n    harvesterVersion() {\n      return this.$store.getters['cluster/byId'](HCI.SETTING, 'server-version')?.value || 'unknown';\n    },\n\n    showProductFooter() {\n      if (this.isVirtualProduct) {\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    isVirtualProduct() {\n      return this.rootProduct.name === HARVESTER;\n    },\n\n    allNavLinks() {\n      if ( !this.clusterId || !this.$store.getters['cluster/schemaFor'](UI.NAV_LINK) ) {\n        return [];\n      }\n\n      return this.$store.getters['cluster/all'](UI.NAV_LINK);\n    },\n\n    allSchemasIds() {\n      const managementReady = this.managementReady;\n      const product = this.currentProduct;\n\n      if ( !managementReady || !product ) {\n        return [];\n      }\n\n      // This does take some up-front time, however avoids an even more costly getGroups call\n      return this.$store.getters[`${ product.inStore }/all`](SCHEMA).map((s) => s.id).sort();\n    },\n\n    namespaces() {\n      return this.$store.getters['activeNamespaceCache'];\n    },\n\n    allNavLinksIds() {\n      return this.allNavLinks.map((a) => a.id);\n    },\n  },\n\n  methods: {\n    /**\n     * Fetch navigation by creating groups from product schemas\n     */\n    getGroups() {\n      if ( this.gettingGroups ) {\n        return;\n      }\n      this.gettingGroups = true;\n\n      if ( !this.clusterReady ) {\n        clear(this.groups);\n        this.gettingGroups = false;\n\n        return;\n      }\n\n      const currentProduct = this.$store.getters['productId'];\n\n      // Always show cluster-level types, regardless of the namespace filter\n      const namespaceMode = 'both';\n      const out = [];\n      const loadProducts = this.isExplorer ? [EXPLORER] : [];\n\n      const productMap = this.activeProducts.reduce((acc, p) => {\n        return { ...acc, [p.name]: p };\n      }, {});\n\n      if ( this.isExplorer ) {\n        for ( const product of this.activeProducts ) {\n          if ( product.inStore === 'cluster' ) {\n            addObject(loadProducts, product.name);\n          }\n        }\n      }\n\n      // This should already have come into the list from above, but in case it hasn't...\n      addObject(loadProducts, currentProduct);\n\n      this.getProductsGroups(out, loadProducts, namespaceMode, productMap);\n\n      this.getExplorerGroups(out);\n\n      replaceWith(this.groups, ...sortBy(out, ['weight:desc', 'label']));\n\n      this.gettingGroups = false;\n    },\n\n    getProductsGroups(out, loadProducts, namespaceMode, productMap) {\n      const clusterId = this.$store.getters['clusterId'];\n      const currentType = this.$route.params.resource || '';\n\n      for ( const productId of loadProducts ) {\n        const modes = [TYPE_MODES.BASIC];\n\n        if ( productId === NAVLINKS ) {\n          // Navlinks produce their own top-level nav items so don't need to show it as a product.\n          continue;\n        }\n\n        if ( productId === EXPLORER ) {\n          modes.push(TYPE_MODES.FAVORITE);\n          modes.push(TYPE_MODES.USED);\n        }\n\n        // Get all types for all modes\n        const typesByMode = this.$store.getters['type-map/allTypes'](productId, modes);\n\n        for ( const mode of modes ) {\n          const types = typesByMode[mode] || {};\n          const more = this.$store.getters['type-map/getTree'](productId, mode, types, clusterId, namespaceMode, currentType);\n\n          if ( productId === EXPLORER || !this.isExplorer ) {\n            addObjects(out, more);\n          } else {\n            const root = more.find((x) => x.name === 'root');\n            const other = more.filter((x) => x.name !== 'root');\n\n            const group = {\n              name:     productId,\n              label:    this.$store.getters['i18n/withFallback'](`product.${ productId }`, null, ucFirst(productId)),\n              children: [...(root?.children || []), ...other],\n              weight:   productMap[productId]?.weight || 0,\n            };\n\n            addObject(out, group);\n          }\n        }\n      }\n    },\n\n    getExplorerGroups(out) {\n      if ( this.isExplorer ) {\n        const allNavLinks = this.allNavLinks;\n        const toAdd = [];\n        const haveGroup = {};\n\n        for ( const obj of allNavLinks ) {\n          if ( !obj.link ) {\n            continue;\n          }\n\n          const groupLabel = obj.spec.group;\n          const groupSlug = obj.normalizedGroup;\n\n          const entry = {\n            name:        `link-${ obj._key }`,\n            link:        obj.link,\n            target:      obj.actualTarget,\n            label:       obj.labelDisplay,\n            sideLabel:   obj.spec.sideLabel,\n            iconSrc:     obj.spec.iconSrc,\n            description: obj.spec.description,\n          };\n\n          // If there's a spec.group (groupLabel), all entries with that name go under one nav group\n          if ( groupSlug ) {\n            if ( haveGroup[groupSlug] ) {\n              continue;\n            }\n\n            haveGroup[groupSlug] = true;\n\n            toAdd.push({\n              name:     `navlink-group-${ groupSlug }`,\n              label:    groupLabel,\n              isRoot:   true,\n              // This is the item that actually shows up in the nav, since this outer group will be invisible\n              children: [\n                {\n                  name:  `navlink-child-${ groupSlug }`,\n                  label: groupLabel,\n                  route: {\n                    name:   'c-cluster-navlinks-group',\n                    params: {\n                      cluster: this.clusterId,\n                      group:   groupSlug,\n                    }\n                  },\n                }\n              ],\n              weight: -100,\n            });\n          } else {\n            toAdd.push({\n              name:     `navlink-${ entry.name }`,\n              label:    entry.label,\n              isRoot:   true,\n              // This is the item that actually shows up in the nav, since this outer group will be invisible\n              children: [entry],\n              weight:   -100,\n            });\n          }\n        }\n\n        addObjects(out, toAdd);\n      }\n    },\n\n    groupSelected(selected) {\n      this.$refs.groups.forEach((grp) => {\n        if (grp.canCollapse) {\n          grp.isExpanded = (grp.group.name === selected.name);\n        }\n      });\n    },\n\n    collapseAll() {\n      this.$refs.groups.forEach((grp) => {\n        grp.isExpanded = false;\n      });\n    },\n\n    switchLocale(locale) {\n      this.$store.dispatch('i18n/switchTo', locale);\n    },\n\n    syncNav() {\n      const refs = this.$refs.groups;\n\n      if (refs) {\n        // Only expand one group - so after the first has been expanded, no more will\n        // This prevents the 'More Resources' group being expanded in addition to the normal group\n        let canExpand = true;\n        const expanded = refs.filter((grp) => grp.isExpanded)[0];\n\n        if (expanded && expanded.hasActiveRoute()) {\n          this.$nextTick(() => expanded.syncNav());\n\n          return;\n        }\n        refs.forEach((grp) => {\n          if (!grp.group.isRoot) {\n            grp.isExpanded = false;\n            if (canExpand) {\n              const isActive = grp.hasActiveRoute();\n\n              if (isActive) {\n                grp.isExpanded = true;\n                canExpand = false;\n                this.$nextTick(() => grp.syncNav());\n              }\n            }\n          }\n        });\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <nav class=\"side-nav\">\n    <!-- Actual nav -->\n    <div class=\"nav\">\n      <template v-for=\"(g) in groups\">\n        <Group\n          ref=\"groups\"\n          :key=\"g.name\"\n          id-prefix=\"\"\n          class=\"package\"\n          :group=\"g\"\n          :can-collapse=\"!g.isRoot\"\n          :show-header=\"!g.isRoot\"\n          @selected=\"groupSelected($event)\"\n          @expand=\"groupSelected($event)\"\n        />\n      </template>\n    </div>\n    <!-- SideNav footer area (seems to be tied to harvester) -->\n    <div\n      v-if=\"showProductFooter\"\n      class=\"footer\"\n    >\n      <!-- support link -->\n      <router-link\n        :to=\"supportLink\"\n        class=\"pull-right\"\n      >\n        {{ t('nav.support', {hasSupport: true}) }}\n      </router-link>\n      <!-- version number -->\n      <span\n        v-clean-tooltip=\"{content: displayVersion, placement: 'top'}\"\n        class=\"clip version text-muted\"\n      >\n        {{ displayVersion }}\n      </span>\n\n      <!-- locale selector -->\n      <span v-if=\"isSingleProduct\">\n        <v-popover\n          popover-class=\"localeSelector\"\n          placement=\"top\"\n          trigger=\"click\"\n        >\n          <a\n            data-testid=\"locale-selector\"\n            class=\"locale-chooser\"\n          >\n            {{ locale }}\n          </a>\n\n          <template slot=\"popover\">\n            <ul\n              class=\"list-unstyled dropdown\"\n              style=\"margin: -1px;\"\n            >\n              <li\n                v-for=\"(label, name) in availableLocales\"\n                :key=\"name\"\n                class=\"hand\"\n                @click=\"switchLocale(name)\"\n              >\n                {{ label }}\n              </li>\n            </ul>\n          </template>\n        </v-popover>\n      </span>\n    </div>\n    <!-- SideNav footer alternative -->\n    <div\n      v-else\n      class=\"version text-muted flex\"\n    >\n      <router-link\n        v-if=\"singleProductAbout\"\n        :to=\"singleProductAbout\"\n      >\n        {{ displayVersion }}\n      </router-link>\n      <template v-else>\n        <span\n          v-if=\"isVirtualCluster && isExplorer\"\n          v-tooltip=\"{content: harvesterVersion, placement: 'top'}\"\n          class=\"clip text-muted ml-5\"\n        >\n          (Harvester-{{ harvesterVersion }})\n        </span>\n      </template>\n    </div>\n  </nav>\n</template>\n\n<style lang=\"scss\" scoped>\n  .side-nav {\n    display: flex;\n    flex-direction: column;\n    .nav {\n      flex: 1;\n      overflow-y: auto;\n    }\n\n    position: relative;\n    background-color: var(--nav-bg);\n    border-right: var(--nav-border-size) solid var(--nav-border);\n    overflow-y: auto;\n\n    // h6 is used in Group element\n    ::v-deep h6 {\n      margin: 0;\n      letter-spacing: normal;\n      line-height: 15px;\n\n      A { padding-left: 0; }\n    }\n\n    .tools {\n      display: flex;\n      margin: 10px;\n      text-align: center;\n\n      A {\n        align-items: center;\n        border: 1px solid var(--border);\n        border-radius: 5px;\n        color: var(--body-text);\n        display: flex;\n        justify-content: center;\n        outline: 0;\n        flex: 1;\n        padding: 10px;\n\n        &:hover {\n          background: var(--nav-hover);\n          text-decoration: none;\n        }\n\n        > I {\n          margin-right: 4px;\n        }\n      }\n\n      &.router-link-active:not(:hover) {\n        A {\n          background-color: var(--nav-active);\n        }\n      }\n    }\n\n    .version {\n      cursor: default;\n      margin: 0 10px 10px 10px;\n    }\n\n    .footer {\n      margin: 20px;\n\n      display: flex;\n      flex: 0;\n      flex-direction: row;\n      > * {\n        flex: 1;\n        color: var(--link);\n\n        &:last-child {\n          text-align: right;\n        }\n\n        &:first-child {\n          text-align: left;\n        }\n\n        text-align: center;\n      }\n\n      .version {\n        cursor: default;\n        margin: 0px;\n      }\n\n      .locale-chooser {\n        cursor: pointer;\n      }\n    }\n  }\n\n  .flex {\n    display: flex;\n  }\n\n</style>\n"],"mappings":"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","ignoreList":[]}]}