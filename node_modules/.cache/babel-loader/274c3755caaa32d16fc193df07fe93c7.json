{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js??ref--17-0!/home/ubuntu/susecon-2024-ext-demo/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/utils/validators/formRules/index.ts","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/utils/validators/formRules/index.ts","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["RBAC","HCI","isEmpty","has","isUrl","cronstrue","isHttps","isLocalhost","hasTrailingForwardSlash","Port","_createClass","port","_classCallCheck","string","String","int","parseInt","empty","isNumber","isNaN","includes","isInt","runValidators","val","validators","_iterator","_createForOfIteratorHelper","_step","s","n","done","validator","value","message","err","e","f","t","_ref","_ref$key","key","startDot","label","slice","concat","undefined","endDot","startNumber","_a","match","startHyphen","endHyphen","minValue","min","Number","maxValue","max","betweenValues","_ref2","_ref3","_slicedToArray","minLength","length","maxLength","betweenLengths","_ref4","_ref5","requiredInt","isInteger","isPositive","isOctal","valueString","isValid","portNumber","dnsChars","matchedChars","count","chars","map","char","join","dnsDoubleDash","substr","dnsIanaServiceNameDoubleDash","dnsEmpty","arguments","dnsTooLong","hostnameEmpty","hostnameTooLong","absolutePath","required","noUpperCase","toLowerCase","cronSchedule","toString","https","localhost","trailingForwardSlash","url","interval","test","containerImage","image","name","containerImages","containers","jobTemplate","_d","_c","_b","spec","template","_f","_e","container","find","containerError","dnsLabel","dnsLabelIanaServiceName","dnsLabelRestricted","hostname","hostNameMessage","labels","split","labelValidators","i","labelMessage","wildcardHostname","replace","externalName","testRule","ruleGroups","groups","clusterName","isRke2","servicePort","idx","nodePort","listeningPort","targetPort","position","ianaServiceNameErrors","groupIsValid","readableIndex","returnMessage","index","rules","forEach","rule","readableRuleIndex","alert","groupIndex","ruleIndex","record","expr","groupsAreValid","_toConsumableArray","group","arr","matching","roleTemplateRules","type","some","verbs","resources","nonResourceURLs","ROLE","apiGroups","clusterIp","backupTarget","parseValue","JSON","parse","accessKeyId","secretAccessKey","bucketRegion","bucketName","imageUrl","VM_IMAGE_FILE_FORMAT","urlSlug","pop","fileExtension","fileRequired","IMAGE_NAME","subDomain"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/utils/validators/formRules/index.ts"],"sourcesContent":["import { RBAC } from '@shell/config/types';\nimport { HCI } from '@shell/config/labels-annotations';\nimport isEmpty from 'lodash/isEmpty';\nimport has from 'lodash/has';\nimport isUrl from 'is-url';\n// import uniq from 'lodash/uniq';\nimport cronstrue from 'cronstrue';\nimport { Translation } from '@shell/types/t';\nimport { isHttps, isLocalhost, hasTrailingForwardSlash } from '@shell/utils/validators/setting';\n\n// import uniq from 'lodash/uniq';\nexport type Validator<T = undefined | string> = (val: any, arg?: any) => T;\n\nexport type ValidatorFactory = (arg1: any, arg2?: any) => Validator\n\ntype ServicePort = {\n  name?: string,\n  nodePort?: string | number,\n  port?: string | number,\n  targetPort?: string | number,\n  idx: number\n}\n\nexport class Port {\n  empty: boolean;\n  int: number;\n  string: string;\n  isNumber: boolean;\n  isInt: boolean;\n  constructor(port: number | string | undefined) {\n    this.string = String(port);\n    this.int = parseInt(this.string, 10);\n    this.empty = (!port && this.int !== 0);\n    this.isNumber = !isNaN(this.int) && !this.string.includes('e'); // leaving out the exponent edge case to keep the logic simple and because port numbers aren't that big...\n    this.isInt = this.isNumber && !this.string.includes('.');\n  }\n}\n\nconst runValidators = (val: any, validators: Validator[]) => {\n  for (const validator of validators) {\n    const message = validator(val);\n\n    if (message) {\n      return message;\n    }\n  }\n};\n\nexport interface ValidationOptions {\n  key?: string,\n}\n\n// \"t\" is the function name we use for getting a translated string\nexport default function(t: Translation, { key = 'Value' }: ValidationOptions): { [key:string]: Validator<any> | ValidatorFactory } {\n  // utility validators these validators only get used by other validators\n  const startDot: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(0, 1) === '.' ? t(`validation.dns.${ label }.startDot`, { key }) : undefined;\n\n  const endDot = (label: string): Validator => (val: string) => val?.slice(-1) === '.' ? t(`validation.dns.${ label }.endDot`, { key }) : undefined;\n\n  const startNumber: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(0, 1)?.match(/[0-9]/) ? t(`validation.dns.${ label }.startNumber`, { key }) : undefined;\n\n  const startHyphen: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(0, 1) === '-' ? t(`validation.dns.${ label }.startHyphen`, { key }) : undefined;\n\n  const endHyphen: ValidatorFactory = (label: string): Validator => (val: string) => val?.slice(-1) === '-' ? t(`validation.dns.${ label }.endHyphen`, { key }) : undefined;\n\n  const minValue: ValidatorFactory = (min: string) => (val: string | number) => Number(val) < Number(min) ? t('validation.minValue', { key, min }) : undefined;\n\n  const maxValue: ValidatorFactory = (max: string) => (val: string | number) => Number(val) > Number(max) ? t('validation.maxValue', { key, max }) : undefined;\n\n  const betweenValues: ValidatorFactory = ([min, max]: string[]) => (val: string | number) => minValue(min)(val) || maxValue(max)(val) ? t('validation.betweenValues', {\n    key, min, max\n  }) : undefined;\n\n  const minLength: ValidatorFactory = (min: string) => (val: string) => val.length < Number(min) ? t('validation.minLength', { key, min }) : undefined;\n\n  const maxLength: ValidatorFactory = (max: string) => (val: string) => val.length > Number(max) ? t('validation.maxLength', { key, max }) : undefined;\n\n  const betweenLengths: ValidatorFactory = ([min, max]: string[]) => (val: string) => minLength(min)(val) || maxLength(max)(val) ? t('validation.betweenLengths', {\n    key, min, max\n  }) : undefined;\n\n  const requiredInt: Validator = (val: string) => isNaN(parseInt(val, 10)) ? t('validation.number.requiredInt', { key }) : undefined;\n\n  const isInteger: Validator = (val: string | number) => !Number.isInteger(+val) || `${ val }`.match(/\\.+/g) ? t('validation.number.requiredInt', { key }) : undefined;\n\n  const isPositive: Validator = (val: string | number) => +val < 0 ? t('validation.number.isPositive', { key }) : undefined;\n\n  const isOctal: Validator = (val: string | number) => {\n    const valueString = `${ val }`;\n    const isValid = valueString.match(/(^0+)(.+)/);\n\n    return isValid ? t('validation.number.isOctal', { key }) : undefined;\n  };\n\n  const portNumber: Validator = (val: string) => parseInt(val, 10) < 1 || parseInt(val, 10) > 65535 ? t('validation.number.between', {\n    key, min: '1', max: '65535'\n  }) : undefined;\n\n  const dnsChars: Validator = (val: string) => {\n    const matchedChars = val?.match(/[^${'A-Za-z0-9-'}]/g);\n\n    if (matchedChars) {\n      return t('validation.chars', {\n        key, count: matchedChars.length, chars: matchedChars.map((char) => char === ' ' ? 'Space' : `\"${ char }\"`).join(', ')\n      });\n    }\n\n    return undefined;\n  };\n\n  // the weird edge case here deals with internationalized domain names which are prepended with 'xn--'\n  // https://datatracker.ietf.org/doc/html/rfc5891#section-4.2.3.1\n  const dnsDoubleDash: Validator = (val: string) => (val?.substr(2, 2) === '--' && val?.substr(0, 2) !== 'xn') ? t(`validation.dns.doubleHyphen`, { key }) : undefined;\n\n  const dnsIanaServiceNameDoubleDash: Validator = (val: string) => (val?.substr(2, 2) === '--' && val?.substr(0, 2) !== 'xn') ? t(`validation.dns.doubleHyphen`, { key }) : undefined;\n\n  const dnsEmpty: ValidatorFactory = (label: string): Validator => (val = '') => val.length === 0 ? t(`validation.dns.${ label }.emptyLabel`, { key, min: 1 }) : undefined;\n\n  const dnsTooLong: ValidatorFactory = (label: string, length = 63): Validator => (val = '') => val.length > length ? t(`validation.dns.${ label }.tooLongLabel`, { key, max: length }) : undefined;\n\n  // eslint-disable-next-line no-unused-vars\n  const hostnameEmpty: Validator = (val = '') => val.length === 0 ? t('validation.dns.hostname.empty', { key }) : undefined;\n\n  const hostnameTooLong: Validator = (val = '') => val.length > 253 ? t('validation.dns.hostname.tooLong', { key, max: 253 }) : undefined;\n\n  const absolutePath: Validator = (val = '') => val[0] !== '/' && val.length > 0 ? t('validation.path', { key }) : undefined;\n\n  const required: Validator = (val: any) => !val && val !== false ? t('validation.required', { key }) : undefined;\n\n  const noUpperCase: Validator = (val = '') => val.toLowerCase() !== val ? t('validation.noUpperCase', { key }) : undefined;\n\n  const cronSchedule: Validator = (val: string) => {\n    try {\n      cronstrue.toString(val);\n    } catch (e) {\n      return t('validation.invalidCron');\n    }\n  };\n\n  const https: Validator = (val: string) => val && !isHttps(val) ? t('validation.setting.serverUrl.https') : undefined;\n\n  const localhost: Validator = (val: string) => isLocalhost(val) ? t('validation.setting.serverUrl.localhost') : undefined;\n\n  const trailingForwardSlash: Validator = (val: string) => hasTrailingForwardSlash(val) ? t('validation.setting.serverUrl.trailingForwardSlash') : undefined;\n\n  const url: Validator = (val: string) => val && !isUrl(val) ? t('validation.setting.serverUrl.url') : undefined;\n\n  const interval: Validator = (val: string) => !/^\\d+[hms]$/.test(val) ? t('validation.monitoring.route.interval', { key }) : undefined;\n\n  const containerImage: Validator = (val: any) => !val?.image ? t('workload.validation.containerImage', { name: val.name }) : undefined;\n\n  const containerImages: Validator = (val: any | [any]) => {\n    const containers = val.jobTemplate ? val?.jobTemplate?.spec?.template?.spec?.containers : val?.template?.spec?.containers;\n\n    if (!containers || !containers.length) {\n      return t('validation.required', { key: t('workload.container.titles.containers') });\n    }\n\n    // making sure each container has an image name\n    return containers.map((container: any) => containerImage(container)).find((containerError: string) => containerError);\n  };\n\n  const dnsLabel: Validator = (val: string) => {\n    const validators = [\n      dnsChars,\n      startHyphen('label'),\n      endHyphen('label'),\n      dnsDoubleDash,\n      // dnsEmpty('label'), // questionable as to if this is needed if the field is also required...\n      dnsTooLong('label')\n    ];\n\n    return runValidators(val, validators);\n  };\n\n  const dnsLabelIanaServiceName: Validator = (val: string) => {\n    const validators = [\n      dnsChars,\n      startHyphen('label'),\n      endHyphen('label'),\n      dnsIanaServiceNameDoubleDash,\n      dnsEmpty('label'), // questionable as to if this is needed if the field is also required...\n      dnsTooLong('label', 15)\n    ];\n\n    return runValidators(val, validators);\n  };\n\n  const dnsLabelRestricted: Validator = (val: string) => {\n    const validators = [\n      dnsChars,\n      startNumber('label'),\n      startHyphen('label'),\n      endHyphen('label'),\n      dnsDoubleDash,\n      dnsEmpty('label'), // questionable as to if this is needed if the field is also required...\n      dnsTooLong('label')\n    ];\n\n    return runValidators(val, validators);\n  };\n\n  const hostname: Validator = (val: string) => {\n    if (val) {\n      const validators = [\n        startDot('hostname'),\n        hostnameTooLong,\n        endDot('hostname')\n      ];\n\n      const hostNameMessage = runValidators(val, validators);\n\n      if (hostNameMessage) {\n        return hostNameMessage;\n      }\n\n      const labels = val.split('.');\n      const labelValidators = [\n        dnsChars,\n        startHyphen('hostname'),\n        endHyphen('hostname'),\n        dnsDoubleDash,\n        dnsEmpty('hostname'),\n        dnsTooLong('hostname')\n      ];\n\n      for ( let i = 0; i < labels.length; i++ ) {\n        const labelMessage = runValidators(labels[i], labelValidators);\n\n        if (labelMessage) {\n          return labelMessage;\n        }\n      }\n    }\n  };\n\n  const wildcardHostname: Validator = (val: string) => {\n    // allow wildcard in first part of hostname\n    val = val ? val.replace(/^\\*\\./, '') : val;\n\n    return hostname(val);\n  };\n\n  const externalName: Validator = (val: string) => {\n    if (isEmpty(val)) {\n      return t('validation.service.externalName.none');\n    } else {\n      return hostname(val);\n    }\n  };\n\n  const testRule = (val: string | undefined) => {\n    return 'This is an error returned by the testRule validator';\n  };\n\n  const ruleGroups: Validator = (val: {groups?: any}) => isEmpty(val?.groups) ? t('validation.prometheusRule.groups.required') : undefined;\n\n  const clusterName: ValidatorFactory = (isRke2: boolean): Validator => (val: string | undefined) => isRke2 && (val || '')?.match(/^(c-.{5}|local)$/i) ? t('validation.cluster.name') : undefined;\n\n  const servicePort: Validator<string | Port | undefined> = (val: ServicePort) => {\n    const {\n      name,\n      idx\n    } = val;\n\n    const nodePort = new Port(val.nodePort);\n    const listeningPort = new Port(val.port);\n    const targetPort = new Port(val.targetPort);\n\n    if (isEmpty(name)) {\n      return t('validation.service.ports.name.required', { position: idx + 1 });\n    }\n\n    if (!nodePort.empty) {\n      if (!nodePort.isInt) {\n        return t('validation.service.ports.nodePort.requiredInt', { position: idx + 1 });\n      } else if (nodePort.int < 1 || nodePort.int > 65535) {\n        return t('validation.service.ports.nodePort.between', { position: idx + 1 });\n      }\n    }\n\n    if (!listeningPort.empty) {\n      if (!listeningPort.isInt) {\n        return t('validation.service.ports.port.requiredInt', { position: idx + 1 });\n      } else if (listeningPort.int < 1 || listeningPort.int > 65535) {\n        return t('validation.service.ports.port.between', { position: idx + 1 });\n      } else if (listeningPort.string?.includes('.')) {\n        return listeningPort;\n      }\n    } else {\n      return t('validation.service.ports.port.required', { position: idx + 1 });\n    }\n\n    if (!targetPort.empty) {\n      if (!targetPort.isInt) {\n        const ianaServiceNameErrors = dnsLabelIanaServiceName(targetPort.string);\n\n        if (ianaServiceNameErrors) {\n          return ianaServiceNameErrors;\n        }\n      } else if (targetPort.int < 1 || targetPort.int > 65535) {\n        return t('validation.service.ports.targetPort.between', { position: idx + 1 });\n      }\n    } else {\n      return t('validation.service.ports.targetPort.required', { position: idx + 1 });\n    }\n\n    return undefined;\n  };\n\n  const groupIsValid: Validator = (val, readableIndex) => {\n    let returnMessage: string | undefined;\n\n    if (isEmpty(val?.name)) {\n      return t('validation.prometheusRule.groups.valid.name', { index: readableIndex });\n    }\n\n    if (isEmpty(val.rules)) {\n      return t('validation.prometheusRule.groups.valid.singleEntry', { index: readableIndex });\n    } else {\n      val.rules.forEach((rule: any, idx: number) => {\n        const readableRuleIndex = idx + 1;\n\n        if (has(rule, 'alert') && isEmpty(rule?.alert) && !returnMessage) {\n          returnMessage = t('validation.prometheusRule.groups.valid.rule.alertName', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n        } else if (has(rule, 'record') && isEmpty(rule?.record)) {\n          returnMessage = t('validation.prometheusRule.groups.valid.rule.recordName', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n        }\n\n        if ((has(rule, 'expr') && isEmpty(rule.expr) && !returnMessage) || (!has(rule, 'expr') && !returnMessage)) {\n          returnMessage = t('validation.prometheusRule.groups.valid.rule.expr', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n        }\n\n        if (has(rule, 'alert')) {\n          if (\n            (has(rule, 'labels') && isEmpty(rule.labels) && !returnMessage) ||\n            (!has(rule, 'labels') && !returnMessage)\n          ) {\n            returnMessage = t('validation.prometheusRule.groups.valid.rule.labels', { groupIndex: readableIndex, ruleIndex: readableRuleIndex });\n          }\n        }\n      });\n    }\n\n    return returnMessage;\n  };\n\n  const groupsAreValid: Validator = (val) => {\n    const groups = [...val]; // making a new array in the function because I'm gonna mutate it later...\n    let message;\n\n    groups.forEach((group, idx, arr) => {\n      message = groupIsValid(group, idx + 1);\n      if (!!message) {\n        arr.length = idx + 1; // this is a tricksy way of breaking a forEach loop since we just want the first message\n      }\n    });\n\n    return message;\n  };\n\n  const matching: Validator = (val) => {\n    if (isEmpty(val?.match) && isEmpty(val?.['match_re'])) {\n      return t('validation.monitoring.route.match');\n    }\n  };\n\n  const roleTemplateRules: ValidatorFactory = (type): Validator => (val = []) => {\n    if (val.some((rule: any) => isEmpty(rule.verbs))) {\n      return t('validation.roleTemplate.roleTemplateRules.missingVerb');\n    }\n\n    if (val.some((rule: any) => rule.resources?.length && rule.nonResourceURLs?.length)) {\n      return t('validation.roleTemplate.roleTemplateRules.noResourceAndNonResource');\n    }\n\n    if (type === RBAC.ROLE) {\n      if (val.some((rule: any) => isEmpty(rule.resources))) {\n        return t('validation.roleTemplate.roleTemplateRules.missingResource');\n      }\n\n      if (val.some((rule: any) => isEmpty(rule.apiGroups))) {\n        return t('validation.roleTemplate.roleTemplateRules.missingApiGroup');\n      }\n    } else if (val.some((rule: any) => isEmpty(rule.resources) && isEmpty(rule.nonResourceURLs))) {\n      return t('validation.roleTemplate.roleTemplateRules.missingOneResource');\n    }\n\n    return undefined;\n  };\n\n  // The existing validator for clusterIp never actually returns an error\n  const clusterIp: Validator = (val) => undefined;\n\n  const backupTarget: Validator = (val) => {\n    const parseValue = JSON.parse(val);\n    const type = parseValue.type;\n\n    if (!type) {\n      return t('validation.required', { key: 'Type' });\n    }\n\n    if (type === 's3') {\n      if (!parseValue.accessKeyId) {\n        return t('validation.required', { key: 'accessKeyId' });\n      }\n\n      if (!parseValue.secretAccessKey) {\n        return t('validation.required', { key: 'secretAccessKey' });\n      }\n\n      if (!parseValue.bucketRegion) {\n        return t('validation.required', { key: 'bucketRegion' });\n      }\n\n      if (!parseValue.bucketName) {\n        return t('validation.required', { key: 'bucketName' });\n      }\n    }\n\n    return undefined;\n  };\n\n  const imageUrl: Validator = (val) => {\n    const VM_IMAGE_FILE_FORMAT = ['qcow', 'qcow2', 'raw', 'img', 'iso'];\n\n    if (!val || val === '') {\n      return undefined;\n    }\n\n    const urlSlug = val.split('/').pop();\n    const fileExtension = urlSlug.split('.').pop().toLowerCase();\n\n    if (!VM_IMAGE_FILE_FORMAT.includes(fileExtension)) {\n      return t('harvester.validation.image.ruleTip');\n    }\n\n    return undefined;\n  };\n\n  const fileRequired: Validator = (val = {}) => {\n    if (!val[HCI.IMAGE_NAME]) {\n      return t('validation.required', { key: t('harvester.image.fileName') });\n    }\n  };\n\n  const subDomain: Validator = (val) => {\n    const matchedChars = val?.match(/[^a-z0-9.-]/g);\n\n    if (matchedChars) {\n      return t('validation.chars', {\n        key, count: matchedChars.length, chars: matchedChars.map((char: string) => char === ' ' ? 'Space' : `\"${ char }\"`).join(', ')\n      });\n    }\n\n    return runValidators(val, [startHyphen('label'), endHyphen('label'), startDot('label'), endDot('label'), required]);\n  };\n\n  return {\n    absolutePath,\n    backupTarget,\n    betweenLengths,\n    betweenValues,\n    clusterIp,\n    clusterName,\n    containerImage,\n    containerImages,\n    cronSchedule,\n    dnsLabel,\n    dnsLabelIanaServiceName,\n    dnsLabelRestricted,\n    externalName,\n    fileRequired,\n    groupsAreValid,\n    hostname,\n    imageUrl,\n    interval,\n    https,\n    localhost,\n    trailingForwardSlash,\n    url,\n    matching,\n    maxLength,\n    maxValue,\n    minLength,\n    minValue,\n    noUpperCase,\n    portNumber,\n    required,\n    requiredInt,\n    isInteger,\n    isPositive,\n    isOctal,\n    roleTemplateRules,\n    ruleGroups,\n    servicePort,\n    subDomain,\n    testRule,\n    wildcardHostname,\n  };\n}\n"],"mappings":"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","ignoreList":[]}]}