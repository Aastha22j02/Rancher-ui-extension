{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Vue","markRaw","addObject","addObjects","clear","removeObject","SCHEMA","COUNT","normalizeType","keyFieldFor","addSchemaIndexFields","classify","garbageCollect","registerType","state","type","cache","types","list","haveAll","haveSelector","haveNamespace","undefined","havePage","revision","generation","loadCounter","map","Map","set","replace","existing","data","_i","_Object$keys","Object","keys","length","k","_i2","_Object$keys2","replaceResource","getters","cleanResource","createLoadArgs","ctx","dataType","keyField","keyFieldForType","opts","rootGetters","load","_ref","cachedArgs","_ref2","cachedType","limit","id","entry","get","inMap","latestEntry","push","rm","shift","delete","baseType","forgetType","gcResetType","resetStore","commit","console","log","config","namespace","_i3","_Object$keys3","concat","gcResetStore","remove","obj","_remove","batchChanges","_ref3","batch","batchTypes","combinedBatch","forEach","batchType","_typeOption$alias","typeOption","alias","aliasType","_i4","_Object$entries","entries","_Object$entries$_i","_slicedToArray","key","value","_objectSpread","combinedBatchTypes","normalizedType","typeCache","typeCacheIndexMap","resource","index","removeAtIndexes","classyResource","sort","cacheIndex","loopIndex","splice","loadAll","_ref4","skipHaveAll","slice","proxies","x","i","loadAdd","_ref5","_allLatest$","allLatest","applyConfig","assign","loadMulti","_ref6","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","loadSelector","_ref7","_entries$","selector","_iterator2","_step2","loadMerge","_ref8","find","toLoadEntry","loadPage","_ref9","pagination","forgetAll","_ref10","setHaveAll","_ref11","setHaveNamespace","_ref12","loadedAll","_ref13","reset","incrementLoadCounter","typeData"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js"],"sourcesContent":["import Vue, { markRaw } from 'vue';\nimport { addObject, addObjects, clear, removeObject } from '@shell/utils/array';\nimport { SCHEMA, COUNT } from '@shell/config/types';\nimport { normalizeType, keyFieldFor } from '@shell/plugins/dashboard-store/normalize';\nimport { addSchemaIndexFields } from '@shell/plugins/steve/schema.utils';\nimport { classify } from '@shell/plugins/dashboard-store/classify';\nimport garbageCollect from '@shell/utils/gc/gc';\n\nfunction registerType(state, type) {\n  let cache = state.types[type];\n\n  if ( !cache ) {\n    cache = {\n      list:          [],\n      haveAll:       false,\n      haveSelector:  {},\n      /**\n       * If the cached list only contains resources for a namespace, this will contain the ns name\n       */\n      haveNamespace: undefined,\n      /**\n       * If the cached list only contains resources from a pagination request, this will contain the pagination settings (`StorePagination`)\n       */\n      havePage:      undefined,\n      /**\n       * The highest known resourceVersion from the server for this type\n       */\n      revision:      0,\n      /**\n       * Updated every time something is loaded for this type\n       */\n      generation:    0,\n      /**\n       * Used to cancel incremental loads if the page changes during load\n       */\n      loadCounter:   0,\n\n      // Not enumerable so they don't get sent back to the client for SSR\n      map: markRaw(new Map()),\n    };\n\n    Vue.set(state.types, type, cache);\n  }\n\n  return cache;\n}\n\nexport function replace(existing, data) {\n  for ( const k of Object.keys(existing) ) {\n    delete existing[k];\n  }\n\n  for ( const k of Object.keys(data) ) {\n    Vue.set(existing, k, data[k]);\n  }\n\n  return existing;\n}\n\nfunction replaceResource(existing, data, getters) {\n  data = getters.cleanResource(existing, data);\n\n  return replace(existing, data);\n}\n\n/**\n * `load` can be called as part of a loop. to avoid common look ups create them up front and pass as `cachedArgs`\n */\nexport function createLoadArgs(ctx, dataType) {\n  const { getters } = ctx;\n  const type = normalizeType(dataType);\n  const keyField = getters.keyFieldForType(type);\n  const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n\n  return {\n    type, keyField, opts\n  };\n}\n\nexport function load(state, {\n  data, ctx, existing, cachedArgs\n}) {\n  const { getters } = ctx;\n  // Optimisation. This can run once per resource loaded.., so pass in from parent\n  const { type: cachedType, keyField, opts } = cachedArgs || createLoadArgs(ctx, data.type);\n  let type = cachedType;\n\n  const limit = opts?.limit;\n\n  // Inject special fields for indexing schemas\n  if ( type === SCHEMA ) {\n    addSchemaIndexFields(data);\n  }\n\n  const id = data[keyField];\n\n  let cache = registerType(state, type);\n\n  cache.generation++;\n\n  let entry = cache.map.get(id);\n  const inMap = !!entry;\n\n  //\n  // Determine the `entry` that should be in the local map and list cache\n  //\n  if ( existing && !existing.id ) {\n    // A specific proxy instance to use was passed in (for create -> save), use it instead of making a new proxy\n    // `existing` is a classified resource created locally that is most probably not in the store (unless a slow connection means it's added by socket before the API responds)\n    // Note - `existing` has no `id` because the resource was created locally and not supplied by Rancher API\n\n    // Get the latest and greatest version of the resource\n    const latestEntry = replaceResource(existing, data, getters);\n\n    if (inMap) {\n      // There's already an entry in the store, so merge changes into it. The list entry is a reference to the map (and vice versa)\n      entry = replaceResource(entry, latestEntry, getters);\n    } else {\n      // There's no entry, using existing proxy\n      entry = latestEntry;\n    }\n  } else {\n    if (inMap) {\n      // There's already an entry in the store, so merge changes into it. The list entry is a reference to the map (and vice versa)\n      entry = replaceResource(entry, data, getters);\n    } else {\n      // There's no entry, make a new proxy\n      entry = classify(ctx, data);\n    }\n  }\n\n  //\n  // Ensure the `entry` is in both both list and cache\n  // Note - We should be safe assuming the two collections have parity (not in map means not in list)\n  //\n  if (!inMap) {\n    cache.list.push(entry);\n    cache.map.set(id, entry);\n  }\n\n  // If there is a limit to the number of resources we can store for this type then\n  // remove the first one to keep the list size to that limit\n  if (limit && cache.list.length > limit) {\n    const rm = cache.list.shift();\n\n    cache.map.delete(rm.id);\n  }\n\n  if ( data.baseType ) {\n    type = normalizeType(data.baseType);\n    cache = state.types[type];\n    if ( cache ) {\n      addObject(cache.list, entry);\n      cache.map.set(id, entry);\n    }\n  }\n\n  return entry;\n}\n\nexport function forgetType(state, type) {\n  const cache = state.types[type];\n\n  if ( cache ) {\n    cache.haveAll = false;\n    cache.haveSelector = {};\n    cache.haveNamespace = undefined;\n    cache.havePage = undefined;\n    cache.revision = 0;\n    cache.generation = 0;\n    clear(cache.list);\n    cache.map.clear();\n    delete state.types[type];\n\n    garbageCollect.gcResetType(state, type);\n\n    return true;\n  }\n}\n\nexport function resetStore(state, commit) {\n  // eslint-disable-next-line no-console\n  console.log('Reset store: ', state.config.namespace);\n\n  for ( const type of Object.keys(state.types) ) {\n    commit(`${ state.config.namespace }/forgetType`, type);\n  }\n\n  garbageCollect.gcResetStore(state);\n}\n\nexport function remove(state, obj, getters) {\n  if (obj) {\n    let type = normalizeType(obj.type);\n    const keyField = getters[`${ state.config.namespace }/keyFieldForType`](type);\n    const id = obj[keyField];\n\n    let entry = state.types[type];\n\n    if ( entry ) {\n      removeObject(entry.list, obj);\n      entry.map.delete(id);\n    }\n\n    if ( obj.baseType ) {\n      type = normalizeType(obj.baseType);\n      entry = state.types[type];\n\n      if ( entry ) {\n        removeObject(entry.list, obj);\n        entry.map.delete(id);\n      }\n    }\n  }\n}\n\nexport function batchChanges(state, { ctx, batch }) {\n  const batchTypes = Object.keys(batch);\n  const combinedBatch = {};\n\n  batchTypes.forEach((batchType) => {\n    combinedBatch[batchType] = batch[batchType];\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](batchType);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.forEach((aliasType) => {\n        combinedBatch[aliasType] = {};\n        for (const [key, value] of Object.entries(batch[batchType])) {\n          combinedBatch[aliasType][key] = {\n            ...value,\n            type: aliasType\n          };\n        }\n      });\n    }\n  });\n\n  const combinedBatchTypes = Object.keys(combinedBatch);\n\n  combinedBatchTypes.forEach((type) => {\n    const normalizedType = normalizeType(type === 'counts' ? COUNT : type);\n    const keyField = keyFieldFor(normalizedType);\n    const typeCache = registerType(state, normalizedType);\n\n    // making a map for every resource's location in the list is gonna ensure we only have to loop through the big list once.\n    const typeCacheIndexMap = {};\n\n    typeCache.list.forEach((resource, index) => {\n      typeCacheIndexMap[resource[keyField]] = index;\n    });\n\n    const removeAtIndexes = [];\n\n    // looping through the batch, executing changes, deferring creates and removes since they change the array length\n    Object.keys(combinedBatch[normalizedType]).forEach((id) => {\n      const index = typeCacheIndexMap[id];\n      const resource = combinedBatch[normalizedType][id];\n\n      // an empty resource passed into batch changes is how we'll signal which ones to delete\n      if (Object.keys(resource).length === 0 && index !== undefined) {\n        typeCache.map.delete(id);\n        removeAtIndexes.push(index);\n      } else if (Object.keys(resource).length === 0) {\n        // No op. We're removing it... but we don't have it in the cache\n      } else {\n        if (normalizedType === SCHEMA) {\n          addSchemaIndexFields(resource);\n        }\n        const classyResource = classify(ctx, resource);\n\n        if (index === undefined) {\n          typeCache.list.push(classyResource);\n          typeCache.map.set(id, classyResource);\n\n          typeCacheIndexMap[classyResource[keyField]] = typeCache.list.length - 1;\n        } else {\n          replaceResource(typeCache.list[index], resource, ctx.getters);\n        }\n      }\n    });\n\n    // looping through the removeAtIndexes, making sure to offset by iteration so the array changing doesn't mess us up\n    removeAtIndexes.sort().forEach((cacheIndex, loopIndex) => {\n      typeCache.list.splice(cacheIndex - loopIndex, 1);\n    });\n\n    const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n    const limit = opts?.limit;\n\n    // If there is a limit to the number of resources we can store for this type then\n    // remove the first one to keep the list size to that limit\n    if (limit && typeCache.list.length > limit) {\n      const rm = typeCache.list.shift();\n\n      typeCache.map.delete(rm.id);\n    }\n\n    typeCache.generation++;\n  });\n}\n\nexport function loadAll(state, {\n  type,\n  data,\n  ctx,\n  skipHaveAll,\n  namespace,\n  revision\n}) {\n  const { getters } = ctx;\n\n  if (!data) {\n    return;\n  }\n\n  const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n  const limit = opts?.limit;\n\n  // If there is a limit, only store the last elements from the list to keep to that limit\n  if (limit) {\n    data = data.slice(-limit);\n  }\n\n  const keyField = getters.keyFieldForType(type);\n  const proxies = data.map((x) => classify(ctx, x));\n  const cache = registerType(state, type);\n\n  clear(cache.list);\n  cache.map.clear();\n  cache.revision = revision || 0;\n  cache.generation++;\n\n  addObjects(cache.list, proxies);\n\n  for ( let i = 0 ; i < proxies.length ; i++ ) {\n    cache.map.set(proxies[i][keyField], proxies[i]);\n  }\n\n  // Allow requester to skip setting that everything has loaded\n  if (!skipHaveAll) {\n    if (namespace) {\n      cache.havePage = false;\n      cache.haveNamespace = namespace;\n      cache.haveAll = false;\n    } else {\n      cache.havePage = false;\n      cache.haveNamespace = false;\n      cache.haveAll = true;\n    }\n  }\n\n  return proxies;\n}\n\n/**\n * Add a set of resources to the store for a given type\n *\n * Don't mark the 'haveAll' field - this is used for incremental loading\n */\nexport function loadAdd(state, { type, data: allLatest, ctx }) {\n  const { getters } = ctx;\n  const keyField = getters.keyFieldForType(type);\n  const cachedArgs = createLoadArgs(ctx, allLatest?.[0]?.type);\n\n  allLatest.forEach((entry) => {\n    const existing = state.types[type].map.get(entry[keyField]);\n\n    load(state, {\n      data: entry, ctx, existing, cachedArgs\n    });\n  });\n}\n\nexport default {\n  registerType,\n  load,\n\n  applyConfig(state, config) {\n    if ( !state.config ) {\n      state.config = {};\n    }\n\n    Object.assign(state.config, config);\n  },\n\n  /**\n   * Load multiple different types of resources\n   */\n  loadMulti(state, { data, ctx }) {\n    // console.log('### Mutation loadMulti', data?.length);\n\n    for ( const entry of data ) {\n      load(state, { data: entry, ctx });\n    }\n  },\n\n  loadSelector(state, {\n    type, entries, ctx, selector, revision\n  }) {\n    const cache = registerType(state, type);\n    const cachedArgs = createLoadArgs(ctx, entries?.[0]?.type);\n\n    for ( const data of entries ) {\n      load(state, {\n        data, ctx, cachedArgs\n      });\n    }\n\n    cache.haveSelector[selector] = true;\n    cache.revision = revision || 0;\n  },\n\n  loadAll,\n\n  /**\n   * Handles changes (add, update, remove) to multiple resources for multiple types\n   */\n  batchChanges,\n\n  loadMerge(state, { type, data: allLatest, ctx }) {\n    const { commit, getters } = ctx;\n    // const allLatest = await dispatch('findAll', { type, opt: { force: true, load, _NONE } });\n    // const allExisting = getters.all({type});\n    const keyField = getters.keyFieldForType(type);\n    const cache = state.types[type];\n    const cachedArgs = createLoadArgs(ctx, allLatest?.[0].type);\n\n    allLatest.forEach((entry) => {\n      const existing = state.types[type].map.get(entry[keyField]);\n\n      load(state, {\n        data: entry, ctx, existing, cachedArgs\n      });\n    });\n    cache.list.forEach((entry) => {\n      if (!allLatest.find((toLoadEntry) => toLoadEntry.id === entry.id)) {\n        commit('remove', entry);\n      }\n    });\n  },\n\n  loadAdd,\n\n  loadPage(state, {\n    type,\n    data,\n    ctx,\n    pagination,\n  }) {\n    if (!data) {\n      return;\n    }\n\n    const keyField = ctx.getters.keyFieldForType(type);\n    const proxies = data.map((x) => classify(ctx, x));\n    const cache = registerType(state, type);\n\n    clear(cache.list);\n    cache.map.clear();\n    cache.generation++;\n\n    addObjects(cache.list, proxies);\n\n    for ( let i = 0 ; i < proxies.length ; i++ ) {\n      cache.map.set(proxies[i][keyField], proxies[i]);\n    }\n\n    // havePage is of type `StorePagination`\n    cache.havePage = pagination;\n    cache.haveNamespace = undefined;\n    cache.haveAll = undefined;\n\n    return proxies;\n  },\n\n  forgetAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    clear(cache.list);\n    cache.map.clear();\n    cache.generation++;\n  },\n\n  setHaveAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    cache.haveAll = true;\n  },\n\n  setHaveNamespace(state, { type, namespace }) {\n    const cache = registerType(state, type);\n\n    cache.haveNamespace = namespace;\n  },\n\n  loadedAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    cache.generation++;\n    cache.haveAll = true;\n  },\n\n  remove(state, obj) {\n    if (obj) {\n      remove(state, obj, this.getters);\n    }\n  },\n\n  reset(state) {\n    resetStore(state, this.commit);\n  },\n\n  forgetType,\n\n  incrementLoadCounter(state, type) {\n    const typeData = state.types[type];\n\n    if (typeData) {\n      typeData.loadCounter++;\n    }\n  },\n\n};\n"],"mappings":"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","ignoreList":[]}]}