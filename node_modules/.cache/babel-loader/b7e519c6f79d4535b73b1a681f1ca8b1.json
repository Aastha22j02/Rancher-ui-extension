{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/mutations.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/mutations.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["addObject","NAMESPACE","POD","SCHEMA","forgetType","resetStore","loadAll","load","remove","batchChanges","replace","loadAdd","perfLoadAll","Vue","classify","SteveSchema","registerNamespace","state","namespace","cache","podsByNamespace","list","map","Map","set","updatePodsByNamespaceCache","ctx","pods","Object","keys","forEach","ns","entry","classyResource","types","get","id","existing","cleanPodsByNamespaceCache","resource","type","inList","findIndex","p","splice","delete","_ref","batch","newAndChangedPods","entries","reduce","_ref2","_ref3","_slicedToArray","pod","push","substring","indexOf","_ref4","_ref5","_ref6","data","skipHaveAll","revision","pagination","process","env","dev","perfTest","proxies","worker","$workers","getters","storeName","postMessage","loadSchemas","inError","key","startsWith","reset","commit","concat","config","loadMulti","_ref7","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","metadata","err","e","f","_ref8","allLatest","length","obj"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/mutations.js"],"sourcesContent":["import { addObject } from '@shell/utils/array';\nimport { NAMESPACE, POD, SCHEMA } from '@shell/config/types';\nimport {\n  forgetType,\n  resetStore,\n  loadAll,\n  load,\n  remove,\n  batchChanges,\n  replace,\n  loadAdd\n} from '@shell/plugins/dashboard-store/mutations';\nimport { perfLoadAll } from '@shell/plugins/steve/performanceTesting';\nimport Vue from 'vue';\nimport { classify } from '@shell/plugins/dashboard-store/classify';\nimport SteveSchema from '@shell/models/steve-schema';\n\nfunction registerNamespace(state, namespace) {\n  let cache = state.podsByNamespace[namespace];\n\n  if (!cache) {\n    cache = {\n      list: [],\n      map:  new Map()\n    };\n\n    Vue.set(state.podsByNamespace, namespace, cache);\n  }\n\n  return cache;\n}\n\n/**\n * update the podsByNamespace cache with new or changed pods\n */\nfunction updatePodsByNamespaceCache(state, ctx, pods, loadAll) {\n  if (loadAll) {\n    // Clear the entire cache - this is a fresh load\n    Object.keys(state.podsByNamespace).forEach((ns) => {\n      delete state.podsByNamespace[ns];\n    });\n  }\n\n  // Go through all of the pods and populate cache by namespace\n  pods.forEach((entry) => {\n    const classyResource = state.types[POD].map.get(entry.id) || classify(ctx, entry);\n\n    const cache = registerNamespace(state, classyResource.namespace); // Raw entry.namespace doesn't exist, so use classy\n    const existing = cache.map.get(entry.id);\n\n    if (existing) {\n      // CANNOT BE THE SAME REFERENCE\n      replace(existing, entry);\n    } else {\n      addObject(cache.list, classyResource);\n      cache.map.set(entry.id, classyResource);\n    }\n  });\n}\n\n/**\n * clean the podsByNamespace cache of removed pods\n */\nfunction cleanPodsByNamespaceCache(state, resource) {\n  if (resource && resource.type === POD) {\n    const cache = state.podsByNamespace[resource.namespace];\n\n    // Extra defensive check that the cache exists for the namespace being removed\n    if (cache) {\n      const inList = cache.list.findIndex((p) => p.id === resource.id);\n\n      if ( inList >= 0 ) {\n        cache.list.splice(inList, 1);\n      }\n      cache.map.delete(resource.id);\n    }\n  } else if (resource && resource.type === NAMESPACE) {\n    // Namespace deleted\n    delete state.podsByNamespace[resource.id];\n  }\n}\n\nexport default {\n  batchChanges(state, { ctx, batch }) {\n    batchChanges(state, { ctx, batch });\n\n    if (batch[POD]) {\n      const newAndChangedPods = Object.entries(batch[POD]).reduce((pods, [id, pod]) => {\n        if (pod.id) {\n          // resource.create and resource.change\n          pods.push(pod);// must NOT be same reference from store\n        } else {\n          // resource.remove (note - we've already lost the resource in the store, so pass through mocked one)\n          cleanPodsByNamespaceCache(state, {\n            id,\n            type:      POD,\n            namespace: id.substring(0, id.indexOf('/'))\n          });\n        }\n\n        return pods;\n      }, []);\n\n      updatePodsByNamespaceCache(state, ctx, newAndChangedPods, false);\n    }\n\n    if (batch[NAMESPACE]) {\n      Object.entries(batch[NAMESPACE]).forEach(([id, namespace]) => {\n        if (!namespace.id) {\n          // resource.remove (note - we've already lost the resource in the store, so pass through mocked one)\n          cleanPodsByNamespaceCache(state, {\n            id,\n            type: NAMESPACE,\n          });\n        }\n      });\n    }\n  },\n\n  loadAll(state, {\n    type,\n    data,\n    ctx,\n    skipHaveAll,\n    namespace,\n    revision,\n    pagination\n  }) {\n    // Performance testing in dev and when env var is set\n    if (process.env.dev && !!process.env.perfTest) {\n      data = perfLoadAll(type, data);\n    }\n\n    const proxies = loadAll(state, {\n      type, data, ctx, skipHaveAll, namespace, revision, pagination\n    });\n\n    // If we loaded a set of pods, then update the podsByNamespace cache\n    if (type === POD) {\n      updatePodsByNamespaceCache(state, ctx, proxies, true);\n    }\n\n    // Notify the web worker of the initial load of schemas\n    if (type === SCHEMA) {\n      const worker = (this.$workers || {})[ctx.getters.storeName];\n\n      if (worker) {\n        // Store raw json objects, not the proxies\n        worker.postMessage({ loadSchemas: data });\n      }\n    }\n  },\n\n  forgetType(state, type) {\n    if ( forgetType(state, type) ) {\n      Object.keys(state.inError).forEach((key) => {\n        if (key.startsWith(type)) {\n          delete state.inError[key];\n        }\n      });\n    }\n  },\n\n  reset(state) {\n    // Reset generic store things.... then steve specific things\n\n    resetStore(state, this.commit);\n\n    this.commit(`${ state.config.namespace }/resetSubscriptions`);\n\n    // Clear the podsByNamespace cache\n    state.podsByNamespace = {};\n\n    SteveSchema.reset(state.config.namespace);\n  },\n\n  /**\n  * Load multiple different types of resources\n  */\n  loadMulti(state, { data, ctx }) {\n    for (const entry of data) {\n      const resource = load(state, { data: entry, ctx });\n\n      if (resource.type === POD && resource.metadata) {\n        const cache = registerNamespace(state, resource.namespace);\n\n        addObject(cache.list, resource);\n        cache.map.set(resource.id, resource);\n      }\n    }\n  },\n\n  loadAdd(state, { type, data: allLatest, ctx }) {\n    loadAdd(state, {\n      type, data: allLatest, ctx\n    });\n\n    if (allLatest.length && allLatest[0].type === POD) {\n      updatePodsByNamespaceCache(state, ctx, allLatest, false);\n    }\n  },\n\n  remove(state, obj) {\n    remove(state, obj, this.getters);\n\n    cleanPodsByNamespaceCache(state, obj);\n  }\n};\n"],"mappings":"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","ignoreList":[]}]}