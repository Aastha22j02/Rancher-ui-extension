{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/subscribe.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/subscribe.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["addObject","clear","removeObject","get","SCHEMA","MANAGEMENT","SETTING","CSRF","getPerformanceSetting","Socket","EVENT_CONNECTED","EVENT_DISCONNECTED","EVENT_MESSAGE","EVENT_CONNECT_ERROR","EVENT_DISCONNECT_ERROR","NO_WATCH","NO_SCHEMA","REVISION_TOO_OLD","NO_PERMS","normalizeType","day","DATE_FORMAT","TIME_FORMAT","escapeHtml","keyForSubscribe","waitFor","WORKER_MODES","acceptOrRejectSocketMessage","BLANK_CLUSTER","STORE","paginationUtils","MINIMUM_TIME_NOTIFIED","workerQueues","supportedStores","CLUSTER","RANCHER","isWaitingForDestroy","storeName","store","_store$$workers$store","$workers","waitingForDestroy","waitForSettingsSchema","getters","waitForSettings","UI_PERFORMANCE","isAdvancedWorker","ctx","rootGetters","clusterId","includes","perfSetting","advancedWorker","enabled","createWorker","_x","_x2","_createWorker","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee6","_dispatch","workerActions","workerMode","worker","_workerQueues$storeNa","message","wrap","_callee6$","_context6","prev","next","dispatch","abrupt","postMessage","msg","_Object$keys","Object","keys","mode","DESTROY_MOCK","push","WAITING","_store$$workers$store2","destroy","_defineProperty","load","resource","queueChange","destroyWorker","terminate","batchChanges","batch","validateBatchChange","concat","name","redispatch","entries","forEach","_ref21","_ref22","_slicedToArray","action","params","e","ADVANCED","BASIC","steveCreateWorker","initWorker","onmessage","messageActions","data","length","shift","stop","equivalentWatch","a","b","aresourceType","resourceType","type","bresourceType","id","namespace","selector","_ref","_ref2","label","state","revision","entry","typeEntry","Math","max","parseInt","validChange","queue","event","body","obj","byId","growlsDisabled","_getPerformanceSettin","disableWebsocketNotification","sharedActions","subscribe","opt","_this","_callee","_rootGetters$isSingle","commit","socket","url","maxTries","metadata","_callee$","_context","disableSteveSockets","debugSocket","console","info","config","baseUrl","createWatcher","csrf","$cookies","parseJSON","setAutoReconnect","setUrl","connect","addEventListener","detail","JSON","parse","unsubscribe","_ref3","_this2","cleanupTasks","disconnect","Promise","all","watch","_ref4","_schema$attributes","_this$$workers","stringify","force","subscribeNamespace","schema","schemaFor","attributes","verbs","inError","error","watchStarted","debug","isSteveCacheEnabled","nextResourceVersion","resourceVersion","unwatch","_ref5","wsPing","_ref6","_msg$data","version","root","sharedMutations","on","toggleDebug","defaultActions","flush","_ref7","_callee2","toLoad","started","_iterator","_step","_step$value","_callee2$","_context2","Date","getTime","_createForOfIteratorHelper","s","n","done","value","Error","t0","f","finish","rehydrateSubscribe","_ref8","wantSocket","reconnectWatches","_ref9","promises","_iterator2","slice","_step2","err","resyncWatch","_ref10","_callee3","have","want","wantMap","_iterator3","_step3","_iterator4","_step4","_obj","_callee3$","_context3","forceWatch","_objectSpread","namespaced","sent","filter","x","_x$metadata","watchNamespace","opened","_ref11","_this3","_callee5","_event$detail","tries","t","disableGrowl","growlErr","_iterator5","_step5","_callee5$","_context5","currentTarget","$socket","queueTimer","flushQueue","_callee4","_callee4$","_context4","setTimeout","hasReconnected","key","val","title","pendingFrames","closed","_ref13","clearTimeout","_ref14","_e$srcElement","_e$srcElement2","_state$socket","dateFormat","timeFormat","time","srcElement","disconnectedAt","now","timeFormatted","format","raw","icon","earliestClose","send","_ref15","ok","sendImmediate","_ref16","wsResourceStart","_ref17","newWatch","wsResourceError","_ref18","_msg$data2","warn","toLowerCase","reason","wsResourceStop","_ref19","localState","wsResourceCreate","wsResourceChange","_typeOption$alias","updateSchema","typeOption","alias","map","wsResourceRemove","_typeOption$alias2","removeSchema","defaultMutations","setSocket","setWantSocket","enqueuePendingFrame","dequeuePendingFrame","setWatchStarted","existing","find","setWatchStopped","setInError","_ref20","clearInError","resetSubscriptions","deferredRequests","clearFromQueue","item","_item$body","defaultGetters","_existing$metadata","cache","types","_iterator6","list","_step6","neu","actions","mutations"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/subscribe.js"],"sourcesContent":["/**\n * Handles subscriptions to websockets which receive updates to resources\n *\n * Covers three use cases\n * 1) Handles subscription within this file\n * 2) Handles `cluster` subscriptions for some basic types in a web worker (SETTING.UI_PERFORMANCE advancedWorker = false)\n * 2) Handles `cluster` subscriptions and optimisations in an advanced worker (SETTING.UI_PERFORMANCE advancedWorker = true)\n */\n\nimport { addObject, clear, removeObject } from '@shell/utils/array';\nimport { get } from '@shell/utils/object';\nimport { SCHEMA, MANAGEMENT } from '@shell/config/types';\nimport { SETTING } from '@shell/config/settings';\nimport { CSRF } from '@shell/config/cookies';\nimport { getPerformanceSetting } from '@shell/utils/settings';\nimport Socket, {\n  EVENT_CONNECTED,\n  EVENT_DISCONNECTED,\n  EVENT_MESSAGE,\n  //  EVENT_FRAME_TIMEOUT,\n  EVENT_CONNECT_ERROR,\n  EVENT_DISCONNECT_ERROR,\n  NO_WATCH,\n  NO_SCHEMA,\n  REVISION_TOO_OLD,\n  NO_PERMS\n} from '@shell/utils/socket';\nimport { normalizeType } from '@shell/plugins/dashboard-store/normalize';\nimport day from 'dayjs';\nimport { DATE_FORMAT, TIME_FORMAT } from '@shell/store/prefs';\nimport { escapeHtml } from '@shell/utils/string';\nimport { keyForSubscribe } from '@shell/plugins/steve/resourceWatcher';\nimport { waitFor } from '@shell/utils/async';\nimport { WORKER_MODES } from './worker';\nimport acceptOrRejectSocketMessage from './accept-or-reject-socket-message';\nimport { BLANK_CLUSTER, STORE } from '@shell/store/store-types.js';\nimport paginationUtils from '@shell/utils/pagination-utils';\n\n// minimum length of time a disconnect notification is shown\nconst MINIMUM_TIME_NOTIFIED = 3000;\n\nconst workerQueues = {};\n\nconst supportedStores = [STORE.CLUSTER, STORE.RANCHER, STORE.MANAGEMENT];\n\nconst isWaitingForDestroy = (storeName, store) => {\n  return store.$workers[storeName]?.waitingForDestroy && store.$workers[storeName].waitingForDestroy();\n};\n\nconst waitForSettingsSchema = (storeName, store) => {\n  return waitFor(() => isWaitingForDestroy(storeName, store) || !!store.getters['management/byId'](SCHEMA, MANAGEMENT.SETTING));\n};\n\nconst waitForSettings = (storeName, store) => {\n  return waitFor(() => isWaitingForDestroy(storeName, store) || !!store.getters['management/byId'](MANAGEMENT.SETTING, SETTING.UI_PERFORMANCE));\n};\n\nconst isAdvancedWorker = (ctx) => {\n  const { rootGetters, getters } = ctx;\n  const storeName = getters.storeName;\n  const clusterId = rootGetters.clusterId;\n\n  if (!supportedStores.includes(storeName) || (clusterId === BLANK_CLUSTER && storeName === STORE.CLUSTER)) {\n    return false;\n  }\n\n  const perfSetting = getPerformanceSetting(rootGetters);\n\n  return perfSetting?.advancedWorker.enabled;\n};\n\nexport async function createWorker(store, ctx) {\n  const { getters, dispatch } = ctx;\n  const storeName = getters.storeName;\n\n  store.$workers = store.$workers || {};\n\n  if (!supportedStores.includes(storeName)) {\n    return;\n  }\n\n  if (!store.$workers[storeName]) {\n    // we know we need a worker at this point but we don't know which one so we're creating a mock interface\n    // it will simply queue up any messages for the real worker to process when it loads up\n    store.$workers[storeName] = {\n      postMessage: (msg) => {\n        if (Object.keys(msg)?.[0] === 'destroyWorker') {\n          // The worker has been destroyed before it's been set up. Flag this so we stop waiting for mgmt settings and then can destroy worker.\n          // This can occurr when the user is redirected to the log in page\n          // - workers created (but waiting)\n          // - logout is called\n          // - <store>/unsubscribe is dispatched\n          // - wait for worker object to be destroyed <-- requires initial wait to be unblocked\n          store.$workers[storeName].mode = WORKER_MODES.DESTROY_MOCK;\n\n          return;\n        }\n        if (workerQueues[storeName]) {\n          workerQueues[storeName].push(msg);\n        } else {\n          workerQueues[storeName] = [msg];\n        }\n      },\n      mode:              WORKER_MODES.WAITING,\n      waitingForDestroy: () => {\n        return store.$workers[storeName]?.mode === WORKER_MODES.DESTROY_MOCK;\n      },\n      destroy: () => {\n        // Similar to workerActions.destroyWorker\n        delete store.$workers[storeName];\n      }\n    };\n  }\n\n  await waitForSettingsSchema(storeName, store);\n  await waitForSettings(storeName, store);\n  if (store.$workers[storeName].waitingForDestroy()) {\n    store.$workers[storeName].destroy();\n\n    return;\n  }\n  const advancedWorker = isAdvancedWorker(ctx);\n\n  const workerActions = {\n    load: (resource) => {\n      queueChange(ctx, resource, true, 'Change');\n    },\n    destroyWorker: () => {\n      if (store.$workers) {\n        store.$workers[storeName].terminate();\n        delete store.$workers[storeName];\n      }\n    },\n    batchChanges: (batch) => {\n      dispatch('batchChanges', acceptOrRejectSocketMessage.validateBatchChange(ctx, batch));\n    },\n    dispatch: (msg) => {\n      dispatch(`ws.${ msg.name }`, msg);\n    },\n    redispatch: (msg) => {\n      /**\n       * because we had to queue up some messages prior to loading the worker:\n       * the basic worker will need to redispatch some of the queued messages back to the UI thread\n       */\n      Object.entries(msg).forEach(([action, params]) => {\n        dispatch(action, params);\n      });\n    },\n    [EVENT_CONNECT_ERROR]: (e) => {\n      dispatch('error', e );\n    },\n    [EVENT_DISCONNECT_ERROR]: (e) => {\n      dispatch('error', e );\n    },\n  };\n\n  if (!store.$workers[storeName] || store.$workers[storeName].mode === WORKER_MODES.WAITING) {\n    const workerMode = advancedWorker ? WORKER_MODES.ADVANCED : WORKER_MODES.BASIC;\n    const worker = store.steveCreateWorker(workerMode);\n\n    store.$workers[storeName] = worker;\n\n    worker.postMessage({ initWorker: { storeName } });\n\n    /**\n     * Covers message from Worker to UI thread\n     */\n    store.$workers[storeName].onmessage = (e) => {\n      /* on the off chance there's more than key in the message, we handle them in the order that they \"keys\" method provides which is\n      // good enough for now considering that we never send more than one message action at a time right now */\n      const messageActions = Object.keys(e?.data);\n\n      messageActions.forEach((action) => {\n        workerActions[action](e?.data[action]);\n      });\n    };\n  }\n\n  while (workerQueues[storeName]?.length) {\n    const message = workerQueues[storeName].shift();\n\n    store.$workers[storeName].postMessage(message);\n  }\n}\n\nexport function equivalentWatch(a, b) {\n  const aresourceType = a.resourceType || a.type;\n  const bresourceType = b.resourceType || b.type;\n\n  if ( aresourceType !== bresourceType ) {\n    return false;\n  }\n\n  if ( a.id !== b.id && (a.id || b.id) ) {\n    return false;\n  }\n\n  if ( a.namespace !== b.namespace && (a.namespace || b.namespace) ) {\n    return false;\n  }\n\n  if ( a.selector !== b.selector && (a.selector || b.selector) ) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction queueChange({ getters, state, rootGetters }, { data, revision }, load, label) {\n  const type = getters.normalizeType(data.type);\n\n  const entry = getters.typeEntry(type);\n\n  if ( entry ) {\n    entry.revision = Math.max(entry.revision, parseInt(revision, 10));\n  } else {\n    return;\n  }\n\n  // console.log(`${ label } Event [${ state.config.namespace }]`, data.type, data.id); // eslint-disable-line no-console\n\n  if (!acceptOrRejectSocketMessage.validChange({ getters, rootGetters }, type, data)) {\n    return;\n  }\n\n  if ( load ) {\n    state.queue.push({\n      action: 'dispatch',\n      event:  'load',\n      body:   data\n    });\n  } else {\n    const obj = getters.byId(data.type, data.id);\n\n    if ( obj ) {\n      state.queue.push({\n        action: 'commit',\n        event:  'remove',\n        body:   obj\n      });\n    }\n\n    if ( type === SCHEMA ) {\n      // Clear the current records in the store when a type disappears\n      state.queue.push({\n        action: 'commit',\n        event:  'forgetType',\n        body:   data.id\n      });\n    }\n  }\n}\n\nfunction growlsDisabled(rootGetters) {\n  return getPerformanceSetting(rootGetters)?.disableWebsocketNotification;\n}\n\n/**\n * Actions that cover all cases (see file description)\n */\nconst sharedActions = {\n  async subscribe(ctx, opt) {\n    const {\n      state, commit, dispatch, getters, rootGetters\n    } = ctx;\n\n    // ToDo: need to keep the worker up to date on CSRF cookie\n\n    if (rootGetters['isSingleProduct']?.disableSteveSockets) {\n      return;\n    }\n\n    let socket = state.socket;\n\n    commit('setWantSocket', true);\n\n    state.debugSocket && console.info(`Subscribe [${ getters.storeName }]`); // eslint-disable-line no-console\n\n    const url = `${ state.config.baseUrl }/subscribe`;\n    const maxTries = growlsDisabled(rootGetters) ? null : 3;\n    const metadata = get(opt, 'metadata');\n\n    if (isAdvancedWorker(ctx)) {\n      if (!this.$workers[getters.storeName]) {\n        await createWorker(this, ctx);\n      }\n\n      // if the worker is in advanced mode then it'll contain it's own socket which it calls a 'watcher'\n      this.$workers[getters.storeName].postMessage({\n        createWatcher: {\n          metadata,\n          url:  `${ state.config.baseUrl }/subscribe`,\n          csrf: this.$cookies.get(CSRF, { parseJSON: false }),\n          maxTries\n        }\n      });\n    } else if ( socket ) {\n      socket.setAutoReconnect(true);\n      socket.setUrl(url);\n      socket.connect(metadata);\n    } else {\n      socket = new Socket(`${ state.config.baseUrl }/subscribe`, true, null, null, maxTries);\n\n      commit('setSocket', socket);\n      socket.addEventListener(EVENT_CONNECTED, (e) => {\n        dispatch('opened', e);\n      });\n\n      socket.addEventListener(EVENT_DISCONNECTED, (e) => {\n        dispatch('closed', e);\n      });\n\n      socket.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        dispatch('error', e );\n      });\n\n      socket.addEventListener(EVENT_DISCONNECT_ERROR, (e) => {\n        dispatch('error', e );\n      });\n\n      socket.addEventListener(EVENT_MESSAGE, (e) => {\n        const event = e.detail;\n\n        if ( event.data) {\n          const msg = JSON.parse(event.data);\n\n          if (msg.name) {\n            dispatch(`ws.${ msg.name }`, msg);\n          }\n        }\n      });\n      socket.connect(metadata);\n    }\n  },\n\n  unsubscribe({ commit, getters, state }) {\n    const socket = state.socket;\n\n    commit('setWantSocket', false);\n    const cleanupTasks = [];\n\n    const worker = (this.$workers || {})[getters.storeName];\n\n    if (worker) {\n      worker.postMessage({ destroyWorker: true }); // we're only passing the boolean here because the key needs to be something truthy to ensure it's passed on the object.\n      cleanupTasks.push(waitFor(() => !this.$workers[getters.storeName], 'Worker is destroyed'));\n    }\n\n    if ( socket ) {\n      cleanupTasks.push(socket.disconnect());\n    }\n\n    return Promise.all(cleanupTasks);\n  },\n\n  watch({\n    state, dispatch, getters, rootGetters\n  }, params) {\n    state.debugSocket && console.info(`Watch Request [${ getters.storeName }]`, JSON.stringify(params)); // eslint-disable-line no-console\n\n    let {\n      // eslint-disable-next-line prefer-const\n      type, selector, id, revision, namespace, stop, force\n    } = params;\n\n    namespace = acceptOrRejectSocketMessage.subscribeNamespace(namespace);\n    type = getters.normalizeType(type);\n\n    if (rootGetters['type-map/isSpoofed'](type)) {\n      state.debugSocket && console.info('Will not Watch (type is spoofed)', JSON.stringify(params)); // eslint-disable-line no-console\n\n      return;\n    }\n\n    const schema = getters.schemaFor(type, false, false);\n\n    if (!!schema?.attributes?.verbs?.includes && !schema.attributes.verbs.includes('watch')) {\n      state.debugSocket && console.info('Will not Watch (type does not have watch verb)', JSON.stringify(params)); // eslint-disable-line no-console\n\n      return;\n    }\n\n    // If socket is in error don't try to watch.... unless we `force` it\n    const inError = getters.inError(params);\n\n    if ( !stop && !force && inError ) {\n      // REVISION_TOO_OLD is a temporary state and will be handled when `resyncWatch` completes\n      if (inError !== REVISION_TOO_OLD) {\n        console.error(`Aborting Watch Request [${ getters.storeName }]. Watcher in error (${ inError })`, JSON.stringify(params)); // eslint-disable-line no-console\n      }\n\n      return;\n    }\n\n    if ( !stop && getters.watchStarted({\n      type, id, selector, namespace\n    }) ) {\n      // eslint-disable-next-line no-console\n      state.debugSocket && console.debug(`Already Watching [${ getters.storeName }]`, {\n        type, id, selector, namespace\n      });\n\n      return;\n    }\n\n    // isSteveCacheEnabled check is temporary and will be removed once Part 3 of https://github.com/rancher/dashboard/pull/10349 is resolved by backend\n    // Steve cache backed api does not return a revision, so `revision` here is always undefined\n    // Which means we find a revision within a resource itself and use it in the watch\n    // That revision is probably too old and results in a watch error\n    // Watch errors mean we make a http request to get latest revision (which is still missing) and try to re-watch with it...\n    // etc\n    if (typeof revision === 'undefined' && !paginationUtils.isSteveCacheEnabled({ rootGetters })) {\n      revision = getters.nextResourceVersion(type, id);\n    }\n\n    const msg = { resourceType: type };\n\n    if ( revision ) {\n      msg.resourceVersion = `${ revision }`;\n    }\n\n    if ( namespace ) {\n      msg.namespace = namespace;\n    }\n\n    if ( stop ) {\n      msg.stop = true;\n    }\n\n    if ( id ) {\n      msg.id = id;\n    }\n\n    if ( selector ) {\n      msg.selector = selector;\n    }\n\n    const worker = this.$workers?.[getters.storeName] || {};\n\n    if (worker.mode === WORKER_MODES.ADVANCED || worker.mode === WORKER_MODES.WAITING) {\n      if ( force ) {\n        msg.force = true;\n      }\n\n      worker.postMessage({ watch: msg });\n\n      return;\n    }\n\n    return dispatch('send', msg);\n  },\n\n  unwatch(ctx, {\n    type, id, namespace, selector\n  }) {\n    const { commit, getters, dispatch } = ctx;\n\n    if (getters['schemaFor'](type)) {\n      namespace = acceptOrRejectSocketMessage.subscribeNamespace(namespace);\n\n      const obj = {\n        type,\n        id,\n        namespace,\n        selector,\n        stop: true, // Stops the watch on a type\n      };\n\n      if (isAdvancedWorker(ctx)) {\n        dispatch('watch', obj); // Ask the backend to stop watching the type\n      } else if (getters['watchStarted'](obj)) {\n        // Set that we don't want to watch this type\n        // Otherwise, the dispatch to unwatch below will just cause a re-watch when we\n        // detect the stop message from the backend over the web socket\n        commit('setWatchStopped', obj);\n        dispatch('watch', obj); // Ask the backend to stop watching the type\n        // Make sure anything in the pending queue for the type is removed, since we've now removed the type\n        commit('clearFromQueue', type);\n      }\n    }\n  },\n\n  'ws.ping'({ getters, dispatch }, msg) {\n    if ( getters.storeName === 'management' ) {\n      const version = msg?.data?.version || null;\n\n      dispatch('updateServerVersion', version, { root: true });\n      console.info(`Ping [${ getters.storeName }] from ${ version || 'unknown version' }`); // eslint-disable-line no-console\n    }\n  },\n};\n\n/**\n * Mutations that cover all cases (both subscriptions here and in advanced worker)\n */\nconst sharedMutations = {\n  debug(state, on, store) {\n    state.debugSocket = on !== false;\n    if (store && this.$workers[store]) {\n      this.$workers[store].postMessage({ toggleDebug: on !== false });\n    }\n  },\n};\n\n/**\n * Actions that cover cases 1 & 2 (see file description)\n */\nconst defaultActions = {\n\n  async flush({\n    state, commit, dispatch, getters\n  }) {\n    const queue = state.queue;\n    let toLoad = [];\n\n    if ( !queue.length ) {\n      return;\n    }\n\n    const started = new Date().getTime();\n\n    state.queue = [];\n\n    state.debugSocket && console.debug(`Subscribe Flush [${ getters.storeName }]`, queue.length, 'items'); // eslint-disable-line no-console\n\n    for ( const { action, event, body } of queue ) {\n      if ( action === 'dispatch' && event === 'load' ) {\n        // Group loads into one loadMulti when possible\n        toLoad.push(body);\n      } else {\n        // When we hit a different kind of event, process all the previous loads, then the other event.\n        if ( toLoad.length ) {\n          await dispatch('loadMulti', toLoad);\n          toLoad = [];\n        }\n\n        if ( action === 'dispatch' ) {\n          await dispatch(event, body);\n        } else if ( action === 'commit' ) {\n          commit(event, body);\n        } else {\n          throw new Error('Invalid queued action');\n        }\n      }\n    }\n\n    // Process any remaining loads\n    if ( toLoad.length ) {\n      await dispatch('loadMulti', toLoad);\n    }\n\n    state.debugSocket && console.debug(`Subscribe Flush [${ getters.storeName }] finished`, (new Date().getTime()) - started, 'ms'); // eslint-disable-line no-console\n  },\n\n  rehydrateSubscribe({ state, dispatch }) {\n    if ( state.wantSocket && !state.socket ) {\n      dispatch('subscribe');\n    }\n  },\n\n  reconnectWatches({\n    state, getters, commit, dispatch\n  }) {\n    const promises = [];\n\n    for ( const entry of state.started.slice() ) {\n      console.info(`Reconnect [${ getters.storeName }]`, JSON.stringify(entry)); // eslint-disable-line no-console\n\n      if ( getters.schemaFor(entry.type) ) {\n        commit('setWatchStopped', entry);\n        delete entry.revision;\n        promises.push(dispatch('watch', entry));\n      }\n    }\n\n    return Promise.all(promises);\n  },\n\n  async resyncWatch({\n    state, getters, dispatch, commit\n  }, params) {\n    const {\n      resourceType, namespace, id, selector\n    } = params;\n\n    console.info(`Resync [${ getters.storeName }]`, params); // eslint-disable-line no-console\n\n    const opt = { force: true, forceWatch: true };\n\n    if ( id ) {\n      await dispatch('find', {\n        type: resourceType,\n        id,\n        opt:  {\n          ...opt,\n          // Pass the namespace so `find` can construct the url correctly\n          namespaced: namespace,\n          // Ensure that find calls watch with no revision (otherwise it'll use the revision from the resource which is probably stale)\n          revision:   null\n        },\n      });\n\n      return;\n    }\n    let have, want;\n\n    if ( selector ) {\n      have = getters['matching'](resourceType, selector).slice();\n      want = await dispatch('findMatching', {\n        type: resourceType,\n        selector,\n        opt,\n      });\n    } else {\n      have = getters['all'](resourceType).slice();\n\n      if ( namespace ) {\n        have = have.filter((x) => x.metadata?.namespace === namespace);\n      }\n\n      want = await dispatch('findAll', {\n        type:           resourceType,\n        watchNamespace: namespace,\n        opt\n      });\n    }\n\n    const wantMap = {};\n\n    for ( const obj of want ) {\n      wantMap[obj.id] = true;\n    }\n\n    for ( const obj of have ) {\n      if ( !wantMap[obj.id] ) {\n        state.debugSocket && console.info(`Remove stale [${ getters.storeName }]`, resourceType, obj.id); // eslint-disable-line no-console\n\n        commit('remove', obj);\n      }\n    }\n  },\n\n  async opened({\n    commit, dispatch, state, getters, rootGetters\n  }, event) {\n    state.debugSocket && console.info(`WebSocket Opened [${ getters.storeName }]`); // eslint-disable-line no-console\n    const socket = event.currentTarget;\n    const tries = event?.detail?.tries; // have to pull it off of the event because the socket's tries is already reset to 0\n    const t = rootGetters['i18n/t'];\n    const disableGrowl = growlsDisabled(rootGetters);\n\n    this.$socket = socket;\n\n    if ( !state.queue ) {\n      state.queue = [];\n    }\n\n    if ( !state.queueTimer ) {\n      state.flushQueue = async() => {\n        if ( state.queue.length ) {\n          await dispatch('flush');\n        }\n\n        state.queueTimer = setTimeout(state.flushQueue, 1000);\n      };\n\n      state.flushQueue();\n    }\n\n    if ( socket.hasReconnected ) {\n      await dispatch('reconnectWatches');\n      // Check for disconnect notifications and clear them\n      const growlErr = rootGetters['growl/find']({ key: 'url', val: socket.url });\n\n      if (growlErr) {\n        dispatch('growl/remove', growlErr.id, { root: true });\n      }\n      if (tries > 1 && !disableGrowl) {\n        dispatch('growl/success', {\n          title:   t('growl.reconnected.title'),\n          message: t('growl.reconnected.message', { url: this.$socket.url, tries }),\n        }, { root: true });\n      }\n    }\n\n    // Try resending any frames that were attempted to be sent while the socket was down, once.\n    for ( const obj of state.pendingFrames.slice() ) {\n      commit('dequeuePendingFrame', obj);\n      dispatch('sendImmediate', obj);\n    }\n  },\n\n  closed({ state, getters }) {\n    state.debugSocket && console.info(`WebSocket Closed [${ getters.storeName }]`); // eslint-disable-line no-console\n    clearTimeout(state.queueTimer);\n    state.queueTimer = null;\n  },\n\n  error({\n    getters, state, dispatch, rootGetters\n  }, e) {\n    clearTimeout(state.queueTimer);\n    state.queueTimer = null;\n\n    // determine if websocket notifications are disabled\n    const disableGrowl = growlsDisabled(rootGetters);\n\n    if (!disableGrowl) {\n      const dateFormat = escapeHtml( rootGetters['prefs/get'](DATE_FORMAT));\n      const timeFormat = escapeHtml( rootGetters['prefs/get'](TIME_FORMAT));\n      const time = e?.srcElement?.disconnectedAt || Date.now();\n\n      const timeFormatted = `${ day(time).format(`${ dateFormat } ${ timeFormat }`) }`;\n      const url = e?.srcElement?.url;\n      const tries = state?.socket?.tries;\n\n      const t = rootGetters['i18n/t'];\n\n      const growlErr = rootGetters['growl/find']({ key: 'url', val: url });\n\n      if (e.type === EVENT_CONNECT_ERROR) { // if this occurs, then we're at least retrying to connect\n        if (growlErr) {\n          dispatch('growl/remove', growlErr.id, { root: true });\n        }\n        dispatch('growl/error', {\n          title:   t('growl.connectError.title'),\n          message: t('growl.connectError.message', {\n            url, time: timeFormatted, tries\n          }, { raw: true }),\n          icon:          'error',\n          earliestClose: time + MINIMUM_TIME_NOTIFIED,\n          url\n        }, { root: true });\n      } else if (e.type === EVENT_DISCONNECT_ERROR) { // if this occurs, we've given up on trying to reconnect\n        if (growlErr) {\n          dispatch('growl/remove', growlErr.id, { root: true });\n        }\n        dispatch('growl/error', {\n          title:   t('growl.disconnectError.title'),\n          message: t('growl.disconnectError.message', {\n            url, time: timeFormatted, tries\n          }, { raw: true }),\n          icon:          'error',\n          earliestClose: time + MINIMUM_TIME_NOTIFIED,\n          url\n        }, { root: true });\n      } else {\n        // if the error is not a connect error or disconnect error, the socket never worked: log whether the current browser is safari\n        console.error(`WebSocket Connection Error [${ getters.storeName }]`, e.detail); // eslint-disable-line no-console\n      }\n    }\n  },\n\n  send({ state, commit }, obj) {\n    if ( state.socket ) {\n      const ok = state.socket.send(JSON.stringify(obj));\n\n      if ( ok ) {\n        return;\n      }\n    }\n\n    commit('enqueuePendingFrame', obj);\n  },\n\n  sendImmediate({ state }, obj) {\n    if ( state.socket ) {\n      return state.socket.send(JSON.stringify(obj));\n    }\n  },\n\n  /**\n   * Steve only event\n   */\n  'ws.resource.start'({\n    state, getters, commit, dispatch\n  }, msg) {\n    state.debugSocket && console.info(`Resource start: [${ getters.storeName }]`, msg); // eslint-disable-line no-console\n\n    const newWatch = {\n      type:      msg.resourceType,\n      namespace: msg.namespace,\n      id:        msg.id,\n      selector:  msg.selector\n    };\n\n    state.started.filter((entry) => {\n      if (\n        entry.type === newWatch.type &&\n        entry.namespace !== newWatch.namespace\n      ) {\n        return true;\n      }\n    }).forEach((entry) => {\n      dispatch('unwatch', entry);\n    });\n\n    commit('setWatchStarted', newWatch);\n  },\n\n  'ws.resource.error'({ getters, commit, dispatch }, msg) {\n    console.warn(`Resource error [${ getters.storeName }]`, msg.resourceType, ':', msg.data.error); // eslint-disable-line no-console\n\n    const err = msg.data?.error?.toLowerCase();\n\n    if ( err.includes('watch not allowed') ) {\n      commit('setInError', { msg, reason: NO_WATCH });\n    } else if ( err.includes('failed to find schema') ) {\n      commit('setInError', { msg, reason: NO_SCHEMA });\n    } else if ( err.includes('too old') ) {\n      // Set an error for (all) subs of this type. This..\n      // 1) blocks attempts by resource.stop to resub (as type is in error)\n      // 2) will be cleared when resyncWatch --> watch (with force) --> resource.start completes\n      commit('setInError', { msg, reason: REVISION_TOO_OLD });\n      dispatch('resyncWatch', msg);\n    } else if ( err.includes('the server does not allow this method on the requested resource')) {\n      commit('setInError', { msg, reason: NO_PERMS });\n    }\n  },\n\n  /**\n   * Steve only event\n   *\n   * Steve has stopped watching this resource. This happens for a couple of reasons\n   * - We have requested that the resource watch should be stopped (and we receive this event as confirmation)\n   * - Steve tells us that the resource watch has been stopped. Possible reasons\n   *   - The rancher <--> k8s socket closed (happens every ~30 mins on mgmt socket)\n   *   - Permissions has changed for the subscribed resource, so rancher closes socket\n   */\n  'ws.resource.stop'({\n    state, getters, commit, dispatch\n  }, msg) {\n    const type = msg.resourceType;\n    const obj = {\n      type,\n      id:        msg.id,\n      namespace: msg.namespace,\n      selector:  msg.selector\n    };\n\n    state.debugSocket && console.info(`Resource Stop [${ getters.storeName }]`, type, msg); // eslint-disable-line no-console\n\n    if (!type) {\n      console.error(`Resource Stop [${ getters.storeName }]. Received resource.stop with an empty resourceType, aborting`, msg); // eslint-disable-line no-console\n\n      return;\n    }\n\n    // If we're trying to watch this event, attempt to re-watch\n    //\n    // To make life easier in the advanced worker `resource.stop` --> `watch` is handled here (basically for access to getters.nextResourceVersion)\n    // This means the concept of resource sub watch state needs massaging\n    const advancedWorker = msg.advancedWorker;\n    const localState = !advancedWorker;\n    const watchStarted = localState ? getters['watchStarted'](obj) : advancedWorker;\n\n    if ( getters['schemaFor'](type) && watchStarted) {\n      if (localState) {\n        commit('setWatchStopped', obj);\n      }\n\n      dispatch('watch', obj);\n    }\n  },\n\n  'ws.resource.create'(ctx, msg) {\n    ctx.state.debugSocket && console.info(`Resource Create [${ ctx.getters.storeName }]`, msg.resourceType, msg); // eslint-disable-line no-console\n    queueChange(ctx, msg, true, 'Create');\n  },\n\n  'ws.resource.change'(ctx, msg) {\n    const data = msg.data;\n    const type = data.type;\n\n    // Work-around for ws.error messages being sent as change events\n    // These have no id (or other metadata) which breaks lots if they are processed as change events\n    if (data.message && !data.id) {\n      return;\n    }\n\n    // Web worker can process schemas to check that they are actually changing and\n    // only load updates if the schema did actually change\n    if (type === SCHEMA) {\n      const worker = (this.$workers || {})[ctx.getters.storeName];\n\n      if (worker) {\n        worker.postMessage({ updateSchema: data });\n\n        // No further processing - let the web worker check the schema updates\n        return;\n      }\n    }\n\n    queueChange(ctx, msg, true, 'Change');\n\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](type);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.map((type) => {\n        ctx.state.queue.push({\n          action: 'dispatch',\n          event:  'load',\n          body:   {\n            ...data,\n            type,\n          },\n        });\n      });\n    }\n  },\n\n  'ws.resource.remove'(ctx, msg) {\n    const data = msg.data;\n    const type = data.type;\n\n    ctx.state.debugSocket && console.info(`Resource Remove [${ ctx.getters.storeName }]`, type, msg); // eslint-disable-line no-console\n\n    if (type === SCHEMA) {\n      const worker = (this.$workers || {})[ctx.getters.storeName];\n\n      if (worker) {\n        worker.postMessage({ removeSchema: data.id });\n      }\n    }\n\n    queueChange(ctx, msg, false, 'Remove');\n\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](type);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.map((type) => {\n        const obj = ctx.getters.byId(type, data.id);\n\n        ctx.state.queue.push({\n          action: 'commit',\n          event:  'remove',\n          body:   obj,\n        });\n      });\n    }\n  },\n};\n\n/**\n * Mutations that cover cases 1 & 2 (see file description)\n */\nconst defaultMutations = {\n  setSocket(state, socket) {\n    state.socket = socket;\n  },\n\n  setWantSocket(state, want) {\n    state.wantSocket = want;\n  },\n\n  enqueuePendingFrame(state, obj) {\n    state.pendingFrames.push(obj);\n  },\n\n  dequeuePendingFrame(state, obj) {\n    removeObject(state.pendingFrames, obj);\n  },\n\n  setWatchStarted(state, obj) {\n    const existing = state.started.find((entry) => equivalentWatch(obj, entry));\n\n    if ( !existing ) {\n      addObject(state.started, obj);\n    }\n\n    delete state.inError[keyForSubscribe(obj)];\n  },\n\n  setWatchStopped(state, obj) {\n    const existing = state.started.find((entry) => equivalentWatch(obj, entry));\n\n    if ( existing ) {\n      removeObject(state.started, existing);\n    } else {\n      console.warn(\"Tried to remove a watch that doesn't exist\", obj); // eslint-disable-line no-console\n    }\n  },\n\n  setInError(state, { msg, reason }) {\n    const key = keyForSubscribe(msg);\n\n    state.inError[key] = reason;\n  },\n\n  clearInError(state, msg) {\n    const key = keyForSubscribe(msg);\n\n    delete state.inError[key];\n  },\n\n  resetSubscriptions(state) {\n    // Clear out socket state. This is only ever called from reset... which is always called after we `disconnect` above.\n    // This could probably be folded in to there\n    clear(state.started);\n    clear(state.pendingFrames);\n    clear(state.queue);\n    clearTimeout(state.queueTimer);\n    state.deferredRequests = {};\n    state.queueTimer = null;\n  },\n\n  clearFromQueue(state, type) {\n    // Remove anything in the queue that is a resource update for the given type\n    state.queue = state.queue.filter((item) => {\n      return item.body?.type !== type;\n    });\n  },\n};\n\n/**\n * Getters that cover cases 1 & 2 (see file description)\n */\nconst defaultGetters = {\n  inError: (state) => (obj) => {\n    return state.inError[keyForSubscribe(obj)];\n  },\n\n  watchStarted: (state) => (obj) => {\n    return !!state.started.find((entry) => equivalentWatch(obj, entry));\n  },\n\n  nextResourceVersion: (state, getters) => (type, id) => {\n    type = normalizeType(type);\n    let revision = 0;\n\n    if ( id ) {\n      const existing = getters['byId'](type, id);\n\n      revision = parseInt(existing?.metadata?.resourceVersion, 10);\n    }\n\n    if ( !revision ) {\n      const cache = state.types[type];\n\n      if ( !cache ) {\n        return null;\n      }\n\n      revision = cache.revision; // This is always zero.....\n\n      for ( const obj of cache.list ) {\n        if ( obj && obj.metadata ) {\n          const neu = parseInt(obj.metadata.resourceVersion, 10);\n\n          revision = Math.max(revision, neu);\n        }\n      }\n    }\n\n    if ( revision ) {\n      return revision;\n    }\n\n    return null;\n  },\n};\n\nexport const actions = {\n  ...sharedActions,\n  ...defaultActions,\n};\n\nexport const mutations = {\n  ...sharedMutations,\n  ...defaultMutations,\n};\n\nexport const getters = { ...defaultGetters };\n"],"mappings":"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","ignoreList":[]}]}