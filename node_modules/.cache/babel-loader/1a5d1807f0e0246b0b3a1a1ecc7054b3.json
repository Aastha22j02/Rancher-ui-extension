{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CAPI","CAPI_LABELS","MANAGEMENT","GenericPrompt","components","props","resources","type","Array","required","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","isRke2","Promise","all","$store","dispatch","MACHINE_DEPLOYMENT","MACHINE","NODE_POOL","NODE","stop","data","_this$resources$0$clu","cluster","provisioningCluster","_this$deleteType","deleteType","_this$deleteType2","_slicedToArray","ignoredControlPlane","safeControlePlaneMachinesToDelete","_this$deleteType3","_this$deleteType4","ignoredEtcd","safeMachinesToDelete","ignored","filter","i","allToDelete","getters","schema","length","config","title","t","applyMode","applyAction","remove","methods","allToDeleteByType","reduce","res","m","typed","push","others","machines","nodes","totalTypes","typesToDelete","ignoredType","pop","undefined","concat","_toConsumableArray","_this2","_callee2","poolInfo","flatArray","_callee2$","_context2","map","node","_node$norman","norman","doAction","abrupt","set","pool","get","Map","from","entries","_ref","_ref2","setAnnotation","DELETE_MACHINE","save","then","scalePool"],"sources":["node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue"],"sourcesContent":["<script>\nimport { CAPI as CAPI_LABELS } from '@shell/config/labels-annotations';\nimport { MANAGEMENT, CAPI } from '@shell/config/types';\nimport GenericPrompt from './GenericPrompt';\n\nexport default {\n  components: { GenericPrompt },\n\n  props: {\n    resources: {\n      type:     Array,\n      required: true\n    }\n  },\n\n  async fetch() {\n    if (this.isRke2) {\n      await Promise.all([\n        this.$store.dispatch('management/findAll', { type: CAPI.MACHINE_DEPLOYMENT }),\n        this.$store.dispatch('management/findAll', { type: CAPI.MACHINE })\n      ]);\n    } else {\n      await Promise.all([\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL }),\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE })\n      ]);\n    }\n  },\n\n  data() {\n    const isRke2 = this.resources[0].cluster?.isRke2;\n    const cluster = isRke2 ? this.resources[0].cluster : this.resources[0].provisioningCluster;\n\n    // Not all machines can be deleted, there must always be at least one left for roles control plane and etcd\n    // First ensure that at least one control plane exists... and then check from the remaining machines that at least one etcd exists\n    // This isn't optimisied, there may be cases that retaining a single machine with both roles would be better than retaining two with single roles\n    const [ignoredControlPlane, safeControlePlaneMachinesToDelete] = this.deleteType('isControlPlane', this.resources, cluster, isRke2);\n    const [ignoredEtcd, safeMachinesToDelete] = this.deleteType('isEtcd', safeControlePlaneMachinesToDelete, cluster, isRke2);\n    const ignored = [ignoredControlPlane, ignoredEtcd].filter((i) => !!i);\n\n    return {\n      cluster,\n      isRke2,\n      allToDelete: this.resources,\n      safeMachinesToDelete,\n      ignored,\n      type:        this.$store.getters['type-map/labelFor'](this.resources[0].schema, this.resources.length),\n      config:      {\n        title:       this.t('promptRemove.title'),\n        applyMode:   'delete',\n        applyAction: this.remove,\n      }\n    };\n  },\n\n  methods: {\n    deleteType(type, allToDelete, cluster, isRke2) {\n      const allToDeleteByType = allToDelete.reduce((res, m) => {\n        if (m[type]) {\n          res.typed.push(m);\n        } else {\n          res.others.push(m);\n        }\n\n        return res;\n      }, { typed: [], others: [] });\n\n      const machines = isRke2 ? cluster.machines : cluster.nodes;\n      const totalTypes = machines.filter((m) => m[type]).length;\n      const typesToDelete = allToDeleteByType.typed.length;\n      // If we're attempting to remove all control plan machines.... ignore one\n      const ignoredType = totalTypes - typesToDelete === 0 ? allToDeleteByType.typed.pop() : undefined;\n      const safeMachinesToDelete = [...allToDeleteByType.typed, ...allToDeleteByType.others];\n\n      return [ignoredType, safeMachinesToDelete];\n    },\n\n    async remove() {\n      if (!this.isRke2) {\n        await Promise.all(this.safeMachinesToDelete.map((node) => {\n          return node.norman?.doAction('scaledown');\n        }));\n\n        return;\n      }\n\n      // Group machines into pools\n      const poolInfo = this.safeMachinesToDelete.reduce((res, m) => {\n        res.set(m.pool, res.get(m.pool) || []);\n        res.get(m.pool).push(m);\n\n        return res;\n      }, new Map());\n\n      // Mark all machines for deletion and then scale down their pool to the new size\n      const flatArray = Array.from(poolInfo.entries());\n\n      await Promise.all(flatArray.map(([pool, machines]) => {\n        return Promise\n          .all(machines.map((m) => {\n            m.setAnnotation(CAPI_LABELS.DELETE_MACHINE, 'true');\n\n            return m.save();\n          }))\n          .then(() => pool.scalePool(-machines.length, false));\n      }));\n\n      // Pool scale info is kept in the cluster itself, so now we've made the changes we can save them\n      await this.cluster.save();\n    }\n  }\n};\n</script>\n\n<template>\n  <GenericPrompt\n    v-bind=\"config\"\n    @close=\"$emit('close')\"\n  >\n    <template slot=\"body\">\n      <div class=\"pl-10 pr-10 mt-20 mb-20 body\">\n        <div v-if=\"allToDelete.length === 1\">\n          {{ t('promptRemove.attemptingToRemove', { type }) }} <b>{{ safeMachinesToDelete[0].nameDisplay }}</b>\n        </div>\n        <div v-else>\n          {{ t('promptScaleMachineDown.attemptingToRemove', { type, count: allToDelete.length }, true) }}\n        </div>\n        <div\n          v-if=\"ignored.length\"\n          class=\"retained-machine\"\n        >\n          <span class=\"mb-20\">{{ t('promptScaleMachineDown.retainedMachine1') }}</span>\n          <span\n            v-for=\"i in ignored\"\n            :key=\"i.nameDisplay\"\n            v-clean-html=\"t('promptScaleMachineDown.retainedMachine2', { name: i.nameDisplay }, true)\"\n          />\n        </div>\n      </div>\n    </template>\n  </GenericPrompt>\n</template>\n\n<style lang='scss' scoped>\n  .body {\n    div:not(:last-of-type) {\n      padding-bottom: 15px;\n    }\n    .retained-machine {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAAA,IAAA,IAAAC,WAAA;AACA,SAAAC,UAAA,EAAAF,IAAA;AACA,OAAAG,aAAA;AAEA;EACAC,UAAA;IAAAD,aAAA,EAAAA;EAAA;EAEAE,KAAA;IACAC,SAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,QAAA;IACA;EACA;EAEAC,KAAA,WAAAA,MAAA;IAAA,IAAAC,KAAA;IAAA,OAAAC,iBAAA,cAAAC,mBAAA,CAAAC,IAAA,UAAAC,QAAA;MAAA,OAAAF,mBAAA,CAAAG,IAAA,UAAAC,SAAAC,QAAA;QAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;UAAA;YAAA,KACAT,KAAA,CAAAU,MAAA;cAAAH,QAAA,CAAAE,IAAA;cAAA;YAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OACAE,OAAA,CAAAC,GAAA,EACAZ,KAAA,CAAAa,MAAA,CAAAC,QAAA;cAAAlB,IAAA,EAAAP,IAAA,CAAA0B;YAAA,IACAf,KAAA,CAAAa,MAAA,CAAAC,QAAA;cAAAlB,IAAA,EAAAP,IAAA,CAAA2B;YAAA,GACA;UAAA;YAAAT,QAAA,CAAAE,IAAA;YAAA;UAAA;YAAAF,QAAA,CAAAE,IAAA;YAAA,OAEAE,OAAA,CAAAC,GAAA,EACAZ,KAAA,CAAAa,MAAA,CAAAC,QAAA;cAAAlB,IAAA,EAAAL,UAAA,CAAA0B;YAAA,IACAjB,KAAA,CAAAa,MAAA,CAAAC,QAAA;cAAAlB,IAAA,EAAAL,UAAA,CAAA2B;YAAA,GACA;UAAA;UAAA;YAAA,OAAAX,QAAA,CAAAY,IAAA;QAAA;MAAA,GAAAf,OAAA;IAAA;EAEA;EAEAgB,IAAA,WAAAA,KAAA;IAAA,IAAAC,qBAAA;IACA,IAAAX,MAAA,IAAAW,qBAAA,QAAA1B,SAAA,IAAA2B,OAAA,cAAAD,qBAAA,uBAAAA,qBAAA,CAAAX,MAAA;IACA,IAAAY,OAAA,GAAAZ,MAAA,QAAAf,SAAA,IAAA2B,OAAA,QAAA3B,SAAA,IAAA4B,mBAAA;;IAEA;IACA;IACA;IACA,IAAAC,gBAAA,QAAAC,UAAA,wBAAA9B,SAAA,EAAA2B,OAAA,EAAAZ,MAAA;MAAAgB,iBAAA,GAAAC,cAAA,CAAAH,gBAAA;MAAAI,mBAAA,GAAAF,iBAAA;MAAAG,iCAAA,GAAAH,iBAAA;IACA,IAAAI,iBAAA,QAAAL,UAAA,WAAAI,iCAAA,EAAAP,OAAA,EAAAZ,MAAA;MAAAqB,iBAAA,GAAAJ,cAAA,CAAAG,iBAAA;MAAAE,WAAA,GAAAD,iBAAA;MAAAE,oBAAA,GAAAF,iBAAA;IACA,IAAAG,OAAA,IAAAN,mBAAA,EAAAI,WAAA,EAAAG,MAAA,WAAAC,CAAA;MAAA,SAAAA,CAAA;IAAA;IAEA;MACAd,OAAA,EAAAA,OAAA;MACAZ,MAAA,EAAAA,MAAA;MACA2B,WAAA,OAAA1C,SAAA;MACAsC,oBAAA,EAAAA,oBAAA;MACAC,OAAA,EAAAA,OAAA;MACAtC,IAAA,OAAAiB,MAAA,CAAAyB,OAAA,2BAAA3C,SAAA,IAAA4C,MAAA,OAAA5C,SAAA,CAAA6C,MAAA;MACAC,MAAA;QACAC,KAAA,OAAAC,CAAA;QACAC,SAAA;QACAC,WAAA,OAAAC;MACA;IACA;EACA;EAEAC,OAAA;IACAtB,UAAA,WAAAA,WAAA7B,IAAA,EAAAyC,WAAA,EAAAf,OAAA,EAAAZ,MAAA;MACA,IAAAsC,iBAAA,GAAAX,WAAA,CAAAY,MAAA,WAAAC,GAAA,EAAAC,CAAA;QACA,IAAAA,CAAA,CAAAvD,IAAA;UACAsD,GAAA,CAAAE,KAAA,CAAAC,IAAA,CAAAF,CAAA;QACA;UACAD,GAAA,CAAAI,MAAA,CAAAD,IAAA,CAAAF,CAAA;QACA;QAEA,OAAAD,GAAA;MACA;QAAAE,KAAA;QAAAE,MAAA;MAAA;MAEA,IAAAC,QAAA,GAAA7C,MAAA,GAAAY,OAAA,CAAAiC,QAAA,GAAAjC,OAAA,CAAAkC,KAAA;MACA,IAAAC,UAAA,GAAAF,QAAA,CAAApB,MAAA,WAAAgB,CAAA;QAAA,OAAAA,CAAA,CAAAvD,IAAA;MAAA,GAAA4C,MAAA;MACA,IAAAkB,aAAA,GAAAV,iBAAA,CAAAI,KAAA,CAAAZ,MAAA;MACA;MACA,IAAAmB,WAAA,GAAAF,UAAA,GAAAC,aAAA,SAAAV,iBAAA,CAAAI,KAAA,CAAAQ,GAAA,KAAAC,SAAA;MACA,IAAA5B,oBAAA,MAAA6B,MAAA,CAAAC,kBAAA,CAAAf,iBAAA,CAAAI,KAAA,GAAAW,kBAAA,CAAAf,iBAAA,CAAAM,MAAA;MAEA,QAAAK,WAAA,EAAA1B,oBAAA;IACA;IAEAa,MAAA,WAAAA,OAAA;MAAA,IAAAkB,MAAA;MAAA,OAAA/D,iBAAA,cAAAC,mBAAA,CAAAC,IAAA,UAAA8D,SAAA;QAAA,IAAAC,QAAA,EAAAC,SAAA;QAAA,OAAAjE,mBAAA,CAAAG,IAAA,UAAA+D,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAA7D,IAAA,GAAA6D,SAAA,CAAA5D,IAAA;YAAA;cAAA,IACAuD,MAAA,CAAAtD,MAAA;gBAAA2D,SAAA,CAAA5D,IAAA;gBAAA;cAAA;cAAA4D,SAAA,CAAA5D,IAAA;cAAA,OACAE,OAAA,CAAAC,GAAA,CAAAoD,MAAA,CAAA/B,oBAAA,CAAAqC,GAAA,WAAAC,IAAA;gBAAA,IAAAC,YAAA;gBACA,QAAAA,YAAA,GAAAD,IAAA,CAAAE,MAAA,cAAAD,YAAA,uBAAAA,YAAA,CAAAE,QAAA;cACA;YAAA;cAAA,OAAAL,SAAA,CAAAM,MAAA;YAAA;cAKA;cACAT,QAAA,GAAAF,MAAA,CAAA/B,oBAAA,CAAAgB,MAAA,WAAAC,GAAA,EAAAC,CAAA;gBACAD,GAAA,CAAA0B,GAAA,CAAAzB,CAAA,CAAA0B,IAAA,EAAA3B,GAAA,CAAA4B,GAAA,CAAA3B,CAAA,CAAA0B,IAAA;gBACA3B,GAAA,CAAA4B,GAAA,CAAA3B,CAAA,CAAA0B,IAAA,EAAAxB,IAAA,CAAAF,CAAA;gBAEA,OAAAD,GAAA;cACA,OAAA6B,GAAA,KAEA;cACAZ,SAAA,GAAAtE,KAAA,CAAAmF,IAAA,CAAAd,QAAA,CAAAe,OAAA;cAAAZ,SAAA,CAAA5D,IAAA;cAAA,OAEAE,OAAA,CAAAC,GAAA,CAAAuD,SAAA,CAAAG,GAAA,WAAAY,IAAA;gBAAA,IAAAC,KAAA,GAAAxD,cAAA,CAAAuD,IAAA;kBAAAL,IAAA,GAAAM,KAAA;kBAAA5B,QAAA,GAAA4B,KAAA;gBACA,OAAAxE,OAAA,CACAC,GAAA,CAAA2C,QAAA,CAAAe,GAAA,WAAAnB,CAAA;kBACAA,CAAA,CAAAiC,aAAA,CAAA9F,WAAA,CAAA+F,cAAA;kBAEA,OAAAlC,CAAA,CAAAmC,IAAA;gBACA,IACAC,IAAA;kBAAA,OAAAV,IAAA,CAAAW,SAAA,EAAAjC,QAAA,CAAAf,MAAA;gBAAA;cACA;YAAA;cAAA6B,SAAA,CAAA5D,IAAA;cAAA,OAGAuD,MAAA,CAAA1C,OAAA,CAAAgE,IAAA;YAAA;YAAA;cAAA,OAAAjB,SAAA,CAAAlD,IAAA;UAAA;QAAA,GAAA8C,QAAA;MAAA;IACA;EACA;AACA","ignoreList":[]}]}