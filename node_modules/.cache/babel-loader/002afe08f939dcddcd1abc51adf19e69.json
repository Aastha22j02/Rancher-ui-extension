{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/store/type-map.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/store/type-map.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZnJvbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdG9Db25zdW1hYmxlQXJyYXkiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCBfdHlwZW9mIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3R5cGVvZiI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9kZWZpbmVQcm9wZXJ0eSI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIi9ob21lL3VidW50dS9zdXNlY29uLTIwMjQtZXh0LWRlbW8vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL3JlZ2VuZXJhdG9yL2luZGV4LmpzIjsKaW1wb3J0ICJyZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiOwpmdW5jdGlvbiBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyLCBlKSB7IHZhciB0ID0gInVuZGVmaW5lZCIgIT0gdHlwZW9mIFN5bWJvbCAmJiByW1N5bWJvbC5pdGVyYXRvcl0gfHwgclsiQEBpdGVyYXRvciJdOyBpZiAoIXQpIHsgaWYgKEFycmF5LmlzQXJyYXkocikgfHwgKHQgPSBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkocikpIHx8IGUgJiYgciAmJiAibnVtYmVyIiA9PSB0eXBlb2Ygci5sZW5ndGgpIHsgdCAmJiAociA9IHQpOyB2YXIgX24gPSAwLCBGID0gZnVuY3Rpb24gRigpIHt9OyByZXR1cm4geyBzOiBGLCBuOiBmdW5jdGlvbiBuKCkgeyByZXR1cm4gX24gPj0gci5sZW5ndGggPyB7IGRvbmU6ICEwIH0gOiB7IGRvbmU6ICExLCB2YWx1ZTogcltfbisrXSB9OyB9LCBlOiBmdW5jdGlvbiBlKHIpIHsgdGhyb3cgcjsgfSwgZjogRiB9OyB9IHRocm93IG5ldyBUeXBlRXJyb3IoIkludmFsaWQgYXR0ZW1wdCB0byBpdGVyYXRlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cbkluIG9yZGVyIHRvIGJlIGl0ZXJhYmxlLCBub24tYXJyYXkgb2JqZWN0cyBtdXN0IGhhdmUgYSBbU3ltYm9sLml0ZXJhdG9yXSgpIG1ldGhvZC4iKTsgfSB2YXIgbywgYSA9ICEwLCB1ID0gITE7IHJldHVybiB7IHM6IGZ1bmN0aW9uIHMoKSB7IHQgPSB0LmNhbGwocik7IH0sIG46IGZ1bmN0aW9uIG4oKSB7IHZhciByID0gdC5uZXh0KCk7IHJldHVybiBhID0gci5kb25lLCByOyB9LCBlOiBmdW5jdGlvbiBlKHIpIHsgdSA9ICEwLCBvID0gcjsgfSwgZjogZnVuY3Rpb24gZigpIHsgdHJ5IHsgYSB8fCBudWxsID09IHQucmV0dXJuIHx8IHQucmV0dXJuKCk7IH0gZmluYWxseSB7IGlmICh1KSB0aHJvdyBvOyB9IH0gfTsgfQpmdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkociwgYSkgeyBpZiAocikgeyBpZiAoInN0cmluZyIgPT0gdHlwZW9mIHIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShyLCBhKTsgdmFyIHQgPSB7fS50b1N0cmluZy5jYWxsKHIpLnNsaWNlKDgsIC0xKTsgcmV0dXJuICJPYmplY3QiID09PSB0ICYmIHIuY29uc3RydWN0b3IgJiYgKHQgPSByLmNvbnN0cnVjdG9yLm5hbWUpLCAiTWFwIiA9PT0gdCB8fCAiU2V0IiA9PT0gdCA/IEFycmF5LmZyb20ocikgOiAiQXJndW1lbnRzIiA9PT0gdCB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdCh0KSA/IF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIDogdm9pZCAwOyB9IH0KZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkociwgYSkgeyAobnVsbCA9PSBhIHx8IGEgPiByLmxlbmd0aCkgJiYgKGEgPSByLmxlbmd0aCk7IGZvciAodmFyIGUgPSAwLCBuID0gQXJyYXkoYSk7IGUgPCBhOyBlKyspIG5bZV0gPSByW2VdOyByZXR1cm4gbjsgfQppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuZGVzY3JpcHRpb24uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5jb25jYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC1pbmRleC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZsYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mbGF0LW1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNwbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnVuc2NvcGFibGVzLmZsYXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS51bnNjb3BhYmxlcy5mbGF0LW1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuYXNzaWduLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmVudHJpZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3Qua2V5cy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudmFsdWVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLm1hdGNoLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3RhcnRzLXdpdGguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcudHJpbS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwpmdW5jdGlvbiBvd25LZXlzKGUsIHIpIHsgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIG8gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGUpOyByICYmIChvID0gby5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgcikuZW51bWVyYWJsZTsgfSkpLCB0LnB1c2guYXBwbHkodCwgbyk7IH0gcmV0dXJuIHQ7IH0KZnVuY3Rpb24gX29iamVjdFNwcmVhZChlKSB7IGZvciAodmFyIHIgPSAxOyByIDwgYXJndW1lbnRzLmxlbmd0aDsgcisrKSB7IHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTsgciAlIDIgPyBvd25LZXlzKE9iamVjdCh0KSwgITApLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgX2RlZmluZVByb3BlcnR5KGUsIHIsIHRbcl0pOyB9KSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoZSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnModCkpIDogb3duS2V5cyhPYmplY3QodCkpLmZvckVhY2goZnVuY3Rpb24gKHIpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIHIsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodCwgcikpOyB9KTsgfSByZXR1cm4gZTsgfQovLyBUaGlzIGZpbGUgaGFzIDIgc2VjdGlvbnMgdGhhdCBjb250cm9sIGdldHRpbmcgYW5kIHVzaW5nIHNwZWNpYWxpemF0aW9ucyBvZiBwYXJ0aWN1bGFyIHR5cGVzCi8vIG92ZXIgdGhlIGdlbmVyaWMgaW5mbyB0aGF0IGlzIHNwZWNpZmllZCBvciBnZW5lcmF0ZWQgZnJvbSBzY2hlbWFzLgovLwovLyAxKSBHZXR0aW5nIGluZm8gYWJvdXQgdHlwZXMKLy8KLy8gbGFiZWxGb3Ioc2NoZW1hLCBjb3VudCkgICAgR2V0IHRoZSBkaXNwbGF5IGxhYmVsIGZvciBhIHNjaGVtYS4gIENvdW50IGlzIChpbiBFbmdsaXNoKSAxIG9yIG5vdC0xIGZvciBwbHVyYWxpemluZwovLyBncm91cExhYmVsRm9yKHNjaGVtYSkgICAgICBHZXQgdGhlIGxhYmVsIGZvciB0aGUgQVBJIGdyb3VwIG9mIHRoaXMgc2NoZW1hJ3MgdHlwZQovLyBpc0lnbm9yZWQoc2NoZW1hKSAgICAgICAgICBSZXR1cm5zIHRydWUgaWYgdGhpcyB0eXBlIHNob3VsZCBiZSBoaWRkZW4gZnJvbSB0aGUgdHJlZQovLyBncm91cEZvckJhc2ljVHlwZShzY2hlbWEpICBSZXR1cm5zIHRoZSBncm91cCBhIHR5cGUgc2hvdWxkIGJlIHNob3duIGluIGJhc2ljIHZpZXcsIG9yIGZhbHNlLXkgaWYgaXQgc2hvdWxkbid0IGJlIHNob3duLgovLyB0eXBlV2VpZ2h0Rm9yKHR5cGUsIGZvckJhc2ljKSAgIEdldCB0aGUgd2VpZ2h0IHZhbHVlIGZvciBhIHBhcnRpY3VsYXIgdHlwZSBsYWJlbAovLyBncm91cFdlaWdodEZvcihncm91cCwgZm9yQmFzaWMpIEdldCB0aGUgd2VpZ2h0IHZhbHVlIGZvciBhIHBhcnRpY3VsYXIgZ3JvdXAKLy8gaGVhZGVyc0ZvcihzY2hlbWEpICAgICAgICAgUmV0dXJucyB0aGUgY29sdW1uIGRlZmluaXRpb25zIGZvciBhIHR5cGUgdG8gZ2l2ZSB0byBTb3J0YWJsZVRhYmxlCi8vIGFjdGl2ZVByb2R1Y3RzKCkgICAgICAgICAgIFJldHVybnMgdGhlIGxpc3Qgb2YgcHJvZHVjdHMgdGhhdCBhcmUgaW5zdGFsbGVkIGFuZCBzaG91bGQgYmUgc2hvd24KLy8KLy8gMikgRGV0ZWN0aW5nIGFuZCB1c2luZyBjdXN0b20gbGlzdC9kZXRhaWwvZWRpdC9oZWFkZXIgY29tcG9uZW50cwovLwovLyBoYXNDdXN0b21MaXN0KHR5cGUpICAgICAgICAgICAgICBEb2VzIHR5cGUgaGF2ZSBhIGN1c3RvbSBsaXN0IGltcGxlbWVudGF0aW9uPwovLyBoYXNDdXN0b21EZXRhaWwodHlwZVssc3ViVHlwZV0pICBEb2VzIHR5cGUgaGF2ZSBhIGN1c3RvbSBkZXRhaWwgaW1wbGVtZW50YXRpb24/Ci8vIGhhc0N1c3RvbUVkaXQodHlwZVssc3ViVHlwZV0pICAgIERvZXMgdHlwZSBoYXZlIGEgY3VzdG9tIGVkaXQgaW1wbGVtZW50YXRpb24/Ci8vIGltcG9ydExpc3QodHlwZSkgICAgICAgICAgICAgICAgIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGxpc3QgY29tcG9uZW50IGZvciB0eXBlCi8vIGltcG9ydERldGFpbCh0eXBlWyxzdWJUeXBlXSkgICAgIFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gdGhlIGRldGFpbCBjb21wb25lbnQgZm9yIHR5cGUKLy8gaW1wb3J0RWRpdCh0eXBlWyxzdWJUeXBlXSkgICAgICAgUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgZWRpdCBjb21wb25lbnQgZm9yIHR5cGUKLy8gb3B0aW9uc0ZvcihzY2hlbWFPclR5cGUpICAgICAgICAgUmV0dXJuIHRoZSBjb25maWd1cmVkIG9wdGlvbnMgZm9yIGEgdHlwZSAoZnJvbSBjb25maWd1cmVUeXBlKQovLwovLyAzKSBDaGFuZ2luZyBzcGVjaWFsaXphdGlvbiBpbmZvIGFib3V0IGEgdHlwZQovLyBGb3IgYWxsOgovLyAgIGxldCB7IHRoaW5nWW91V2FudCB9ID0gRFNMKGluc3RhbmNlT2ZUaGVTdG9yZSwgJ3Byb2R1Y3QnKTsKLy8KLy8gcHJvZHVjdCggICAgICAgICAgICAgICAgICAgQWRkIGEgcHJvZHVjdCBpbnRvIHRoZSBuYXYKLy8gICByZW1vdmFibGUsICAgICAgICAgICAgICAgLS0gSXMgdGhlIHByb2R1Y3QgcmVtb3ZhYmxlICh0cnVlKSBvciBidWlsdC1pbiAoZmFsc2UpLgovLyAgIHdlaWdodCwgICAgICAgICAgICAgICAgICAtLSBTb3J0IG9yZGVyIGFuZCBkaXZpZGVyIHNlY3Rpb25zIGluIHRoZSBwcm9kdWN0IG1lbnUuICAzPWdsb2JhbCAoZmxlZXQsIGVjbSksIDI9YWx3YXlzIG9uIChhcHBzLCBleHBsb3JlcikgMT1vdGhlcgovLyAgIHNob3dDbHVzdGVyU3dpdGNoZXIsICAgICAtLSBTaG93IHRoZSBjbHVzdGVyIHN3aXRjaGVyIGluIHRoZSBoZWFkZXIgKGRlZmF1bHQgdHJ1ZSkKLy8gICBzaG93TmFtZXNwYWNlRmlsdGVyLCAgICAgLS0gU2hvdyB0aGUgbmFtZXNwYWNlIGZpbHRlciBpbiB0aGUgaGVhZGVyIChkZWZhdWx0IGZhbHNlKQovLyAgIHNob3dXb3Jrc3BhY2VTd2l0Y2hlciwgICAtLSBTaG93IHRoZSB3b3Jrc3BhY2Ugc3dpdGNoZXIgaW4gdGhlIGhlYWRlciAoY29uZmxpY3RzIHdpdGggbmFtZXNwYWNlKSAoZGVmYXVsdCBmYWxzZSkKLy8gICBpZkhhdmUsICAgICAgICAgICAgICAgICAgLS0gU2hvdyB0aGlzIHByb2R1Y3Qgb25seSBpZiB0aGUgZ2l2ZW4gY2FwYWJpbGl0eSBpcyBhdmFpbGFibGUKLy8gICBpZkhhdmVHcm91cCwgICAgICAgICAgICAgLS0gU2hvdyB0aGlzIHByb2R1Y3Qgb25seSBpZiB0aGUgZ2l2ZW4gZ3JvdXAgZXhpc3RzIGluIHRoZSBzdG9yZSBbaW5TdG9yZV0KLy8gICBpZkhhdmVUeXBlLCAgICAgICAgICAgICAgLS0gU2hvdyB0aGlzIHByb2R1Y3Qgb25seSBpZiB0aGUgZ2l2ZW4gdHlwZSBleGlzdHMgaW4gdGhlIHN0b3JlIFtpblN0b3JlXSwgVGhpcyBjYW4gYWxzbyBiZSBzcGVjaWZpZWQgYXMgYW4gb2JqZWN0IHsgdHlwZTogVFlQRSwgc3RvcmU6ICdtYW5hZ2VtZW50JyB9IGlmIHRoZSB0eXBlIGlzbid0IGluIHRoZSBjdXJyZW50IFtpblN0b3JlXQovLyAgIGlmSGF2ZVZlcmIsICAgICAgICAgICAgICAtLSBJbiBjb21iaW5hdGlvbiB3aXRoIGlmSGF2ZVRZcGUsIHNob3cgaXQgb25seSBpZiB0aGUgdHlwZSBhbHNvIGhhcyB0aGlzIGNvbGxlY3Rpb25NZXRob2QKLy8gICBpblN0b3JlLCAgICAgICAgICAgICAgICAgLS0gV2hpY2ggc3RvcmUgdG8gbG9vayBhdCBmb3IgaWYqIGFib3ZlIGFuZCB0aGUgbGVmdC1uYXYsIGRlZmF1bHRzIHRvICJjbHVzdGVyIgovLyAgIGluRXhwbG9yZXIsICAgICAgICAgICAgICAtLSBEZXRlcm1pbmVzIGlmIHRoZSBwcm9kdWN0IGlzIHRvIGJlIHNjb3BlZCB0byB0aGUgZXhwbG9yZXIKLy8gICBwdWJsaWMsICAgICAgICAgICAgICAgICAgLS0gSWYgdHJ1ZSwgc2hvdyB0byBhbGwgdXNlcnMuICBJZiBmYWxzZSwgb25seSBzaG93IHdoZW4gdGhlIERldmVsb3BlciBUb29scyBwcmVmIGlzIG9uIChkZWZhdWx0IHRydWUpCi8vICAgY2F0ZWdvcnksICAgICAgICAgICAgICAgIC0tIEdyb3VwIHRvIHNob3cgdGhlIHByb2R1Y3QgaW4gZm9yIHRoZSBuYXYgaGFtYnVyZ2VyIG1lbnUKLy8gICB0eXBlU3RvcmVNYXAsICAgICAgICAgICAgLS0gQW4gb2JqZWN0IG1hcHBpbmcgdHlwZXMgdG8gdGhlIHN0b3JlIHRoYXQgc2hvdWxkIGJlIHVzZWQgdG8gcmV0cmlldmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHR5cGUKLy8gICBoaWRlU3lzdGVtUmVzb3VyY2VzICAgICAgLS0gSGlkZSByZXNvdXJjZXMgaW4gbmFtZXNwYWNlcyB3aGVyZSBuYW1lc3BhY2UuaXNTeXN0ZW0gPT09IHRydWUsIG9yIGEgbmFtZXNwYWNlIG1hbmFnZWQgYnkgZmxlZXQgKHBlciBpdHMgYW5ub3RhdGlvbikgYW5kIGhpZGUgdGhvc2UgbmFtZXNwYWNlcyBmcm9tIG5zL3Byb2plY3QgbGlzdCBhbmQgbnNmaWx0ZXIgKGRlZmF1bHQgZmFsc2UpCi8vICAgaGlkZU5hbWVzcGFjZUxvY2F0aW9uICAgIC0tIEhpZGUgdGhlIG5hbWVzcGFjZSBsaW5rIGluIHRoZSBSZXNvdXJjZURldGFpbCBtYXN0aGVhZCBvZiBuYW1lc3BhY2VkIHJlc291cmNlcyBhbmQgaGlkZSB0aGUgRXhwbG9yZXJQcm9qZWN0c05hbWVzcGFjZXMgbmFtZXNwYWNlIGxpbmsgKGRlZmF1bHQgZmFsc2UpCi8vIH0pCi8vCi8vIGV4dGVybmFsTGluayhzdHJpbmdPckZuKSAgVGhlIHByb2R1Y3QgaGFzIGFuIGV4dGVybmFsIHBhZ2UgKGZ1bmN0aW9uIGdldHMgY29udGV4dCBvYmplY3QKLy8KLy8gdmlydHVhbFR5cGUob2JqKSAgICAgICAgICAgQWRkIGFuIGl0ZW0gdG8gdGhlIHRyZWUgdGhhdCBnb2VzIHRvIGEgcm91dGUgaW5zdGVhZCBvZiBhbiBhY3R1YWwgdHlwZS4KLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gIG9iaiBjYW4gY29udGFpbiBhbnl0aGluZyBpbiB0aGUgb2JqZWN0cyBnZXRUcmVlIHJldHVybnMuCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0tICBvYmogbXVzdCBoYXZlIGEgYG5hbWVgIHRoYXQgaXMgdW5pcXVlIGFtb25nIGFsbCB2aXJ0dWFsIHR5cGVzLgovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLSBgY2x1c3RlcmAgaXMgYXV0b21hdGljYWxseSBhZGRlZCB0byByb3V0ZS5wYXJhbXMgaWYgaXQgZXhpc3RzLgovLwovLyBzcG9vZmVkVHlwZShvYmopICAgICAgICAgICBDcmVhdGUgYSBmYWtlIHR5cGUgdGhhdCBjYW4gYmUgdHJlYXRlZCBsaWtlIGEgbm9ybWFsIHR5cGUKLy8KLy8gYmFzaWNUeXBlKCAgICAgICAgICAgICAgICAgTWFyayB0eXBlKHMpIGFzIGFsd2F5cyBzaG93biBpbiB0aGUgdG9wIG9mIHRoZSBuYXYKLy8gICB0eXBlKHMpLCAgICAgICAgICAgICAgICAgLS0gVHlwZSBuYW1lIG9yIGFycmF5IG9mIHR5cGUgbmFtZXMKLy8gICBncm91cCAgICAgICAgICAgICAgICAgICAgLS0gR3JvdXAgdG8gc2hvdyB0aGUgdHlwZShzKSB1bmRlcjsgZmFsc2UteSBmb3IgdG9wLWxldmVsLgovLyApCi8vIGJhc2ljVHlwZSggICAgICAgICAgICAgICAgIE1hcmsgYWxsIHR5cGVzIGluIGdyb3VwIGFzIGFsd2F5cyBzaG93biBpbiB0aGUgdG9wIG9mIHRoZSBuYXYKLy8gICBncm91cCwgICAgICAgICAgICAgICAgICAgLS0gR3JvdXAgdG8gc2hvdwovLyAgIGFzTGFiZWwgICAgICAgICAgICAgICAgICAtLSBMYWJlbCB0byBkaXNwbGF5IHRoZSBncm91cCBhczsgZmFsc2UteSBmb3IgdG9wLWxldmVsLgovLyApCi8vIGlnbm9yZVR5cGUodHlwZSkgICAgICAgICAgIE5ldmVyIHNob3cgdHlwZQovLyB3ZWlnaHRUeXBlKCAgICAgICAgICAgICAgICBTZXQgdGhlIHdlaWdodCAoc29ydGluZykgb3JkZXIgb2Ygb25lIG9yIG1vcmUgdHlwZXMKLy8gICB0eXBlT3JBcnJheU9mVHlwZXMsCi8vICAgd2VpZ2h0LCAgICAgICAgICAgICAgICAgIC0tIEhpZ2hlciBudW1iZXJzIGFyZSBzaG93biBmaXJzdC9oaWdoZXIgdXAgb24gdGhlIG5hdiB0cmVlCi8vICAgZm9yQmFzaWMgICAgICAgICAgICAgICAgIC0tIEFwcGx5IHRvIGJhc2ljIHR5cGUgaW5zdGVhZCBvZiByZWd1bGFyIHR5cGUgdHJlZQovLyApCi8vIG1hcFR5cGUoICAgICAgICAgICAgICAgICAgIFJlbWFwIGEgdHlwZSBpZCB0byBhIGRpc3BsYXkgbmFtZQovLyAgIG1hdGNoUmVnZXhPclN0cmluZywgICAgICAtLSBUeXBlIHRvIG1hdGNoLCBvciByZWdleCB0aGF0IG1hdGNoZXMgdHlwZXMKLy8gICByZXBsYWNlbWVudFN0cmluZ09yRm4sICAgLS0gU3RyaW5nIHRvIHJlcGxhY2UgdGhlIHR5cGUgd2l0aCwgb3IKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0gc3luYyBmdW5jdGlvbjogKHR5cGUsIGNhcHR1cmVkU3RyaW5nLCBzY2hlbWFPYmogPT4geyByZXR1cm4gJ25ldy10eXBlJzsgfQovLyAgIG1hcFdlaWdodCwgICAgICAgICAgICAgICAtLSBQcmlvcml0eSBmb3IgYXBwbHkgdGhpcyBtYXBwaW5nIChoaWdoZXIgbnVtYmVycyBhcHBsaWVkIGZpcnN0KQovLyAgIGNvbnRpbnVlT25NYXRjaCAgICAgICAgICAtLSBJZiB0cnVlLCBjb250aW51ZSBhcHBseWluZyB0byBoaXQgb3RoZXIgcnVsZXMgdGhhdCBtaWdodCBtYXRjaCB0aGUgbmV3IHR5cGUuCi8vICkKLy8gbW92ZVR5cGUoICAgICAgICAgICAgICAgICAgQ2hhbmdlIHRoZSBncm91cCBhIHR5cGUgaXMgaW4KLy8gICBtYXRjaFJlZ2V4T3JTdHJpbmcsICAgICAgLS0gVHlwZSB0byBtYXRjaCwgb3IgcmVnZXggdGhhdCBtYXRjaGVzIHR5cGVzCi8vICAgbmV3R3JvdXAsICAgICAgICAgICAgICAgIC0tIEdyb3VwIHRvIG1vdmUgdGhlIHR5cGUgaW50bwovLyAgIG1hcFdlaWdodCwgICAgICAgICAgICAgICAtLSBQcmlvcml0eSBmb3IgYXBwbHkgdGhpcyBtYXBwaW5nIChoaWdoZXIgbnVtYmVycyBhcHBsaWVkIGZpcnN0KQovLyApCi8vIGNvbXBvbmVudEZvclR5cGUoICAgICAgICAgIE1hcCBtYXRjaGluZyB0eXBlcyB0byBhIHNpbmdsZSBjb21wb25lbnQgbmFtZQovLyAoICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyBpcyBoZWxwZnVsIGlmIG11bHRpcGxlIHR5cGVzIHNob3VsZCBiZSByZW5kZXJlZCBieSBhIHNpbmdsZSBjb21wb25lbnQpCi8vICAgbWF0Y2hSZWdleE9yU3RyaW5nLCAgICAgIC0tIFR5cGUgdG8gbWF0Y2gsIG9yIHJlZ2V4IHRoYXQgbWF0Y2hlcyB0eXBlcwovLyAgIHJlcGxhY2VtZW50U3RyaW5nICAgICAgICAtLSBTdHJpbmcgdG8gcmVwbGFjZSB0aGUgdHlwZSB3aXRoCi8vICkKLy8gY29uZmlndXJlVHlwZSggICAgICAgICAgICBEaXNwbGF5IG9wdGlvbnMgZm9yIGEgcGFydGljdWxhciB0eXBlCi8vICAgdHlwZSwgICAgICAgICAgICAgICAgICAgIC0tIFR5cGUgdG8gYXBwbHkgdG8KLy8gIG9wdGlvbnMgICAgICAgICAgICAgICAgICAgLS0gT2JqZWN0IG9mIG9wdGlvbnMuICBEZWZhdWx0cy9TdXBwb3J0ZWQ6IHsKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDcmVhdGFibGU6IHRydWUsIC0tIElmIGZhbHNlLCBkaXNhYmxlIGNyZWF0ZSBldmVuIGlmIHNjaGVtYSBzYXlzIGl0J3MgYWxsb3dlZAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0VkaXRhYmxlOiB0cnVlLCAgLS0gRGl0dG8sIGZvciBlZGl0Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzUmVtb3ZhYmxlOiB0cnVlLCAgLS0gRGl0dG8sIGZvciByZW1vdmUvZGVsZXRlCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dTdGF0ZTogdHJ1ZSwgIC0tIElmIGZhbHNlLCBoaWRlIHN0YXRlIGluIGNvbHVtbnMgYW5kIG1hc3RoZWFkCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dBZ2U6IHRydWUsICAgIC0tIElmIGZhbHNlLCBoaWRlIGFnZSBpbiBjb2x1bW5zIGFuZCBtYXN0aGVhZAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlnVmlldzogdHJ1ZSAtLSBJZiBmYWxzZSwgaGlkZSBtYXN0aGVhZCBjb25maWcgYnV0dG9uIGluIHZpZXcgbW9kZQovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TGlzdE1hc3RoZWFkOiB0cnVlLCAtLSBJZiBmYWxzZSwgaGlkZSBtYXN0aGVhZCBpbiBsaXN0IHZpZXcKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuWWFtbDogdHJ1ZSwKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6IHVuZGVmaW5lZCAgICAgICAtLSBVc2UgdGhpcyByZXNvdXJjZSBpbiBSZXNvdXJjZURldGFpbHMgaW5zdGVhZAovLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZURldGFpbDogdW5kZWZpbmVkIC0tIFVzZSB0aGlzIHJlc291cmNlIHNwZWNpZmljYWxseSBmb3IgUmVzb3VyY2VEZXRhaWwncyBkZXRhaWwgY29tcG9uZW50Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlRWRpdDogdW5kZWZpbmVkICAgLS0gVXNlIHRoaXMgcmVzb3VyY2Ugc3BlY2lmaWNhbGx5IGZvciBSZXNvdXJjZURldGFpbCdzIGVkaXQgY29tcG9uZW50Ci8vICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGFnaW5hdGU6IHVuZGVmaW5lZCAtLSBVc2UgdGhpcyB0byBkZXBhZ2luYXRlIHJlcXVlc3RzIGZvciB0aGlzIHR5cGUKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VFZGl0TWFzdGhlYWQ6IHRydWUgICAtLSBTaG93IHRoZSBNYXN0aGVhZCBpbiB0aGUgZWRpdCByZXNvdXJjZSBjb21wb25lbnQKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdG9tUm91dGU6IHVuZGVmaW5lZCwKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzR3JhcGg6IHVuZGVmaW5lZCAgIC0tIElmIHRydWUsIHJlbmRlciBGb3JjZURpcmVjdGVkVHJlZUNoYXJ0IGdyYXBoIChBVFRFTlRJT046IG9wdGlvbiBncmFwaENvbmZpZyBpcyBuZWVkZWQgYWxzbyEhISkKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhcGhDb25maWc6IHVuZGVmaW5lZCAgIC0tIFVzZSB0aGlzIHRvIHBhc3MgYWxvbmcgdGhlIGdyYXBoIGNvbmZpZ3VyYXRpb24KLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90RmlsdGVyTmFtZXNwYWNlOiAgdW5kZWZpbmVkIC0tIERlZmluZSBuYW1lc3BhY2VzIHRoYXQgZG8gbm90IG5lZWQgdG8gYmUgZmlsdGVyZWQKLy8gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxPbmx5OiBGYWxzZSAtLSBIaWRlIHRoaXMgdHlwZSBmcm9tIHRoZSBuYXYvc2VhcmNoIGJhciBvbiBkb3duc3RyZWFtIGNsdXN0ZXJzCi8vICAgICAgICAgICAgICAgICAgICAgICAgICAgfQovLyApCi8vIGlnbm9yZUdyb3VwKGdyb3VwKTogICAgICAgIE5ldmVyIHNob3cgZ3JvdXAgb3IgYW55IHR5cGVzIGluIGl0Ci8vIHdlaWdodEdyb3VwKCAgICAgICAgICAgICAgIFNldCB0aGUgd2VpZ2h0IChzb3J0aW5nKSBvZiBvbmUgb3IgbW9yZSBncm91cHMKLy8gICBncm91cE9yQXJyYXlPZkdyb3VwcywgICAgLS0gc2VlIHdlaWdodFR5cGUuLi4KLy8gICB3ZWlnaHQKLy8gKQovLyBzZXRHcm91cERlZmF1bHRUeXBlKCAgICAgICBTZXQgdGhlIGRlZmF1bHQgY2hpbGQgdHlwZSB0byBzaG93IHdoZW4gdGhlIGdyb3VwIGlzIGV4cGFuZGVkCi8vICAgZ3JvdXBPckFycmF5T2ZHcm91cHMsICAgIC0tIHNlZSBzZXRHcm91cERlZmF1bHRUeXBlLi4uCi8vICAgZGVmYXVsdFR5cGUKLy8gKQovLyBtYXBHcm91cCggICAgICAgICAgICAgICAgICBSZW1hcCBhIGdyb3VwIG5hbWUgdG8gYSBkaXNwbGF5IG5hbWUKLy8gICBtYXRjaFJlZ2V4T3JTdHJpbmcsICAgICAgLS0gc2VlIG1hcFR5cGUuLi4KLy8gICByZXBsYWNlbWVudFN0cmluZywKLy8gICBtYXBXZWlnaHQsCi8vICAgY29udGludWVPbk1hdGNoCi8vICkKaW1wb3J0IHsgQUdFLCBOQU1FLCBOQU1FU1BBQ0UgYXMgTkFNRVNQQUNFX0NPTCwgU1RBVEUgfSBmcm9tICdAc2hlbGwvY29uZmlnL3RhYmxlLWhlYWRlcnMnOwppbXBvcnQgeyBDQVRBTE9HLCBDT1VOVCwgU0NIRU1BLCBNQU5BR0VNRU5ULCBOQU1FU1BBQ0UgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKaW1wb3J0IHsgVklFV19JTl9BUEksIEVYUEFOREVEX0dST1VQUywgRkFWT1JJVEVfVFlQRVMgfSBmcm9tICdAc2hlbGwvc3RvcmUvcHJlZnMnOwppbXBvcnQgeyBhZGRPYmplY3QsIGZpbmRCeSwgaW5zZXJ0QXQsIGlzQXJyYXksIHJlbW92ZU9iamVjdCwgZmlsdGVyQnkgfSBmcm9tICdAc2hlbGwvdXRpbHMvYXJyYXknOwppbXBvcnQgeyBjbG9uZSwgZ2V0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IGVuc3VyZVJlZ2V4LCBlc2NhcGVIdG1sLCBlc2NhcGVSZWdleCwgdWNGaXJzdCwgcGx1cmFsaXplIH0gZnJvbSAnQHNoZWxsL3V0aWxzL3N0cmluZyc7CmltcG9ydCB7IGltcG9ydENoYXJ0IGFzIF9pbXBvcnRDaGFydCwgaW1wb3J0TGlzdCBhcyBfaW1wb3J0TGlzdCwgaW1wb3J0RGV0YWlsIGFzIF9pbXBvcnREZXRhaWwsIGltcG9ydEVkaXQgYXMgX2ltcG9ydEVkaXQsIGxpc3RQcm9kdWN0cywgbG9hZFByb2R1Y3QsIGltcG9ydEN1c3RvbVByb21wdFJlbW92ZSBhcyBfaW1wb3J0Q3VzdG9tUHJvbXB0UmVtb3ZlLCByZXNvbHZlTGlzdCwgcmVzb2x2ZUVkaXQsIHJlc29sdmVXaW5kb3dDb21wb25lbnQsIGltcG9ydFdpbmRvd0NvbXBvbmVudCBhcyBfaW1wb3J0V2luZG93Q29tcG9uZW50LCBpbXBvcnRMb2dpbiBhcyBfaW1wb3J0TG9naW4sIHJlc29sdmVDaGFydCwgcmVzb2x2ZURldGFpbCwgaW1wb3J0RGlhbG9nIGFzIF9pbXBvcnREaWFsb2csIGltcG9ydE1hY2hpbmVDb25maWcgYXMgX2ltcG9ydE1hY2hpbmVDb25maWcsIHJlc29sdmVNYWNoaW5lQ29uZmlnQ29tcG9uZW50LCByZXNvbHZlQ2xvdWRDcmVkZW50aWFsQ29tcG9uZW50LCBpbXBvcnRDbG91ZENyZWRlbnRpYWwgYXMgX2ltcG9ydENsb3VkQ3JlZGVudGlhbCB9IGZyb20gJ0BzaGVsbC91dGlscy9keW5hbWljLWltcG9ydGVyJzsKaW1wb3J0IHsgTkFNRSBhcyBFWFBMT1JFUiB9IGZyb20gJ0BzaGVsbC9jb25maWcvcHJvZHVjdC9leHBsb3Jlcic7CmltcG9ydCBpc09iamVjdCBmcm9tICdsb2Rhc2gvaXNPYmplY3QnOwppbXBvcnQgeyBub3JtYWxpemVUeXBlIH0gZnJvbSAnQHNoZWxsL3BsdWdpbnMvZGFzaGJvYXJkLXN0b3JlL25vcm1hbGl6ZSc7CmltcG9ydCB7IHNvcnRCeSB9IGZyb20gJ0BzaGVsbC91dGlscy9zb3J0JzsKaW1wb3J0IHsgaGF2ZVYxTW9uaXRvcmluZywgaGF2ZVYyTW9uaXRvcmluZyB9IGZyb20gJ0BzaGVsbC91dGlscy9tb25pdG9yaW5nJzsKaW1wb3J0IHsgTkVVX1ZFQ1RPUl9OQU1FU1BBQ0UgfSBmcm9tICdAc2hlbGwvY29uZmlnL3Byb2R1Y3QvbmV1dmVjdG9yJzsKZXhwb3J0IHZhciBOQU1FU1BBQ0VEID0gJ25hbWVzcGFjZWQnOwpleHBvcnQgdmFyIENMVVNURVJfTEVWRUwgPSAnY2x1c3Rlcic7CmV4cG9ydCB2YXIgQk9USCA9ICdib3RoJzsKZXhwb3J0IHZhciBUWVBFX01PREVTID0gewogIC8qKgogICAqIGFsbFR5cGVzIHVzYWdlOiBBbGwgcmVzb3VyY2UgdHlwZXMKICAgKgogICAqIGdldFRyZWUgdXNhZ2U6IFJlbW92ZSBpZ25vcmVkIHNjaGVtYXMsIHJlc291cmNlcyBub3QgYXBwbGljYWJsZSB0byBucywgZXRjCiAgICovCiAgQUxMOiAnYWxsJywKICAvKioKICAgKiBSZXByZXNlbnRzIHJlc291cmNlIHR5cGVzIHRoYXQgc2hvdWxkIGJlIHNob3duIGF0IHRoZSB0b3Agb2YgdGhlIHNpZGUgbmF2LgogICAqCiAgICogRm9yIGV4YW1wbGUgYWxsIGZpeGVkIHJlc291cmNlIHR5cGVzIGFib3ZlIGBNb3JlIFJlc291cmNlc2AgaW4gdGhlIGNsdXN0ZXIgZXhwbG9yZXIKICAgKgogICAqIFRoZXNlIHdpbGwgYWx3YXlzIGJlIHNob3duIGluIHRoZSBzaWRlIG5hdgogICAqCiAgICogYWxsVHlwZXMgdXNhZ2U6IFJlc291cmNlcyB0aGF0IGFyZSBpbiBhIGdyb3VwCiAgICoKICAgKiBnZXRUcmVlIHVzYWdlOiBSZW1vdmUgaWdub3JlZCBzY2hlbWFzLCByZXNvdXJjZXMgbm90IGFwcGxpY2FibGUgdG8gbnMsIGV0YwogICAqLwogIEJBU0lDOiAnYmFzaWMnLAogIC8qKgogICAqIFJlcHJlc2VudHMgYW55IHR5cGUgb2YgcmVzb3VyY2UgdHlwZSB0aGF0IGhhcyBiZWVuIGZhdm91cml0ZWQKICAgKgogICAqIFRoZXNlIHdpbGwgYWx3YXlzIGJlIHNob3duIGluIHRoZSBzaWRlIG5hdi4KICAgKgogICAqIGFsbFR5cGVzIHVzYWdlOiBSZXNvdXJjZSB0eXBlcyB0aGF0IGhhdmUgYmVlbiBmYXZvcml0ZWQKICAgKgogICAqIGdldFRyZWUgdXNhZ2U6IFJlbW92ZSBpZ25vcmVkIHNjaGVtYXMsIHJlc291cmNlcyBub3QgYXBwbGljYWJsZSB0byBucywgZXRjCiAgICovCiAgRkFWT1JJVEU6ICdmYXZvcml0ZScsCiAgLyoqCiAgICogUmVwcmVzZW50cyBubyB2aXJ0dWFsIG9yIHNwb29mZWQgdHlwZXMgdGhhdCBoYXZlIGEgY291bnQuCiAgICoKICAgKiBGb3IgZXhhbXBsZSB0aGUgYE1vcmUgUmVzb3VyY2VgIGluIHRoZSBjbHVzdGVyIGV4cGxvcmVyCiAgICoKICAgKiBUaGVzZSB3aWxsIGJlIHNob3duIGluIHRoZSBzaWRlIG5hdiBpZiB0aGVyZSBhcmUgcmVzb3VyY2VzIGluIHRoZSBucyBmaWx0ZXIgT1IgdGhlIHJlc291cmNlIGlzIG5vdCBuYW1lc3BhY2VzCiAgICoKICAgKiBhbGxUeXBlcyB1c2FnZTogQWxsIHJlc291cmNlIHR5cGVzIHRoYXQgYXJlIG5vdCB2aXJ0dWFsIG9yIHNwb29mZWQKICAgKgogICAqIGdldFRyZWUgdXNhZ2U6IFJlbW92ZSB0eXBlcyB3aXRoIG5vIGNvdW50cy4gUmVtb3ZlIGlnbm9yZWQgc2NoZW1hcywgcmVzb3VyY2VzIG5vdCBhcHBsaWNhYmxlIHRvIG5zLCBldGMKICAgKi8KICBVU0VEOiAndXNlZCcKfTsKZXhwb3J0IHZhciBST09UID0gJ3Jvb3QnOwpleHBvcnQgdmFyIFNQT09GRURfUFJFRklYID0gJ19fW1tzcG9vZmVkXV1fXyc7CmV4cG9ydCB2YXIgU1BPT0ZFRF9BUElfUFJFRklYID0gJ19fW1tzcG9vZmVkYXBpXV1fXyc7CnZhciBpbnN0YW5jZU1ldGhvZHMgPSB7fTsKdmFyIGdyYXBoQ29uZmlnTWFwID0ge307CnZhciBGSUVMRF9SRUdFWCA9IC9eXCRcLm1ldGFkYXRhXC5maWVsZHNcWyhbMC05XSopXF0vOwpleHBvcnQgdmFyIElGX0hBVkUgPSB7CiAgVjFfTU9OSVRPUklORzogJ3YxLW1vbml0b3JpbmcnLAogIFYyX01PTklUT1JJTkc6ICd2Mi1tb25pdG9yaW5nJywKICBQUk9KRUNUOiAncHJvamVjdCcsCiAgTk9fUFJPSkVDVDogJ25vLXByb2plY3QnLAogIE5PVF9WMV9JU1RJTzogJ25vdC12MS1pc3RpbycsCiAgTVVMVElfQ0xVU1RFUjogJ211bHRpLWNsdXN0ZXInLAogIE5FVVZFQ1RPUl9OQU1FU1BBQ0U6ICduZXV2ZWN0b3ItbmFtZXNwYWNlJywKICBBRE1JTjogJ2FkbWluLXVzZXInLAogIE1DTV9ESVNBQkxFRDogJ21jbS1kaXNhYmxlZCcsCiAgTk9UX1NUQU5EQUxPTkVfSEFSVkVTVEVSOiAnbm90LXN0YW5kYWxvbmUtaGFydmVzdGVyJwp9OwpleHBvcnQgZnVuY3Rpb24gRFNMKHN0b3JlLCBfcHJvZHVjdCkgewogIHZhciBtb2R1bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6ICd0eXBlLW1hcCc7CiAgLy8gc3RvcmUuY29tbWl0KGAkeyBtb2R1bGUgfS9wcm9kdWN0YCwgeyBuYW1lOiBwcm9kdWN0IH0pOwoKICByZXR1cm4gewogICAgcHJvZHVjdDogZnVuY3Rpb24gcHJvZHVjdChpbk9wdCkgewogICAgICB2YXIgb3B0ID0gX29iamVjdFNwcmVhZCh7CiAgICAgICAgbmFtZTogX3Byb2R1Y3QsCiAgICAgICAgd2VpZ2h0OiAxLAogICAgICAgIGluU3RvcmU6ICdjbHVzdGVyJywKICAgICAgICBpbkV4cGxvcmVyOiBmYWxzZSwKICAgICAgICByZW1vdmFibGU6IHRydWUsCiAgICAgICAgc2hvd0NsdXN0ZXJTd2l0Y2hlcjogdHJ1ZSwKICAgICAgICBzaG93TmFtZXNwYWNlRmlsdGVyOiBmYWxzZSwKICAgICAgICBwdWJsaWM6IHRydWUsCiAgICAgICAgZmlsdGVyTW9kZTogJ25hbWVzcGFjZXMnCiAgICAgIH0sIGluT3B0KTsKICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYXJyID0gWydpZkhhdmVHcm91cCcsICdpZkhhdmVUeXBlJ107IF9pIDwgX2Fyci5sZW5ndGg7IF9pKyspIHsKICAgICAgICB2YXIgayA9IF9hcnJbX2ldOwogICAgICAgIGlmIChvcHRba10pIHsKICAgICAgICAgIG9wdFtrXSA9IHJlZ2V4VG9TdHJpbmcoZW5zdXJlUmVnZXgob3B0W2tdKSk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL3Byb2R1Y3QiKSwgb3B0KTsKICAgIH0sCiAgICBiYXNpY1R5cGU6IGZ1bmN0aW9uIGJhc2ljVHlwZSh0eXBlcywgZ3JvdXApIHsKICAgICAgLy8gU3VwcG9ydCBwYXNzaW5nIGluIGEgbWFwIG9mIHR5cGVzIGFuZCB1c2luZyBqdXN0IHRoZSB2YWx1ZXMKICAgICAgaWYgKCFpc0FycmF5KHR5cGVzKSAmJiB0eXBlcyAmJiBpc09iamVjdCh0eXBlcykpIHsKICAgICAgICB0eXBlcyA9IE9iamVjdC52YWx1ZXModHlwZXMpOwogICAgICB9CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL2Jhc2ljVHlwZSIpLCB7CiAgICAgICAgcHJvZHVjdDogX3Byb2R1Y3QsCiAgICAgICAgdHlwZXM6IHR5cGVzLAogICAgICAgIGdyb3VwOiBncm91cAogICAgICB9KTsKICAgIH0sCiAgICAvLyBUeXBlLSBhbmQgR3JvdXAtZGVwZW5kZW50CiAgICBncm91cEJ5OiBmdW5jdGlvbiBncm91cEJ5KHR5cGUsIGZpZWxkKSB7CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL2dyb3VwQnkiKSwgewogICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgZmllbGQ6IGZpZWxkCiAgICAgIH0pOwogICAgfSwKICAgIGhlYWRlcnM6IGZ1bmN0aW9uIGhlYWRlcnModHlwZSwgX2hlYWRlcnMpIHsKICAgICAgX2hlYWRlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGVhZGVyKSB7CiAgICAgICAgLy8gSWYgb24gdGhlIGNsaWVudCwgdGhlbiB1c2UgdGhlIHZhbHVlIGdldHRlciBpZiB0aGVyZSBpcyBvbmUKICAgICAgICBpZiAoaGVhZGVyLmdldFZhbHVlKSB7CiAgICAgICAgICAvLyB3ZSBuZWVkIHRvIHN0b3JlIHRoZSAudmFsdWUgcHJvcCBmb3IgdGhlIGFkdmFuY2VkIGZpbHRlcmluZwogICAgICAgICAgaGVhZGVyLnZhbHVlUHJvcCA9IGhlYWRlci52YWx1ZTsKICAgICAgICAgIGhlYWRlci52YWx1ZSA9IGhlYWRlci5nZXRWYWx1ZTsKICAgICAgICB9CiAgICAgICAgZGVsZXRlIGhlYWRlci5nZXRWYWx1ZTsKICAgICAgfSk7CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL2hlYWRlcnMiKSwgewogICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgaGVhZGVyczogX2hlYWRlcnMKICAgICAgfSk7CiAgICB9LAogICAgaGlkZUJ1bGtBY3Rpb25zOiBmdW5jdGlvbiBoaWRlQnVsa0FjdGlvbnModHlwZSwgZmllbGQpIHsKICAgICAgc3RvcmUuY29tbWl0KCIiLmNvbmNhdChtb2R1bGUsICIvaGlkZUJ1bGtBY3Rpb25zIiksIHsKICAgICAgICB0eXBlOiB0eXBlLAogICAgICAgIGZpZWxkOiBmaWVsZAogICAgICB9KTsKICAgIH0sCiAgICBjb25maWd1cmVUeXBlOiBmdW5jdGlvbiBjb25maWd1cmVUeXBlKG1hdGNoLCBvcHRpb25zKSB7CiAgICAgIGlmIChvcHRpb25zLmdyYXBoQ29uZmlnKSB7CiAgICAgICAgZ3JhcGhDb25maWdNYXBbbWF0Y2hdID0gb3B0aW9ucy5ncmFwaENvbmZpZzsKICAgICAgICBkZWxldGUgb3B0aW9ucy5ncmFwaENvbmZpZzsKICAgICAgfQogICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9jb25maWd1cmVUeXBlIiksIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgb3B0aW9ucyksIHt9LCB7CiAgICAgICAgbWF0Y2g6IG1hdGNoCiAgICAgIH0pKTsKICAgIH0sCiAgICBjb21wb25lbnRGb3JUeXBlOiBmdW5jdGlvbiBjb21wb25lbnRGb3JUeXBlKG1hdGNoLCByZXBsYWNlKSB7CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL2NvbXBvbmVudEZvclR5cGUiKSwgewogICAgICAgIG1hdGNoOiBtYXRjaCwKICAgICAgICByZXBsYWNlOiByZXBsYWNlCiAgICAgIH0pOwogICAgfSwKICAgIGlnbm9yZVR5cGU6IGZ1bmN0aW9uIGlnbm9yZVR5cGUocmVnZXhPclN0cmluZykgewogICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9pZ25vcmVUeXBlIiksIHJlZ2V4T3JTdHJpbmcpOwogICAgfSwKICAgIGlnbm9yZUdyb3VwOiBmdW5jdGlvbiBpZ25vcmVHcm91cChyZWdleE9yU3RyaW5nLCBjYikgewogICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9pZ25vcmVHcm91cCIpLCB7CiAgICAgICAgcmVnZXhPclN0cmluZzogcmVnZXhPclN0cmluZywKICAgICAgICBjYjogY2IKICAgICAgfSk7CiAgICB9LAogICAgd2VpZ2h0R3JvdXA6IGZ1bmN0aW9uIHdlaWdodEdyb3VwKGlucHV0LCB3ZWlnaHQsIGZvckJhc2ljKSB7CiAgICAgIGlmIChpc0FycmF5KGlucHV0KSkgewogICAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL3dlaWdodEdyb3VwIiksIHsKICAgICAgICAgIGdyb3VwczogaW5wdXQsCiAgICAgICAgICB3ZWlnaHQ6IHdlaWdodCwKICAgICAgICAgIGZvckJhc2ljOiBmb3JCYXNpYwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL3dlaWdodEdyb3VwIiksIHsKICAgICAgICAgIGdyb3VwOiBpbnB1dCwKICAgICAgICAgIHdlaWdodDogd2VpZ2h0LAogICAgICAgICAgZm9yQmFzaWM6IGZvckJhc2ljCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBzZXRHcm91cERlZmF1bHRUeXBlOiBmdW5jdGlvbiBzZXRHcm91cERlZmF1bHRUeXBlKGlucHV0LCBkZWZhdWx0VHlwZSkgewogICAgICBpZiAoaXNBcnJheShpbnB1dCkpIHsKICAgICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9zZXRHcm91cERlZmF1bHRUeXBlIiksIHsKICAgICAgICAgIGdyb3VwczogaW5wdXQsCiAgICAgICAgICBkZWZhdWx0VHlwZTogZGVmYXVsdFR5cGUKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9zZXRHcm91cERlZmF1bHRUeXBlIiksIHsKICAgICAgICAgIGdyb3VwOiBpbnB1dCwKICAgICAgICAgIGRlZmF1bHRUeXBlOiBkZWZhdWx0VHlwZQogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgd2VpZ2h0VHlwZTogZnVuY3Rpb24gd2VpZ2h0VHlwZShpbnB1dCwgd2VpZ2h0LCBmb3JCYXNpYykgewogICAgICBpZiAoaXNBcnJheShpbnB1dCkpIHsKICAgICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi93ZWlnaHRUeXBlIiksIHsKICAgICAgICAgIHR5cGVzOiBpbnB1dCwKICAgICAgICAgIHdlaWdodDogd2VpZ2h0LAogICAgICAgICAgZm9yQmFzaWM6IGZvckJhc2ljCiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgc3RvcmUuY29tbWl0KCIiLmNvbmNhdChtb2R1bGUsICIvd2VpZ2h0VHlwZSIpLCB7CiAgICAgICAgICB0eXBlOiBpbnB1dCwKICAgICAgICAgIHdlaWdodDogd2VpZ2h0LAogICAgICAgICAgZm9yQmFzaWM6IGZvckJhc2ljCiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBtYXBHcm91cDogZnVuY3Rpb24gbWFwR3JvdXAobWF0Y2gsIHJlcGxhY2UpIHsKICAgICAgdmFyIHdlaWdodCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogNTsKICAgICAgdmFyIGNvbnRpbnVlT25NYXRjaCA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogZmFsc2U7CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL21hcEdyb3VwIiksIHsKICAgICAgICBtYXRjaDogbWF0Y2gsCiAgICAgICAgcmVwbGFjZTogcmVwbGFjZSwKICAgICAgICB3ZWlnaHQ6IHdlaWdodCwKICAgICAgICBjb250aW51ZU9uTWF0Y2g6IGNvbnRpbnVlT25NYXRjaAogICAgICB9KTsKICAgIH0sCiAgICBtYXBUeXBlOiBmdW5jdGlvbiBtYXBUeXBlKG1hdGNoLCByZXBsYWNlKSB7CiAgICAgIHZhciB3ZWlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDU7CiAgICAgIHZhciBjb250aW51ZU9uTWF0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlOwogICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9tYXBUeXBlIiksIHsKICAgICAgICBtYXRjaDogbWF0Y2gsCiAgICAgICAgcmVwbGFjZTogcmVwbGFjZSwKICAgICAgICB3ZWlnaHQ6IHdlaWdodCwKICAgICAgICBjb250aW51ZU9uTWF0Y2g6IGNvbnRpbnVlT25NYXRjaAogICAgICB9KTsKICAgIH0sCiAgICBtb3ZlVHlwZTogZnVuY3Rpb24gbW92ZVR5cGUobWF0Y2gsIGdyb3VwKSB7CiAgICAgIHZhciB3ZWlnaHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IDU7CiAgICAgIHZhciBjb250aW51ZU9uTWF0Y2ggPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IGZhbHNlOwogICAgICBzdG9yZS5jb21taXQoIiIuY29uY2F0KG1vZHVsZSwgIi9tb3ZlVHlwZSIpLCB7CiAgICAgICAgbWF0Y2g6IG1hdGNoLAogICAgICAgIGdyb3VwOiBncm91cCwKICAgICAgICB3ZWlnaHQ6IHdlaWdodAogICAgICB9KTsKICAgIH0sCiAgICB2aXJ0dWFsVHlwZTogZnVuY3Rpb24gdmlydHVhbFR5cGUob2JqKSB7CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL3ZpcnR1YWxUeXBlIiksIHsKICAgICAgICBwcm9kdWN0OiBfcHJvZHVjdCwKICAgICAgICBvYmo6IG9iagogICAgICB9KTsKICAgIH0sCiAgICBzcG9vZmVkVHlwZTogZnVuY3Rpb24gc3Bvb2ZlZFR5cGUob2JqKSB7CiAgICAgIHN0b3JlLmNvbW1pdCgiIi5jb25jYXQobW9kdWxlLCAiL3Nwb29mZWRUeXBlIiksIHsKICAgICAgICBwcm9kdWN0OiBfcHJvZHVjdCwKICAgICAgICBvYmo6IG9iagogICAgICB9KTsKICAgIH0KICB9Owp9CnZhciBjYWxsZWQgPSBmYWxzZTsKZXhwb3J0IGZ1bmN0aW9uIGFwcGx5UHJvZHVjdHMoX3gsIF94MikgewogIHJldHVybiBfYXBwbHlQcm9kdWN0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CmZ1bmN0aW9uIF9hcHBseVByb2R1Y3RzKCkgewogIF9hcHBseVByb2R1Y3RzID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoc3RvcmUsICRwbHVnaW4pIHsKICAgIHZhciBfaXRlcmF0b3IxOCwgX3N0ZXAxOCwgcHJvZHVjdCwgaW1wbDsKICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDMucHJldiA9IF9jb250ZXh0My5uZXh0KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgaWYgKCFjYWxsZWQpIHsKICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAyOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBfY29udGV4dDMuYWJydXB0KCJyZXR1cm4iKTsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBjYWxsZWQgPSB0cnVlOwogICAgICAgICAgX2l0ZXJhdG9yMTggPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihsaXN0UHJvZHVjdHMoKSk7CiAgICAgICAgICBfY29udGV4dDMucHJldiA9IDQ7CiAgICAgICAgICBfaXRlcmF0b3IxOC5zKCk7CiAgICAgICAgY2FzZSA2OgogICAgICAgICAgaWYgKChfc3RlcDE4ID0gX2l0ZXJhdG9yMTgubigpKS5kb25lKSB7CiAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gMTQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgICAgcHJvZHVjdCA9IF9zdGVwMTgudmFsdWU7CiAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDEwOwogICAgICAgICAgcmV0dXJuIGxvYWRQcm9kdWN0KHByb2R1Y3QpOwogICAgICAgIGNhc2UgMTA6CiAgICAgICAgICBpbXBsID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICBpZiAoaW1wbCAhPT0gbnVsbCAmJiBpbXBsICE9PSB2b2lkIDAgJiYgaW1wbC5pbml0KSB7CiAgICAgICAgICAgIGltcGwuaW5pdChzdG9yZSk7CiAgICAgICAgICB9CiAgICAgICAgY2FzZSAxMjoKICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNjsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMTQ6CiAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDE5OwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAxNjoKICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTY7CiAgICAgICAgICBfY29udGV4dDMudDAgPSBfY29udGV4dDNbImNhdGNoIl0oNCk7CiAgICAgICAgICBfaXRlcmF0b3IxOC5lKF9jb250ZXh0My50MCk7CiAgICAgICAgY2FzZSAxOToKICAgICAgICAgIF9jb250ZXh0My5wcmV2ID0gMTk7CiAgICAgICAgICBfaXRlcmF0b3IxOC5mKCk7CiAgICAgICAgICByZXR1cm4gX2NvbnRleHQzLmZpbmlzaCgxOSk7CiAgICAgICAgY2FzZSAyMjoKICAgICAgICAgIC8vIExvYWQgdGhlIHByb2R1Y3RzIGZyb20gYWxsIHBsdWdpbnMKICAgICAgICAgICRwbHVnaW4ubG9hZFByb2R1Y3RzKCk7CiAgICAgICAgY2FzZSAyMzoKICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5zdG9wKCk7CiAgICAgIH0KICAgIH0sIF9jYWxsZWUzLCBudWxsLCBbWzQsIDE2LCAxOSwgMjJdXSk7CiAgfSkpOwogIHJldHVybiBfYXBwbHlQcm9kdWN0cy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwp9CmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0c0xvYWRlZCgpIHsKICByZXR1cm4gY2FsbGVkOwp9CmV4cG9ydCB2YXIgc3RhdGUgPSBmdW5jdGlvbiBzdGF0ZSgpIHsKICByZXR1cm4gewogICAgcHJvZHVjdHM6IFtdLAogICAgdmlydHVhbFR5cGVzOiB7fSwKICAgIHNwb29mZWRUeXBlczoge30sCiAgICBiYXNpY1R5cGVzOiB7fSwKICAgIGdyb3VwSWdub3JlOiBbXSwKICAgIGdyb3VwV2VpZ2h0czoge30sCiAgICBncm91cERlZmF1bHRUeXBlczoge30sCiAgICBiYXNpY0dyb3VwV2VpZ2h0czogX2RlZmluZVByb3BlcnR5KHt9LCBST09ULCAxMDAwKSwKICAgIGdyb3VwTWFwcGluZ3M6IFtdLAogICAgdHlwZUlnbm9yZTogW10sCiAgICBiYXNpY1R5cGVXZWlnaHRzOiB7fSwKICAgIHR5cGVXZWlnaHRzOiB7fSwKICAgIHR5cGVNYXBwaW5nczogW10sCiAgICB0eXBlTW92ZU1hcHBpbmdzOiBbXSwKICAgIHR5cGVUb0NvbXBvbmVudE1hcHBpbmdzOiBbXSwKICAgIHR5cGVPcHRpb25zOiBbXSwKICAgIGdyb3VwQnk6IHt9LAogICAgaGVhZGVyczoge30sCiAgICBoaWRlQnVsa0FjdGlvbnM6IHt9LAogICAgc2NoZW1hR2VuZXJhdGlvbjogMSwKICAgIGNhY2hlOiB7CiAgICAgIHR5cGVNb3ZlOiB7fSwKICAgICAgZ3JvdXBMYWJlbDoge30sCiAgICAgIGlnbm9yZToge30sCiAgICAgIGxpc3Q6IHt9LAogICAgICBjaGFydDoge30sCiAgICAgIGRldGFpbDoge30sCiAgICAgIGVkaXQ6IHt9LAogICAgICBjb21wb25lbnRGb3I6IHt9LAogICAgICBwcm9tcHRSZW1vdmU6IHt9LAogICAgICB3aW5kb3dDb21wb25lbnRzOiB7fSwKICAgICAgJ21hY2hpbmUtY29uZmlnJzoge30sCiAgICAgICdjbG91ZC1jcmVkZW50aWFsJzoge30KICAgIH0KICB9Owp9OwpleHBvcnQgdmFyIGdldHRlcnMgPSB7CiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQogIC8vIDEgKSBHZXR0aW5nIGluZm8KICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgLy8gVHVybnMgYSB0eXBlIG5hbWUgaW50byBhIGRpc3BsYXkgbGFiZWwgKGUuZy4gbWFuYWdlbWVudC5jYXR0bGUuaW8uY2x1c3RlciAtPiBDbHVzdGVyKQogIGxhYmVsRm9yOiBmdW5jdGlvbiBsYWJlbEZvcihzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzY2hlbWEpIHsKICAgICAgdmFyIGNvdW50ID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAxOwogICAgICB2YXIgbGFuZ3VhZ2UgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IG51bGw7CiAgICAgIHJldHVybiBfYXBwbHlNYXBwaW5nKHNjaGVtYSwgc3RhdGUudHlwZU1hcHBpbmdzLCAnaWQnLCBmYWxzZSwgZnVuY3Rpb24gKCkgewogICAgICAgIHZhciBfc2NoZW1hJGF0dHJpYnV0ZXM7CiAgICAgICAgdmFyIGtleSA9ICJ0eXBlTGFiZWwuXCIiLmNvbmNhdChzY2hlbWEuaWQudG9Mb3dlckNhc2UoKSwgIlwiIik7CiAgICAgICAgaWYgKHJvb3RHZXR0ZXJzWydpMThuL2V4aXN0cyddKGtleSwgbGFuZ3VhZ2UpKSB7CiAgICAgICAgICByZXR1cm4gcm9vdEdldHRlcnNbJ2kxOG4vdCddKGtleSwgewogICAgICAgICAgICBjb3VudDogY291bnQKICAgICAgICAgIH0sIGxhbmd1YWdlKS50cmltKCk7CiAgICAgICAgfQogICAgICAgIHZhciBvdXQgPSAoc2NoZW1hID09PSBudWxsIHx8IHNjaGVtYSA9PT0gdm9pZCAwIHx8IChfc2NoZW1hJGF0dHJpYnV0ZXMgPSBzY2hlbWEuYXR0cmlidXRlcykgPT09IG51bGwgfHwgX3NjaGVtYSRhdHRyaWJ1dGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc2NoZW1hJGF0dHJpYnV0ZXMua2luZCkgfHwgc2NoZW1hLmlkIHx8ICc/JzsKCiAgICAgICAgLy8gQWRkIHNwYWNlcywgYnV0IGJyZWFrcyB0eXBpbmcgbmFtZXMgaW50byBqdW1wIG1lbnUgbmF0dXJhbGx5CiAgICAgICAgLy8gb3V0ID0gdWNGaXJzdChvdXQucmVwbGFjZSgvKFthLXpdKShbQS1aXSkvZywnJDEgJDInKSk7CgogICAgICAgIGlmIChjb3VudCA9PT0gMSkgewogICAgICAgICAgcmV0dXJuIG91dDsKICAgICAgICB9CgogICAgICAgIC8vIFRoaXMgd29ya3MgZm9yIG1vc3QgdGhpbmdzLi4uIGlmIHlvdSBkb24ndCBsaWtlIGl0LCBwdXQgaW4gYSB0eXBlTGFiZWwgdHJhbnNsYXRpb24gZm9yIGFib3ZlLgogICAgICAgIHJldHVybiBwbHVyYWxpemUob3V0KTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgLy8gVHVybnMgYSBncm91cCBuYW1lIGludG8gYSBkaXNwbGF5IGxhYmVsIChlLmcuIG1hbmFnZW1lbnQuY2F0dGxlLmlvLnYzLmNsdXN0ZXIgLT4gQ2x1c3RlcikKICBncm91cExhYmVsRm9yOiBmdW5jdGlvbiBncm91cExhYmVsRm9yKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHNjaGVtYU9yTmFtZSkgewogICAgICB2YXIgZ3JvdXAgPSBzY2hlbWFPck5hbWU7CiAgICAgIGlmIChfdHlwZW9mKHNjaGVtYU9yTmFtZSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgdmFyIG1vdmVkID0gZmFsc2U7CiAgICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHN0YXRlLnR5cGVNb3ZlTWFwcGluZ3MpLAogICAgICAgICAgX3N0ZXA7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciBydWxlID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICAgIHZhciByZSA9IHN0cmluZ1RvUmVnZXgocnVsZS5tYXRjaCk7CiAgICAgICAgICAgIGlmIChzY2hlbWFPck5hbWUuaWQubWF0Y2gocmUpKSB7CiAgICAgICAgICAgICAgbW92ZWQgPSB0cnVlOwogICAgICAgICAgICAgIGdyb3VwID0gcnVsZS5yZXBsYWNlOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICAgIH0KICAgICAgICBpZiAoIW1vdmVkKSB7CiAgICAgICAgICBncm91cCA9IGdyb3VwLmF0dHJpYnV0ZXMuZ3JvdXA7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0eXBlb2YgZ3JvdXAgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgICAgdmFyIG91dCA9IF9hcHBseU1hcHBpbmcoZ3JvdXAsIHN0YXRlLmdyb3VwTWFwcGluZ3MsIG51bGwsIHN0YXRlLmNhY2hlLmdyb3VwTGFiZWwsIGZ1bmN0aW9uIChncm91cCkgewogICAgICAgIHZhciBtYXRjaCA9IGdyb3VwLm1hdGNoKC9eKC4qKVwuazhzXC5pbyQvKTsKICAgICAgICBpZiAobWF0Y2gpIHsKICAgICAgICAgIHJldHVybiBtYXRjaFsxXS5zcGxpdCgvXC4vKS5tYXAoZnVuY3Rpb24gKHgpIHsKICAgICAgICAgICAgcmV0dXJuIHVjRmlyc3QoeCk7CiAgICAgICAgICB9KS5qb2luKCcuJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBncm91cDsKICAgICAgfSk7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9OwogIH0sCiAgZ3JvdXBGb3JCYXNpY1R5cGU6IGZ1bmN0aW9uIGdyb3VwRm9yQmFzaWNUeXBlKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHByb2R1Y3QsIHNjaGVtYUlkKSB7CiAgICAgIHZhciBfc3RhdGUkYmFzaWNUeXBlczsKICAgICAgcmV0dXJuIChfc3RhdGUkYmFzaWNUeXBlcyA9IHN0YXRlLmJhc2ljVHlwZXMpID09PSBudWxsIHx8IF9zdGF0ZSRiYXNpY1R5cGVzID09PSB2b2lkIDAgfHwgKF9zdGF0ZSRiYXNpY1R5cGVzID0gX3N0YXRlJGJhc2ljVHlwZXNbcHJvZHVjdF0pID09PSBudWxsIHx8IF9zdGF0ZSRiYXNpY1R5cGVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc3RhdGUkYmFzaWNUeXBlc1tzY2hlbWFJZF07CiAgICB9OwogIH0sCiAgb3B0aW9uc0ZvcjogZnVuY3Rpb24gb3B0aW9uc0ZvcihzdGF0ZSkgewogICAgdmFyIGRlZiA9IHsKICAgICAgaXNDcmVhdGFibGU6IHRydWUsCiAgICAgIGlzRWRpdGFibGU6IHRydWUsCiAgICAgIGlzUmVtb3ZhYmxlOiB0cnVlLAogICAgICBzaG93U3RhdGU6IHRydWUsCiAgICAgIHNob3dBZ2U6IHRydWUsCiAgICAgIGNhbllhbWw6IHRydWUsCiAgICAgIG5hbWVzcGFjZWQ6IG51bGwsCiAgICAgIGxpc3RHcm91cHM6IFtdLAogICAgICBkZXBhZ2luYXRlOiBmYWxzZSwKICAgICAgY3VzdG9tUm91dGU6IHVuZGVmaW5lZCwKICAgICAgcmVzb3VyY2VFZGl0TWFzdGhlYWQ6IHRydWUKICAgIH07CiAgICByZXR1cm4gZnVuY3Rpb24gKHNjaGVtYU9yVHlwZSkgewogICAgICBpZiAoIXNjaGVtYU9yVHlwZSkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgICB2YXIgdHlwZSA9IF90eXBlb2Yoc2NoZW1hT3JUeXBlKSA9PT0gJ29iamVjdCcgPyBzY2hlbWFPclR5cGUuaWQgOiBzY2hlbWFPclR5cGU7CiAgICAgIHZhciBmb3VuZCA9IHN0YXRlLnR5cGVPcHRpb25zLmZpbmQoZnVuY3Rpb24gKGVudHJ5KSB7CiAgICAgICAgdmFyIHJlID0gc3RyaW5nVG9SZWdleChlbnRyeS5tYXRjaCk7CiAgICAgICAgcmV0dXJuIHJlLnRlc3QodHlwZSk7CiAgICAgIH0pOwogICAgICB2YXIgb3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZiwgZm91bmQgfHwge30pOwogICAgICByZXR1cm4gb3B0czsKICAgIH07CiAgfSwKICBpc0Zhdm9yaXRlOiBmdW5jdGlvbiBpc0Zhdm9yaXRlKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHNjaGVtYUlkKSB7CiAgICAgIHJldHVybiByb290R2V0dGVyc1sncHJlZnMvZ2V0J10oRkFWT1JJVEVfVFlQRVMpLmluY2x1ZGVzKHNjaGVtYUlkKSB8fCBmYWxzZTsKICAgIH07CiAgfSwKICB0eXBlV2VpZ2h0Rm9yOiBmdW5jdGlvbiB0eXBlV2VpZ2h0Rm9yKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHR5cGUsIGZvckJhc2ljKSB7CiAgICAgIHZhciBfdHlwZTsKICAgICAgdHlwZSA9IChfdHlwZSA9IHR5cGUpID09PSBudWxsIHx8IF90eXBlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdHlwZS50b0xvd2VyQ2FzZSgpOwogICAgICBpZiAoZm9yQmFzaWMpIHsKICAgICAgICByZXR1cm4gc3RhdGUuYmFzaWNUeXBlV2VpZ2h0c1t0eXBlXSB8fCAwOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBzdGF0ZS50eXBlV2VpZ2h0c1t0eXBlXSB8fCAwOwogICAgICB9CiAgICB9OwogIH0sCiAgZ3JvdXBXZWlnaHRGb3I6IGZ1bmN0aW9uIGdyb3VwV2VpZ2h0Rm9yKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKGdyb3VwLCBmb3JCYXNpYykgewogICAgICBncm91cCA9IGdyb3VwLnRvTG93ZXJDYXNlKCk7CiAgICAgIGlmIChmb3JCYXNpYykgewogICAgICAgIHJldHVybiBzdGF0ZS5iYXNpY0dyb3VwV2VpZ2h0c1tncm91cF0gfHwgMDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gc3RhdGUuZ3JvdXBXZWlnaHRzW2dyb3VwXSB8fCAwOwogICAgICB9CiAgICB9OwogIH0sCiAgZ3JvdXBEZWZhdWx0VHlwZUZvcjogZnVuY3Rpb24gZ3JvdXBEZWZhdWx0VHlwZUZvcihzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChncm91cCkgewogICAgICBncm91cCA9IGdyb3VwLnRvTG93ZXJDYXNlKCk7CiAgICAgIHJldHVybiBzdGF0ZS5ncm91cERlZmF1bHRUeXBlc1tncm91cF07CiAgICB9OwogIH0sCiAgZ2V0VHJlZTogZnVuY3Rpb24gZ2V0VHJlZShzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQncyBlYXNpbHkgaWRlbnRpZmlhYmxlIHdoZW4gcGVyZm9ybWFuY2UgdHJhY2luZwogICAgcmV0dXJuIGZ1bmN0aW9uIGdldFRyZWUocHJvZHVjdElkLCBtb2RlLCBhbGxUeXBlcywgY2x1c3RlcklkLCBuYW1lc3BhY2VNb2RlLCBjdXJyZW50VHlwZSwgc2VhcmNoKSB7CiAgICAgIC8vIGdldFRyZWUgaGFzIGZvdXIgbW9kZXM6CiAgICAgIC8vIC0gYGJhc2ljYCBtYXRjaGVzIGRhdGEgdHlwZXMgdGhhdCBzaG91bGQgYWx3YXlzIGJlIHNob3duIChldmVuIGlmIHRoZXJlIGFyZSAwIG9mIHRoZW0pLgogICAgICAvLyAtIGB1c2VkYCBtYXRjaGVzIHRoZSBkYXRhIHR5cGVzIHdoZXJlIHRoZXJlIGFyZSBtb3JlIHRoYW4gMCBvZiB0aGVtIGluIHRoZSBjdXJyZW50IHNldCBvZiBuYW1lc3BhY2VzLgogICAgICAvLyAtIGBhbGxgIG1hdGNoZXMgYWxsIHR5cGVzLgogICAgICAvLyAtIGBmYXZvcml0ZWAgbWF0Y2hlcyBzdGFycmVkIHR5cGVzLgogICAgICAvLyBuYW1lc3BhY2VNb2RlOiAnbmFtZXNwYWNlZCcsICdjbHVzdGVyJywgb3IgJ2JvdGgnCiAgICAgIC8vIG5hbWVzcGFjZXM6IG51bGwgbWVhbnMgYWxsLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBhbiBhcnJheSBvZiBzcGVjaWZpYyBuYW1lc3BhY2VzIHRvIGluY2x1ZGUKICAgICAgdmFyIGlzQmFzaWMgPSBtb2RlID09PSBUWVBFX01PREVTLkJBU0lDOwogICAgICB2YXIgc2VhcmNoUmVnZXg7CiAgICAgIGlmIChzZWFyY2gpIHsKICAgICAgICBzZWFyY2hSZWdleCA9IG5ldyBSZWdFeHAoIl4oLiopKCIuY29uY2F0KGVzY2FwZVJlZ2V4KHNlYXJjaCksICIpKC4qKSQiKSwgJ2knKTsKICAgICAgfQogICAgICB2YXIgcm9vdCA9IHsKICAgICAgICBjaGlsZHJlbjogW10KICAgICAgfTsKCiAgICAgIC8vIEFkZCB0eXBlcyBmcm9tIHNob3J0ZXN0IHRvIGxvbmdlc3Qgc28gdGhhdCBwYXJlbnRzCiAgICAgIC8vIGdldCBhZGRlZCBiZWZvcmUgY2hpbGRyZW4KICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhhbGxUeXBlcykuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgIHJldHVybiBhLmxlbmd0aCAtIGIubGVuZ3RoOwogICAgICB9KTsKCiAgICAgIC8vIFNldCB0aGVzZSBmb3IgbGF0ZXIKICAgICAgdmFyIGN1cnJlbnRMb2NhbCA9IHJvb3RHZXR0ZXJzWydpMThuL2N1cnJlbnQnXSgpOwogICAgICB2YXIgZGVmYXVsdExvY2FsID0gcm9vdEdldHRlcnNbJ2kxOG4vZGVmYXVsdCddKCk7CiAgICAgIHZhciBfaXRlcmF0b3IyID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoa2V5cyksCiAgICAgICAgX3N0ZXAyOwogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMi5zKCk7ICEoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgX3R5cGVPYmokc2NoZW1hOwogICAgICAgICAgdmFyIHR5cGUgPSBfc3RlcDIudmFsdWU7CiAgICAgICAgICB2YXIgdHlwZU9iaiA9IGFsbFR5cGVzW3R5cGVdOwogICAgICAgICAgaWYgKHR5cGVPYmouc2NoZW1hICYmIGdldHRlcnMuaXNJZ25vcmVkKHR5cGVPYmouc2NoZW1hKSkgewogICAgICAgICAgICAvLyBTa2lwIGlnbm9yZWQgZ3JvdXBzICYgdHlwZXMKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbmFtZXNwYWNlZCA9IHR5cGVPYmoubmFtZXNwYWNlZDsKICAgICAgICAgIGlmIChuYW1lc3BhY2VNb2RlID09PSBOQU1FU1BBQ0VEICYmICFuYW1lc3BhY2VkIHx8IG5hbWVzcGFjZU1vZGUgPT09IENMVVNURVJfTEVWRUwgJiYgbmFtZXNwYWNlZCkgewogICAgICAgICAgICAvLyBTa2lwIHR5cGVzIHRoYXQgYXJlIG5vdCB0aGUgcmlnaHQgbmFtZXNwYWNlIG1vZGUKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgaW5TdG9yZSA9IHJvb3RHZXR0ZXJzLmN1cnJlbnRTdG9yZSh0eXBlT2JqLm5hbWUpOwogICAgICAgICAgdmFyIGNvdW50ID0gcm9vdEdldHRlcnNbIiIuY29uY2F0KGluU3RvcmUsICIvY291bnQiKV0odHlwZU9iaik7CiAgICAgICAgICB2YXIgZ3JvdXBGb3JCYXNpY1R5cGUgPSBnZXR0ZXJzLmdyb3VwRm9yQmFzaWNUeXBlKHByb2R1Y3RJZCwgdHlwZU9iai5uYW1lKTsKICAgICAgICAgIGlmICh0eXBlT2JqLmlkID09PSBjdXJyZW50VHlwZSkgewogICAgICAgICAgICAvLyBJZiB0aGlzIGlzIHRoZSB0eXBlIGN1cnJlbnRseSBiZWluZyBzaG93biwgYWx3YXlzIHNob3cgaXQKICAgICAgICAgIH0gZWxzZSBpZiAoaXNCYXNpYyAmJiAhZ3JvdXBGb3JCYXNpY1R5cGUpIHsKICAgICAgICAgICAgLy8gSWYgd2Ugd2FudCB0aGUgYmFzaWMgdHJlZSBvbmx5IHJldHVybiBiYXNpYyB0eXBlczsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFRZUEVfTU9ERVMuVVNFRCAmJiBjb3VudCA8PSAwKSB7CiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgbm9uZSBvZiB0aGlzIHR5cGUsIGlnbm9yZSB0aGlzIGVudHJ5IHdoZW4gdmlld2luZyBvbmx5IGluLXVzZSB0eXBlcwogICAgICAgICAgICAvLyBOb3RlOiBjb3VudCBpcyBzb21ldGltZXMgbnVsbCwgd2hpY2ggaXMgPD0gMC4KICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgbGFiZWwgPSB0eXBlT2JqLmxhYmVsS2V5ID8gcm9vdEdldHRlcnNbJ2kxOG4vdCddKHR5cGVPYmoubGFiZWxLZXkpIHx8IHR5cGVPYmoubGFiZWwgOiB0eXBlT2JqLmxhYmVsOwogICAgICAgICAgdmFyIGxhYmVsRGlzcGxheSA9IGhpZ2hsaWdodExhYmVsKGxhYmVsLCBjb3VudCwgdHlwZU9iai5zY2hlbWEpOwogICAgICAgICAgaWYgKCFsYWJlbERpc3BsYXkpIHsKICAgICAgICAgICAgLy8gU2VhcmNoIGhhcHBlbnMgaW4gaGlnaGxpZ2h0IGFuZCByZXR1cm5zIG51bGwgaWYgbm90IGZvdW5kCiAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgfQogICAgICAgICAgdmFyIGdyb3VwID0gdm9pZCAwOwogICAgICAgICAgaWYgKGlzQmFzaWMpIHsKICAgICAgICAgICAgZ3JvdXAgPSBfZW5zdXJlR3JvdXAocm9vdCwgZ3JvdXBGb3JCYXNpY1R5cGUsIHRydWUpOwogICAgICAgICAgfSBlbHNlIGlmIChtb2RlID09PSBUWVBFX01PREVTLkZBVk9SSVRFKSB7CiAgICAgICAgICAgIGdyb3VwID0gX2Vuc3VyZUdyb3VwKHJvb3QsICdzdGFycmVkJyk7CiAgICAgICAgICAgIGdyb3VwLndlaWdodCA9IDEwMDA7CiAgICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09IFRZUEVfTU9ERVMuVVNFRCkgewogICAgICAgICAgICBncm91cCA9IF9lbnN1cmVHcm91cChyb290LCAiaW5Vc2U6OiIuY29uY2F0KGdldHRlcnMuZ3JvdXBMYWJlbEZvcih0eXBlT2JqLnNjaGVtYSkpKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGdyb3VwID0gX2Vuc3VyZUdyb3VwKHJvb3QsIHR5cGVPYmouc2NoZW1hIHx8IHR5cGVPYmouZ3JvdXAgfHwgUk9PVCk7CiAgICAgICAgICB9CiAgICAgICAgICB2YXIgcm91dGUgPSB0eXBlT2JqLnJvdXRlOwoKICAgICAgICAgIC8vIE1ha2UgdGhlIGRlZmF1bHQgcm91dGUgaWYgb25lIGlzbid0IHNldAogICAgICAgICAgaWYgKCFyb3V0ZSkgewogICAgICAgICAgICByb3V0ZSA9IHsKICAgICAgICAgICAgICBuYW1lOiAnYy1jbHVzdGVyLXByb2R1Y3QtcmVzb3VyY2UnLAogICAgICAgICAgICAgIHBhcmFtczogewogICAgICAgICAgICAgICAgcHJvZHVjdDogcHJvZHVjdElkLAogICAgICAgICAgICAgICAgY2x1c3RlcjogY2x1c3RlcklkLAogICAgICAgICAgICAgICAgcmVzb3VyY2U6IHR5cGVPYmoubmFtZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKICAgICAgICAgICAgdHlwZU9iai5yb3V0ZSA9IHJvdXRlOwogICAgICAgICAgfQoKICAgICAgICAgIC8vIENsdXN0ZXIgSUQgYW5kIFByb2R1Y3Qgc2hvdWxkIGFsd2F5cyBiZSBzZXQKICAgICAgICAgIGlmIChyb3V0ZSAmJiBfdHlwZW9mKHJvdXRlKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgcm91dGUucGFyYW1zID0gcm91dGUucGFyYW1zIHx8IHt9OwogICAgICAgICAgICByb3V0ZS5wYXJhbXMuY2x1c3RlciA9IGNsdXN0ZXJJZDsKICAgICAgICAgICAgcm91dGUucGFyYW1zLnByb2R1Y3QgPSBwcm9kdWN0SWQ7CiAgICAgICAgICB9CiAgICAgICAgICBncm91cC5jaGlsZHJlbi5wdXNoKHsKICAgICAgICAgICAgbGFiZWw6IGxhYmVsLAogICAgICAgICAgICBsYWJlbERpc3BsYXk6IGxhYmVsRGlzcGxheSwKICAgICAgICAgICAgbW9kZTogdHlwZU9iai5tb2RlLAogICAgICAgICAgICBleGFjdDogdHlwZU9iai5leGFjdCB8fCBmYWxzZSwKICAgICAgICAgICAgbmFtZXNwYWNlZDogbmFtZXNwYWNlZCwKICAgICAgICAgICAgcm91dGU6IHJvdXRlLAogICAgICAgICAgICBuYW1lOiB0eXBlT2JqLm5hbWUsCiAgICAgICAgICAgIHdlaWdodDogdHlwZU9iai53ZWlnaHQgfHwgZ2V0dGVycy50eXBlV2VpZ2h0Rm9yKCgoX3R5cGVPYmokc2NoZW1hID0gdHlwZU9iai5zY2hlbWEpID09PSBudWxsIHx8IF90eXBlT2JqJHNjaGVtYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3R5cGVPYmokc2NoZW1hLmlkKSB8fCBsYWJlbCwgaXNCYXNpYyksCiAgICAgICAgICAgIG92ZXJ2aWV3OiAhIXR5cGVPYmoub3ZlcnZpZXcKICAgICAgICAgIH0pOwogICAgICAgIH0KCiAgICAgICAgLy8gUmVjdXJzaXZlbHkgc29ydCB0aGUgZ3JvdXBzCiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvcjIuZigpOwogICAgICB9CiAgICAgIF9zb3J0R3JvdXAocm9vdCwgbW9kZSk7CiAgICAgIHJldHVybiByb290LmNoaWxkcmVuOwoKICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQoKICAgICAgZnVuY3Rpb24gX2Vuc3VyZUdyb3VwKHRyZWUsIHNjaGVtYU9yTmFtZSkgewogICAgICAgIHZhciBmb3JCYXNpYyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CiAgICAgICAgdmFyIG5hbWUgPSBnZXR0ZXJzLmdyb3VwTGFiZWxGb3Ioc2NoZW1hT3JOYW1lKTsKICAgICAgICB2YXIgaXNSb290ID0gbmFtZSA9PT0gUk9PVCB8fCBuYW1lLnN0YXJ0c1dpdGgoIiIuY29uY2F0KFJPT1QsICI6OiIpKTsKICAgICAgICBpZiAobmFtZSAmJiBuYW1lLmluY2x1ZGVzKCc6OicpKSB7CiAgICAgICAgICB2YXIgcGFyZW50OwogICAgICAgICAgdmFyIF9uYW1lJHNwbGl0ID0gbmFtZS5zcGxpdCgnOjonLCAyKTsKICAgICAgICAgIHZhciBfbmFtZSRzcGxpdDIgPSBfc2xpY2VkVG9BcnJheShfbmFtZSRzcGxpdCwgMik7CiAgICAgICAgICBwYXJlbnQgPSBfbmFtZSRzcGxpdDJbMF07CiAgICAgICAgICBuYW1lID0gX25hbWUkc3BsaXQyWzFdOwogICAgICAgICAgdHJlZSA9IF9lbnN1cmVHcm91cCh0cmVlLCBwYXJlbnQpOwogICAgICAgIH0KCiAgICAgICAgLy8gVHJhbnNsYXRlIGlmIGFuIGVudHJ5IGV4aXN0cwogICAgICAgIHZhciBsYWJlbCA9IG5hbWU7CiAgICAgICAgdmFyIGtleSA9ICJuYXYuZ3JvdXAuXCIiLmNvbmNhdChuYW1lLCAiXCIiKTsKICAgICAgICBpZiAocm9vdEdldHRlcnNbJ2kxOG4vZXhpc3RzJ10oa2V5KSkgewogICAgICAgICAgbGFiZWwgPSByb290R2V0dGVyc1snaTE4bi90J10oa2V5KTsKICAgICAgICB9CiAgICAgICAgdmFyIGdyb3VwID0gZmluZEJ5KHRyZWUuY2hpbGRyZW4sICduYW1lJywgbmFtZSk7CiAgICAgICAgaWYgKCFncm91cCkgewogICAgICAgICAgZ3JvdXAgPSB7CiAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgIGxhYmVsOiBsYWJlbCwKICAgICAgICAgICAgd2VpZ2h0OiBnZXR0ZXJzLmdyb3VwV2VpZ2h0Rm9yKG5hbWUsIGZvckJhc2ljKSwKICAgICAgICAgICAgZGVmYXVsdFR5cGU6IGdldHRlcnMuZ3JvdXBEZWZhdWx0VHlwZUZvcihuYW1lKQogICAgICAgICAgfTsKICAgICAgICAgIHRyZWUuY2hpbGRyZW4ucHVzaChncm91cCk7CiAgICAgICAgfQogICAgICAgIGlmIChpc1Jvb3QpIHsKICAgICAgICAgIGdyb3VwLmlzUm9vdCA9IHRydWU7CiAgICAgICAgfQogICAgICAgIGlmICghZ3JvdXAuY2hpbGRyZW4pIHsKICAgICAgICAgIGdyb3VwLmNoaWxkcmVuID0gW107CiAgICAgICAgfQogICAgICAgIHJldHVybiBncm91cDsKICAgICAgfQogICAgICBmdW5jdGlvbiBoaWdobGlnaHRMYWJlbChvcmlnaW5hbCwgY291bnQsIHNjaGVtYSkgewogICAgICAgIHZhciBsYWJlbCA9IGVzY2FwZUh0bWwob3JpZ2luYWwpOwogICAgICAgIGlmIChzZWFyY2hSZWdleCkgewogICAgICAgICAgdmFyIG1hdGNoID0gbGFiZWwubWF0Y2goc2VhcmNoUmVnZXgpOwogICAgICAgICAgaWYgKCFtYXRjaCkgewogICAgICAgICAgICBpZiAoY3VycmVudExvY2FsICE9PSBkZWZhdWx0TG9jYWwgJiYgc2NoZW1hKSB7CiAgICAgICAgICAgICAgdmFyIGRlZmF1bHRMYWJlbCA9IGdldHRlcnMubGFiZWxGb3Ioc2NoZW1hLCBjb3VudCwgZGVmYXVsdExvY2FsKTsKICAgICAgICAgICAgICBpZiAoZGVmYXVsdExhYmVsICYmIGRlZmF1bHRMYWJlbCAhPT0gbGFiZWwpIHsKICAgICAgICAgICAgICAgIGxhYmVsICs9ICIgKCIuY29uY2F0KGRlZmF1bHRMYWJlbCwgIikiKTsKICAgICAgICAgICAgICAgIG1hdGNoID0gbGFiZWwubWF0Y2goc2VhcmNoUmVnZXgpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgaWYgKG1hdGNoKSB7CiAgICAgICAgICAgIGxhYmVsID0gIiIuY29uY2F0KGVzY2FwZUh0bWwobWF0Y2hbMV0pLCAiPHNwYW4gY2xhc3M9XCJoaWdobGlnaHRcIj4iKS5jb25jYXQoZXNjYXBlSHRtbChtYXRjaFsyXSksICI8L3NwYW4+IikuY29uY2F0KGVzY2FwZUh0bWwobWF0Y2hbM10pKTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gbGFiZWw7CiAgICAgIH0KICAgIH07CiAgfSwKICBpc1Nwb29mZWQ6IGZ1bmN0aW9uIGlzU3Bvb2ZlZChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBwcm9kdWN0KSB7CiAgICAgIHByb2R1Y3QgPSBwcm9kdWN0IHx8IHJvb3RHZXR0ZXJzWydwcm9kdWN0SWQnXTsKICAgICAgdmFyIHByb2R1Y3RTcG9vZmVkVHlwZXMgPSBzdGF0ZS5zcG9vZmVkVHlwZXNbcHJvZHVjdF0gfHwgW107CiAgICAgIHJldHVybiBwcm9kdWN0U3Bvb2ZlZFR5cGVzLnNvbWUoZnVuY3Rpb24gKHN0KSB7CiAgICAgICAgcmV0dXJuIHN0LnR5cGUgPT09IHR5cGU7CiAgICAgIH0pOwogICAgfTsKICB9LAogIGlzVmlydHVhbDogZnVuY3Rpb24gaXNWaXJ0dWFsKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUsIHByb2R1Y3QpIHsKICAgICAgcHJvZHVjdCA9IHByb2R1Y3QgfHwgcm9vdEdldHRlcnNbJ3Byb2R1Y3RJZCddOwogICAgICB2YXIgcHJvZHVjdFZpcnR1YWxUeXBlcyA9IHN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSB8fCBbXTsKICAgICAgcmV0dXJuIHByb2R1Y3RWaXJ0dWFsVHlwZXMuc29tZShmdW5jdGlvbiAoc3QpIHsKICAgICAgICByZXR1cm4gc3QubmFtZSA9PT0gbmFtZTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgZ2V0U3Bvb2ZlZEluc3RhbmNlczogZnVuY3Rpb24gZ2V0U3Bvb2ZlZEluc3RhbmNlcyhzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfcmVmID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSh0eXBlLCBwcm9kdWN0KSB7CiAgICAgICAgdmFyIF9pbnN0YW5jZU1ldGhvZHMkcHJvZDsKICAgICAgICB2YXIgZ2V0SW5zdGFuY2VzLCBpbnN0YW5jZXM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIHByb2R1Y3QgPSBwcm9kdWN0IHx8IHJvb3RHZXR0ZXJzWydwcm9kdWN0SWQnXTsKICAgICAgICAgICAgICBnZXRJbnN0YW5jZXMgPSAoKF9pbnN0YW5jZU1ldGhvZHMkcHJvZCA9IGluc3RhbmNlTWV0aG9kc1twcm9kdWN0XSkgPT09IG51bGwgfHwgX2luc3RhbmNlTWV0aG9kcyRwcm9kID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5zdGFuY2VNZXRob2RzJHByb2RbdHlwZV0pIHx8IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgIHJldHVybiBnZXRJbnN0YW5jZXMoKTsKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgIGluc3RhbmNlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgaW5zdGFuY2VzLmZvckVhY2goZnVuY3Rpb24gKGluc3RhbmNlKSB7CiAgICAgICAgICAgICAgICB2YXIgX2luc3RhbmNlJGxpbmtzLCBfaW5zdGFuY2UkbGlua3MyLCBfaW5zdGFuY2UkbGlua3MzLCBfaW5zdGFuY2UkbGlua3M0OwogICAgICAgICAgICAgICAgdmFyIHR5cGUgPSBpbnN0YW5jZS50eXBlOwogICAgICAgICAgICAgICAgdmFyIGlkID0gaW5zdGFuY2UuaWQ7CiAgICAgICAgICAgICAgICB2YXIgbGluayA9ICIvIi5jb25jYXQoU1BPT0ZFRF9QUkVGSVgsICIvIikuY29uY2F0KHR5cGUsICIvIikuY29uY2F0KGlkKTsKICAgICAgICAgICAgICAgIHZhciBhcGlMaW5rID0gIi8iLmNvbmNhdChTUE9PRkVEX0FQSV9QUkVGSVgsICIvIikuY29uY2F0KHR5cGUsICIvIikuY29uY2F0KGlkKTsKICAgICAgICAgICAgICAgIGluc3RhbmNlLmxpbmtzID0gewogICAgICAgICAgICAgICAgICByZW1vdmU6ICgoX2luc3RhbmNlJGxpbmtzID0gaW5zdGFuY2UubGlua3MpID09PSBudWxsIHx8IF9pbnN0YW5jZSRsaW5rcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2luc3RhbmNlJGxpbmtzLnJlbW92ZSkgfHwgbGluaywKICAgICAgICAgICAgICAgICAgc2VsZjogKChfaW5zdGFuY2UkbGlua3MyID0gaW5zdGFuY2UubGlua3MpID09PSBudWxsIHx8IF9pbnN0YW5jZSRsaW5rczIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRsaW5rczIuc2VsZikgfHwgbGluaywKICAgICAgICAgICAgICAgICAgdXBkYXRlOiAoKF9pbnN0YW5jZSRsaW5rczMgPSBpbnN0YW5jZS5saW5rcykgPT09IG51bGwgfHwgX2luc3RhbmNlJGxpbmtzMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2luc3RhbmNlJGxpbmtzMy51cGRhdGUpIHx8IGxpbmssCiAgICAgICAgICAgICAgICAgIHZpZXc6ICgoX2luc3RhbmNlJGxpbmtzNCA9IGluc3RhbmNlLmxpbmtzKSA9PT0gbnVsbCB8fCBfaW5zdGFuY2UkbGlua3M0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfaW5zdGFuY2UkbGlua3M0LnZpZXcpIHx8IGFwaUxpbmsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBpbnN0YW5jZS5pc1Nwb29mZWQgPSB0cnVlOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIGluc3RhbmNlcyk7CiAgICAgICAgICAgIGNhc2UgNzoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3gzLCBfeDQpIHsKICAgICAgICByZXR1cm4gX3JlZi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwogIH0sCiAgZ2V0U3Bvb2ZlZEluc3RhbmNlOiBmdW5jdGlvbiBnZXRTcG9vZmVkSW5zdGFuY2Uoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3JlZjIgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlMih0eXBlLCBwcm9kdWN0LCBpZCkgewogICAgICAgIHZhciBwcm9kdWN0SW5zdGFuY2VzOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSAyOwogICAgICAgICAgICAgIHJldHVybiBnZXR0ZXJzLmdldFNwb29mZWRJbnN0YW5jZXModHlwZSwgcHJvZHVjdCk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBwcm9kdWN0SW5zdGFuY2VzID0gX2NvbnRleHQyLnNlbnQ7CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5hYnJ1cHQoInJldHVybiIsIHByb2R1Y3RJbnN0YW5jZXMuZmluZChmdW5jdGlvbiAoaW5zdGFuY2UpIHsKICAgICAgICAgICAgICAgIHJldHVybiBpbnN0YW5jZS5pZCA9PT0gaWQ7CiAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Mi5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CiAgICAgIHJldHVybiBmdW5jdGlvbiAoX3g1LCBfeDYsIF94NykgewogICAgICAgIHJldHVybiBfcmVmMi5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9OwogICAgfSgpOwogIH0sCiAgYWxsU3Bvb2ZlZFR5cGVzOiBmdW5jdGlvbiBhbGxTcG9vZmVkVHlwZXMoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBPYmplY3QudmFsdWVzKHN0YXRlLnNwb29mZWRUeXBlcykuZmxhdCgpOwogIH0sCiAgc3Bvb2ZlZFNjaGVtYXM6IGZ1bmN0aW9uIHNwb29mZWRTY2hlbWFzKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUsIHJvb3RHZXR0ZXJzKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHByb2R1Y3QpIHsKICAgICAgdmFyIHR5cGVzID0gc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdIHx8IFtdOwogICAgICByZXR1cm4gdHlwZXMuZmxhdE1hcChmdW5jdGlvbiAodHlwZSkgewogICAgICAgIHZhciBzY2hlbWFzID0gdHlwZS5zY2hlbWFzIHx8IFtdOwogICAgICAgIHJldHVybiBzY2hlbWFzLm1hcChmdW5jdGlvbiAoc2NoZW1hKSB7CiAgICAgICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBzY2hlbWEpLCB7fSwgewogICAgICAgICAgICBpc1Nwb29mZWQ6IHRydWUKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH07CiAgfSwKICBhbGxTcG9vZmVkU2NoZW1hczogZnVuY3Rpb24gYWxsU3Bvb2ZlZFNjaGVtYXMoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBnZXR0ZXJzLmFsbFNwb29mZWRUeXBlcy5mbGF0TWFwKGZ1bmN0aW9uICh0eXBlKSB7CiAgICAgIHZhciBzY2hlbWFzID0gdHlwZS5zY2hlbWFzIHx8IFtdOwogICAgICByZXR1cm4gc2NoZW1hcy5tYXAoZnVuY3Rpb24gKHNjaGVtYSkgewogICAgICAgIHJldHVybiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIHNjaGVtYSksIHt9LCB7CiAgICAgICAgICBpc1Nwb29mZWQ6IHRydWUKICAgICAgICB9KTsKICAgICAgfSk7CiAgICB9KTsKICB9LAogIC8qKgogICAqIEdpdmVuIG1hbnkgdGhpbmdzLCBjcmVhdGUgYSBsaXN0IG9mIG1lbnUgaXRlbXMgcGVyIHNjaGVtYSBnaXZlbiB0aGUgbW9kZQogICAqLwogIGFsbFR5cGVzOiBmdW5jdGlvbiBhbGxUeXBlcyhzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgLy8gTmFtZSB0aGUgZnVuY3Rpb24gc28gaXQncyBlYXNpbHkgaWRlbnRpZmlhYmxlIHdoZW4gcGVyZm9ybWFuY2UgdHJhY2luZwogICAgcmV0dXJuIGZ1bmN0aW9uIGFsbFR5cGVzKHByb2R1Y3QpIHsKICAgICAgdmFyIF9zdGF0ZSRwcm9kdWN0cyRmaW5kLCBfcm9vdEdldHRlcnMkY3VycmVudEMsIF9yb290R2V0dGVyczsKICAgICAgdmFyIG1vZGVzID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBbVFlQRV9NT0RFUy5BTExdOwogICAgICB2YXIgbW9kdWxlID0gKF9zdGF0ZSRwcm9kdWN0cyRmaW5kID0gc3RhdGUucHJvZHVjdHMuZmluZChmdW5jdGlvbiAocCkgewogICAgICAgIHJldHVybiBwLm5hbWUgPT09IHByb2R1Y3Q7CiAgICAgIH0pKSA9PT0gbnVsbCB8fCBfc3RhdGUkcHJvZHVjdHMkZmluZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3N0YXRlJHByb2R1Y3RzJGZpbmQuaW5TdG9yZTsKICAgICAgdmFyIHNjaGVtYXMgPSByb290R2V0dGVyc1siIi5jb25jYXQobW9kdWxlLCAiL2FsbCIpXShTQ0hFTUEpOwogICAgICB2YXIgaXNMb2NhbCA9ICEoKF9yb290R2V0dGVycyRjdXJyZW50QyA9IHJvb3RHZXR0ZXJzLmN1cnJlbnRDbHVzdGVyKSAhPT0gbnVsbCAmJiBfcm9vdEdldHRlcnMkY3VycmVudEMgIT09IHZvaWQgMCAmJiBfcm9vdEdldHRlcnMkY3VycmVudEMuaXNMb2NhbCk7CiAgICAgIHZhciBpc1JhbmNoZXIgPSByb290R2V0dGVycy5pc1JhbmNoZXI7CiAgICAgIHZhciBjb3VudHMgPSAoKF9yb290R2V0dGVycyA9IHJvb3RHZXR0ZXJzWyIiLmNvbmNhdChtb2R1bGUsICIvYWxsIildKENPVU5UKSkgPT09IG51bGwgfHwgX3Jvb3RHZXR0ZXJzID09PSB2b2lkIDAgfHwgKF9yb290R2V0dGVycyA9IF9yb290R2V0dGVyc1swXSkgPT09IG51bGwgfHwgX3Jvb3RHZXR0ZXJzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcm9vdEdldHRlcnMuY291bnRzKSB8fCB7fTsKICAgICAgdmFyIG91dCA9IHt9OwoKICAgICAgLy8gRm9yIHBlcmZvcm1hbmNlIHJlYXNvbnMgdGhpcyBtdXN0IGJlIHN1cGVyIHF1aWNrIHRvIGl0ZXJhdGUgb3Zlci4KICAgICAgLy8gRm9yIGVhY2ggc2NoZW1hLi4uCiAgICAgIC8vIDEpIERldGVybWluZSBpZiBpdCdzIGFwcGxpY2FibGUgZ2l2ZW4gdGhlIG1vZGUKICAgICAgLy8gMikgRm9yIGVhY2ggYXBwbGljYWJsZSBtb2RlIGNyZWF0ZSBhIGBUeXBlYCBlbnRyeQogICAgICB2YXIgX2l0ZXJhdG9yMyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNjaGVtYXMpLAogICAgICAgIF9zdGVwMzsKICAgICAgdHJ5IHsKICAgICAgICB2YXIgX2xvb3AyID0gZnVuY3Rpb24gX2xvb3AyKCkgewogICAgICAgICAgICB2YXIgc2NoZW1hID0gX3N0ZXAzLnZhbHVlOwogICAgICAgICAgICB2YXIgc2NoZW1hTW9kZXMgPSB7fTsKICAgICAgICAgICAgbW9kZXMuZm9yRWFjaChmdW5jdGlvbiAobSkgewogICAgICAgICAgICAgIHNjaGVtYU1vZGVzW21dID0gdHJ1ZTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIHZhciBhdHRycyA9IHNjaGVtYS5hdHRyaWJ1dGVzIHx8IHt9OwogICAgICAgICAgICB2YXIgdHlwZU9wdGlvbnMgPSBnZXR0ZXJzWydvcHRpb25zRm9yJ10oc2NoZW1hKTsKICAgICAgICAgICAgc2NoZW1hTW9kZXNbVFlQRV9NT0RFUy5CQVNJQ10gPSBzY2hlbWFNb2Rlc1tUWVBFX01PREVTLkJBU0lDXSAmJiBnZXR0ZXJzLmdyb3VwRm9yQmFzaWNUeXBlKHByb2R1Y3QsIHNjaGVtYS5pZCk7CiAgICAgICAgICAgIGlmIChPYmplY3QudmFsdWVzKHNjaGVtYU1vZGVzKS5ldmVyeShmdW5jdGlvbiAocykgewogICAgICAgICAgICAgIHJldHVybiAhczsKICAgICAgICAgICAgfSkpIHsKICAgICAgICAgICAgICByZXR1cm4gMDsgLy8gY29udGludWUKICAgICAgICAgICAgfQogICAgICAgICAgICBzY2hlbWFNb2Rlc1tUWVBFX01PREVTLkZBVk9SSVRFXSA9IHNjaGVtYU1vZGVzW1RZUEVfTU9ERVMuRkFWT1JJVEVdICYmIGdldHRlcnMuaXNGYXZvcml0ZShzY2hlbWEuaWQpOwogICAgICAgICAgICBpZiAoT2JqZWN0LnZhbHVlcyhzY2hlbWFNb2RlcykuZXZlcnkoZnVuY3Rpb24gKHMpIHsKICAgICAgICAgICAgICByZXR1cm4gIXM7CiAgICAgICAgICAgIH0pKSB7CiAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlCiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFyIG9ubHlCYXNpYyA9IHNjaGVtYU1vZGVzW1RZUEVfTU9ERVMuQkFTSUNdICYmIG1vZGVzLmxlbmd0aCA9PT0gMTsKCiAgICAgICAgICAgIC8vIFRoaXMgY2xhdXNlIGlzIG9ubHkgdmFsaWQgZm9yIG5vbi1iYXNpYyBtb2Rlcy4gU28gaWYgd2UgaGF2ZSBvbmx5IGJhc2ljLi4uIHNraXAgaXQKICAgICAgICAgICAgaWYgKCFvbmx5QmFzaWMpIHsKICAgICAgICAgICAgICB2YXIgaW52YWxpZFR5cGUgPSAhYXR0cnMua2luZCB8fCB0eXBlb2YgdHlwZU9wdGlvbnMuaWZSYW5jaGVyQ2x1c3RlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZU9wdGlvbnMuaWZSYW5jaGVyQ2x1c3RlciAhPT0gaXNSYW5jaGVyIHx8IHR5cGVPcHRpb25zLmxvY2FsT25seSAmJiBpc0xvY2FsOwogICAgICAgICAgICAgIGlmIChpbnZhbGlkVHlwZSkgewogICAgICAgICAgICAgICAgLy8gUmVtb3ZlIGFueXRoaW5nIG5vdCBiYXNpYwogICAgICAgICAgICAgICAgc2NoZW1hTW9kZXMgPSBfZGVmaW5lUHJvcGVydHkoe30sIFRZUEVfTU9ERVMuQkFTSUMsIHNjaGVtYU1vZGVzW1RZUEVfTU9ERVMuQkFTSUNdKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIFRoaXMgaXMgYW4gZXhwZW5zaXZlIHJlcXVlc3QgdG8gbWFrZSwgc28gb25seSBkbyBpdCBpZiB3ZSByZWFsbHkgbmVlZCB0bwogICAgICAgICAgICB2YXIgbGFiZWw7CiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKHNjaGVtYU1vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmMykgewogICAgICAgICAgICAgIHZhciBfcmVmNCA9IF9zbGljZWRUb0FycmF5KF9yZWYzLCAyKSwKICAgICAgICAgICAgICAgIG1vZGUgPSBfcmVmNFswXSwKICAgICAgICAgICAgICAgIGVuYWJsZWQgPSBfcmVmNFsxXTsKICAgICAgICAgICAgICBpZiAoIWVuYWJsZWQpIHsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKCFvdXRbbW9kZV0pIHsKICAgICAgICAgICAgICAgIG91dFttb2RlXSA9IHt9OwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoIWxhYmVsKSB7CiAgICAgICAgICAgICAgICBsYWJlbCA9IGdldHRlcnMubGFiZWxGb3Ioc2NoZW1hLCBjb3VudHNbc2NoZW1hLmlkXSk7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIG91dFttb2RlXVtzY2hlbWEuaWRdID0gewogICAgICAgICAgICAgICAgbGFiZWw6IGxhYmVsLAogICAgICAgICAgICAgICAgbW9kZTogbW9kZSwKICAgICAgICAgICAgICAgIHdlaWdodDogZ2V0dGVycy50eXBlV2VpZ2h0Rm9yKChzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWEuaWQpIHx8IGxhYmVsLCBtb2RlID09PSBUWVBFX01PREVTLkJBU0lDKSwKICAgICAgICAgICAgICAgIHNjaGVtYTogc2NoZW1hLAogICAgICAgICAgICAgICAgbmFtZTogc2NoZW1hLmlkLAogICAgICAgICAgICAgICAgbmFtZXNwYWNlZDogdHlwZU9wdGlvbnMubmFtZXNwYWNlZCA9PT0gbnVsbCA/IGF0dHJzLm5hbWVzcGFjZWQgOiB0eXBlT3B0aW9ucy5uYW1lc3BhY2VkLAogICAgICAgICAgICAgICAgcm91dGU6IHR5cGVPcHRpb25zLmN1c3RvbVJvdXRlCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9LAogICAgICAgICAgX3JldDI7CiAgICAgICAgZm9yIChfaXRlcmF0b3IzLnMoKTsgIShfc3RlcDMgPSBfaXRlcmF0b3IzLm4oKSkuZG9uZTspIHsKICAgICAgICAgIF9yZXQyID0gX2xvb3AyKCk7CiAgICAgICAgICBpZiAoX3JldDIgPT09IDApIGNvbnRpbnVlOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yMy5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yMy5mKCk7CiAgICAgIH0KICAgICAgdmFyIG5vblVzZWRNb2RlcyA9IG1vZGVzLmZpbHRlcihmdW5jdGlvbiAobSkgewogICAgICAgIHJldHVybiBtICE9PSBUWVBFX01PREVTLlVTRUQ7CiAgICAgIH0pOwogICAgICB2YXIgaXNEZXYgPSByb290R2V0dGVyc1sncHJlZnMvZ2V0J10oVklFV19JTl9BUEkpOwoKICAgICAgLy8gQWRkIHZpcnR1YWwgYW5kIHNwb29mZWQgdHlwZXMKICAgICAgaWYgKG5vblVzZWRNb2Rlcy5sZW5ndGgpIHsKICAgICAgICB2YXIgdmlydHVhbFR5cGVzID0gc3RhdGUudmlydHVhbFR5cGVzW3Byb2R1Y3RdIHx8IFtdOwogICAgICAgIHZhciBzcG9vZmVkVHlwZXMgPSBzdGF0ZS5zcG9vZmVkVHlwZXNbcHJvZHVjdF0gfHwgW107CiAgICAgICAgdmFyIF9hbGxUeXBlcyA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkodmlydHVhbFR5cGVzKSwgX3RvQ29uc3VtYWJsZUFycmF5KHNwb29mZWRUeXBlcykpOwogICAgICAgIHZhciB2aXJ0U3Bvb2ZlZE1vZGVzID0gX3RvQ29uc3VtYWJsZUFycmF5KG5vblVzZWRNb2Rlcyk7CiAgICAgICAgdmFyIF9pdGVyYXRvcjQgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihfYWxsVHlwZXMpLAogICAgICAgICAgX3N0ZXA0OwogICAgICAgIHRyeSB7CiAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHsKICAgICAgICAgICAgICB2YXIgdHlwZSA9IF9zdGVwNC52YWx1ZTsKICAgICAgICAgICAgICB2YXIgaXRlbSA9IGNsb25lKHR5cGUpOwogICAgICAgICAgICAgIHZhciBpZCA9IGl0ZW0ubmFtZTsKCiAgICAgICAgICAgICAgLy8gSXMgdGhlcmUgYSB2aXJ0dWFsL3Nwb29mZWQgdHlwZSBvdmVycmlkZSBmb3Igc2NoZW1hIHR5cGU/CiAgICAgICAgICAgICAgLy8gQ3VycmVudGx5IHVzZWQgYnkgaGFydmVzdGVyLCB0aGlzIHNob3VsZCBiZSBpbnZlc3RpZ2F0ZWQgYW5kIHJlbW92ZWQgaWYgcG9zc2libGUKICAgICAgICAgICAgICB2aXJ0U3Bvb2ZlZE1vZGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZGUpIHsKICAgICAgICAgICAgICAgIHZhciBfb3V0JG1vZGU7CiAgICAgICAgICAgICAgICBpZiAoKF9vdXQkbW9kZSA9IG91dFttb2RlXSkgIT09IG51bGwgJiYgX291dCRtb2RlICE9PSB2b2lkIDAgJiYgX291dCRtb2RlW2lkXSkgewogICAgICAgICAgICAgICAgICBkZWxldGUgb3V0W21vZGVdW2lkXTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICBpZiAoaXRlbVsncHVibGljJ10gPT09IGZhbHNlICYmICFpc0RldikgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChpdGVtLmlmSGF2ZSAmJiAhaWZIYXZlKHJvb3RHZXR0ZXJzLCBpdGVtLmlmSGF2ZSkpIHsKICAgICAgICAgICAgICAgIHJldHVybiAwOyAvLyBjb250aW51ZQogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICBpZiAoaXRlbS5pZkhhdmVUeXBlKSB7CiAgICAgICAgICAgICAgICB2YXIgX2l0ZW0kaWZIYXZlVHlwZTsKICAgICAgICAgICAgICAgIHZhciB0YXJnZXRlZFNjaGVtYXMgPSB0eXBlb2YgaXRlbS5pZkhhdmVUeXBlID09PSAnc3RyaW5nJyA/IHNjaGVtYXMgOiByb290R2V0dGVyc1siIi5jb25jYXQoaXRlbS5pZkhhdmVUeXBlLnN0b3JlLCAiL2FsbCIpXShTQ0hFTUEpOwogICAgICAgICAgICAgICAgdmFyIF90eXBlMiA9IHR5cGVvZiBpdGVtLmlmSGF2ZVR5cGUgPT09ICdzdHJpbmcnID8gaXRlbS5pZkhhdmVUeXBlIDogKF9pdGVtJGlmSGF2ZVR5cGUgPSBpdGVtLmlmSGF2ZVR5cGUpID09PSBudWxsIHx8IF9pdGVtJGlmSGF2ZVR5cGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9pdGVtJGlmSGF2ZVR5cGUudHlwZTsKICAgICAgICAgICAgICAgIHZhciBoYXZlSWRzID0gZmlsdGVyQnkodGFyZ2V0ZWRTY2hlbWFzLCAnaWQnLCBub3JtYWxpemVUeXBlKF90eXBlMikpLm1hcChmdW5jdGlvbiAocykgewogICAgICAgICAgICAgICAgICByZXR1cm4gcy5pZDsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgaWYgKCFoYXZlSWRzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gMDsgLy8gY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChpdGVtLmlmSGF2ZVZlcmIgJiYgIWlmSGF2ZVZlcmIocm9vdEdldHRlcnMsIG1vZHVsZSwgaXRlbS5pZkhhdmVWZXJiLCBoYXZlSWRzKSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gMDsgLy8gY29udGludWUKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKGl0ZW0uaWZIYXZlU3ViVHlwZXMpIHsKICAgICAgICAgICAgICAgIHZhciBoYXNTb21lID0gKGl0ZW0uaWZIYXZlU3ViVHlwZXMgfHwgW10pLnNvbWUoZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuICEhZmluZEJ5KHNjaGVtYXMsICdpZCcsIG5vcm1hbGl6ZVR5cGUodHlwZSkpOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBpZiAoIWhhc1NvbWUpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh0eXBlb2YgaXRlbS5pZlJhbmNoZXJDbHVzdGVyICE9PSAndW5kZWZpbmVkJyAmJiBpdGVtLmlmUmFuY2hlckNsdXN0ZXIgIT09IHJvb3RHZXR0ZXJzLmlzUmFuY2hlcikgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmIChpdGVtLmlmRmVhdHVyZSAmJiAhcm9vdEdldHRlcnNbJ2ZlYXR1cmVzL2dldCddKGl0ZW0uaWZGZWF0dXJlKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIDA7IC8vIGNvbnRpbnVlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIGlmICh2aXJ0U3Bvb2ZlZE1vZGVzLmluY2x1ZGVzKFRZUEVfTU9ERVMuQkFTSUMpICYmICFnZXR0ZXJzLmdyb3VwRm9yQmFzaWNUeXBlKHByb2R1Y3QsIGlkKSkgewogICAgICAgICAgICAgICAgdmlydFNwb29mZWRNb2Rlcy5zcGxpY2UodmlydFNwb29mZWRNb2Rlcy5pbmRleE9mKFRZUEVfTU9ERVMuQkFTSUMpLCAxKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgaWYgKHZpcnRTcG9vZmVkTW9kZXMuaW5jbHVkZXMoVFlQRV9NT0RFUy5GQVZPUklURSkgJiYgIWdldHRlcnMuaXNGYXZvcml0ZShpZCkpIHsKICAgICAgICAgICAgICAgIC8vIG1vZGUgPT09IFRZUEVfTU9ERVMuRkFWT1JJVEUgJiYKICAgICAgICAgICAgICAgIHZpcnRTcG9vZmVkTW9kZXMuc3BsaWNlKHZpcnRTcG9vZmVkTW9kZXMuaW5kZXhPZihUWVBFX01PREVTLkZBVk9SSVRFKSwgMSk7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAvLyBFbnN1cmUgbGFiZWxLZXkgaXMgdGFrZW4gaW50byBhY2NvdW50Li4uIHdpdGggYSBtb2NrIGNvdW50CiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBoYXJtbGVzcyBpZiB0aGUgdHJhbnNsYXRpb24gZG9lc24ndCByZXF1aXJlIGNvdW50CiAgICAgICAgICAgICAgaWYgKGl0ZW0ubGFiZWxLZXkgJiYgcm9vdEdldHRlcnNbJ2kxOG4vZXhpc3RzJ10oaXRlbS5sYWJlbEtleSkpIHsKICAgICAgICAgICAgICAgIGl0ZW0ubGFiZWwgPSByb290R2V0dGVyc1snaTE4bi90J10oaXRlbS5sYWJlbEtleSwgewogICAgICAgICAgICAgICAgICBjb3VudDogMgogICAgICAgICAgICAgICAgfSkudHJpbSgpOwogICAgICAgICAgICAgICAgZGVsZXRlIGl0ZW0ubGFiZWxLZXk7IC8vIExhYmVsIHNob3VsZCByZWFsbHkgdGFrZSBwcmVjZWRlbmNlIG92ZXIgbGFiZWxLZXksIGJ1dCBpdCBkb2Vzbid0LCBzbyByZW1vdmUgaXQKICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaXRlbS5sYWJlbCA9IGl0ZW0ubGFiZWwgfHwgaXRlbS5uYW1lOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB2aXJ0U3Bvb2ZlZE1vZGVzLmZvckVhY2goZnVuY3Rpb24gKG1vZGUpIHsKICAgICAgICAgICAgICAgIHZhciBpc0Jhc2ljID0gbW9kZSA9PT0gVFlQRV9NT0RFUy5CQVNJQzsKICAgICAgICAgICAgICAgIHZhciB3ZWlnaHQgPSB0eXBlLndlaWdodCB8fCBnZXR0ZXJzLnR5cGVXZWlnaHRGb3IoaXRlbS5sYWJlbCwgaXNCYXNpYyk7CiAgICAgICAgICAgICAgICBpdGVtLm1vZGUgPSBtb2RlOwogICAgICAgICAgICAgICAgaXRlbS53ZWlnaHQgPSB3ZWlnaHQ7CiAgICAgICAgICAgICAgICBpZiAoIW91dFttb2RlXSkgewogICAgICAgICAgICAgICAgICBvdXRbbW9kZV0gPSB7fTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIG91dFttb2RlXVtpZF0gPSBpdGVtOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBfcmV0OwogICAgICAgICAgZm9yIChfaXRlcmF0b3I0LnMoKTsgIShfc3RlcDQgPSBfaXRlcmF0b3I0Lm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgX3JldCA9IF9sb29wKCk7CiAgICAgICAgICAgIGlmIChfcmV0ID09PSAwKSBjb250aW51ZTsKICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9pdGVyYXRvcjQuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3I0LmYoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgIH07CiAgfSwKICBncm91cEJ5Rm9yOiBmdW5jdGlvbiBncm91cEJ5Rm9yKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHNjaGVtYSkgewogICAgICByZXR1cm4gc3RhdGUuZ3JvdXBCeVtzY2hlbWEgPT09IG51bGwgfHwgc2NoZW1hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzY2hlbWEuaWRdOwogICAgfTsKICB9LAogIGhpZGVCdWxrQWN0aW9uc0ZvcjogZnVuY3Rpb24gaGlkZUJ1bGtBY3Rpb25zRm9yKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHNjaGVtYSkgewogICAgICByZXR1cm4gc3RhdGUuaGlkZUJ1bGtBY3Rpb25zW3NjaGVtYS5pZF07CiAgICB9OwogIH0sCiAgaGVhZGVyc0ZvcjogZnVuY3Rpb24gaGVhZGVyc0ZvcihzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlLCByb290R2V0dGVycykgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzY2hlbWEpIHsKICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBzY2hlbWEuYXR0cmlidXRlcyB8fCB7fTsKICAgICAgdmFyIGNvbHVtbnMgPSBhdHRyaWJ1dGVzLmNvbHVtbnMgfHwgW107CiAgICAgIHZhciB0eXBlT3B0aW9ucyA9IGdldHRlcnNbJ29wdGlvbnNGb3InXShzY2hlbWEpOwoKICAgICAgLy8gQSBzcGVjaWZpYyBsaXN0IGhhcyBiZWVuIHByb3ZpZGVkCiAgICAgIGlmIChzdGF0ZS5oZWFkZXJzW3NjaGVtYS5pZF0pIHsKICAgICAgICByZXR1cm4gc3RhdGUuaGVhZGVyc1tzY2hlbWEuaWRdLm1hcChmdW5jdGlvbiAoZW50cnkpIHsKICAgICAgICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHZhciBjb2wgPSBmaW5kQnkoY29sdW1ucywgJ25hbWUnLCBlbnRyeSk7CiAgICAgICAgICAgIGlmIChjb2wpIHsKICAgICAgICAgICAgICByZXR1cm4gZnJvbVNjaGVtYShjb2wsIHJvb3RHZXR0ZXJzKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIGVudHJ5OwogICAgICAgICAgfQogICAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoY29sKSB7CiAgICAgICAgICByZXR1cm4gISFjb2w7CiAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIC8vIE90aGVyd2lzZSBtYWtlIG9uZSB1cCBmcm9tIHNjaGVtYQogICAgICB2YXIgb3V0ID0gdHlwZU9wdGlvbnMuc2hvd1N0YXRlID8gW1NUQVRFXSA6IFtdOwogICAgICB2YXIgbmFtZXNwYWNlZCA9IGF0dHJpYnV0ZXMubmFtZXNwYWNlZCB8fCBmYWxzZTsKICAgICAgdmFyIGhhc05hbWUgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvcjUgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihjb2x1bW5zKSwKICAgICAgICBfc3RlcDU7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3I1LnMoKTsgIShfc3RlcDUgPSBfaXRlcmF0b3I1Lm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBjb2wgPSBfc3RlcDUudmFsdWU7CiAgICAgICAgICBpZiAoY29sLmZvcm1hdCA9PT0gJ25hbWUnKSB7CiAgICAgICAgICAgIGhhc05hbWUgPSB0cnVlOwogICAgICAgICAgICBvdXQucHVzaChOQU1FKTsKICAgICAgICAgICAgaWYgKG5hbWVzcGFjZWQpIHsKICAgICAgICAgICAgICBvdXQucHVzaChOQU1FU1BBQ0VfQ09MKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgb3V0LnB1c2goZnJvbVNjaGVtYShjb2wsIHJvb3RHZXR0ZXJzKSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I1LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I1LmYoKTsKICAgICAgfQogICAgICBpZiAoIWhhc05hbWUpIHsKICAgICAgICBpbnNlcnRBdChvdXQsIDEsIE5BTUUpOwogICAgICAgIGlmIChuYW1lc3BhY2VkKSB7CiAgICAgICAgICBpbnNlcnRBdChvdXQsIDIsIE5BTUVTUEFDRV9DT0wpOwogICAgICAgIH0KICAgICAgfQoKICAgICAgLy8gQWdlIGFsd2F5cyBnb2VzIGxhc3QKICAgICAgaWYgKG91dC5pbmNsdWRlcyhBR0UpKSB7CiAgICAgICAgcmVtb3ZlT2JqZWN0KG91dCwgQUdFKTsKICAgICAgICBpZiAodHlwZU9wdGlvbnMuc2hvd0FnZSkgewogICAgICAgICAgb3V0LnB1c2goQUdFKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG91dDsKICAgICAgZnVuY3Rpb24gZnJvbVNjaGVtYShjb2wsIHJvb3RHZXR0ZXJzKSB7CiAgICAgICAgdmFyIGZvcm1hdHRlciwgd2lkdGgsIGZvcm1hdHRlck9wdHM7CiAgICAgICAgaWYgKChjb2wuZm9ybWF0ID09PSAnJyB8fCBjb2wuZm9ybWF0ID09PSAnZGF0ZScpICYmIGNvbC5uYW1lID09PSAnQWdlJykgewogICAgICAgICAgcmV0dXJuIEFHRTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbC5mb3JtYXQgPT09ICdkYXRlJyB8fCBjb2wudHlwZSA9PT0gJ2RhdGUnKSB7CiAgICAgICAgICBmb3JtYXR0ZXIgPSAnRGF0ZSc7CiAgICAgICAgICB3aWR0aCA9IDEyMDsKICAgICAgICAgIGZvcm1hdHRlck9wdHMgPSB7CiAgICAgICAgICAgIG11bHRpbGluZTogdHJ1ZQogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgaWYgKGNvbC50eXBlID09PSAnbnVtYmVyJyB8fCBjb2wudHlwZSA9PT0gJ2ludCcpIHsKICAgICAgICAgIGZvcm1hdHRlciA9ICdOdW1iZXInOwogICAgICAgIH0KICAgICAgICB2YXIgY29sTmFtZSA9IGNvbC5uYW1lLmluY2x1ZGVzKCcgJykgPyBjb2wubmFtZS5zcGxpdCgnICcpLm1hcChmdW5jdGlvbiAod29yZCkgewogICAgICAgICAgcmV0dXJuIHdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB3b3JkLnN1YnN0cmluZygxKTsKICAgICAgICB9KS5qb2luKCcnKSA6IGNvbC5uYW1lOwogICAgICAgIHZhciBleGlzdHMgPSByb290R2V0dGVyc1snaTE4bi9leGlzdHMnXTsKICAgICAgICB2YXIgdCA9IHJvb3RHZXR0ZXJzWydpMThuL3QnXTsKICAgICAgICB2YXIgbGFiZWxLZXkgPSAidGFibGVIZWFkZXJzLiIuY29uY2F0KGNvbE5hbWUuY2hhckF0KDApLnRvTG93ZXJDYXNlKCkgKyBjb2xOYW1lLnNsaWNlKDEpKTsKICAgICAgICB2YXIgZGVzY3JpcHRpb24gPSBjb2wuZGVzY3JpcHRpb24gfHwgJyc7CiAgICAgICAgdmFyIHRvb2x0aXAgPSBkZXNjcmlwdGlvbiAmJiBkZXNjcmlwdGlvbltkZXNjcmlwdGlvbi5sZW5ndGggLSAxXSA9PT0gJy4nID8gZGVzY3JpcHRpb24uc2xpY2UoMCwgLTEpIDogZGVzY3JpcHRpb247CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG5hbWU6IGNvbC5uYW1lLnRvTG93ZXJDYXNlKCksCiAgICAgICAgICBsYWJlbDogZXhpc3RzKGxhYmVsS2V5KSA/IHQobGFiZWxLZXkpIDogY29sLm5hbWUsCiAgICAgICAgICB2YWx1ZTogX3Jvd1ZhbHVlR2V0dGVyKGNvbCksCiAgICAgICAgICBzb3J0OiBbY29sLmZpZWxkXSwKICAgICAgICAgIGZvcm1hdHRlcjogZm9ybWF0dGVyLAogICAgICAgICAgZm9ybWF0dGVyT3B0czogZm9ybWF0dGVyT3B0cywKICAgICAgICAgIHdpZHRoOiB3aWR0aCwKICAgICAgICAgIHRvb2x0aXA6IHRvb2x0aXAKICAgICAgICB9OwogICAgICB9CiAgICB9OwogIH0sCiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAgLy8gQ3VzdG9tIGxpc3QvZGV0YWlsL2VkaXQvaGVhZGVyIGNvbXBvbmVudCBkZXRlY3Rpb24KICAvLwogIC8vIE5vdGU6IHlvdSBjYW4ndCByZWZhY3RvciB0aGVzZSBpbnRvIG9uZSBmdW5jdGlvbiB0aGF0IGRvZXMgYEAvJHtraW5kfS8ke3R5cGV9YCwKICAvLyBiZWNhdXNlIGJhYmVsIG5lZWRzIHNvbWUgaGFyZGNvZGVkIGlkZWEgd2hlcmUgdG8gbG9vayBmb3IgdGhlIGRlcGVuZGVuY3kuCiAgLy8KICAvLyBOb3RlIDI6IFllcyB0aGVzZSBhcmUgZWRpdGluZyBzdGF0ZSBpbiBhIGdldHRlciBmb3IgY2FjaGluZy4uLiBpdCdzIG9rLCBwcm9iYWJseS4KICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICBoYXNDdXN0b21MaXN0OiBmdW5jdGlvbiBoYXNDdXN0b21MaXN0KHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmF3VHlwZSkgewogICAgICB2YXIga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2xpc3QnLCBrZXksIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZUxpc3Qoa2V5KTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgaGFzQ3VzdG9tQ2hhcnQ6IGZ1bmN0aW9uIGhhc0N1c3RvbUNoYXJ0KHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmF3VHlwZSkgewogICAgICB2YXIga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2NoYXJ0Jywga2V5LCBmdW5jdGlvbiAoa2V5KSB7CiAgICAgICAgcmV0dXJuIHJlc29sdmVDaGFydChrZXkpOwogICAgICB9KTsKICAgIH07CiAgfSwKICBoYXNDdXN0b21EZXRhaWw6IGZ1bmN0aW9uIGhhc0N1c3RvbURldGFpbChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHJhd1R5cGUsIHN1YlR5cGUpIHsKICAgICAgdmFyIGtleSA9IGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpOwogICAgICByZXR1cm4gaGFzQ3VzdG9tKHN0YXRlLCByb290U3RhdGUsICdkZXRhaWwnLCBrZXksIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZURldGFpbChrZXkpOwogICAgICB9KTsKICAgIH07CiAgfSwKICBoYXNHcmFwaDogZnVuY3Rpb24gaGFzR3JhcGgoc3RhdGUsIGdldHRlcnMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmVzb3VyY2UpIHsKICAgICAgdmFyIHR5cGVPcHRpb25zID0gZ2V0dGVyc1snb3B0aW9uc0ZvciddKHJlc291cmNlKTsKICAgICAgaWYgKHR5cGVPcHRpb25zICYmIHR5cGVPcHRpb25zLmhhc0dyYXBoKSB7CiAgICAgICAgcmV0dXJuIGdyYXBoQ29uZmlnTWFwW3Jlc291cmNlXTsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH07CiAgfSwKICBoYXNDdXN0b21FZGl0OiBmdW5jdGlvbiBoYXNDdXN0b21FZGl0KHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmF3VHlwZSwgc3ViVHlwZSkgewogICAgICB2YXIga2V5ID0gZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSwgc3ViVHlwZSk7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2VkaXQnLCBrZXksIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZUVkaXQoa2V5KTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgaGFzQ29tcG9uZW50OiBmdW5jdGlvbiBoYXNDb21wb25lbnQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChwYXRoKSB7CiAgICAgIHJldHVybiBoYXNDdXN0b20oc3RhdGUsIHJvb3RTdGF0ZSwgJ2VkaXQnLCBwYXRoLCBmdW5jdGlvbiAocGF0aCkgewogICAgICAgIHJldHVybiByZXNvbHZlRWRpdChwYXRoKTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgaGFzQ3VzdG9tUHJvbXB0UmVtb3ZlOiBmdW5jdGlvbiBoYXNDdXN0b21Qcm9tcHRSZW1vdmUoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyYXdUeXBlLCBzdWJUeXBlKSB7CiAgICAgIHZhciBrZXkgPSBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKTsKICAgICAgcmV0dXJuIGhhc0N1c3RvbShzdGF0ZSwgcm9vdFN0YXRlLCAncHJvbXB0UmVtb3ZlJywga2V5LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgcmV0dXJuIHJlcXVpcmUucmVzb2x2ZSgiQHNoZWxsL3Byb21wdFJlbW92ZS8iLmNvbmNhdChrZXkpKTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgaGFzQ3VzdG9tV2luZG93Q29tcG9uZW50OiBmdW5jdGlvbiBoYXNDdXN0b21XaW5kb3dDb21wb25lbnQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyYXdUeXBlLCBzdWJUeXBlKSB7CiAgICAgIHZhciBrZXkgPSBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKTsKICAgICAgcmV0dXJuIGhhc0N1c3RvbShzdGF0ZSwgcm9vdFN0YXRlLCAnd2luZG93Q29tcG9uZW50cycsIGtleSwgZnVuY3Rpb24gKGtleSkgewogICAgICAgIHJldHVybiByZXNvbHZlV2luZG93Q29tcG9uZW50KGtleSk7CiAgICAgIH0pOwogICAgfTsKICB9LAogIGhhc0N1c3RvbU1hY2hpbmVDb25maWdDb21wb25lbnQ6IGZ1bmN0aW9uIGhhc0N1c3RvbU1hY2hpbmVDb25maWdDb21wb25lbnQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyYXdUeXBlLCBzdWJUeXBlKSB7CiAgICAgIHZhciBrZXkgPSBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKTsKICAgICAgcmV0dXJuIGhhc0N1c3RvbShzdGF0ZSwgcm9vdFN0YXRlLCAnbWFjaGluZS1jb25maWcnLCBrZXksIGZ1bmN0aW9uIChrZXkpIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZU1hY2hpbmVDb25maWdDb21wb25lbnQoa2V5KTsKICAgICAgfSk7CiAgICB9OwogIH0sCiAgaGFzQ3VzdG9tQ2xvdWRDcmVkZW50aWFsQ29tcG9uZW50OiBmdW5jdGlvbiBoYXNDdXN0b21DbG91ZENyZWRlbnRpYWxDb21wb25lbnQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyYXdUeXBlLCBzdWJUeXBlKSB7CiAgICAgIHZhciBrZXkgPSBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKTsKICAgICAgcmV0dXJuIGhhc0N1c3RvbShzdGF0ZSwgcm9vdFN0YXRlLCAnY2xvdWQtY3JlZGVudGlhbCcsIGtleSwgZnVuY3Rpb24gKGtleSkgewogICAgICAgIHJldHVybiByZXNvbHZlQ2xvdWRDcmVkZW50aWFsQ29tcG9uZW50KGtleSk7CiAgICAgIH0pOwogICAgfTsKICB9LAogIGltcG9ydENvbXBvbmVudDogZnVuY3Rpb24gaW1wb3J0Q29tcG9uZW50KHN0YXRlLCBnZXR0ZXJzKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHBhdGgpIHsKICAgICAgcmV0dXJuIF9pbXBvcnRFZGl0KHBhdGgpOwogICAgfTsKICB9LAogIGltcG9ydERpYWxvZzogZnVuY3Rpb24gaW1wb3J0RGlhbG9nKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmF3VHlwZSwgc3ViVHlwZSkgewogICAgICByZXR1cm4gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsICdkaWFsb2cnLCBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKSwgX2ltcG9ydERpYWxvZyk7CiAgICB9OwogIH0sCiAgaW1wb3J0TGlzdDogZnVuY3Rpb24gaW1wb3J0TGlzdChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHJhd1R5cGUpIHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnbGlzdCcsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUpLCBfaW1wb3J0TGlzdCk7CiAgICB9OwogIH0sCiAgaW1wb3J0Q2hhcnQ6IGZ1bmN0aW9uIGltcG9ydENoYXJ0KHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmF3VHlwZSkgewogICAgICByZXR1cm4gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsICdjaGFydCcsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUpLCBfaW1wb3J0Q2hhcnQpOwogICAgfTsKICB9LAogIGltcG9ydERldGFpbDogZnVuY3Rpb24gaW1wb3J0RGV0YWlsKHN0YXRlLCBnZXR0ZXJzLCByb290U3RhdGUpIHsKICAgIHJldHVybiBmdW5jdGlvbiAocmF3VHlwZSwgc3ViVHlwZSkgewogICAgICByZXR1cm4gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsICdkZXRhaWwnLCBnZXR0ZXJzLmNvbXBvbmVudEZvcihyYXdUeXBlLCBzdWJUeXBlKSwgX2ltcG9ydERldGFpbCk7CiAgICB9OwogIH0sCiAgaW1wb3J0RWRpdDogZnVuY3Rpb24gaW1wb3J0RWRpdChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHJhd1R5cGUsIHN1YlR5cGUpIHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnZWRpdCcsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBfaW1wb3J0RWRpdCk7CiAgICB9OwogIH0sCiAgaW1wb3J0Q3VzdG9tUHJvbXB0UmVtb3ZlOiBmdW5jdGlvbiBpbXBvcnRDdXN0b21Qcm9tcHRSZW1vdmUoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyYXdUeXBlLCBzdWJUeXBlKSB7CiAgICAgIHJldHVybiBsb2FkRXh0ZW5zaW9uKHJvb3RTdGF0ZSwgJ3Byb21wdFJlbW92ZScsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBfaW1wb3J0Q3VzdG9tUHJvbXB0UmVtb3ZlKTsKICAgIH07CiAgfSwKICBpbXBvcnRXaW5kb3dDb21wb25lbnQ6IGZ1bmN0aW9uIGltcG9ydFdpbmRvd0NvbXBvbmVudChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHJhd1R5cGUsIHN1YlR5cGUpIHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnd2luZG93Q29tcG9uZW50cycsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBfaW1wb3J0V2luZG93Q29tcG9uZW50KTsKICAgIH07CiAgfSwKICBpbXBvcnRMb2dpbjogZnVuY3Rpb24gaW1wb3J0TG9naW4oc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChhdXRoVHlwZSkgewogICAgICByZXR1cm4gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsICdsb2dpbicsIGF1dGhUeXBlLCBfaW1wb3J0TG9naW4pOwogICAgfTsKICB9LAogIGltcG9ydE1hY2hpbmVDb25maWc6IGZ1bmN0aW9uIGltcG9ydE1hY2hpbmVDb25maWcoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChyYXdUeXBlLCBzdWJUeXBlKSB7CiAgICAgIHJldHVybiBsb2FkRXh0ZW5zaW9uKHJvb3RTdGF0ZSwgJ21hY2hpbmUtY29uZmlnJywgZ2V0dGVycy5jb21wb25lbnRGb3IocmF3VHlwZSwgc3ViVHlwZSksIF9pbXBvcnRNYWNoaW5lQ29uZmlnKTsKICAgIH07CiAgfSwKICBpbXBvcnRDbG91ZENyZWRlbnRpYWw6IGZ1bmN0aW9uIGltcG9ydENsb3VkQ3JlZGVudGlhbChzdGF0ZSwgZ2V0dGVycywgcm9vdFN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHJhd1R5cGUsIHN1YlR5cGUpIHsKICAgICAgcmV0dXJuIGxvYWRFeHRlbnNpb24ocm9vdFN0YXRlLCAnY2xvdWQtY3JlZGVudGlhbCcsIGdldHRlcnMuY29tcG9uZW50Rm9yKHJhd1R5cGUsIHN1YlR5cGUpLCBfaW1wb3J0Q2xvdWRDcmVkZW50aWFsKTsKICAgIH07CiAgfSwKICBjb21wb25lbnRGb3I6IGZ1bmN0aW9uIGNvbXBvbmVudEZvcihzdGF0ZSwgZ2V0dGVycykgewogICAgcmV0dXJuIGZ1bmN0aW9uICh0eXBlLCBzdWJUeXBlKSB7CiAgICAgIHZhciBrZXkgPSB0eXBlOwogICAgICBpZiAoc3ViVHlwZSkgewogICAgICAgIGtleSA9ICIiLmNvbmNhdCh0eXBlLCAiLyIpLmNvbmNhdChzdWJUeXBlKTsKICAgICAgfQogICAgICBpZiAoc3RhdGUuY2FjaGUuY29tcG9uZW50Rm9yW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgIHJldHVybiBzdGF0ZS5jYWNoZS5jb21wb25lbnRGb3Jba2V5XTsKICAgICAgfQogICAgICB2YXIgb3V0ID0gdHlwZTsKICAgICAgdmFyIG1hcHBpbmcgPSBzdGF0ZS50eXBlVG9Db21wb25lbnRNYXBwaW5ncy5maW5kKGZ1bmN0aW9uIChtYXBwaW5nKSB7CiAgICAgICAgdmFyIHJlID0gc3RyaW5nVG9SZWdleChtYXBwaW5nLm1hdGNoKTsKICAgICAgICByZXR1cm4gcmUudGVzdChrZXkpOwogICAgICB9KTsKICAgICAgaWYgKG1hcHBpbmcpIHsKICAgICAgICBvdXQgPSBtYXBwaW5nLnJlcGxhY2U7CiAgICAgIH0gZWxzZSBpZiAoc3ViVHlwZSkgewogICAgICAgIC8vIFRyeSBhZ2FpbiB3aXRob3V0IHRoZSBzdWJUeXBlCiAgICAgICAgb3V0ID0gZ2V0dGVycy5jb21wb25lbnRGb3IodHlwZSk7CiAgICAgIH0KICAgICAgc3RhdGUuY2FjaGUuY29tcG9uZW50Rm9yW2tleV0gPSBvdXQ7CiAgICAgIHJldHVybiBvdXQ7CiAgICB9OwogIH0sCiAgaXNJZ25vcmVkOiBmdW5jdGlvbiBpc0lnbm9yZWQoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHJldHVybiBmdW5jdGlvbiAoc2NoZW1hKSB7CiAgICAgIHZhciBvdXQgPSBmYWxzZTsKICAgICAgdmFyIF9pdGVyYXRvcjYgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihzdGF0ZS5ncm91cElnbm9yZSksCiAgICAgICAgX3N0ZXA2OwogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yNi5zKCk7ICEoX3N0ZXA2ID0gX2l0ZXJhdG9yNi5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgX3NjaGVtYSRhdHRyaWJ1dGVzMjsKICAgICAgICAgIHZhciBfcnVsZSA9IF9zdGVwNi52YWx1ZTsKICAgICAgICAgIHZhciBncm91cCA9IHNjaGVtYSA9PT0gbnVsbCB8fCBzY2hlbWEgPT09IHZvaWQgMCB8fCAoX3NjaGVtYSRhdHRyaWJ1dGVzMiA9IHNjaGVtYS5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfc2NoZW1hJGF0dHJpYnV0ZXMyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfc2NoZW1hJGF0dHJpYnV0ZXMyLmdyb3VwOwogICAgICAgICAgaWYgKGdyb3VwICYmIGdyb3VwLm1hdGNoKHN0cmluZ1RvUmVnZXgoX3J1bGUudHlwZSkgJiYgaXNPYmplY3QoX3J1bGUpICYmIF9ydWxlLnR5cGUpKSB7CiAgICAgICAgICAgIG91dCA9IF9ydWxlLmNiKHJvb3RHZXR0ZXJzKTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoZ3JvdXAgJiYgdHlwZW9mIF9ydWxlID09PSAnc3RyaW5nJyAmJiBncm91cC5tYXRjaChzdHJpbmdUb1JlZ2V4KF9ydWxlKSkpIHsKICAgICAgICAgICAgb3V0ID0gdHJ1ZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3I2LmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3I2LmYoKTsKICAgICAgfQogICAgICBpZiAoIW91dCkgewogICAgICAgIHZhciBfaXRlcmF0b3I3ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoc3RhdGUudHlwZUlnbm9yZSksCiAgICAgICAgICBfc3RlcDc7CiAgICAgICAgdHJ5IHsKICAgICAgICAgIGZvciAoX2l0ZXJhdG9yNy5zKCk7ICEoX3N0ZXA3ID0gX2l0ZXJhdG9yNy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICAgIHZhciBydWxlID0gX3N0ZXA3LnZhbHVlOwogICAgICAgICAgICBpZiAoc2NoZW1hLmlkLm1hdGNoKHN0cmluZ1RvUmVnZXgocnVsZSkpKSB7CiAgICAgICAgICAgICAgb3V0ID0gdHJ1ZTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgICAgX2l0ZXJhdG9yNy5lKGVycik7CiAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgIF9pdGVyYXRvcjcuZigpOwogICAgICAgIH0KICAgICAgfQogICAgICBzdGF0ZS5jYWNoZS5pZ25vcmVbc2NoZW1hLmlkXSA9IG91dDsKICAgICAgcmV0dXJuIG91dDsKICAgIH07CiAgfSwKICBhY3RpdmVQcm9kdWN0czogZnVuY3Rpb24gYWN0aXZlUHJvZHVjdHMoc3RhdGUsIGdldHRlcnMsIHJvb3RTdGF0ZSwgcm9vdEdldHRlcnMpIHsKICAgIHZhciBrbm93blR5cGVzID0ge307CiAgICB2YXIga25vd25Hcm91cHMgPSB7fTsKICAgIHZhciBpc0RldiA9IHJvb3RHZXR0ZXJzWydwcmVmcy9nZXQnXShWSUVXX0lOX0FQSSk7CiAgICBpZiAoc3RhdGUuc2NoZW1hR2VuZXJhdGlvbiA8IDApIHsKICAgICAgLy8gVGhpcyBkb2VzIG5vdGhpbmcsIGJ1dCBtYWtlcyBhY3RpdmVQcm9kdWN0cyBkZXBlbmQgb24gc2NoZW1hR2VuZXJhdGlvbgogICAgICAvLyBzbyB0aGF0IGl0IGNhbiBiZSB1c2VkIHRvIHVwZGF0ZSB0aGUgcHJvZHVjdCBsaXN0IG9uIHNjaGVtYSBjaGFuZ2UuCiAgICAgIHJldHVybjsKICAgIH0KICAgIHJldHVybiBzdGF0ZS5wcm9kdWN0cy5maWx0ZXIoZnVuY3Rpb24gKHApIHsKICAgICAgdmFyIG1vZHVsZSA9IHAuaW5TdG9yZTsKICAgICAgaWYgKHBbJ3B1YmxpYyddID09PSBmYWxzZSAmJiAhaXNEZXYpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHAuaWZHZXR0ZXIgJiYgIXJvb3RHZXR0ZXJzW3AuaWZHZXR0ZXJdKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICAgIGlmICgha25vd25UeXBlc1ttb2R1bGVdKSB7CiAgICAgICAgdmFyIHNjaGVtYXMgPSByb290R2V0dGVyc1siIi5jb25jYXQobW9kdWxlLCAiL2FsbCIpXShTQ0hFTUEpOwogICAgICAgIGtub3duVHlwZXNbbW9kdWxlXSA9IFtdOwogICAgICAgIGtub3duR3JvdXBzW21vZHVsZV0gPSBbXTsKICAgICAgICB2YXIgX2l0ZXJhdG9yOCA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHNjaGVtYXMpLAogICAgICAgICAgX3N0ZXA4OwogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjgucygpOyAhKF9zdGVwOCA9IF9pdGVyYXRvcjgubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgcyA9IF9zdGVwOC52YWx1ZTsKICAgICAgICAgICAga25vd25UeXBlc1ttb2R1bGVdLnB1c2gocy5faWQpOwogICAgICAgICAgICBpZiAocy5fZ3JvdXApIHsKICAgICAgICAgICAgICBhZGRPYmplY3Qoa25vd25Hcm91cHNbbW9kdWxlXSwgcy5fZ3JvdXApOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICBfaXRlcmF0b3I4LmUoZXJyKTsKICAgICAgICB9IGZpbmFsbHkgewogICAgICAgICAgX2l0ZXJhdG9yOC5mKCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChwLmlmRmVhdHVyZSkgewogICAgICAgIHZhciBmZWF0dXJlcyA9IEFycmF5LmlzQXJyYXkocC5pZkZlYXR1cmUpID8gcC5pZkZlYXR1cmUgOiBbcC5pZkZlYXR1cmVdOwogICAgICAgIHZhciBfaXRlcmF0b3I5ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoZmVhdHVyZXMpLAogICAgICAgICAgX3N0ZXA5OwogICAgICAgIHRyeSB7CiAgICAgICAgICBmb3IgKF9pdGVyYXRvcjkucygpOyAhKF9zdGVwOSA9IF9pdGVyYXRvcjkubigpKS5kb25lOykgewogICAgICAgICAgICB2YXIgZiA9IF9zdGVwOS52YWx1ZTsKICAgICAgICAgICAgaWYgKCFyb290R2V0dGVyc1snZmVhdHVyZXMvZ2V0J10oZikpIHsKICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICAgIF9pdGVyYXRvcjkuZShlcnIpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICBfaXRlcmF0b3I5LmYoKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHAuaWZIYXZlICYmICFpZkhhdmUocm9vdEdldHRlcnMsIHAuaWZIYXZlKSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICBpZiAocC5pZkhhdmVUeXBlKSB7CiAgICAgICAgdmFyIGhhdmVJZHMgPSBrbm93blR5cGVzW21vZHVsZV0uZmlsdGVyKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICByZXR1cm4gdC5tYXRjaChzdHJpbmdUb1JlZ2V4KHAuaWZIYXZlVHlwZSkpOwogICAgICAgIH0pOwogICAgICAgIGlmICghaGF2ZUlkcy5sZW5ndGgpIHsKICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKHAuaWZIYXZlVmVyYiAmJiAhaWZIYXZlVmVyYihyb290R2V0dGVycywgbW9kdWxlLCBwLmlmSGF2ZVZlcmIsIGhhdmVJZHMpKSB7CiAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChwLmlmSGF2ZUdyb3VwICYmICFrbm93bkdyb3Vwc1ttb2R1bGVdLmZpbmQoZnVuY3Rpb24gKHQpIHsKICAgICAgICByZXR1cm4gdC5tYXRjaChzdHJpbmdUb1JlZ2V4KHAuaWZIYXZlR3JvdXApKTsKICAgICAgfSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9KTsKICB9LAogIGlzUHJvZHVjdEFjdGl2ZTogZnVuY3Rpb24gaXNQcm9kdWN0QWN0aXZlKHN0YXRlLCBnZXR0ZXJzKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKG5hbWUpIHsKICAgICAgaWYgKGZpbmRCeShnZXR0ZXJzWydhY3RpdmVQcm9kdWN0cyddLCAnbmFtZScsIG5hbWUpKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KICAgICAgcmV0dXJuIGZhbHNlOwogICAgfTsKICB9LAogIHJvd1ZhbHVlR2V0dGVyOiBmdW5jdGlvbiByb3dWYWx1ZUdldHRlcihzdGF0ZSkgewogICAgcmV0dXJuIGZ1bmN0aW9uIChzY2hlbWEsIGNvbE5hbWUpIHsKICAgICAgdmFyIGNvbCA9IF9maW5kQ29sdW1uQnlOYW1lKHNjaGVtYSwgY29sTmFtZSk7CiAgICAgIHJldHVybiBfcm93VmFsdWVHZXR0ZXIoY29sKTsKICAgIH07CiAgfSwKICBpc1Byb2R1Y3RSZWdpc3RlcmVkOiBmdW5jdGlvbiBpc1Byb2R1Y3RSZWdpc3RlcmVkKHN0YXRlKSB7CiAgICByZXR1cm4gZnVuY3Rpb24gKHByb2R1Y3ROYW1lKSB7CiAgICAgIHZhciBwcm9kID0gc3RhdGUucHJvZHVjdHMuZmluZChmdW5jdGlvbiAocCkgewogICAgICAgIHJldHVybiBwLm5hbWUgPT09IHByb2R1Y3ROYW1lOwogICAgICB9KTsKICAgICAgcmV0dXJuICEhcHJvZDsKICAgIH07CiAgfQp9OwpleHBvcnQgdmFyIG11dGF0aW9ucyA9IHsKICBzY2hlbWFDaGFuZ2VkOiBmdW5jdGlvbiBzY2hlbWFDaGFuZ2VkKHN0YXRlKSB7CiAgICBzdGF0ZS5zY2hlbWFHZW5lcmF0aW9uID0gc3RhdGUuc2NoZW1hR2VuZXJhdGlvbiArIDE7CiAgfSwKICAvLyBSZW1vdmUgdGhlIHNwZWNpZmllZCBwcm9kdWN0CiAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoc3RhdGUsIF9yZWY1KSB7CiAgICB2YXIgcHJvZHVjdCA9IF9yZWY1LnByb2R1Y3QsCiAgICAgIHBsdWdpbiA9IF9yZWY1LnBsdWdpbjsKICAgIHZhciBleGlzdGluZyA9IHN0YXRlLnByb2R1Y3RzLmZpbmRJbmRleChmdW5jdGlvbiAocCkgewogICAgICByZXR1cm4gcC5uYW1lID09PSBwcm9kdWN0OwogICAgfSk7CgogICAgLy8gUmVtb3ZlIHRoZSBwcm9kdWN0CiAgICBpZiAoZXhpc3RpbmcgIT09IC0xKSB7CiAgICAgIHN0YXRlLnByb2R1Y3RzLnNwbGljZShleGlzdGluZywgMSk7CiAgICB9CgogICAgLy8gR28gdGhyb3VnaCB0aGUgYmFzaWMgdHlwZXMgYW5kIHJlbW92ZSB0aGUgaGVhZGVycwogICAgaWYgKHN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSkgewogICAgICBkZWxldGUgc3RhdGUudmlydHVhbFR5cGVzW3Byb2R1Y3RdOwogICAgfQogICAgaWYgKHN0YXRlLmJhc2ljVHlwZXNbcHJvZHVjdF0pIHsKICAgICAgLy8gUmVtb3ZlIHRhYmxlIGhlYWRlciBjb25maWd1cmF0aW9uCiAgICAgIE9iamVjdC5rZXlzKHN0YXRlLmJhc2ljVHlwZXNbcHJvZHVjdF0pLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICBkZWxldGUgc3RhdGUuaGVhZGVyc1t0eXBlXTsKICAgICAgICBkZWxldGUgc3RhdGUuYmFzaWNUeXBlV2VpZ2h0c1t0eXBlXTsKICAgICAgICBkZWxldGUgc3RhdGUuY2FjaGUuaWdub3JlW3R5cGVdOwogICAgICAgIC8vIFRoZXNlIHRyYWNrIHdoZXRoZXIgdGhlIHR5cGUgaGFzIGEgY3VzdG9tIGNvbXBvbmVudAogICAgICAgIGRlbGV0ZSBzdGF0ZS5jYWNoZS5kZXRhaWxbdHlwZV07CiAgICAgICAgZGVsZXRlIHN0YXRlLmNhY2hlLmVkaXRbdHlwZV07CiAgICAgICAgZGVsZXRlIHN0YXRlLmNhY2hlLmxpc3RbdHlwZV07CgogICAgICAgIC8vIERlbGV0ZSBhbGwgb2YgdGhlIGVudHJpZXMgZnJvbSB0aGUgY29tcG9uZW50Rm9yIGNhY2hlIHdoZXJlIHRoZSB2YWx5ZSBpcyB0aGUgdHlwZQogICAgICAgIC8vIENhbiBkbyB0aGlzIG1vcmUgZWZmaWNpZW50bHkKICAgICAgICBPYmplY3Qua2V5cyhzdGF0ZS5jYWNoZS5jb21wb25lbnRGb3IpLmZvckVhY2goZnVuY3Rpb24gKGspIHsKICAgICAgICAgIHZhciB2ID0gc3RhdGUuY2FjaGUuY29tcG9uZW50Rm9yW2tdOwogICAgICAgICAgaWYgKHYgPT09IHR5cGUpIHsKICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmNhY2hlLmNvbXBvbmVudEZvcltrXTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgfSk7CiAgICAgIGRlbGV0ZSBzdGF0ZS5iYXNpY1R5cGVzW3Byb2R1Y3RdOwogICAgfQogICAgaWYgKHBsdWdpbikgewogICAgICAvLyBraW5kIGlzIGxpc3QsIGVkaXQsIGRldGFpbCBldGMKICAgICAgT2JqZWN0LmtleXMocGx1Z2luLnR5cGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChraW5kKSB7CiAgICAgICAgaWYgKHN0YXRlLmNhY2hlW2tpbmRdKSB7CiAgICAgICAgICBPYmplY3Qua2V5cyhwbHVnaW4udHlwZXNba2luZF0pLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHsKICAgICAgICAgICAgZGVsZXRlIHN0YXRlLmNhY2hlW2tpbmRdW3R5cGVdOwogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9KTsKICAgIH0KICB9LAogIHByb2R1Y3Q6IGZ1bmN0aW9uIHByb2R1Y3Qoc3RhdGUsIG9iaikgewogICAgdmFyIGV4aXN0aW5nID0gZmluZEJ5KHN0YXRlLnByb2R1Y3RzLCAnbmFtZScsIG9iai5uYW1lKTsKICAgIGlmIChleGlzdGluZykgewogICAgICBPYmplY3QuYXNzaWduKGV4aXN0aW5nLCBvYmopOwogICAgfSBlbHNlIHsKICAgICAgYWRkT2JqZWN0KHN0YXRlLnByb2R1Y3RzLCBvYmopOwogICAgfQogIH0sCiAgdmlydHVhbFR5cGU6IGZ1bmN0aW9uIHZpcnR1YWxUeXBlKHN0YXRlLCBfcmVmNikgewogICAgdmFyIHByb2R1Y3QgPSBfcmVmNi5wcm9kdWN0LAogICAgICBvYmogPSBfcmVmNi5vYmo7CiAgICBpZiAoIXN0YXRlLnZpcnR1YWxUeXBlc1twcm9kdWN0XSkgewogICAgICBzdGF0ZS52aXJ0dWFsVHlwZXNbcHJvZHVjdF0gPSBbXTsKICAgIH0KICAgIHZhciBjb3B5ID0gY2xvbmUob2JqKTsKICAgIGNvcHkudmlydHVhbCA9IHRydWU7CiAgICB2YXIgZXhpc3RpbmcgPSBmaW5kQnkoc3RhdGUudmlydHVhbFR5cGVzW3Byb2R1Y3RdLCAnbmFtZScsIGNvcHkubmFtZSk7CiAgICBpZiAoZXhpc3RpbmcpIHsKICAgICAgT2JqZWN0LmFzc2lnbihleGlzdGluZywgY29weSk7CiAgICB9IGVsc2UgewogICAgICBhZGRPYmplY3Qoc3RhdGUudmlydHVhbFR5cGVzW3Byb2R1Y3RdLCBjb3B5KTsKICAgIH0KICB9LAogIHNwb29mZWRUeXBlOiBmdW5jdGlvbiBzcG9vZmVkVHlwZShzdGF0ZSwgX3JlZjcpIHsKICAgIHZhciBwcm9kdWN0ID0gX3JlZjcucHJvZHVjdCwKICAgICAgb2JqID0gX3JlZjcub2JqOwogICAgaWYgKCFzdGF0ZS5zcG9vZmVkVHlwZXNbcHJvZHVjdF0pIHsKICAgICAgc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdID0gW107CiAgICB9CiAgICB2YXIgY29weSA9IGNsb25lKG9iaik7CiAgICBpbnN0YW5jZU1ldGhvZHNbcHJvZHVjdF0gPSBpbnN0YW5jZU1ldGhvZHNbcHJvZHVjdF0gfHwge307CiAgICBpbnN0YW5jZU1ldGhvZHNbcHJvZHVjdF1bY29weS50eXBlXSA9IGNvcHkuZ2V0SW5zdGFuY2VzOwogICAgZGVsZXRlIGNvcHkuZ2V0SW5zdGFuY2VzOwogICAgY29weS5uYW1lID0gY29weS50eXBlOwogICAgY29weS5pc1Nwb29mZWQgPSB0cnVlOwogICAgY29weS52aXJ0dWFsID0gdHJ1ZTsKICAgIGNvcHkuc2NoZW1hcy5mb3JFYWNoKGZ1bmN0aW9uIChzY2hlbWEpIHsKICAgICAgc2NoZW1hLmxpbmtzID0gX29iamVjdFNwcmVhZCh7CiAgICAgICAgY29sbGVjdGlvbjogIi8iLmNvbmNhdChTUE9PRkVEX1BSRUZJWCwgIi8iKS5jb25jYXQoc2NoZW1hLmlkKQogICAgICB9LCBzY2hlbWEubGlua3MgfHwge30pOwogICAgfSk7CiAgICB2YXIgZXhpc3RpbmcgPSBmaW5kQnkoc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdLCAndHlwZScsIGNvcHkudHlwZSk7CiAgICBpZiAoZXhpc3RpbmcpIHsKICAgICAgT2JqZWN0LmFzc2lnbihleGlzdGluZywgY29weSk7CiAgICB9IGVsc2UgewogICAgICBhZGRPYmplY3Qoc3RhdGUuc3Bvb2ZlZFR5cGVzW3Byb2R1Y3RdLCBjb3B5KTsKICAgIH0KICB9LAogIGJhc2ljVHlwZTogZnVuY3Rpb24gYmFzaWNUeXBlKHN0YXRlLCBfcmVmOCkgewogICAgdmFyIHByb2R1Y3QgPSBfcmVmOC5wcm9kdWN0LAogICAgICBncm91cCA9IF9yZWY4Lmdyb3VwLAogICAgICB0eXBlcyA9IF9yZWY4LnR5cGVzOwogICAgaWYgKCFwcm9kdWN0KSB7CiAgICAgIHByb2R1Y3QgPSBFWFBMT1JFUjsKICAgIH0KICAgIGlmICghZ3JvdXApIHsKICAgICAgZ3JvdXAgPSBST09UOwogICAgfQogICAgaWYgKCFpc0FycmF5KHR5cGVzKSkgewogICAgICB0eXBlcyA9IFt0eXBlc107CiAgICB9CiAgICBpZiAoIXN0YXRlLmJhc2ljVHlwZXNbcHJvZHVjdF0pIHsKICAgICAgc3RhdGUuYmFzaWNUeXBlc1twcm9kdWN0XSA9IHt9OwogICAgfQogICAgdmFyIF9pdGVyYXRvcjEwID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodHlwZXMpLAogICAgICBfc3RlcDEwOwogICAgdHJ5IHsKICAgICAgZm9yIChfaXRlcmF0b3IxMC5zKCk7ICEoX3N0ZXAxMCA9IF9pdGVyYXRvcjEwLm4oKSkuZG9uZTspIHsKICAgICAgICB2YXIgdCA9IF9zdGVwMTAudmFsdWU7CiAgICAgICAgc3RhdGUuYmFzaWNUeXBlc1twcm9kdWN0XVt0XSA9IGdyb3VwOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yMTAuZShlcnIpOwogICAgfSBmaW5hbGx5IHsKICAgICAgX2l0ZXJhdG9yMTAuZigpOwogICAgfQogIH0sCiAgaWdub3JlR3JvdXA6IGZ1bmN0aW9uIGlnbm9yZUdyb3VwKHN0YXRlLCBfcmVmOSkgewogICAgdmFyIG1hdGNoID0gX3JlZjkucmVnZXhPclN0cmluZywKICAgICAgY2IgPSBfcmVmOS5jYjsKICAgIG1hdGNoID0gZW5zdXJlUmVnZXgobWF0Y2gpOwogICAgLy8gU3RhdGUgc2hvdWxkbid0IGNvbnRhaW4gYWN0dWFsIFJlZ0V4cCBvYmplY3RzLCBiZWNhdXNlIHRoZXkgZG9uJ3Qgc2VyaWFsaXplCiAgICBjYiA/IHN0YXRlLmdyb3VwSWdub3JlLnB1c2goewogICAgICB0eXBlOiByZWdleFRvU3RyaW5nKG1hdGNoKSwKICAgICAgY2I6IGNiCiAgICB9KSA6IHN0YXRlLmdyb3VwSWdub3JlLnB1c2gocmVnZXhUb1N0cmluZyhtYXRjaCkpOwogIH0sCiAgaWdub3JlVHlwZTogZnVuY3Rpb24gaWdub3JlVHlwZShzdGF0ZSwgbWF0Y2gpIHsKICAgIG1hdGNoID0gZW5zdXJlUmVnZXgobWF0Y2gpOwogICAgc3RhdGUudHlwZUlnbm9yZS5wdXNoKHJlZ2V4VG9TdHJpbmcobWF0Y2gpKTsKICB9LAogIGdyb3VwQnk6IGZ1bmN0aW9uIGdyb3VwQnkoc3RhdGUsIF9yZWYxMCkgewogICAgdmFyIHR5cGUgPSBfcmVmMTAudHlwZSwKICAgICAgZmllbGQgPSBfcmVmMTAuZmllbGQ7CiAgICBzdGF0ZS5ncm91cEJ5W3R5cGVdID0gZmllbGQ7CiAgfSwKICBoZWFkZXJzOiBmdW5jdGlvbiBoZWFkZXJzKHN0YXRlLCBfcmVmMTEpIHsKICAgIHZhciB0eXBlID0gX3JlZjExLnR5cGUsCiAgICAgIGhlYWRlcnMgPSBfcmVmMTEuaGVhZGVyczsKICAgIHN0YXRlLmhlYWRlcnNbdHlwZV0gPSBoZWFkZXJzOwogIH0sCiAgaGlkZUJ1bGtBY3Rpb25zOiBmdW5jdGlvbiBoaWRlQnVsa0FjdGlvbnMoc3RhdGUsIF9yZWYxMikgewogICAgdmFyIHR5cGUgPSBfcmVmMTIudHlwZSwKICAgICAgZmllbGQgPSBfcmVmMTIuZmllbGQ7CiAgICBzdGF0ZS5oaWRlQnVsa0FjdGlvbnNbdHlwZV0gPSBmaWVsZDsKICB9LAogIC8vIHdlaWdodEdyb3VwKHtncm91cDogJ2NvcmUnLCB3ZWlnaHQ6IDk5fSk7IC0tIGhpZ2hlciBncm91cHMgYXJlIHNob3duIGZpcnN0CiAgLy8gVGhlc2Ugb3BlcmF0ZSBvbiBncm91cCBuYW1lcyAqYWZ0ZXIqIG1hcHBpbmcgYnV0ICpiZWZvcmUqIHRyYW5zbGF0aW9uCiAgd2VpZ2h0R3JvdXA6IGZ1bmN0aW9uIHdlaWdodEdyb3VwKHN0YXRlLCBfcmVmMTMpIHsKICAgIHZhciBncm91cCA9IF9yZWYxMy5ncm91cCwKICAgICAgZ3JvdXBzID0gX3JlZjEzLmdyb3VwcywKICAgICAgd2VpZ2h0ID0gX3JlZjEzLndlaWdodCwKICAgICAgZm9yQmFzaWMgPSBfcmVmMTMuZm9yQmFzaWM7CiAgICBpZiAoIWdyb3VwcykgewogICAgICBncm91cHMgPSBbXTsKICAgIH0KICAgIGlmIChncm91cCkgewogICAgICBncm91cHMucHVzaChncm91cCk7CiAgICB9CiAgICB2YXIgbWFwID0gZm9yQmFzaWMgPyBzdGF0ZS5iYXNpY0dyb3VwV2VpZ2h0cyA6IHN0YXRlLmdyb3VwV2VpZ2h0czsKICAgIHZhciBfaXRlcmF0b3IxMSA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGdyb3VwcyksCiAgICAgIF9zdGVwMTE7CiAgICB0cnkgewogICAgICBmb3IgKF9pdGVyYXRvcjExLnMoKTsgIShfc3RlcDExID0gX2l0ZXJhdG9yMTEubigpKS5kb25lOykgewogICAgICAgIHZhciBnID0gX3N0ZXAxMS52YWx1ZTsKICAgICAgICBtYXBbZy50b0xvd2VyQ2FzZSgpXSA9IHdlaWdodDsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9pdGVyYXRvcjExLmUoZXJyKTsKICAgIH0gZmluYWxseSB7CiAgICAgIF9pdGVyYXRvcjExLmYoKTsKICAgIH0KICB9LAogIC8vIHNldEdyb3VwRGVmYXVsdFR5cGUoe2dyb3VwOiAnY29yZScsIGRlZmF1bHRUeXBlOiAnbmFtZSd9KTsKICAvLyBCeSBkZWZhdWx0IHdoZW4gYSBncm91cCBpcyBjbGlja2VkLCB0aGUgZmlyc3QgaXRlbSBpcyBzZWxlY3RlZCAtIHRoaXMgYWxsb3dzCiAgLy8gdGhpcyBiZWhhdmlvdXIgdG8gYmUgY2hhbmdlZCBhbmQgYSBuYW1lZCBjaGlsZCB0eXBlIGNhbiBiZSBjaG9zZW4KICAvLyBUaGVzZSBvcGVyYXRlIG9uIGdyb3VwIG5hbWVzICphZnRlciogbWFwcGluZyBidXQgKmJlZm9yZSogdHJhbnNsYXRpb24KICBzZXRHcm91cERlZmF1bHRUeXBlOiBmdW5jdGlvbiBzZXRHcm91cERlZmF1bHRUeXBlKHN0YXRlLCBfcmVmMTQpIHsKICAgIHZhciBncm91cCA9IF9yZWYxNC5ncm91cCwKICAgICAgZ3JvdXBzID0gX3JlZjE0Lmdyb3VwcywKICAgICAgZGVmYXVsdFR5cGUgPSBfcmVmMTQuZGVmYXVsdFR5cGU7CiAgICBpZiAoIWdyb3VwcykgewogICAgICBncm91cHMgPSBbXTsKICAgIH0KICAgIGlmIChncm91cCkgewogICAgICBncm91cHMucHVzaChncm91cCk7CiAgICB9CiAgICB2YXIgX2l0ZXJhdG9yMTIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihncm91cHMpLAogICAgICBfc3RlcDEyOwogICAgdHJ5IHsKICAgICAgZm9yIChfaXRlcmF0b3IxMi5zKCk7ICEoX3N0ZXAxMiA9IF9pdGVyYXRvcjEyLm4oKSkuZG9uZTspIHsKICAgICAgICB2YXIgZyA9IF9zdGVwMTIudmFsdWU7CiAgICAgICAgc3RhdGUuZ3JvdXBEZWZhdWx0VHlwZXNbZy50b0xvd2VyQ2FzZSgpXSA9IGRlZmF1bHRUeXBlOwogICAgICB9CiAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgX2l0ZXJhdG9yMTIuZShlcnIpOwogICAgfSBmaW5hbGx5IHsKICAgICAgX2l0ZXJhdG9yMTIuZigpOwogICAgfQogIH0sCiAgLy8gd2VpZ2h0VHlwZSgnQ2x1c3RlcicgOTkpOyAtLSBoaWdoZXIgZ3JvdXBzIGFyZSBzaG93biBmaXJzdAogIC8vIFRoZXNlIG9wZXJhdGUgb24gKnNjaGVtYSogdHlwZSBuYW1lcywgYmVmb3JlIG1hcHBpbmcKICB3ZWlnaHRUeXBlOiBmdW5jdGlvbiB3ZWlnaHRUeXBlKHN0YXRlLCBfcmVmMTUpIHsKICAgIHZhciB0eXBlID0gX3JlZjE1LnR5cGUsCiAgICAgIHR5cGVzID0gX3JlZjE1LnR5cGVzLAogICAgICB3ZWlnaHQgPSBfcmVmMTUud2VpZ2h0LAogICAgICBmb3JCYXNpYyA9IF9yZWYxNS5mb3JCYXNpYzsKICAgIGlmICghdHlwZXMpIHsKICAgICAgdHlwZXMgPSBbXTsKICAgIH0KICAgIGlmICh0eXBlKSB7CiAgICAgIHR5cGVzLnB1c2godHlwZSk7CiAgICB9CiAgICB2YXIgbWFwID0gZm9yQmFzaWMgPyBzdGF0ZS5iYXNpY1R5cGVXZWlnaHRzIDogc3RhdGUudHlwZVdlaWdodHM7CiAgICB2YXIgX2l0ZXJhdG9yMTMgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0eXBlcyksCiAgICAgIF9zdGVwMTM7CiAgICB0cnkgewogICAgICBmb3IgKF9pdGVyYXRvcjEzLnMoKTsgIShfc3RlcDEzID0gX2l0ZXJhdG9yMTMubigpKS5kb25lOykgewogICAgICAgIHZhciB0ID0gX3N0ZXAxMy52YWx1ZTsKICAgICAgICBtYXBbdC50b0xvd2VyQ2FzZSgpXSA9IHdlaWdodDsKICAgICAgfQogICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgIF9pdGVyYXRvcjEzLmUoZXJyKTsKICAgIH0gZmluYWxseSB7CiAgICAgIF9pdGVyYXRvcjEzLmYoKTsKICAgIH0KICB9LAogIC8vIG1hcEdyb3VwKCd1Z2x5LnRoaW5nJywgJ05pY2UgVGhpbmcnLCAxKTsKICAvLyBtYXBHcm91cCgvdWdseS50aGluZy4oc3R1ZmYpJywgJyQxJywgMik7CiAgLy8gbWFwR3JvdXAoL3VnbHkudGhpbmcuKHN0dWZmKScsIGZ1bmN0aW9uKGdyb3VwU3RyLCBydWxlT2JqLCByZWdleE1hdGNoLCB0eXBlT2JqKSB7IHJldHVybiB1Y0ZpcnN0KGdyb3VwLmlkKSB9ICwgMik7CiAgbWFwR3JvdXA6IGZ1bmN0aW9uIG1hcEdyb3VwKHN0YXRlLCBfcmVmMTYpIHsKICAgIHZhciBtYXRjaCA9IF9yZWYxNi5tYXRjaCwKICAgICAgcmVwbGFjZSA9IF9yZWYxNi5yZXBsYWNlLAogICAgICBfcmVmMTYkd2VpZ2h0ID0gX3JlZjE2LndlaWdodCwKICAgICAgd2VpZ2h0ID0gX3JlZjE2JHdlaWdodCA9PT0gdm9pZCAwID8gNSA6IF9yZWYxNiR3ZWlnaHQsCiAgICAgIF9yZWYxNiRjb250aW51ZU9uTWF0YyA9IF9yZWYxNi5jb250aW51ZU9uTWF0Y2gsCiAgICAgIGNvbnRpbnVlT25NYXRjaCA9IF9yZWYxNiRjb250aW51ZU9uTWF0YyA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcmVmMTYkY29udGludWVPbk1hdGM7CiAgICBfYWRkTWFwcGluZyhzdGF0ZS5ncm91cE1hcHBpbmdzLCBtYXRjaCwgcmVwbGFjZSwgd2VpZ2h0LCBjb250aW51ZU9uTWF0Y2gpOwogIH0sCiAgbWFwVHlwZTogZnVuY3Rpb24gbWFwVHlwZShzdGF0ZSwgX3JlZjE3KSB7CiAgICB2YXIgbWF0Y2ggPSBfcmVmMTcubWF0Y2gsCiAgICAgIHJlcGxhY2UgPSBfcmVmMTcucmVwbGFjZSwKICAgICAgX3JlZjE3JHdlaWdodCA9IF9yZWYxNy53ZWlnaHQsCiAgICAgIHdlaWdodCA9IF9yZWYxNyR3ZWlnaHQgPT09IHZvaWQgMCA/IDUgOiBfcmVmMTckd2VpZ2h0LAogICAgICBfcmVmMTckY29udGludWVPbk1hdGMgPSBfcmVmMTcuY29udGludWVPbk1hdGNoLAogICAgICBjb250aW51ZU9uTWF0Y2ggPSBfcmVmMTckY29udGludWVPbk1hdGMgPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZjE3JGNvbnRpbnVlT25NYXRjOwogICAgX2FkZE1hcHBpbmcoc3RhdGUudHlwZU1hcHBpbmdzLCBtYXRjaCwgcmVwbGFjZSwgd2VpZ2h0LCBjb250aW51ZU9uTWF0Y2gpOwogIH0sCiAgLy8gbW92ZVR5cGUoJ2FwcHMuZGVwbG95bWVudCcsICdDb3JlJyk7CiAgbW92ZVR5cGU6IGZ1bmN0aW9uIG1vdmVUeXBlKHN0YXRlLCBfcmVmMTgpIHsKICAgIHZhciBtYXRjaCA9IF9yZWYxOC5tYXRjaCwKICAgICAgZ3JvdXAgPSBfcmVmMTguZ3JvdXAsCiAgICAgIF9yZWYxOCR3ZWlnaHQgPSBfcmVmMTgud2VpZ2h0LAogICAgICB3ZWlnaHQgPSBfcmVmMTgkd2VpZ2h0ID09PSB2b2lkIDAgPyA1IDogX3JlZjE4JHdlaWdodDsKICAgIF9hZGRNYXBwaW5nKHN0YXRlLnR5cGVNb3ZlTWFwcGluZ3MsIG1hdGNoLCBncm91cCwgd2VpZ2h0KTsKICB9LAogIGNvbXBvbmVudEZvclR5cGU6IGZ1bmN0aW9uIGNvbXBvbmVudEZvclR5cGUoc3RhdGUsIF9yZWYxOSkgewogICAgdmFyIG1hdGNoID0gX3JlZjE5Lm1hdGNoLAogICAgICByZXBsYWNlID0gX3JlZjE5LnJlcGxhY2U7CiAgICBtYXRjaCA9IGVuc3VyZVJlZ2V4KG1hdGNoKTsKICAgIG1hdGNoID0gcmVnZXhUb1N0cmluZyhtYXRjaCk7CiAgICBzdGF0ZS50eXBlVG9Db21wb25lbnRNYXBwaW5ncy5wdXNoKHsKICAgICAgbWF0Y2g6IG1hdGNoLAogICAgICByZXBsYWNlOiByZXBsYWNlCiAgICB9KTsKICB9LAogIGNvbmZpZ3VyZVR5cGU6IGZ1bmN0aW9uIGNvbmZpZ3VyZVR5cGUoc3RhdGUsIG9wdGlvbnMpIHsKICAgIHZhciBtYXRjaCA9IHJlZ2V4VG9TdHJpbmcoZW5zdXJlUmVnZXgob3B0aW9ucy5tYXRjaCkpOwogICAgdmFyIGlkeCA9IHN0YXRlLnR5cGVPcHRpb25zLmZpbmRJbmRleChmdW5jdGlvbiAob2JqKSB7CiAgICAgIHJldHVybiBvYmoubWF0Y2ggPT09IG1hdGNoOwogICAgfSk7CiAgICB2YXIgb2JqID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBvcHRpb25zKSwge30sIHsKICAgICAgbWF0Y2g6IG1hdGNoCiAgICB9KTsKICAgIGlmIChpZHggPj0gMCkgewogICAgICBvYmogPSBPYmplY3QuYXNzaWduKHN0YXRlLnR5cGVPcHRpb25zW2lkeF0sIG9iaik7CiAgICAgIHN0YXRlLnR5cGVPcHRpb25zLnNwbGljZShpZHgsIDEsIG9iaik7CiAgICB9IGVsc2UgewogICAgICB2YXIgX29iaiA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsKICAgICAgICBtYXRjaDogbWF0Y2gKICAgICAgfSk7CiAgICAgIHN0YXRlLnR5cGVPcHRpb25zLnB1c2goX29iaik7CiAgICB9CiAgfQp9OwpleHBvcnQgdmFyIGFjdGlvbnMgPSB7CiAgcmVtb3ZlUHJvZHVjdDogZnVuY3Rpb24gcmVtb3ZlUHJvZHVjdChfcmVmMjAsIG1ldGFkYXRhKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjIwLmNvbW1pdDsKICAgIGNvbW1pdCgncmVtb3ZlJywgbWV0YWRhdGEpOwogIH0sCiAgYWRkRmF2b3JpdGU6IGZ1bmN0aW9uIGFkZEZhdm9yaXRlKF9yZWYyMSwgdHlwZSkgewogICAgdmFyIGRpc3BhdGNoID0gX3JlZjIxLmRpc3BhdGNoLAogICAgICByb290R2V0dGVycyA9IF9yZWYyMS5yb290R2V0dGVyczsKICAgIHZhciB0eXBlcyA9IHJvb3RHZXR0ZXJzWydwcmVmcy9nZXQnXShGQVZPUklURV9UWVBFUykgfHwgW107CiAgICBhZGRPYmplY3QodHlwZXMsIHR5cGUpOwogICAgZGlzcGF0Y2goJ3ByZWZzL3NldCcsIHsKICAgICAga2V5OiBGQVZPUklURV9UWVBFUywKICAgICAgdmFsdWU6IHR5cGVzCiAgICB9LCB7CiAgICAgIHJvb3Q6IHRydWUKICAgIH0pOwogIH0sCiAgcmVtb3ZlRmF2b3JpdGU6IGZ1bmN0aW9uIHJlbW92ZUZhdm9yaXRlKF9yZWYyMiwgdHlwZSkgewogICAgdmFyIGRpc3BhdGNoID0gX3JlZjIyLmRpc3BhdGNoLAogICAgICByb290R2V0dGVycyA9IF9yZWYyMi5yb290R2V0dGVyczsKICAgIHZhciB0eXBlcyA9IHJvb3RHZXR0ZXJzWydwcmVmcy9nZXQnXShGQVZPUklURV9UWVBFUykgfHwgW107CiAgICByZW1vdmVPYmplY3QodHlwZXMsIHR5cGUpOwogICAgZGlzcGF0Y2goJ3ByZWZzL3NldCcsIHsKICAgICAga2V5OiBGQVZPUklURV9UWVBFUywKICAgICAgdmFsdWU6IHR5cGVzCiAgICB9LCB7CiAgICAgIHJvb3Q6IHRydWUKICAgIH0pOwogIH0sCiAgdG9nZ2xlR3JvdXA6IGZ1bmN0aW9uIHRvZ2dsZUdyb3VwKF9yZWYyMywgX3JlZjI0KSB7CiAgICB2YXIgZGlzcGF0Y2ggPSBfcmVmMjMuZGlzcGF0Y2gsCiAgICAgIHJvb3RHZXR0ZXJzID0gX3JlZjIzLnJvb3RHZXR0ZXJzOwogICAgdmFyIGdyb3VwID0gX3JlZjI0Lmdyb3VwLAogICAgICBleHBhbmRlZCA9IF9yZWYyNC5leHBhbmRlZDsKICAgIHZhciBncm91cHMgPSByb290R2V0dGVyc1sncHJlZnMvZ2V0J10oRVhQQU5ERURfR1JPVVBTKTsKICAgIGlmIChleHBhbmRlZCkgewogICAgICBhZGRPYmplY3QoZ3JvdXBzLCBncm91cCk7CiAgICB9IGVsc2UgewogICAgICByZW1vdmVPYmplY3QoZ3JvdXBzLCBncm91cCk7CiAgICB9CiAgICBkaXNwYXRjaCgncHJlZnMvc2V0JywgewogICAgICBrZXk6IEVYUEFOREVEX0dST1VQUywKICAgICAgdmFsdWU6IGdyb3VwcwogICAgfSwgewogICAgICByb290OiB0cnVlCiAgICB9KTsKICB9LAogIGNvbmZpZ3VyZVR5cGU6IGZ1bmN0aW9uIGNvbmZpZ3VyZVR5cGUoX3JlZjI1LCBvcHRpb25zKSB7CiAgICB2YXIgY29tbWl0ID0gX3JlZjI1LmNvbW1pdDsKICAgIGNvbW1pdCgnY29uZmlndXJlVHlwZScsIG9wdGlvbnMpOwogIH0KfTsKZnVuY3Rpb24gX3NvcnRHcm91cCh0cmVlLCBtb2RlKSB7CiAgdmFyIGJ5ID0gWyd3ZWlnaHQ6ZGVzYycsICduYW1lc3BhY2VkJywgJ2xhYmVsJ107CiAgdHJlZS5jaGlsZHJlbiA9IHNvcnRCeSh0cmVlLmNoaWxkcmVuLCBieSk7CiAgdmFyIF9pdGVyYXRvcjE0ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodHJlZS5jaGlsZHJlbiksCiAgICBfc3RlcDE0OwogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjE0LnMoKTsgIShfc3RlcDE0ID0gX2l0ZXJhdG9yMTQubigpKS5kb25lOykgewogICAgICB2YXIgZW50cnkgPSBfc3RlcDE0LnZhbHVlOwogICAgICBpZiAoZW50cnkuY2hpbGRyZW4pIHsKICAgICAgICBfc29ydEdyb3VwKGVudHJ5LCBtb2RlKTsKICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMTQuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3IxNC5mKCk7CiAgfQp9CmZ1bmN0aW9uIF9hcHBseU1hcHBpbmcob2JqT3JWYWx1ZSwgbWFwcGluZ3MsIGtleUZpZWxkLCBjYWNoZSwgZGVmYXVsdEZuKSB7CiAgdmFyIGtleSA9IG9iak9yVmFsdWU7CiAgdmFyIGZvdW5kID0gZmFsc2U7CiAgaWYgKGtleUZpZWxkKSB7CiAgICBpZiAoX3R5cGVvZihvYmpPclZhbHVlKSAhPT0gJ29iamVjdCcpIHsKICAgICAgcmV0dXJuIG9iak9yVmFsdWU7CiAgICB9CiAgICBrZXkgPSBnZXQob2JqT3JWYWx1ZSwga2V5RmllbGQpOwogICAgaWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7CiAgICAgIHJldHVybiBudWxsOwogICAgfQogIH0KICBpZiAoa2V5ICYmIGNhY2hlICYmIGNhY2hlW2tleV0pIHsKICAgIHJldHVybiBjYWNoZVtrZXldOwogIH0KICB2YXIgb3V0ID0gIiIuY29uY2F0KGtleSk7CiAgdmFyIF9pdGVyYXRvcjE1ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIobWFwcGluZ3MpLAogICAgX3N0ZXAxNTsKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IxNS5zKCk7ICEoX3N0ZXAxNSA9IF9pdGVyYXRvcjE1Lm4oKSkuZG9uZTspIHsKICAgICAgdmFyIHJ1bGUgPSBfc3RlcDE1LnZhbHVlOwogICAgICB2YXIgcmUgPSBzdHJpbmdUb1JlZ2V4KHJ1bGUubWF0Y2gpOwogICAgICB2YXIgY2FwdHVyZWQgPSBvdXQubWF0Y2gocmUpOwogICAgICBpZiAoY2FwdHVyZWQgJiYgcnVsZS5yZXBsYWNlKSB7CiAgICAgICAgb3V0ID0gb3V0LnJlcGxhY2UocmUsIHJ1bGUucmVwbGFjZSk7CiAgICAgICAgZm91bmQgPSB0cnVlOwogICAgICAgIGlmICghcnVsZS5jb250aW51ZU9uTWF0Y2gpIHsKICAgICAgICAgIGJyZWFrOwogICAgICAgIH0KICAgICAgfQogICAgfQogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMTUuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3IxNS5mKCk7CiAgfQogIGlmICghZm91bmQgJiYgZGVmYXVsdEZuKSB7CiAgICBvdXQgPSBkZWZhdWx0Rm4ob3V0LCBvYmpPclZhbHVlKTsKICB9CiAgaWYgKGNhY2hlKSB7CiAgICBjYWNoZVtrZXldID0gb3V0OwogIH0KICByZXR1cm4gb3V0Owp9CmZ1bmN0aW9uIF9hZGRNYXBwaW5nKG1hcHBpbmdzLCBtYXRjaCwgcmVwbGFjZSwgd2VpZ2h0LCBjb250aW51ZU9uTWF0Y2gpIHsKICBtYXRjaCA9IHJlZ2V4VG9TdHJpbmcoZW5zdXJlUmVnZXgobWF0Y2gpKTsKICBtYXBwaW5ncy5wdXNoKHsKICAgIG1hdGNoOiBtYXRjaCwKICAgIHJlcGxhY2U6IHJlcGxhY2UsCiAgICB3ZWlnaHQ6IHdlaWdodCwKICAgIGNvbnRpbnVlT25NYXRjaDogY29udGludWVPbk1hdGNoLAogICAgaW5zZXJ0SW5kZXg6IG1hcHBpbmdzLmxlbmd0aAogIH0pOwoKICAvLyBSZS1zb3J0IHRoZSBsaXN0IGJ5IHdlaWdodCAoaGlnaGVzdCBmaXJzdCkgYW5kIGluc2VydCB0aW1lIChvbGRlc3QgZmlyc3QpCiAgbWFwcGluZ3Muc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgdmFyIHByaSA9IGIud2VpZ2h0IC0gYS53ZWlnaHQ7CiAgICBpZiAocHJpKSB7CiAgICAgIHJldHVybiBwcmk7CiAgICB9CiAgICByZXR1cm4gYS5pbnNlcnRJbmRleCAtIGIuaW5zZXJ0SW5kZXg7CiAgfSk7Cn0KCi8vIFJlZ2V4ZXMgY2FuJ3QgYmUgcmVwcmVzZW50ZWQgaW4gc3RhdGUgYmVjYXVzZSB0aGV5IGRvbid0IHNlcmlhbGl6ZSB0byBKU09OLi4KdmFyIHJlZ2V4Q2FjaGUgPSB7fTsKZnVuY3Rpb24gcmVnZXhUb1N0cmluZyhyZWdleCkgewogIHJldHVybiByZWdleC5zb3VyY2U7Cn0KZnVuY3Rpb24gc3RyaW5nVG9SZWdleChzdHIpIHsKICB2YXIgb3V0ID0gcmVnZXhDYWNoZVtzdHJdOwogIGlmICghb3V0KSB7CiAgICBvdXQgPSBuZXcgUmVnRXhwKHN0cik7CiAgICByZWdleENhY2hlW3N0cl0gPSBvdXQ7CiAgfQogIHJldHVybiBvdXQ7Cn0KZnVuY3Rpb24gaWZIYXZlKGdldHRlcnMsIG9wdGlvbikgewogIHN3aXRjaCAob3B0aW9uKSB7CiAgICBjYXNlIElGX0hBVkUuVjJfTU9OSVRPUklORzoKICAgICAgewogICAgICAgIHJldHVybiBoYXZlVjJNb25pdG9yaW5nKGdldHRlcnMpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuVjFfTU9OSVRPUklORzoKICAgICAgewogICAgICAgIHJldHVybiBoYXZlVjFNb25pdG9yaW5nKGdldHRlcnMpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuUFJPSkVDVDoKICAgICAgewogICAgICAgIHJldHVybiAhIXByb2plY3QoZ2V0dGVycyk7CiAgICAgIH0KICAgIGNhc2UgSUZfSEFWRS5OT19QUk9KRUNUOgogICAgICB7CiAgICAgICAgcmV0dXJuICFwcm9qZWN0KGdldHRlcnMpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuTk9UX1YxX0lTVElPOgogICAgICB7CiAgICAgICAgcmV0dXJuICFpc1YxSXN0aW8oZ2V0dGVycyk7CiAgICAgIH0KICAgIGNhc2UgSUZfSEFWRS5NVUxUSV9DTFVTVEVSOgogICAgICB7CiAgICAgICAgcmV0dXJuIGdldHRlcnMuaXNNdWx0aUNsdXN0ZXI7CiAgICAgIH0KICAgIGNhc2UgSUZfSEFWRS5ORVVWRUNUT1JfTkFNRVNQQUNFOgogICAgICB7CiAgICAgICAgcmV0dXJuIGdldHRlcnNbImNsdXN0ZXIvYWxsIl0oTkFNRVNQQUNFKS5maW5kKGZ1bmN0aW9uIChuKSB7CiAgICAgICAgICByZXR1cm4gbi5tZXRhZGF0YS5uYW1lID09PSBORVVfVkVDVE9SX05BTUVTUEFDRTsKICAgICAgICB9KTsKICAgICAgfQogICAgY2FzZSBJRl9IQVZFLkFETUlOOgogICAgICB7CiAgICAgICAgcmV0dXJuIGlzQWRtaW5Vc2VyKGdldHRlcnMpOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuTUNNX0RJU0FCTEVEOgogICAgICB7CiAgICAgICAgcmV0dXJuICFnZXR0ZXJzWydpc1JhbmNoZXJJbkhhcnZlc3RlciddOwogICAgICB9CiAgICBjYXNlIElGX0hBVkUuTk9UX1NUQU5EQUxPTkVfSEFSVkVTVEVSOgogICAgICB7CiAgICAgICAgcmV0dXJuICFnZXR0ZXJzWydpc1N0YW5kYWxvbmVIYXJ2ZXN0ZXInXTsKICAgICAgfQogICAgZGVmYXVsdDoKICAgICAgcmV0dXJuIGZhbHNlOwogIH0KfQoKLy8gQ291bGQgbGlzdCBhIGxhcmdlciBzZXQgb2YgcmVzb3VyY2VzIHRoYXQgdHlwaWNhbGx5IG9ubHkgYW4gYWRtaW4gdXNlciB3b3VsZCBoYXZlCmV4cG9ydCBmdW5jdGlvbiBpc0FkbWluVXNlcihnZXR0ZXJzKSB7CiAgdmFyIF9nZXR0ZXJzJG1hbmFnZW1lbnRTLCBfZ2V0dGVycyRtYW5hZ2VtZW50UzIsIF9nZXR0ZXJzJG1hbmFnZW1lbnRTMywgX2dldHRlcnMkbWFuYWdlbWVudFM0LCBfZ2V0dGVycyRtYW5hZ2VtZW50UzU7CiAgdmFyIGNhbkVkaXRTZXR0aW5ncyA9ICgoKF9nZXR0ZXJzJG1hbmFnZW1lbnRTID0gZ2V0dGVyc1snbWFuYWdlbWVudC9zY2hlbWFGb3InXShNQU5BR0VNRU5ULlNFVFRJTkcpKSA9PT0gbnVsbCB8fCBfZ2V0dGVycyRtYW5hZ2VtZW50UyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldHRlcnMkbWFuYWdlbWVudFMucmVzb3VyY2VNZXRob2RzKSB8fCBbXSkuaW5jbHVkZXMoJ1BVVCcpOwogIHZhciBjYW5FZGl0RmVhdHVyZUZsYWdzID0gKCgoX2dldHRlcnMkbWFuYWdlbWVudFMyID0gZ2V0dGVyc1snbWFuYWdlbWVudC9zY2hlbWFGb3InXShNQU5BR0VNRU5ULkZFQVRVUkUpKSA9PT0gbnVsbCB8fCBfZ2V0dGVycyRtYW5hZ2VtZW50UzIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nZXR0ZXJzJG1hbmFnZW1lbnRTMi5yZXNvdXJjZU1ldGhvZHMpIHx8IFtdKS5pbmNsdWRlcygnUFVUJyk7CiAgdmFyIGNhbkluc3RhbGxBcHBzID0gKCgoX2dldHRlcnMkbWFuYWdlbWVudFMzID0gZ2V0dGVyc1snbWFuYWdlbWVudC9zY2hlbWFGb3InXShDQVRBTE9HLkFQUCkpID09PSBudWxsIHx8IF9nZXR0ZXJzJG1hbmFnZW1lbnRTMyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldHRlcnMkbWFuYWdlbWVudFMzLnJlc291cmNlTWV0aG9kcykgfHwgW10pLmluY2x1ZGVzKCdQVVQnKTsKICB2YXIgY2FuQWRkUmVwb3MgPSAoKChfZ2V0dGVycyRtYW5hZ2VtZW50UzQgPSBnZXR0ZXJzWydtYW5hZ2VtZW50L3NjaGVtYUZvciddKENBVEFMT0cuQ0xVU1RFUl9SRVBPKSkgPT09IG51bGwgfHwgX2dldHRlcnMkbWFuYWdlbWVudFM0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfZ2V0dGVycyRtYW5hZ2VtZW50UzQucmVzb3VyY2VNZXRob2RzKSB8fCBbXSkuaW5jbHVkZXMoJ1BVVCcpOwogIHZhciBjYW5QdXRIZWxtT3BlcmF0aW9ucyA9ICgoKF9nZXR0ZXJzJG1hbmFnZW1lbnRTNSA9IGdldHRlcnNbJ21hbmFnZW1lbnQvc2NoZW1hRm9yJ10oQ0FUQUxPRy5PUEVSQVRJT04pKSA9PT0gbnVsbCB8fCBfZ2V0dGVycyRtYW5hZ2VtZW50UzUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9nZXR0ZXJzJG1hbmFnZW1lbnRTNS5yZXNvdXJjZU1ldGhvZHMpIHx8IFtdKS5pbmNsdWRlcygnUFVUJyk7CiAgcmV0dXJuIGNhbkVkaXRTZXR0aW5ncyAmJiBjYW5FZGl0RmVhdHVyZUZsYWdzICYmIGNhbkluc3RhbGxBcHBzICYmIGNhbkFkZFJlcG9zICYmIGNhblB1dEhlbG1PcGVyYXRpb25zOwp9CmZ1bmN0aW9uIF9maW5kQ29sdW1uQnlOYW1lKHNjaGVtYSwgY29sTmFtZSkgewogIHZhciBhdHRyaWJ1dGVzID0gc2NoZW1hLmF0dHJpYnV0ZXMgfHwge307CiAgdmFyIGNvbHVtbnMgPSBhdHRyaWJ1dGVzLmNvbHVtbnMgfHwgW107CiAgcmV0dXJuIGZpbmRCeShjb2x1bW5zLCAnbmFtZScsIGNvbE5hbWUpOwp9CmZ1bmN0aW9uIF9yb3dWYWx1ZUdldHRlcihjb2wpIHsKICAvLyAnZmllbGQnIGNvbWVzIGZyb20gdGhlIHNjaGVtYSAtIHR5cGljYWxseSBpdCBpcyBvZiB0aGUgZm9ybSAkLm1ldGFkYXRhLmZpZWxkW05dCiAgLy8gV2Ugd2lsbCB1c2UgSnNvblBhdGggdG8gbG9vayB1cCB0aGlzIHZhbHVlLCB3aGljaCBpcyBjb3N0bHkgLSBzbyBpZiB3ZSBjYW4gZGV0ZWN0IHRoaXMgZm9ybWF0CiAgLy8gVXNlIGEgbW9yZSBlZmZpY2llbnQgZnVuY3Rpb24gdG8gZ2V0IHRoZSB2YWx1ZQogIHZhciB2YWx1ZSA9IGNvbC5maWVsZC5zdGFydHNXaXRoKCcuJykgPyAiJCIuY29uY2F0KGNvbC5maWVsZCkgOiBjb2wuZmllbGQ7CiAgdmFyIGZvdW5kID0gdmFsdWUubWF0Y2goRklFTERfUkVHRVgpOwogIGlmIChmb3VuZCAmJiBmb3VuZC5sZW5ndGggPT09IDIpIHsKICAgIHZhciBmaWVsZEluZGV4ID0gcGFyc2VJbnQoZm91bmRbMV0sIDEwKTsKICAgIHJldHVybiBmdW5jdGlvbiAocm93KSB7CiAgICAgIHZhciBfcm93JG1ldGFkYXRhOwogICAgICByZXR1cm4gKF9yb3ckbWV0YWRhdGEgPSByb3cubWV0YWRhdGEpID09PSBudWxsIHx8IF9yb3ckbWV0YWRhdGEgPT09IHZvaWQgMCB8fCAoX3JvdyRtZXRhZGF0YSA9IF9yb3ckbWV0YWRhdGEuZmllbGRzKSA9PT0gbnVsbCB8fCBfcm93JG1ldGFkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcm93JG1ldGFkYXRhW2ZpZWxkSW5kZXhdOwogICAgfTsKICB9CiAgcmV0dXJuIHZhbHVlOwp9CgovLyBJcyBWMSBJc3RpbyBpbnN0YWxsZWQ/CmZ1bmN0aW9uIGlzVjFJc3RpbyhnZXR0ZXJzKSB7CiAgdmFyIF9jbHVzdGVyJHN0YXR1czsKICB2YXIgY2x1c3RlciA9IGdldHRlcnNbJ2N1cnJlbnRDbHVzdGVyJ107CiAgcmV0dXJuICEhKGNsdXN0ZXIgIT09IG51bGwgJiYgY2x1c3RlciAhPT0gdm9pZCAwICYmIChfY2x1c3RlciRzdGF0dXMgPSBjbHVzdGVyLnN0YXR1cykgIT09IG51bGwgJiYgX2NsdXN0ZXIkc3RhdHVzICE9PSB2b2lkIDAgJiYgX2NsdXN0ZXIkc3RhdHVzLmlzdGlvRW5hYmxlZCk7Cn0KZnVuY3Rpb24gaWZIYXZlVmVyYihyb290R2V0dGVycywgbW9kdWxlLCB2ZXJiLCBoYXZlSWRzKSB7CiAgdmFyIF9pdGVyYXRvcjE2ID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIoaGF2ZUlkcyksCiAgICBfc3RlcDE2OwogIHRyeSB7CiAgICBmb3IgKF9pdGVyYXRvcjE2LnMoKTsgIShfc3RlcDE2ID0gX2l0ZXJhdG9yMTYubigpKS5kb25lOykgewogICAgICB2YXIgaGF2ZUlkID0gX3N0ZXAxNi52YWx1ZTsKICAgICAgdmFyIHNjaGVtYSA9IHJvb3RHZXR0ZXJzWyIiLmNvbmNhdChtb2R1bGUsICIvc2NoZW1hRm9yIildKGhhdmVJZCk7CiAgICAgIHZhciB3YW50ID0gdmVyYi50b0xvd2VyQ2FzZSgpOwogICAgICB2YXIgY29sbGVjdGlvbk1ldGhvZHMgPSBzY2hlbWEuY29sbGVjdGlvbk1ldGhvZHMgfHwgW107CiAgICAgIHZhciByZXNvdXJjZU1ldGhvZHMgPSBzY2hlbWEucmVzb3VyY2VNZXRob2RzIHx8IFtdOwogICAgICB2YXIgaGF2ZSA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoY29sbGVjdGlvbk1ldGhvZHMpLCBfdG9Db25zdW1hYmxlQXJyYXkocmVzb3VyY2VNZXRob2RzKSkubWFwKGZ1bmN0aW9uICh4KSB7CiAgICAgICAgcmV0dXJuIHgudG9Mb3dlckNhc2UoKTsKICAgICAgfSk7CiAgICAgIGlmICghaGF2ZS5pbmNsdWRlcyh3YW50KSAmJiAhaGF2ZS5pbmNsdWRlcygiYmxvY2tlZC0iLmNvbmNhdCh3YW50KSkpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9IGNhdGNoIChlcnIpIHsKICAgIF9pdGVyYXRvcjE2LmUoZXJyKTsKICB9IGZpbmFsbHkgewogICAgX2l0ZXJhdG9yMTYuZigpOwogIH0KICByZXR1cm4gdHJ1ZTsKfQoKLy8gTG9vayBhdCB0aGUgbmFtZXNwYWNlIGZpbHRlcnMgdG8gZGV0ZXJtaW5lIGlmIGEgcHJvamVjdCBpcyBzZWxlY3RlZApleHBvcnQgZnVuY3Rpb24gcHJvamVjdChnZXR0ZXJzKSB7CiAgdmFyIF9nZXR0ZXJzJGN1cnJlbnRDbHVzdDsKICB2YXIgY2x1c3RlcklkID0gKF9nZXR0ZXJzJGN1cnJlbnRDbHVzdCA9IGdldHRlcnNbJ2N1cnJlbnRDbHVzdGVyJ10pID09PSBudWxsIHx8IF9nZXR0ZXJzJGN1cnJlbnRDbHVzdCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2dldHRlcnMkY3VycmVudENsdXN0LmlkOwogIGlmICghY2x1c3RlcklkKSB7CiAgICByZXR1cm4gbnVsbDsKICB9CiAgdmFyIGZpbHRlcnMgPSBnZXR0ZXJzWyduYW1lc3BhY2VGaWx0ZXJzJ107CiAgdmFyIG5hbWVzcGFjZXMgPSBbXTsKICB2YXIgcHJvamVjdE5hbWUgPSBudWxsOwogIHZhciBfaXRlcmF0b3IxNyA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGZpbHRlcnMpLAogICAgX3N0ZXAxNzsKICB0cnkgewogICAgZm9yIChfaXRlcmF0b3IxNy5zKCk7ICEoX3N0ZXAxNyA9IF9pdGVyYXRvcjE3Lm4oKSkuZG9uZTspIHsKICAgICAgdmFyIGZpbHRlciA9IF9zdGVwMTcudmFsdWU7CiAgICAgIHZhciBfZmlsdGVyJHNwbGl0ID0gZmlsdGVyLnNwbGl0KCc6Ly8nLCAyKSwKICAgICAgICBfZmlsdGVyJHNwbGl0MiA9IF9zbGljZWRUb0FycmF5KF9maWx0ZXIkc3BsaXQsIDIpLAogICAgICAgIHR5cGUgPSBfZmlsdGVyJHNwbGl0MlswXSwKICAgICAgICBpZCA9IF9maWx0ZXIkc3BsaXQyWzFdOwogICAgICBpZiAodHlwZSA9PT0gJ3Byb2plY3QnKSB7CiAgICAgICAgaWYgKHByb2plY3ROYW1lICE9PSBudWxsKSB7CiAgICAgICAgICAvLyBNb3JlIHRoYW4gb25lIHByb2plY3Qgc2VsZWN0ZWQKICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgIH0KICAgICAgICBwcm9qZWN0TmFtZSA9IGlkOwogICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICducycpIHsKICAgICAgICBuYW1lc3BhY2VzLnB1c2goaWQpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIFNvbWV0aGluZyBvdGhlciB0aGFuIHByb2plY3Qgb3IgbmFtZXNwYWNlCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgIH0KICAgIH0KCiAgICAvLyBObyBwcm9qZWN0IGZvdW5kPwogIH0gY2F0Y2ggKGVycikgewogICAgX2l0ZXJhdG9yMTcuZShlcnIpOwogIH0gZmluYWxseSB7CiAgICBfaXRlcmF0b3IxNy5mKCk7CiAgfQogIGlmICghcHJvamVjdE5hbWUpIHsKICAgIHJldHVybiBudWxsOwogIH0KCiAgLy8gV2UgaGF2ZSBvbmUgcHJvamVjdCBhbmQgYSBzZXQgb2YgbmFtZXNwYWNlcwogIC8vIENoZWNrIHRoYXQgYWxsIG9mIHRoZSBuYW1lc3BhY2VzIGJlbG9uZyB0byB0aGUgcHJvamVjdAogIHZhciBwcm9qZWN0ID0gZ2V0dGVyc1snbWFuYWdlbWVudC9ieUlkJ10oTUFOQUdFTUVOVC5QUk9KRUNULCAiIi5jb25jYXQoY2x1c3RlcklkLCAiLyIpLmNvbmNhdChwcm9qZWN0TmFtZSkpOwoKICAvLyBObyBhZGRpdGlvbmFsIG5hbWVzcGFjZXMgbWVhbnMganVzdCB0aGUgcHJvamVjdCBpcyBzZWxlY3RlZAogIGlmIChuYW1lc3BhY2VzLmxlbmd0aCA9PT0gMCkgewogICAgcmV0dXJuIHByb2plY3Q7CiAgfQoKICAvLyBDb252ZXJ0IHRoZSBwcm9qZWN0IG5hbWVzcGFjZXMgaW50byBhIG1hcCBzbyB3ZSBjYW4gY2hlY2sgZXhpc3RlbmNlIGVhc2lseQogIHZhciBwcmpOYW1lc3BhY2VNYXAgPSBwcm9qZWN0Lm5hbWVzcGFjZXMucmVkdWNlKGZ1bmN0aW9uIChtLCBucykgewogICAgbVtucy5tZXRhZGF0YS5uYW1lXSA9IHRydWU7CiAgICByZXR1cm4gbTsKICB9LCB7fSk7CgogIC8vIEFsbCBvZiB0aGUgbmFtZXNwYWNlIGZpbHRlcnMgbXVzdCBiZWxvbmcgdG8gdGhlIHByb2plY3QKICB2YXIgZm91bmQgPSBuYW1lc3BhY2VzLnJlZHVjZShmdW5jdGlvbiAodG90YWwsIG5zKSB7CiAgICByZXR1cm4gcHJqTmFtZXNwYWNlTWFwW25zXSA/IHRvdGFsICsgMSA6IDA7CiAgfSwgMCk7CiAgaWYgKGZvdW5kICE9PSBuYW1lc3BhY2VzLmxlbmd0aCkgewogICAgcmV0dXJuIG51bGw7CiAgfQogIHJldHVybiBwcm9qZWN0Owp9CmZ1bmN0aW9uIGhhc0N1c3RvbShzdGF0ZSwgcm9vdFN0YXRlLCBraW5kLCBrZXksIGZhbGxiYWNrKSB7CiAgdmFyIGNhY2hlID0gc3RhdGUuY2FjaGVba2luZF07CiAgaWYgKGNhY2hlW2tleV0gIT09IHVuZGVmaW5lZCkgewogICAgcmV0dXJuIGNhY2hlW2tleV07CiAgfQoKICAvLyBDaGVjayB0byBzZWUgaWYgdGhlIGN1c3RvbSBraW5kIGlzIHByb3ZpZGVkIGJ5IGEgcGx1Z2luCiAgaWYgKCEhcm9vdFN0YXRlLiRwbHVnaW4uZ2V0RHluYW1pYyhraW5kLCBrZXkpKSB7CiAgICBjYWNoZVtrZXldID0gdHJ1ZTsKICAgIHJldHVybiBjYWNoZVtrZXldOwogIH0KCiAgLy8gRmFsbGJhY2sKICB0cnkgewogICAgZmFsbGJhY2soa2V5KTsKICAgIGNhY2hlW2tleV0gPSB0cnVlOwogIH0gY2F0Y2ggKGUpIHsKICAgIGNhY2hlW2tleV0gPSBmYWxzZTsKICB9CiAgcmV0dXJuIGNhY2hlW2tleV07Cn0KZnVuY3Rpb24gbG9hZEV4dGVuc2lvbihyb290U3RhdGUsIGtpbmQsIGtleSwgZmFsbGJhY2spIHsKICB2YXIgZXh0ID0gcm9vdFN0YXRlLiRwbHVnaW4uZ2V0RHluYW1pYyhraW5kLCBrZXkpOwogIGlmIChleHQpIHsKICAgIGlmICh0eXBlb2YgZXh0ID09PSAnZnVuY3Rpb24nKSB7CiAgICAgIHJldHVybiBleHQ7CiAgICB9CiAgICByZXR1cm4gZnVuY3Rpb24gKCkgewogICAgICByZXR1cm4gZXh0OwogICAgfTsKICB9CiAgcmV0dXJuIGZhbGxiYWNrKGtleSk7Cn0="},{"version":3,"names":["AGE","NAME","NAMESPACE","NAMESPACE_COL","STATE","CATALOG","COUNT","SCHEMA","MANAGEMENT","VIEW_IN_API","EXPANDED_GROUPS","FAVORITE_TYPES","addObject","findBy","insertAt","isArray","removeObject","filterBy","clone","get","ensureRegex","escapeHtml","escapeRegex","ucFirst","pluralize","importChart","importList","importDetail","importEdit","listProducts","loadProduct","importCustomPromptRemove","resolveList","resolveEdit","resolveWindowComponent","importWindowComponent","importLogin","resolveChart","resolveDetail","importDialog","importMachineConfig","resolveMachineConfigComponent","resolveCloudCredentialComponent","importCloudCredential","EXPLORER","isObject","normalizeType","sortBy","haveV1Monitoring","haveV2Monitoring","NEU_VECTOR_NAMESPACE","NAMESPACED","CLUSTER_LEVEL","BOTH","TYPE_MODES","ALL","BASIC","FAVORITE","USED","ROOT","SPOOFED_PREFIX","SPOOFED_API_PREFIX","instanceMethods","graphConfigMap","FIELD_REGEX","IF_HAVE","V1_MONITORING","V2_MONITORING","PROJECT","NO_PROJECT","NOT_V1_ISTIO","MULTI_CLUSTER","NEUVECTOR_NAMESPACE","ADMIN","MCM_DISABLED","NOT_STANDALONE_HARVESTER","DSL","store","product","module","arguments","length","undefined","inOpt","opt","_objectSpread","name","weight","inStore","inExplorer","removable","showClusterSwitcher","showNamespaceFilter","public","filterMode","_i","_arr","k","regexToString","commit","concat","basicType","types","group","Object","values","groupBy","type","field","headers","forEach","header","getValue","valueProp","value","hideBulkActions","configureType","match","options","graphConfig","componentForType","replace","ignoreType","regexOrString","ignoreGroup","cb","weightGroup","input","forBasic","groups","setGroupDefaultType","defaultType","weightType","mapGroup","continueOnMatch","mapType","moveType","virtualType","obj","spoofedType","called","applyProducts","_x","_x2","_applyProducts","apply","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","$plugin","_iterator18","_step18","impl","wrap","_callee3$","_context3","prev","next","abrupt","_createForOfIteratorHelper","s","n","done","sent","init","t0","e","f","finish","loadProducts","stop","productsLoaded","state","products","virtualTypes","spoofedTypes","basicTypes","groupIgnore","groupWeights","groupDefaultTypes","basicGroupWeights","_defineProperty","groupMappings","typeIgnore","basicTypeWeights","typeWeights","typeMappings","typeMoveMappings","typeToComponentMappings","typeOptions","schemaGeneration","cache","typeMove","groupLabel","ignore","list","chart","detail","edit","componentFor","promptRemove","windowComponents","getters","labelFor","rootState","rootGetters","schema","count","language","_applyMapping","_schema$attributes","key","id","toLowerCase","trim","out","attributes","kind","groupLabelFor","schemaOrName","_typeof","moved","_iterator","_step","rule","re","stringToRegex","err","split","map","x","join","groupForBasicType","schemaId","_state$basicTypes","optionsFor","def","isCreatable","isEditable","isRemovable","showState","showAge","canYaml","namespaced","listGroups","depaginate","customRoute","resourceEditMasthead","schemaOrType","found","find","entry","test","opts","assign","isFavorite","includes","typeWeightFor","_type","groupWeightFor","groupDefaultTypeFor","getTree","productId","mode","allTypes","clusterId","namespaceMode","currentType","search","isBasic","searchRegex","RegExp","root","children","keys","sort","a","b","currentLocal","defaultLocal","_iterator2","_step2","_typeObj$schema","typeObj","isIgnored","currentStore","label","labelKey","labelDisplay","highlightLabel","_ensureGroup","route","params","cluster","resource","push","exact","overview","_sortGroup","tree","isRoot","startsWith","parent","_name$split","_name$split2","_slicedToArray","original","defaultLabel","isSpoofed","productSpoofedTypes","some","st","isVirtual","productVirtualTypes","getSpoofedInstances","_ref","_callee","_instanceMethods$prod","getInstances","instances","_callee$","_context","instance","_instance$links","_instance$links2","_instance$links3","_instance$links4","link","apiLink","links","remove","self","update","view","_x3","_x4","getSpoofedInstance","_ref2","_callee2","productInstances","_callee2$","_context2","_x5","_x6","_x7","allSpoofedTypes","flat","spoofedSchemas","flatMap","schemas","allSpoofedSchemas","_state$products$find","_rootGetters$currentC","_rootGetters","modes","p","isLocal","currentCluster","isRancher","counts","_iterator3","_step3","_loop2","schemaModes","m","attrs","every","onlyBasic","invalidType","ifRancherCluster","localOnly","entries","_ref3","_ref4","enabled","_ret2","nonUsedModes","filter","isDev","_toConsumableArray","virtSpoofedModes","_iterator4","_step4","_loop","item","_out$mode","ifHave","ifHaveType","_item$ifHaveType","targetedSchemas","haveIds","ifHaveVerb","ifHaveSubTypes","hasSome","ifFeature","splice","indexOf","_ret","groupByFor","hideBulkActionsFor","headersFor","columns","col","fromSchema","hasName","_iterator5","_step5","format","formatter","width","formatterOpts","multiline","colName","word","charAt","toUpperCase","substring","exists","t","slice","description","tooltip","_rowValueGetter","hasCustomList","rawType","hasCustom","hasCustomChart","hasCustomDetail","subType","hasGraph","hasCustomEdit","hasComponent","path","hasCustomPromptRemove","require","resolve","hasCustomWindowComponent","hasCustomMachineConfigComponent","hasCustomCloudCredentialComponent","importComponent","loadExtension","authType","mapping","_iterator6","_step6","_schema$attributes2","_iterator7","_step7","activeProducts","knownTypes","knownGroups","ifGetter","_iterator8","_step8","_id","_group","features","Array","_iterator9","_step9","ifHaveGroup","isProductActive","rowValueGetter","_findColumnByName","isProductRegistered","productName","prod","mutations","schemaChanged","_ref5","plugin","existing","findIndex","v","_ref6","copy","virtual","_ref7","collection","_ref8","_iterator10","_step10","_ref9","_ref10","_ref11","_ref12","_ref13","_iterator11","_step11","g","_ref14","_iterator12","_step12","_ref15","_iterator13","_step13","_ref16","_ref16$weight","_ref16$continueOnMatc","_addMapping","_ref17","_ref17$weight","_ref17$continueOnMatc","_ref18","_ref18$weight","_ref19","idx","actions","removeProduct","_ref20","metadata","addFavorite","_ref21","dispatch","removeFavorite","_ref22","toggleGroup","_ref23","_ref24","expanded","_ref25","by","_iterator14","_step14","objOrValue","mappings","keyField","defaultFn","_iterator15","_step15","captured","insertIndex","pri","regexCache","regex","source","str","option","project","isV1Istio","isMultiCluster","isAdminUser","_getters$managementS","_getters$managementS2","_getters$managementS3","_getters$managementS4","_getters$managementS5","canEditSettings","SETTING","resourceMethods","canEditFeatureFlags","FEATURE","canInstallApps","APP","canAddRepos","CLUSTER_REPO","canPutHelmOperations","OPERATION","fieldIndex","parseInt","row","_row$metadata","fields","_cluster$status","status","istioEnabled","verb","_iterator16","_step16","haveId","want","collectionMethods","have","_getters$currentClust","filters","namespaces","projectName","_iterator17","_step17","_filter$split","_filter$split2","prjNamespaceMap","reduce","ns","total","fallback","getDynamic","ext"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/store/type-map.js"],"sourcesContent":["// This file has 2 sections that control getting and using specializations of particular types\n// over the generic info that is specified or generated from schemas.\n//\n// 1) Getting info about types\n//\n// labelFor(schema, count)    Get the display label for a schema.  Count is (in English) 1 or not-1 for pluralizing\n// groupLabelFor(schema)      Get the label for the API group of this schema's type\n// isIgnored(schema)          Returns true if this type should be hidden from the tree\n// groupForBasicType(schema)  Returns the group a type should be shown in basic view, or false-y if it shouldn't be shown.\n// typeWeightFor(type, forBasic)   Get the weight value for a particular type label\n// groupWeightFor(group, forBasic) Get the weight value for a particular group\n// headersFor(schema)         Returns the column definitions for a type to give to SortableTable\n// activeProducts()           Returns the list of products that are installed and should be shown\n//\n// 2) Detecting and using custom list/detail/edit/header components\n//\n// hasCustomList(type)              Does type have a custom list implementation?\n// hasCustomDetail(type[,subType])  Does type have a custom detail implementation?\n// hasCustomEdit(type[,subType])    Does type have a custom edit implementation?\n// importList(type)                 Returns a promise that resolves to the list component for type\n// importDetail(type[,subType])     Returns a promise that resolves to the detail component for type\n// importEdit(type[,subType])       Returns a promise that resolves to the edit component for type\n// optionsFor(schemaOrType)         Return the configured options for a type (from configureType)\n//\n// 3) Changing specialization info about a type\n// For all:\n//   let { thingYouWant } = DSL(instanceOfTheStore, 'product');\n//\n// product(                   Add a product into the nav\n//   removable,               -- Is the product removable (true) or built-in (false).\n//   weight,                  -- Sort order and divider sections in the product menu.  3=global (fleet, ecm), 2=always on (apps, explorer) 1=other\n//   showClusterSwitcher,     -- Show the cluster switcher in the header (default true)\n//   showNamespaceFilter,     -- Show the namespace filter in the header (default false)\n//   showWorkspaceSwitcher,   -- Show the workspace switcher in the header (conflicts with namespace) (default false)\n//   ifHave,                  -- Show this product only if the given capability is available\n//   ifHaveGroup,             -- Show this product only if the given group exists in the store [inStore]\n//   ifHaveType,              -- Show this product only if the given type exists in the store [inStore], This can also be specified as an object { type: TYPE, store: 'management' } if the type isn't in the current [inStore]\n//   ifHaveVerb,              -- In combination with ifHaveTYpe, show it only if the type also has this collectionMethod\n//   inStore,                 -- Which store to look at for if* above and the left-nav, defaults to \"cluster\"\n//   inExplorer,              -- Determines if the product is to be scoped to the explorer\n//   public,                  -- If true, show to all users.  If false, only show when the Developer Tools pref is on (default true)\n//   category,                -- Group to show the product in for the nav hamburger menu\n//   typeStoreMap,            -- An object mapping types to the store that should be used to retrieve information about the type\n//   hideSystemResources      -- Hide resources in namespaces where namespace.isSystem === true, or a namespace managed by fleet (per its annotation) and hide those namespaces from ns/project list and nsfilter (default false)\n//   hideNamespaceLocation    -- Hide the namespace link in the ResourceDetail masthead of namespaced resources and hide the ExplorerProjectsNamespaces namespace link (default false)\n// })\n//\n// externalLink(stringOrFn)  The product has an external page (function gets context object\n//\n// virtualType(obj)           Add an item to the tree that goes to a route instead of an actual type.\n//                            --  obj can contain anything in the objects getTree returns.\n//                            --  obj must have a `name` that is unique among all virtual types.\n//                            -- `cluster` is automatically added to route.params if it exists.\n//\n// spoofedType(obj)           Create a fake type that can be treated like a normal type\n//\n// basicType(                 Mark type(s) as always shown in the top of the nav\n//   type(s),                 -- Type name or array of type names\n//   group                    -- Group to show the type(s) under; false-y for top-level.\n// )\n// basicType(                 Mark all types in group as always shown in the top of the nav\n//   group,                   -- Group to show\n//   asLabel                  -- Label to display the group as; false-y for top-level.\n// )\n// ignoreType(type)           Never show type\n// weightType(                Set the weight (sorting) order of one or more types\n//   typeOrArrayOfTypes,\n//   weight,                  -- Higher numbers are shown first/higher up on the nav tree\n//   forBasic                 -- Apply to basic type instead of regular type tree\n// )\n// mapType(                   Remap a type id to a display name\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   replacementStringOrFn,   -- String to replace the type with, or\n//                            -- sync function: (type, capturedString, schemaObj => { return 'new-type'; }\n//   mapWeight,               -- Priority for apply this mapping (higher numbers applied first)\n//   continueOnMatch          -- If true, continue applying to hit other rules that might match the new type.\n// )\n// moveType(                  Change the group a type is in\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   newGroup,                -- Group to move the type into\n//   mapWeight,               -- Priority for apply this mapping (higher numbers applied first)\n// )\n// componentForType(          Map matching types to a single component name\n// (                          (this is helpful if multiple types should be rendered by a single component)\n//   matchRegexOrString,      -- Type to match, or regex that matches types\n//   replacementString        -- String to replace the type with\n// )\n// configureType(            Display options for a particular type\n//   type,                    -- Type to apply to\n//  options                   -- Object of options.  Defaults/Supported: {\n//                               isCreatable: true, -- If false, disable create even if schema says it's allowed\n//                               isEditable: true,  -- Ditto, for edit\n//                               isRemovable: true,  -- Ditto, for remove/delete\n//                               showState: true,  -- If false, hide state in columns and masthead\n//                               showAge: true,    -- If false, hide age in columns and masthead\n//                               showConfigView: true -- If false, hide masthead config button in view mode\n//                               showListMasthead: true, -- If false, hide masthead in list view\n//                               canYaml: true,\n//                               resource: undefined       -- Use this resource in ResourceDetails instead\n//                               resourceDetail: undefined -- Use this resource specifically for ResourceDetail's detail component\n//                               resourceEdit: undefined   -- Use this resource specifically for ResourceDetail's edit component\n//                               depaginate: undefined -- Use this to depaginate requests for this type\n//                               resourceEditMasthead: true   -- Show the Masthead in the edit resource component\n//                               customRoute: undefined,\n//                               hasGraph: undefined   -- If true, render ForceDirectedTreeChart graph (ATTENTION: option graphConfig is needed also!!!)\n//                               graphConfig: undefined   -- Use this to pass along the graph configuration\n//                               notFilterNamespace:  undefined -- Define namespaces that do not need to be filtered\n//                               localOnly: False -- Hide this type from the nav/search bar on downstream clusters\n//                           }\n// )\n// ignoreGroup(group):        Never show group or any types in it\n// weightGroup(               Set the weight (sorting) of one or more groups\n//   groupOrArrayOfGroups,    -- see weightType...\n//   weight\n// )\n// setGroupDefaultType(       Set the default child type to show when the group is expanded\n//   groupOrArrayOfGroups,    -- see setGroupDefaultType...\n//   defaultType\n// )\n// mapGroup(                  Remap a group name to a display name\n//   matchRegexOrString,      -- see mapType...\n//   replacementString,\n//   mapWeight,\n//   continueOnMatch\n// )\nimport { AGE, NAME, NAMESPACE as NAMESPACE_COL, STATE } from '@shell/config/table-headers';\nimport {\n  CATALOG,\n  COUNT,\n  SCHEMA,\n  MANAGEMENT,\n  NAMESPACE\n} from '@shell/config/types';\nimport { VIEW_IN_API, EXPANDED_GROUPS, FAVORITE_TYPES } from '@shell/store/prefs';\nimport {\n  addObject, findBy, insertAt, isArray, removeObject, filterBy\n} from '@shell/utils/array';\nimport { clone, get } from '@shell/utils/object';\nimport {\n  ensureRegex, escapeHtml, escapeRegex, ucFirst, pluralize\n} from '@shell/utils/string';\nimport {\n  importChart, importList, importDetail, importEdit, listProducts, loadProduct, importCustomPromptRemove, resolveList, resolveEdit, resolveWindowComponent, importWindowComponent, importLogin, resolveChart, resolveDetail, importDialog, importMachineConfig, resolveMachineConfigComponent, resolveCloudCredentialComponent, importCloudCredential\n} from '@shell/utils/dynamic-importer';\n\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\nimport isObject from 'lodash/isObject';\nimport { normalizeType } from '@shell/plugins/dashboard-store/normalize';\nimport { sortBy } from '@shell/utils/sort';\n\nimport { haveV1Monitoring, haveV2Monitoring } from '@shell/utils/monitoring';\nimport { NEU_VECTOR_NAMESPACE } from '@shell/config/product/neuvector';\n\nexport const NAMESPACED = 'namespaced';\nexport const CLUSTER_LEVEL = 'cluster';\nexport const BOTH = 'both';\n\nexport const TYPE_MODES = {\n  /**\n   * allTypes usage: All resource types\n   *\n   * getTree usage: Remove ignored schemas, resources not applicable to ns, etc\n   */\n  ALL:      'all',\n  /**\n   * Represents resource types that should be shown at the top of the side nav.\n   *\n   * For example all fixed resource types above `More Resources` in the cluster explorer\n   *\n   * These will always be shown in the side nav\n   *\n   * allTypes usage: Resources that are in a group\n   *\n   * getTree usage: Remove ignored schemas, resources not applicable to ns, etc\n   */\n  BASIC:    'basic',\n  /**\n   * Represents any type of resource type that has been favourited\n   *\n   * These will always be shown in the side nav.\n   *\n   * allTypes usage: Resource types that have been favorited\n   *\n   * getTree usage: Remove ignored schemas, resources not applicable to ns, etc\n   */\n  FAVORITE: 'favorite',\n  /**\n   * Represents no virtual or spoofed types that have a count.\n   *\n   * For example the `More Resource` in the cluster explorer\n   *\n   * These will be shown in the side nav if there are resources in the ns filter OR the resource is not namespaces\n   *\n   * allTypes usage: All resource types that are not virtual or spoofed\n   *\n   * getTree usage: Remove types with no counts. Remove ignored schemas, resources not applicable to ns, etc\n   */\n  USED:     'used',\n};\n\nexport const ROOT = 'root';\n\nexport const SPOOFED_PREFIX = '__[[spoofed]]__';\nexport const SPOOFED_API_PREFIX = '__[[spoofedapi]]__';\n\nconst instanceMethods = {};\nconst graphConfigMap = {};\n\nconst FIELD_REGEX = /^\\$\\.metadata\\.fields\\[([0-9]*)\\]/;\n\nexport const IF_HAVE = {\n  V1_MONITORING:            'v1-monitoring',\n  V2_MONITORING:            'v2-monitoring',\n  PROJECT:                  'project',\n  NO_PROJECT:               'no-project',\n  NOT_V1_ISTIO:             'not-v1-istio',\n  MULTI_CLUSTER:            'multi-cluster',\n  NEUVECTOR_NAMESPACE:      'neuvector-namespace',\n  ADMIN:                    'admin-user',\n  MCM_DISABLED:             'mcm-disabled',\n  NOT_STANDALONE_HARVESTER: 'not-standalone-harvester',\n};\n\nexport function DSL(store, product, module = 'type-map') {\n  // store.commit(`${ module }/product`, { name: product });\n\n  return {\n    product(inOpt) {\n      const opt = {\n        name:                product,\n        weight:              1,\n        inStore:             'cluster',\n        inExplorer:          false,\n        removable:           true,\n        showClusterSwitcher: true,\n        showNamespaceFilter: false,\n        public:              true,\n        filterMode:          'namespaces',\n        ...inOpt\n      };\n\n      for ( const k of ['ifHaveGroup', 'ifHaveType'] ) {\n        if ( opt[k] ) {\n          opt[k] = regexToString(ensureRegex(opt[k]));\n        }\n      }\n\n      store.commit(`${ module }/product`, opt);\n    },\n\n    basicType(types, group) {\n      // Support passing in a map of types and using just the values\n      if ( !isArray(types) && types && isObject(types) ) {\n        types = Object.values(types);\n      }\n\n      store.commit(`${ module }/basicType`, {\n        product, types, group\n      });\n    },\n\n    // Type- and Group-dependent\n    groupBy(type, field) {\n      store.commit(`${ module }/groupBy`, { type, field });\n    },\n\n    headers(type, headers) {\n      headers.forEach((header) => {\n        // If on the client, then use the value getter if there is one\n        if (header.getValue) {\n          // we need to store the .value prop for the advanced filtering\n          header.valueProp = header.value;\n          header.value = header.getValue;\n        }\n\n        delete header.getValue;\n      });\n\n      store.commit(`${ module }/headers`, { type, headers });\n    },\n\n    hideBulkActions(type, field) {\n      store.commit(`${ module }/hideBulkActions`, { type, field });\n    },\n\n    configureType(match, options) {\n      if (options.graphConfig) {\n        graphConfigMap[match] = options.graphConfig;\n        delete options.graphConfig;\n      }\n      store.commit(`${ module }/configureType`, { ...options, match });\n    },\n\n    componentForType(match, replace) {\n      store.commit(`${ module }/componentForType`, { match, replace });\n    },\n\n    ignoreType(regexOrString) {\n      store.commit(`${ module }/ignoreType`, regexOrString);\n    },\n\n    ignoreGroup(regexOrString, cb) {\n      store.commit(`${ module }/ignoreGroup`, { regexOrString, cb });\n    },\n\n    weightGroup(input, weight, forBasic) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/weightGroup`, {\n          groups: input, weight, forBasic\n        });\n      } else {\n        store.commit(`${ module }/weightGroup`, {\n          group: input, weight, forBasic\n        });\n      }\n    },\n\n    setGroupDefaultType(input, defaultType) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/setGroupDefaultType`, { groups: input, defaultType });\n      } else {\n        store.commit(`${ module }/setGroupDefaultType`, { group: input, defaultType });\n      }\n    },\n\n    weightType(input, weight, forBasic) {\n      if ( isArray(input) ) {\n        store.commit(`${ module }/weightType`, {\n          types: input, weight, forBasic\n        });\n      } else {\n        store.commit(`${ module }/weightType`, {\n          type: input, weight, forBasic\n        });\n      }\n    },\n\n    mapGroup(match, replace, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/mapGroup`, {\n        match, replace, weight, continueOnMatch\n      });\n    },\n\n    mapType(match, replace, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/mapType`, {\n        match, replace, weight, continueOnMatch\n      });\n    },\n\n    moveType(match, group, weight = 5, continueOnMatch = false) {\n      store.commit(`${ module }/moveType`, {\n        match, group, weight,\n      });\n    },\n\n    virtualType(obj) {\n      store.commit(`${ module }/virtualType`, { product, obj });\n    },\n\n    spoofedType(obj) {\n      store.commit(`${ module }/spoofedType`, { product, obj });\n    }\n  };\n}\n\nlet called = false;\n\nexport async function applyProducts(store, $plugin) {\n  if (called) {\n    return;\n  }\n\n  called = true;\n  for ( const product of listProducts() ) {\n    const impl = await loadProduct(product);\n\n    if ( impl?.init ) {\n      impl.init(store);\n    }\n  }\n  // Load the products from all plugins\n  $plugin.loadProducts();\n}\n\nexport function productsLoaded() {\n  return called;\n}\n\nexport const state = function() {\n  return {\n    products:                [],\n    virtualTypes:            {},\n    spoofedTypes:            {},\n    basicTypes:              {},\n    groupIgnore:             [],\n    groupWeights:            {},\n    groupDefaultTypes:       {},\n    basicGroupWeights:       { [ROOT]: 1000 },\n    groupMappings:           [],\n    typeIgnore:              [],\n    basicTypeWeights:        {},\n    typeWeights:             {},\n    typeMappings:            [],\n    typeMoveMappings:        [],\n    typeToComponentMappings: [],\n    typeOptions:             [],\n    groupBy:                 {},\n    headers:                 {},\n    hideBulkActions:         {},\n    schemaGeneration:        1,\n    cache:                   {\n      typeMove:           {},\n      groupLabel:         {},\n      ignore:             {},\n      list:               {},\n      chart:              {},\n      detail:             {},\n      edit:               {},\n      componentFor:       {},\n      promptRemove:       {},\n      windowComponents:   {},\n      'machine-config':   {},\n      'cloud-credential': {}\n\n    },\n  };\n};\n\nexport const getters = {\n  // ----------------------------------------------------------------------------\n  // 1 ) Getting info\n  // ----------------------------------------------------------------------------\n  // Turns a type name into a display label (e.g. management.cattle.io.cluster -> Cluster)\n  labelFor(state, getters, rootState, rootGetters) {\n    return (schema, count = 1, language = null) => {\n      return _applyMapping(schema, state.typeMappings, 'id', false, () => {\n        const key = `typeLabel.\"${ schema.id.toLowerCase() }\"`;\n\n        if ( rootGetters['i18n/exists'](key, language) ) {\n          return rootGetters['i18n/t'](key, { count }, language).trim();\n        }\n\n        const out = schema?.attributes?.kind || schema.id || '?';\n\n        // Add spaces, but breaks typing names into jump menu naturally\n        // out = ucFirst(out.replace(/([a-z])([A-Z])/g,'$1 $2'));\n\n        if ( count === 1 ) {\n          return out;\n        }\n\n        // This works for most things... if you don't like it, put in a typeLabel translation for above.\n        return pluralize(out);\n      });\n    };\n  },\n\n  // Turns a group name into a display label (e.g. management.cattle.io.v3.cluster -> Cluster)\n  groupLabelFor(state) {\n    return (schemaOrName) => {\n      let group = schemaOrName;\n\n      if ( typeof schemaOrName === 'object' ) {\n        let moved = false;\n\n        for ( const rule of state.typeMoveMappings ) {\n          const re = stringToRegex(rule.match);\n\n          if ( schemaOrName.id.match(re) ) {\n            moved = true;\n            group = rule.replace;\n          }\n        }\n\n        if ( !moved ) {\n          group = group.attributes.group;\n        }\n      }\n\n      if ( typeof group !== 'string' ) {\n        return null;\n      }\n\n      const out = _applyMapping(group, state.groupMappings, null, state.cache.groupLabel, (group) => {\n        const match = group.match(/^(.*)\\.k8s\\.io$/);\n\n        if ( match ) {\n          return match[1].split(/\\./).map((x) => ucFirst(x)).join('.');\n        }\n\n        return group;\n      });\n\n      return out;\n    };\n  },\n\n  groupForBasicType(state) {\n    return (product, schemaId) => {\n      return state.basicTypes?.[product]?.[schemaId];\n    };\n  },\n\n  optionsFor(state) {\n    const def = {\n      isCreatable:          true,\n      isEditable:           true,\n      isRemovable:          true,\n      showState:            true,\n      showAge:              true,\n      canYaml:              true,\n      namespaced:           null,\n      listGroups:           [],\n      depaginate:           false,\n      customRoute:          undefined,\n      resourceEditMasthead: true,\n    };\n\n    return (schemaOrType) => {\n      if (!schemaOrType) {\n        return {};\n      }\n\n      const type = (typeof schemaOrType === 'object' ? schemaOrType.id : schemaOrType);\n      const found = state.typeOptions.find((entry) => {\n        const re = stringToRegex(entry.match);\n\n        return re.test(type);\n      });\n\n      const opts = Object.assign({}, def, found || {});\n\n      return opts;\n    };\n  },\n\n  isFavorite(state, getters, rootState, rootGetters) {\n    return (schemaId) => {\n      return rootGetters['prefs/get'](FAVORITE_TYPES).includes(schemaId) || false;\n    };\n  },\n\n  typeWeightFor(state) {\n    return (type, forBasic) => {\n      type = type?.toLowerCase();\n\n      if ( forBasic ) {\n        return state.basicTypeWeights[type] || 0;\n      } else {\n        return state.typeWeights[type] || 0;\n      }\n    };\n  },\n\n  groupWeightFor(state) {\n    return (group, forBasic) => {\n      group = group.toLowerCase();\n\n      if ( forBasic ) {\n        return state.basicGroupWeights[group] || 0;\n      } else {\n        return state.groupWeights[group] || 0;\n      }\n    };\n  },\n\n  groupDefaultTypeFor(state) {\n    return (group) => {\n      group = group.toLowerCase();\n\n      return state.groupDefaultTypes[group];\n    };\n  },\n\n  getTree(state, getters, rootState, rootGetters) {\n    // Name the function so it's easily identifiable when performance tracing\n    return function getTree(productId, mode, allTypes, clusterId, namespaceMode, currentType, search) {\n      // getTree has four modes:\n      // - `basic` matches data types that should always be shown (even if there are 0 of them).\n      // - `used` matches the data types where there are more than 0 of them in the current set of namespaces.\n      // - `all` matches all types.\n      // - `favorite` matches starred types.\n      // namespaceMode: 'namespaced', 'cluster', or 'both'\n      // namespaces: null means all, otherwise it will be an array of specific namespaces to include\n      const isBasic = mode === TYPE_MODES.BASIC;\n\n      let searchRegex;\n\n      if ( search ) {\n        searchRegex = new RegExp(`^(.*)(${ escapeRegex(search) })(.*)$`, 'i');\n      }\n\n      const root = { children: [] };\n\n      // Add types from shortest to longest so that parents\n      // get added before children\n      const keys = Object.keys(allTypes).sort((a, b) => a.length - b.length);\n\n      // Set these for later\n      const currentLocal = rootGetters['i18n/current']();\n      const defaultLocal = rootGetters['i18n/default']();\n\n      for ( const type of keys ) {\n        const typeObj = allTypes[type];\n\n        if ( typeObj.schema && getters.isIgnored(typeObj.schema) ) {\n          // Skip ignored groups & types\n          continue;\n        }\n\n        const namespaced = typeObj.namespaced;\n\n        if ( (namespaceMode === NAMESPACED && !namespaced ) || (namespaceMode === CLUSTER_LEVEL && namespaced) ) {\n          // Skip types that are not the right namespace mode\n          continue;\n        }\n\n        const inStore = rootGetters.currentStore(typeObj.name);\n        const count = rootGetters[`${ inStore }/count`](typeObj);\n        const groupForBasicType = getters.groupForBasicType(productId, typeObj.name);\n\n        if ( typeObj.id === currentType ) {\n          // If this is the type currently being shown, always show it\n        } else if ( isBasic && !groupForBasicType ) {\n          // If we want the basic tree only return basic types;\n          continue;\n        } else if ( mode === TYPE_MODES.USED && count <= 0 ) {\n          // If there's none of this type, ignore this entry when viewing only in-use types\n          // Note: count is sometimes null, which is <= 0.\n          continue;\n        }\n\n        const label = typeObj.labelKey ? rootGetters['i18n/t'](typeObj.labelKey) || typeObj.label : typeObj.label;\n\n        const labelDisplay = highlightLabel(label, count, typeObj.schema);\n\n        if ( !labelDisplay ) {\n          // Search happens in highlight and returns null if not found\n          continue;\n        }\n\n        let group;\n\n        if ( isBasic ) {\n          group = _ensureGroup(root, groupForBasicType, true);\n        } else if ( mode === TYPE_MODES.FAVORITE ) {\n          group = _ensureGroup(root, 'starred');\n          group.weight = 1000;\n        } else if ( mode === TYPE_MODES.USED ) {\n          group = _ensureGroup(root, `inUse::${ getters.groupLabelFor(typeObj.schema) }`);\n        } else {\n          group = _ensureGroup(root, typeObj.schema || typeObj.group || ROOT);\n        }\n\n        let route = typeObj.route;\n\n        // Make the default route if one isn't set\n        if (!route ) {\n          route = {\n            name:   'c-cluster-product-resource',\n            params: {\n              product:  productId,\n              cluster:  clusterId,\n              resource: typeObj.name,\n            }\n          };\n\n          typeObj.route = route;\n        }\n\n        // Cluster ID and Product should always be set\n        if ( route && typeof route === 'object' ) {\n          route.params = route.params || {};\n          route.params.cluster = clusterId;\n          route.params.product = productId;\n        }\n\n        group.children.push({\n          label,\n          labelDisplay,\n          mode:     typeObj.mode,\n          exact:    typeObj.exact || false,\n          namespaced,\n          route,\n          name:     typeObj.name,\n          weight:   typeObj.weight || getters.typeWeightFor(typeObj.schema?.id || label, isBasic),\n          overview: !!typeObj.overview,\n        });\n      }\n\n      // Recursively sort the groups\n      _sortGroup(root, mode);\n\n      return root.children;\n\n      // ----------------------\n\n      function _ensureGroup(tree, schemaOrName, forBasic = false) {\n        let name = getters.groupLabelFor(schemaOrName);\n        const isRoot = ( name === ROOT || name.startsWith(`${ ROOT }::`) );\n\n        if ( name && name.includes('::') ) {\n          let parent;\n\n          [parent, name] = name.split('::', 2);\n          tree = _ensureGroup(tree, parent);\n        }\n\n        // Translate if an entry exists\n        let label = name;\n        const key = `nav.group.\"${ name }\"`;\n\n        if ( rootGetters['i18n/exists'](key) ) {\n          label = rootGetters['i18n/t'](key);\n        }\n\n        let group = findBy(tree.children, 'name', name);\n\n        if ( !group ) {\n          group = {\n            name,\n            label,\n            weight:      getters.groupWeightFor(name, forBasic),\n            defaultType: getters.groupDefaultTypeFor(name),\n          };\n\n          tree.children.push(group);\n        }\n\n        if ( isRoot ) {\n          group.isRoot = true;\n        }\n\n        if ( !group.children ) {\n          group.children = [];\n        }\n\n        return group;\n      }\n\n      function highlightLabel(original, count, schema) {\n        let label = escapeHtml(original);\n\n        if ( searchRegex ) {\n          let match = label.match(searchRegex);\n\n          if (!match) {\n            if ( currentLocal !== defaultLocal && schema ) {\n              const defaultLabel = getters.labelFor(schema, count, defaultLocal);\n\n              if (defaultLabel && defaultLabel !== label ) {\n                label += ` (${ defaultLabel })`;\n                match = label.match(searchRegex);\n              }\n            }\n          }\n\n          if ( match ) {\n            label = `${ escapeHtml(match[1]) }<span class=\"highlight\">${ escapeHtml(match[2]) }</span>${ escapeHtml(match[3]) }`;\n          } else {\n            return null;\n          }\n        }\n\n        return label;\n      }\n    };\n  },\n\n  isSpoofed(state, getters, rootState, rootGetters) {\n    return (type, product) => {\n      product = product || rootGetters['productId'];\n      const productSpoofedTypes = state.spoofedTypes[product] || [];\n\n      return productSpoofedTypes.some((st) => st.type === type);\n    };\n  },\n\n  isVirtual(state, getters, rootState, rootGetters) {\n    return (name, product) => {\n      product = product || rootGetters['productId'];\n      const productVirtualTypes = state.virtualTypes[product] || [];\n\n      return productVirtualTypes.some((st) => st.name === name);\n    };\n  },\n\n  getSpoofedInstances(state, getters, rootState, rootGetters) {\n    return async(type, product) => {\n      product = product || rootGetters['productId'];\n      const getInstances = instanceMethods[product]?.[type] || (() => []);\n      const instances = await getInstances();\n\n      instances.forEach((instance) => {\n        const type = instance.type;\n        const id = instance.id;\n        const link = `/${ SPOOFED_PREFIX }/${ type }/${ id }`;\n        const apiLink = `/${ SPOOFED_API_PREFIX }/${ type }/${ id }`;\n\n        instance.links = {\n          remove: instance.links?.remove || link,\n          self:   instance.links?.self || link,\n          update: instance.links?.update || link,\n          view:   instance.links?.view || apiLink,\n        };\n        instance.isSpoofed = true;\n      });\n\n      return instances;\n    };\n  },\n\n  getSpoofedInstance(state, getters, rootState, rootGetters) {\n    return async(type, product, id) => {\n      const productInstances = await getters.getSpoofedInstances(type, product);\n\n      return productInstances.find( (instance) => instance.id === id);\n    };\n  },\n\n  allSpoofedTypes(state, getters, rootState, rootGetters) {\n    return Object.values(state.spoofedTypes).flat();\n  },\n\n  spoofedSchemas(state, getters, rootState, rootGetters) {\n    return (product) => {\n      const types = state.spoofedTypes[product] || [];\n\n      return types.flatMap((type) => {\n        const schemas = type.schemas || [];\n\n        return schemas.map((schema) => ({\n          ...schema,\n          isSpoofed: true\n        }));\n      });\n    };\n  },\n\n  allSpoofedSchemas(state, getters, rootState, rootGetters) {\n    return getters.allSpoofedTypes.flatMap((type) => {\n      const schemas = type.schemas || [];\n\n      return schemas.map((schema) => ({\n        ...schema,\n        isSpoofed: true\n      }));\n    });\n  },\n\n  /**\n   * Given many things, create a list of menu items per schema given the mode\n   */\n  allTypes(state, getters, rootState, rootGetters) {\n    // Name the function so it's easily identifiable when performance tracing\n    return function allTypes(product, modes = [TYPE_MODES.ALL]) {\n      const module = state.products.find((p) => p.name === product)?.inStore;\n      const schemas = rootGetters[`${ module }/all`](SCHEMA);\n      const isLocal = !rootGetters.currentCluster?.isLocal;\n      const isRancher = rootGetters.isRancher;\n      const counts = rootGetters[`${ module }/all`](COUNT)?.[0]?.counts || {};\n\n      const out = {};\n\n      // For performance reasons this must be super quick to iterate over.\n      // For each schema...\n      // 1) Determine if it's applicable given the mode\n      // 2) For each applicable mode create a `Type` entry\n      for ( const schema of schemas ) {\n        let schemaModes = { };\n\n        modes.forEach((m) => {\n          schemaModes[m] = true;\n        });\n\n        const attrs = schema.attributes || {};\n        const typeOptions = getters['optionsFor'](schema);\n\n        schemaModes[TYPE_MODES.BASIC] = schemaModes[TYPE_MODES.BASIC] && getters.groupForBasicType(product, schema.id);\n\n        if (Object.values(schemaModes).every((s) => !s)) {\n          continue;\n        }\n\n        schemaModes[TYPE_MODES.FAVORITE] = schemaModes[TYPE_MODES.FAVORITE] && getters.isFavorite(schema.id);\n\n        if (Object.values(schemaModes).every((s) => !s)) {\n          continue;\n        }\n\n        const onlyBasic = schemaModes[TYPE_MODES.BASIC] && modes.length === 1;\n\n        // This clause is only valid for non-basic modes. So if we have only basic... skip it\n        if (!onlyBasic) {\n          const invalidType = !attrs.kind ||\n          (typeof typeOptions.ifRancherCluster !== 'undefined' && typeOptions.ifRancherCluster !== isRancher) ||\n          (typeOptions.localOnly && isLocal);\n\n          if (invalidType) {\n            // Remove anything not basic\n            schemaModes = { [TYPE_MODES.BASIC]: schemaModes[TYPE_MODES.BASIC] };\n          }\n        }\n\n        // This is an expensive request to make, so only do it if we really need to\n        let label;\n\n        Object.entries(schemaModes).forEach(([mode, enabled]) => {\n          if (!enabled) {\n            return;\n          }\n\n          if (!out[mode]) {\n            out[mode] = {};\n          }\n\n          if (!label) {\n            label = getters.labelFor(schema, counts[schema.id]);\n          }\n\n          out[mode][schema.id] = {\n            label,\n            mode,\n            weight:     getters.typeWeightFor(schema?.id || label, mode === TYPE_MODES.BASIC),\n            schema,\n            name:       schema.id,\n            namespaced: typeOptions.namespaced === null ? attrs.namespaced : typeOptions.namespaced,\n            route:      typeOptions.customRoute\n          };\n        });\n      }\n\n      const nonUsedModes = modes.filter((m) => m !== TYPE_MODES.USED);\n      const isDev = rootGetters['prefs/get'](VIEW_IN_API);\n\n      // Add virtual and spoofed types\n      if ( nonUsedModes.length ) {\n        const virtualTypes = state.virtualTypes[product] || [];\n        const spoofedTypes = state.spoofedTypes[product] || [];\n        const allTypes = [...virtualTypes, ...spoofedTypes];\n        const virtSpoofedModes = [...nonUsedModes];\n\n        for ( const type of allTypes ) {\n          const item = clone(type);\n          const id = item.name;\n\n          // Is there a virtual/spoofed type override for schema type?\n          // Currently used by harvester, this should be investigated and removed if possible\n          virtSpoofedModes.forEach((mode) => {\n            if (out[mode]?.[id]) {\n              delete out[mode][id];\n            }\n          });\n\n          if ( item['public'] === false && !isDev ) {\n            continue;\n          }\n\n          if (item.ifHave && !ifHave(rootGetters, item.ifHave)) {\n            continue;\n          }\n\n          if ( item.ifHaveType ) {\n            const targetedSchemas = typeof item.ifHaveType === 'string' ? schemas : rootGetters[`${ item.ifHaveType.store }/all`](SCHEMA);\n            const type = typeof item.ifHaveType === 'string' ? item.ifHaveType : item.ifHaveType?.type;\n\n            const haveIds = filterBy(targetedSchemas, 'id', normalizeType(type)).map((s) => s.id);\n\n            if (!haveIds.length) {\n              continue;\n            }\n\n            if (item.ifHaveVerb && !ifHaveVerb(rootGetters, module, item.ifHaveVerb, haveIds)) {\n              continue;\n            }\n          }\n\n          if ( item.ifHaveSubTypes ) {\n            const hasSome = (item.ifHaveSubTypes || []).some((type) => {\n              return !!findBy(schemas, 'id', normalizeType(type));\n            });\n\n            if (!hasSome) {\n              continue;\n            }\n          }\n\n          if ( typeof item.ifRancherCluster !== 'undefined' && item.ifRancherCluster !== rootGetters.isRancher ) {\n            continue;\n          }\n\n          if (item.ifFeature && !rootGetters['features/get'](item.ifFeature)) {\n            continue;\n          }\n\n          if (virtSpoofedModes.includes(TYPE_MODES.BASIC) && !getters.groupForBasicType(product, id) ) {\n            virtSpoofedModes.splice(virtSpoofedModes.indexOf(TYPE_MODES.BASIC), 1);\n          }\n\n          if (virtSpoofedModes.includes(TYPE_MODES.FAVORITE) && !getters.isFavorite(id) ) { // mode === TYPE_MODES.FAVORITE &&\n            virtSpoofedModes.splice(virtSpoofedModes.indexOf(TYPE_MODES.FAVORITE), 1);\n          }\n\n          // Ensure labelKey is taken into account... with a mock count\n          // This is harmless if the translation doesn't require count\n          if (item.labelKey && rootGetters['i18n/exists'](item.labelKey)) {\n            item.label = rootGetters['i18n/t'](item.labelKey, { count: 2 }).trim();\n            delete item.labelKey; // Label should really take precedence over labelKey, but it doesn't, so remove it\n          } else {\n            item.label = item.label || item.name;\n          }\n\n          virtSpoofedModes.forEach((mode) => {\n            const isBasic = mode === TYPE_MODES.BASIC;\n            const weight = type.weight || getters.typeWeightFor(item.label, isBasic);\n\n            item.mode = mode;\n            item.weight = weight;\n            if (!out[mode]) {\n              out[mode] = {};\n            }\n            out[mode][id] = item;\n          });\n        }\n      }\n\n      return out;\n    };\n  },\n\n  groupByFor(state) {\n    return (schema) => {\n      return state.groupBy[schema?.id];\n    };\n  },\n\n  hideBulkActionsFor(state) {\n    return (schema) => {\n      return state.hideBulkActions[schema.id];\n    };\n  },\n\n  headersFor(state, getters, rootState, rootGetters) {\n    return (schema) => {\n      const attributes = schema.attributes || {};\n      const columns = attributes.columns || [];\n      const typeOptions = getters['optionsFor'](schema);\n\n      // A specific list has been provided\n      if ( state.headers[schema.id] ) {\n        return state.headers[schema.id].map((entry) => {\n          if ( typeof entry === 'string' ) {\n            const col = findBy(columns, 'name', entry);\n\n            if ( col ) {\n              return fromSchema(col, rootGetters);\n            } else {\n              return null;\n            }\n          } else {\n            return entry;\n          }\n        }).filter((col) => !!col);\n      }\n\n      // Otherwise make one up from schema\n      const out = typeOptions.showState ? [STATE] : [];\n      const namespaced = attributes.namespaced || false;\n      let hasName = false;\n\n      for ( const col of columns ) {\n        if ( col.format === 'name' ) {\n          hasName = true;\n          out.push(NAME);\n          if ( namespaced ) {\n            out.push(NAMESPACE_COL);\n          }\n        } else {\n          out.push(fromSchema(col, rootGetters));\n        }\n      }\n\n      if ( !hasName ) {\n        insertAt(out, 1, NAME);\n        if ( namespaced ) {\n          insertAt(out, 2, NAMESPACE_COL);\n        }\n      }\n\n      // Age always goes last\n      if ( out.includes(AGE) ) {\n        removeObject(out, AGE);\n        if ( typeOptions.showAge ) {\n          out.push(AGE);\n        }\n      }\n\n      return out;\n\n      function fromSchema(col, rootGetters) {\n        let formatter, width, formatterOpts;\n\n        if ( (col.format === '' || col.format === 'date') && col.name === 'Age' ) {\n          return AGE;\n        }\n\n        if ( col.format === 'date' || col.type === 'date' ) {\n          formatter = 'Date';\n          width = 120;\n          formatterOpts = { multiline: true };\n        }\n\n        if ( col.type === 'number' || col.type === 'int' ) {\n          formatter = 'Number';\n        }\n\n        const colName = col.name.includes(' ') ? col.name.split(' ').map((word) => word.charAt(0).toUpperCase() + word.substring(1) ).join('') : col.name;\n\n        const exists = rootGetters['i18n/exists'];\n        const t = rootGetters['i18n/t'];\n        const labelKey = `tableHeaders.${ colName.charAt(0).toLowerCase() + colName.slice(1) }`;\n        const description = col.description || '';\n        const tooltip = description && description[description.length - 1] === '.' ? description.slice(0, -1) : description;\n\n        return {\n          name:  col.name.toLowerCase(),\n          label: exists(labelKey) ? t(labelKey) : col.name,\n          value: _rowValueGetter(col),\n          sort:  [col.field],\n          formatter,\n          formatterOpts,\n          width,\n          tooltip\n        };\n      }\n    };\n  },\n\n  // ------------------------------------\n  // Custom list/detail/edit/header component detection\n  //\n  // Note: you can't refactor these into one function that does `@/${kind}/${type}`,\n  // because babel needs some hardcoded idea where to look for the dependency.\n  //\n  // Note 2: Yes these are editing state in a getter for caching... it's ok, probably.\n  // ------------------------------------\n  hasCustomList(state, getters, rootState) {\n    return (rawType) => {\n      const key = getters.componentFor(rawType);\n\n      return hasCustom(state, rootState, 'list', key, (key) => resolveList(key));\n    };\n  },\n\n  hasCustomChart(state, getters, rootState) {\n    return (rawType) => {\n      const key = getters.componentFor(rawType);\n\n      return hasCustom(state, rootState, 'chart', key, (key) => resolveChart(key));\n    };\n  },\n\n  hasCustomDetail(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'detail', key, (key) => resolveDetail(key));\n    };\n  },\n\n  hasGraph(state, getters) {\n    return (resource) => {\n      const typeOptions = getters['optionsFor'](resource);\n\n      if (typeOptions && typeOptions.hasGraph) {\n        return graphConfigMap[resource];\n      }\n\n      return null;\n    };\n  },\n\n  hasCustomEdit(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'edit', key, (key) => resolveEdit(key));\n    };\n  },\n\n  hasComponent(state, getters, rootState) {\n    return (path) => {\n      return hasCustom(state, rootState, 'edit', path, (path) => resolveEdit(path));\n    };\n  },\n\n  hasCustomPromptRemove(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'promptRemove', key, () => require.resolve(`@shell/promptRemove/${ key }`));\n    };\n  },\n\n  hasCustomWindowComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'windowComponents', key, (key) => resolveWindowComponent(key));\n    };\n  },\n\n  hasCustomMachineConfigComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'machine-config', key, (key) => resolveMachineConfigComponent(key));\n    };\n  },\n\n  hasCustomCloudCredentialComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      const key = getters.componentFor(rawType, subType);\n\n      return hasCustom(state, rootState, 'cloud-credential', key, (key) => resolveCloudCredentialComponent(key));\n    };\n  },\n\n  importComponent(state, getters) {\n    return (path) => {\n      return importEdit(path);\n    };\n  },\n\n  importDialog(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'dialog', getters.componentFor(rawType, subType), importDialog);\n    };\n  },\n\n  importList(state, getters, rootState) {\n    return (rawType) => {\n      return loadExtension(rootState, 'list', getters.componentFor(rawType), importList);\n    };\n  },\n\n  importChart(state, getters, rootState) {\n    return (rawType) => {\n      return loadExtension(rootState, 'chart', getters.componentFor(rawType), importChart);\n    };\n  },\n\n  importDetail(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'detail', getters.componentFor(rawType, subType), importDetail);\n    };\n  },\n\n  importEdit(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'edit', getters.componentFor(rawType, subType), importEdit);\n    };\n  },\n\n  importCustomPromptRemove(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'promptRemove', getters.componentFor(rawType, subType), importCustomPromptRemove);\n    };\n  },\n\n  importWindowComponent(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'windowComponents', getters.componentFor(rawType, subType), importWindowComponent);\n    };\n  },\n\n  importLogin(state, getters, rootState) {\n    return (authType) => {\n      return loadExtension(rootState, 'login', authType, importLogin);\n    };\n  },\n\n  importMachineConfig(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'machine-config', getters.componentFor(rawType, subType), importMachineConfig);\n    };\n  },\n\n  importCloudCredential(state, getters, rootState) {\n    return (rawType, subType) => {\n      return loadExtension(rootState, 'cloud-credential', getters.componentFor(rawType, subType), importCloudCredential);\n    };\n  },\n\n  componentFor(state, getters) {\n    return (type, subType) => {\n      let key = type;\n\n      if ( subType ) {\n        key = `${ type }/${ subType }`;\n      }\n\n      if ( state.cache.componentFor[key] !== undefined ) {\n        return state.cache.componentFor[key];\n      }\n\n      let out = type;\n\n      const mapping = state.typeToComponentMappings.find((mapping) => {\n        const re = stringToRegex(mapping.match);\n\n        return re.test(key);\n      });\n\n      if ( mapping ) {\n        out = mapping.replace;\n      } else if ( subType ) {\n        // Try again without the subType\n        out = getters.componentFor(type);\n      }\n\n      state.cache.componentFor[key] = out;\n\n      return out;\n    };\n  },\n\n  isIgnored(state, getters, rootState, rootGetters) {\n    return (schema) => {\n      let out = false;\n\n      for ( const rule of state.groupIgnore ) {\n        const group = schema?.attributes?.group;\n\n        if (group && group.match(stringToRegex(rule.type) && isObject(rule) && rule.type)) {\n          out = rule.cb(rootGetters);\n          break;\n        }\n\n        if ( group && typeof rule === 'string' && group.match(stringToRegex(rule)) ) {\n          out = true;\n          break;\n        }\n      }\n\n      if ( !out ) {\n        for ( const rule of state.typeIgnore ) {\n          if ( schema.id.match(stringToRegex(rule)) ) {\n            out = true;\n            break;\n          }\n        }\n      }\n\n      state.cache.ignore[schema.id] = out;\n\n      return out;\n    };\n  },\n\n  activeProducts(state, getters, rootState, rootGetters) {\n    const knownTypes = {};\n    const knownGroups = {};\n    const isDev = rootGetters['prefs/get'](VIEW_IN_API);\n\n    if ( state.schemaGeneration < 0 ) {\n      // This does nothing, but makes activeProducts depend on schemaGeneration\n      // so that it can be used to update the product list on schema change.\n      return;\n    }\n\n    return state.products.filter((p) => {\n      const module = p.inStore;\n\n      if ( p['public'] === false && !isDev ) {\n        return false;\n      }\n\n      if ( p.ifGetter && !rootGetters[p.ifGetter] ) {\n        return false;\n      }\n\n      if ( !knownTypes[module] ) {\n        const schemas = rootGetters[`${ module }/all`](SCHEMA);\n\n        knownTypes[module] = [];\n        knownGroups[module] = [];\n\n        for ( const s of schemas ) {\n          knownTypes[module].push(s._id);\n\n          if ( s._group ) {\n            addObject(knownGroups[module], s._group);\n          }\n        }\n      }\n\n      if ( p.ifFeature) {\n        const features = Array.isArray(p.ifFeature) ? p.ifFeature : [p.ifFeature];\n\n        for (const f of features) {\n          if (!rootGetters['features/get'](f)) {\n            return false;\n          }\n        }\n      }\n\n      if ( p.ifHave && !ifHave(rootGetters, p.ifHave)) {\n        return false;\n      }\n\n      if ( p.ifHaveType ) {\n        const haveIds = knownTypes[module].filter((t) => t.match(stringToRegex(p.ifHaveType)) );\n\n        if ( !haveIds.length ) {\n          return false;\n        }\n\n        if ( p.ifHaveVerb && !ifHaveVerb(rootGetters, module, p.ifHaveVerb, haveIds)) {\n          return false;\n        }\n      }\n\n      if ( p.ifHaveGroup && !knownGroups[module].find((t) => t.match(stringToRegex(p.ifHaveGroup)) ) ) {\n        return false;\n      }\n\n      return true;\n    });\n  },\n\n  isProductActive(state, getters) {\n    return (name) => {\n      if ( findBy(getters['activeProducts'], 'name', name) ) {\n        return true;\n      }\n\n      return false;\n    };\n  },\n\n  rowValueGetter(state) {\n    return (schema, colName) => {\n      const col = _findColumnByName(schema, colName);\n\n      return _rowValueGetter(col);\n    };\n  },\n\n  isProductRegistered(state) {\n    return (productName) => {\n      const prod = state.products.find((p) => p.name === productName);\n\n      return !!prod;\n    };\n  },\n};\n\nexport const mutations = {\n  schemaChanged(state) {\n    state.schemaGeneration = state.schemaGeneration + 1;\n  },\n\n  // Remove the specified product\n  remove(state, { product, plugin }) {\n    const existing = state.products.findIndex((p) => p.name === product);\n\n    // Remove the product\n    if (existing !== -1) {\n      state.products.splice(existing, 1);\n    }\n\n    // Go through the basic types and remove the headers\n    if (state.virtualTypes[product]) {\n      delete state.virtualTypes[product];\n    }\n\n    if (state.basicTypes[product]) {\n      // Remove table header configuration\n      Object.keys(state.basicTypes[product]).forEach((type) => {\n        delete state.headers[type];\n        delete state.basicTypeWeights[type];\n        delete state.cache.ignore[type];\n        // These track whether the type has a custom component\n        delete state.cache.detail[type];\n        delete state.cache.edit[type];\n        delete state.cache.list[type];\n\n        // Delete all of the entries from the componentFor cache where the valye is the type\n        // Can do this more efficiently\n        Object.keys(state.cache.componentFor).forEach((k) => {\n          const v = state.cache.componentFor[k];\n\n          if (v === type) {\n            delete state.cache.componentFor[k];\n          }\n        });\n      });\n\n      delete state.basicTypes[product];\n    }\n\n    if (plugin) {\n      // kind is list, edit, detail etc\n      Object.keys(plugin.types).forEach((kind) => {\n        if (state.cache[kind]) {\n          Object.keys(plugin.types[kind]).forEach((type) => {\n            delete state.cache[kind][type];\n          });\n        }\n      });\n    }\n  },\n\n  product(state, obj) {\n    const existing = findBy(state.products, 'name', obj.name);\n\n    if ( existing ) {\n      Object.assign(existing, obj);\n    } else {\n      addObject(state.products, obj);\n    }\n  },\n\n  virtualType(state, { product, obj }) {\n    if ( !state.virtualTypes[product] ) {\n      state.virtualTypes[product] = [];\n    }\n\n    const copy = clone(obj);\n\n    copy.virtual = true;\n\n    const existing = findBy(state.virtualTypes[product], 'name', copy.name);\n\n    if ( existing ) {\n      Object.assign(existing, copy);\n    } else {\n      addObject(state.virtualTypes[product], copy);\n    }\n  },\n\n  spoofedType(state, { product, obj }) {\n    if ( !state.spoofedTypes[product] ) {\n      state.spoofedTypes[product] = [];\n    }\n\n    const copy = clone(obj);\n\n    instanceMethods[product] = instanceMethods[product] || {};\n    instanceMethods[product][copy.type] = copy.getInstances;\n    delete copy.getInstances;\n\n    copy.name = copy.type;\n    copy.isSpoofed = true;\n    copy.virtual = true;\n    copy.schemas.forEach((schema) => {\n      schema.links = {\n        collection: `/${ SPOOFED_PREFIX }/${ schema.id }`,\n        ...(schema.links || {})\n      };\n    });\n\n    const existing = findBy(state.spoofedTypes[product], 'type', copy.type);\n\n    if ( existing ) {\n      Object.assign(existing, copy);\n    } else {\n      addObject(state.spoofedTypes[product], copy);\n    }\n  },\n\n  basicType(state, { product, group, types }) {\n    if ( !product ) {\n      product = EXPLORER;\n    }\n\n    if ( !group ) {\n      group = ROOT;\n    }\n\n    if ( !isArray(types) ) {\n      types = [types];\n    }\n\n    if ( !state.basicTypes[product] ) {\n      state.basicTypes[product] = {};\n    }\n\n    for ( const t of types ) {\n      state.basicTypes[product][t] = group;\n    }\n  },\n\n  ignoreGroup(state, { regexOrString: match, cb }) {\n    match = ensureRegex(match);\n    // State shouldn't contain actual RegExp objects, because they don't serialize\n    cb ? state.groupIgnore.push({\n      type: regexToString(match),\n      cb\n    }) : state.groupIgnore.push(regexToString(match));\n  },\n\n  ignoreType(state, match) {\n    match = ensureRegex(match);\n    state.typeIgnore.push(regexToString(match));\n  },\n\n  groupBy(state, { type, field }) {\n    state.groupBy[type] = field;\n  },\n\n  headers(state, { type, headers }) {\n    state.headers[type] = headers;\n  },\n\n  hideBulkActions(state, { type, field }) {\n    state.hideBulkActions[type] = field;\n  },\n\n  // weightGroup({group: 'core', weight: 99}); -- higher groups are shown first\n  // These operate on group names *after* mapping but *before* translation\n  weightGroup(state, {\n    group, groups, weight, forBasic\n  }) {\n    if ( !groups ) {\n      groups = [];\n    }\n\n    if ( group ) {\n      groups.push(group);\n    }\n\n    const map = forBasic ? state.basicGroupWeights : state.groupWeights;\n\n    for ( const g of groups ) {\n      map[g.toLowerCase()] = weight;\n    }\n  },\n\n  // setGroupDefaultType({group: 'core', defaultType: 'name'});\n  // By default when a group is clicked, the first item is selected - this allows\n  // this behaviour to be changed and a named child type can be chosen\n  // These operate on group names *after* mapping but *before* translation\n  setGroupDefaultType(state, { group, groups, defaultType }) {\n    if ( !groups ) {\n      groups = [];\n    }\n\n    if ( group ) {\n      groups.push(group);\n    }\n\n    for ( const g of groups ) {\n      state.groupDefaultTypes[g.toLowerCase()] = defaultType;\n    }\n  },\n\n  // weightType('Cluster' 99); -- higher groups are shown first\n  // These operate on *schema* type names, before mapping\n  weightType(state, {\n    type, types, weight, forBasic\n  }) {\n    if ( !types ) {\n      types = [];\n    }\n\n    if ( type ) {\n      types.push(type);\n    }\n\n    const map = forBasic ? state.basicTypeWeights : state.typeWeights;\n\n    for ( const t of types ) {\n      map[t.toLowerCase()] = weight;\n    }\n  },\n\n  // mapGroup('ugly.thing', 'Nice Thing', 1);\n  // mapGroup(/ugly.thing.(stuff)', '$1', 2);\n  // mapGroup(/ugly.thing.(stuff)', function(groupStr, ruleObj, regexMatch, typeObj) { return ucFirst(group.id) } , 2);\n  mapGroup(state, {\n    match, replace, weight = 5, continueOnMatch = false\n  }) {\n    _addMapping(state.groupMappings, match, replace, weight, continueOnMatch);\n  },\n\n  mapType(state, {\n    match, replace, weight = 5, continueOnMatch = false\n  }) {\n    _addMapping(state.typeMappings, match, replace, weight, continueOnMatch);\n  },\n\n  // moveType('apps.deployment', 'Core');\n  moveType(state, { match, group, weight = 5 }) {\n    _addMapping(state.typeMoveMappings, match, group, weight);\n  },\n\n  componentForType(state, { match, replace }) {\n    match = ensureRegex(match);\n    match = regexToString(match);\n    state.typeToComponentMappings.push({ match, replace });\n  },\n\n  configureType(state, options) {\n    const match = regexToString(ensureRegex(options.match));\n\n    const idx = state.typeOptions.findIndex((obj) => obj.match === match);\n    let obj = { ...options, match };\n\n    if ( idx >= 0 ) {\n      obj = Object.assign(state.typeOptions[idx], obj);\n      state.typeOptions.splice(idx, 1, obj);\n    } else {\n      const obj = Object.assign({}, options, { match });\n\n      state.typeOptions.push(obj);\n    }\n  },\n\n};\n\nexport const actions = {\n  removeProduct({ commit }, metadata) {\n    commit('remove', metadata);\n  },\n\n  addFavorite({ dispatch, rootGetters }, type) {\n    const types = rootGetters['prefs/get'](FAVORITE_TYPES) || [];\n\n    addObject(types, type);\n\n    dispatch('prefs/set', { key: FAVORITE_TYPES, value: types }, { root: true });\n  },\n\n  removeFavorite({ dispatch, rootGetters }, type) {\n    const types = rootGetters['prefs/get'](FAVORITE_TYPES) || [];\n\n    removeObject(types, type);\n\n    dispatch('prefs/set', { key: FAVORITE_TYPES, value: types }, { root: true });\n  },\n\n  toggleGroup({ dispatch, rootGetters }, { group, expanded }) {\n    const groups = rootGetters['prefs/get'](EXPANDED_GROUPS);\n\n    if ( expanded ) {\n      addObject(groups, group);\n    } else {\n      removeObject(groups, group);\n    }\n\n    dispatch('prefs/set', { key: EXPANDED_GROUPS, value: groups }, { root: true });\n  },\n\n  configureType({ commit }, options) {\n    commit('configureType', options);\n  }\n};\n\nfunction _sortGroup(tree, mode) {\n  const by = ['weight:desc', 'namespaced', 'label'];\n\n  tree.children = sortBy(tree.children, by);\n\n  for (const entry of tree.children ) {\n    if ( entry.children ) {\n      _sortGroup(entry, mode);\n    }\n  }\n}\n\nfunction _applyMapping(objOrValue, mappings, keyField, cache, defaultFn) {\n  let key = objOrValue;\n  let found = false;\n\n  if ( keyField ) {\n    if ( typeof objOrValue !== 'object' ) {\n      return objOrValue;\n    }\n\n    key = get(objOrValue, keyField);\n\n    if ( typeof key !== 'string' ) {\n      return null;\n    }\n  }\n\n  if ( key && cache && cache[key] ) {\n    return cache[key];\n  }\n\n  let out = `${ key }`;\n\n  for ( const rule of mappings ) {\n    const re = stringToRegex(rule.match);\n    const captured = out.match(re);\n\n    if ( captured && rule.replace ) {\n      out = out.replace(re, rule.replace);\n\n      found = true;\n      if ( !rule.continueOnMatch ) {\n        break;\n      }\n    }\n  }\n\n  if ( !found && defaultFn ) {\n    out = defaultFn(out, objOrValue);\n  }\n\n  if ( cache ) {\n    cache[key] = out;\n  }\n\n  return out;\n}\n\nfunction _addMapping(mappings, match, replace, weight, continueOnMatch) {\n  match = regexToString(ensureRegex(match));\n\n  mappings.push({\n    match,\n    replace,\n    weight,\n    continueOnMatch,\n    insertIndex: mappings.length,\n  });\n\n  // Re-sort the list by weight (highest first) and insert time (oldest first)\n  mappings.sort((a, b) => {\n    const pri = b.weight - a.weight;\n\n    if ( pri ) {\n      return pri;\n    }\n\n    return a.insertIndex - b.insertIndex;\n  });\n}\n\n// Regexes can't be represented in state because they don't serialize to JSON..\nconst regexCache = {};\n\nfunction regexToString(regex) {\n  return regex.source;\n}\n\nfunction stringToRegex(str) {\n  let out = regexCache[str];\n\n  if ( !out ) {\n    out = new RegExp(str);\n    regexCache[str] = out;\n  }\n\n  return out;\n}\n\nfunction ifHave(getters, option) {\n  switch (option) {\n  case IF_HAVE.V2_MONITORING: {\n    return haveV2Monitoring(getters);\n  }\n  case IF_HAVE.V1_MONITORING: {\n    return haveV1Monitoring(getters);\n  }\n  case IF_HAVE.PROJECT: {\n    return !!project(getters);\n  }\n  case IF_HAVE.NO_PROJECT: {\n    return !project(getters);\n  }\n  case IF_HAVE.NOT_V1_ISTIO: {\n    return !isV1Istio(getters);\n  }\n  case IF_HAVE.MULTI_CLUSTER: {\n    return getters.isMultiCluster;\n  }\n  case IF_HAVE.NEUVECTOR_NAMESPACE: {\n    return getters[`cluster/all`](NAMESPACE).find((n) => n.metadata.name === NEU_VECTOR_NAMESPACE);\n  }\n  case IF_HAVE.ADMIN: {\n    return isAdminUser(getters);\n  }\n  case IF_HAVE.MCM_DISABLED: {\n    return !getters['isRancherInHarvester'];\n  }\n  case IF_HAVE.NOT_STANDALONE_HARVESTER: {\n    return !getters['isStandaloneHarvester'];\n  }\n  default:\n    return false;\n  }\n}\n\n// Could list a larger set of resources that typically only an admin user would have\nexport function isAdminUser(getters) {\n  const canEditSettings = (getters['management/schemaFor'](MANAGEMENT.SETTING)?.resourceMethods || []).includes('PUT');\n  const canEditFeatureFlags = (getters['management/schemaFor'](MANAGEMENT.FEATURE)?.resourceMethods || []).includes('PUT');\n  const canInstallApps = (getters['management/schemaFor'](CATALOG.APP)?.resourceMethods || []).includes('PUT');\n  const canAddRepos = (getters['management/schemaFor'](CATALOG.CLUSTER_REPO)?.resourceMethods || []).includes('PUT');\n  const canPutHelmOperations = (getters['management/schemaFor'](CATALOG.OPERATION)?.resourceMethods || []).includes('PUT');\n\n  return canEditSettings && canEditFeatureFlags && canInstallApps && canAddRepos && canPutHelmOperations;\n}\n\nfunction _findColumnByName(schema, colName) {\n  const attributes = schema.attributes || {};\n  const columns = attributes.columns || [];\n\n  return findBy(columns, 'name', colName);\n}\n\nfunction _rowValueGetter(col) {\n  // 'field' comes from the schema - typically it is of the form $.metadata.field[N]\n  // We will use JsonPath to look up this value, which is costly - so if we can detect this format\n  // Use a more efficient function to get the value\n  const value = col.field.startsWith('.') ? `$${ col.field }` : col.field;\n  const found = value.match(FIELD_REGEX);\n\n  if (found && found.length === 2) {\n    const fieldIndex = parseInt(found[1], 10);\n\n    return (row) => row.metadata?.fields?.[fieldIndex];\n  }\n\n  return value;\n}\n\n// Is V1 Istio installed?\nfunction isV1Istio(getters) {\n  const cluster = getters['currentCluster'];\n\n  return !!cluster?.status?.istioEnabled;\n}\n\nfunction ifHaveVerb(rootGetters, module, verb, haveIds) {\n  for ( const haveId of haveIds ) {\n    const schema = rootGetters[`${ module }/schemaFor`](haveId);\n    const want = verb.toLowerCase();\n    const collectionMethods = schema.collectionMethods || [];\n    const resourceMethods = schema.resourceMethods || [];\n    const have = [...collectionMethods, ...resourceMethods].map((x) => x.toLowerCase());\n\n    if ( !have.includes(want) && !have.includes(`blocked-${ want }`) ) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Look at the namespace filters to determine if a project is selected\nexport function project(getters) {\n  const clusterId = getters['currentCluster']?.id;\n\n  if ( !clusterId ) {\n    return null;\n  }\n\n  const filters = getters['namespaceFilters'];\n  const namespaces = [];\n  let projectName = null;\n\n  for (const filter of filters) {\n    const [type, id] = filter.split('://', 2);\n\n    if (type === 'project') {\n      if (projectName !== null) {\n        // More than one project selected\n        return null;\n      }\n      projectName = id;\n    } else if (type === 'ns') {\n      namespaces.push(id);\n    } else {\n      // Something other than project or namespace\n      return null;\n    }\n  }\n\n  // No project found?\n  if (!projectName) {\n    return null;\n  }\n\n  // We have one project and a set of namespaces\n  // Check that all of the namespaces belong to the project\n  const project = getters['management/byId'](MANAGEMENT.PROJECT, `${ clusterId }/${ projectName }`);\n\n  // No additional namespaces means just the project is selected\n  if (namespaces.length === 0) {\n    return project;\n  }\n\n  // Convert the project namespaces into a map so we can check existence easily\n  const prjNamespaceMap = project.namespaces.reduce((m, ns) => {\n    m[ns.metadata.name] = true;\n\n    return m;\n  }, {});\n\n  // All of the namespace filters must belong to the project\n  const found = namespaces.reduce((total, ns) => {\n    return prjNamespaceMap[ns] ? total + 1 : 0;\n  }, 0);\n\n  if (found !== namespaces.length) {\n    return null;\n  }\n\n  return project;\n}\n\nfunction hasCustom(state, rootState, kind, key, fallback) {\n  const cache = state.cache[kind];\n\n  if ( cache[key] !== undefined ) {\n    return cache[key];\n  }\n\n  // Check to see if the custom kind is provided by a plugin\n  if (!!rootState.$plugin.getDynamic(kind, key)) {\n    cache[key] = true;\n\n    return cache[key];\n  }\n\n  // Fallback\n  try {\n    fallback(key);\n    cache[key] = true;\n  } catch (e) {\n    cache[key] = false;\n  }\n\n  return cache[key];\n}\n\nfunction loadExtension(rootState, kind, key, fallback) {\n  const ext = rootState.$plugin.getDynamic(kind, key);\n\n  if (ext) {\n    if (typeof ext === 'function') {\n      return ext;\n    }\n\n    return () => ext;\n  }\n\n  return fallback(key);\n}\n"],"mappingsaAAa,EAAEC,KAAK,QAAQ,6BAA6B;AAC1F,SACEC,OAAO,EACPC,KAAK,EACLC,MAAM,EACNC,UAAU,EACVN,SAAS,QACJ,qBAAqB;AAC5B,SAASO,WAAW,EAAEC,eAAe,EAAEC,cAAc,QAAQ,oBAAoB;AACjF,SACEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,YAAY,EAAEC,QAAQ,QACvD,oBAAoB;AAC3B,SAASC,KAAK,EAAEC,GAAG,QAAQ,qBAAqB;AAChD,SACEC,WAAW,EAAEC,UAAU,EAAEC,WAAW,EAAEC,OAAO,EAAEC,SAAS,QACnD,qBAAqB;AAC5B,SACEC,WAAW,IAAXA,YAAW,EAAEC,UAAU,IAAVA,WAAU,EAAEC,YAAY,IAAZA,aAAY,EAAEC,UAAU,IAAVA,WAAU,EAAEC,YAAY,EAAEC,WAAW,EAAEC,wBAAwB,IAAxBA,yBAAwB,EAAEC,WAAW,EAAEC,WAAW,EAAEC,sBAAsB,EAAEC,qBAAqB,IAArBA,sBAAqB,EAAEC,WAAW,IAAXA,YAAW,EAAEC,YAAY,EAAEC,aAAa,EAAEC,YAAY,IAAZA,aAAY,EAAEC,mBAAmB,IAAnBA,oBAAmB,EAAEC,6BAA6B,EAAEC,+BAA+B,EAAEC,qBAAqB,IAArBA,sBAAqB,QAC9U,+BAA+B;AAEtC,SAAS1C,IAAI,IAAI2C,QAAQ,QAAQ,gCAAgC;AACjE,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,aAAa,QAAQ,0CAA0C;AACxE,SAASC,MAAM,QAAQ,mBAAmB;AAE1C,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,yBAAyB;AAC5E,SAASC,oBAAoB,QAAQ,iCAAiC;AAEtE,OAAO,IAAMC,UAAU,GAAG,YAAY;AACtC,OAAO,IAAMC,aAAa,GAAG,SAAS;AACtC,OAAO,IAAMC,IAAI,GAAG,MAAM;AAE1B,OAAO,IAAMC,UAAU,GAAG;EACxB;AACF;AACA;AACA;AACA;EACEC,GAAG,EAAO,KAAK;EACf;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,KAAK,EAAK,OAAO;EACjB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,UAAU;EACpB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,IAAI,EAAM;AACZ,CAAC;AAED,OAAO,IAAMC,IAAI,GAAG,MAAM;AAE1B,OAAO,IAAMC,cAAc,GAAG,iBAAiB;AAC/C,OAAO,IAAMC,kBAAkB,GAAG,oBAAoB;AAEtD,IAAMC,eAAe,GAAG,CAAC,CAAC;AAC1B,IAAMC,cAAc,GAAG,CAAC,CAAC;AAEzB,IAAMC,WAAW,GAAG,mCAAmC;AAEvD,OAAO,IAAMC,OAAO,GAAG;EACrBC,aAAa,EAAa,eAAe;EACzCC,aAAa,EAAa,eAAe;EACzCC,OAAO,EAAmB,SAAS;EACnCC,UAAU,EAAgB,YAAY;EACtCC,YAAY,EAAc,cAAc;EACxCC,aAAa,EAAa,eAAe;EACzCC,mBAAmB,EAAO,qBAAqB;EAC/CC,KAAK,EAAqB,YAAY;EACtCC,YAAY,EAAc,cAAc;EACxCC,wBAAwB,EAAE;AAC5B,CAAC;AAED,OAAO,SAASC,GAAGA,CAACC,KAAK,EAAEC,QAAO,EAAuB;EAAA,IAArBC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,UAAU;EACrD;;EAEA,OAAO;IACLF,OAAO,WAAAA,QAACK,KAAK,EAAE;MACb,IAAMC,GAAG,GAAAC,aAAA;QACPC,IAAI,EAAiBR,QAAO;QAC5BS,MAAM,EAAe,CAAC;QACtBC,OAAO,EAAc,SAAS;QAC9BC,UAAU,EAAW,KAAK;QAC1BC,SAAS,EAAY,IAAI;QACzBC,mBAAmB,EAAE,IAAI;QACzBC,mBAAmB,EAAE,KAAK;QAC1BC,MAAM,EAAe,IAAI;QACzBC,UAAU,EAAW;MAAY,GAC9BX,KAAK,CACT;MAED,SAAAY,EAAA,MAAAC,IAAA,GAAiB,CAAC,aAAa,EAAE,YAAY,CAAC,EAAAD,EAAA,GAAAC,IAAA,CAAAf,MAAA,EAAAc,EAAA,IAAG;QAA3C,IAAME,CAAC,GAAAD,IAAA,CAAAD,EAAA;QACX,IAAKX,GAAG,CAACa,CAAC,CAAC,EAAG;UACZb,GAAG,CAACa,CAAC,CAAC,GAAGC,aAAa,CAAC9E,WAAW,CAACgE,GAAG,CAACa,CAAC,CAAC,CAAC,CAAC;QAC7C;MACF;MAEApB,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,eAAaK,GAAG,CAAC;IAC1C,CAAC;IAEDiB,SAAS,WAAAA,UAACC,KAAK,EAAEC,KAAK,EAAE;MACtB;MACA,IAAK,CAACxF,OAAO,CAACuF,KAAK,CAAC,IAAIA,KAAK,IAAIzD,QAAQ,CAACyD,KAAK,CAAC,EAAG;QACjDA,KAAK,GAAGE,MAAM,CAACC,MAAM,CAACH,KAAK,CAAC;MAC9B;MAEAzB,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,iBAAe;QACpCD,OAAO,EAAPA,QAAO;QAAEwB,KAAK,EAALA,KAAK;QAAEC,KAAK,EAALA;MAClB,CAAC,CAAC;IACJ,CAAC;IAED;IACAG,OAAO,WAAAA,QAACC,IAAI,EAAEC,KAAK,EAAE;MACnB/B,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,eAAa;QAAE4B,IAAI,EAAJA,IAAI;QAAEC,KAAK,EAALA;MAAM,CAAC,CAAC;IACtD,CAAC;IAEDC,OAAO,WAAAA,QAACF,IAAI,EAAEE,QAAO,EAAE;MACrBA,QAAO,CAACC,OAAO,CAAC,UAACC,MAAM,EAAK;QAC1B;QACA,IAAIA,MAAM,CAACC,QAAQ,EAAE;UACnB;UACAD,MAAM,CAACE,SAAS,GAAGF,MAAM,CAACG,KAAK;UAC/BH,MAAM,CAACG,KAAK,GAAGH,MAAM,CAACC,QAAQ;QAChC;QAEA,OAAOD,MAAM,CAACC,QAAQ;MACxB,CAAC,CAAC;MAEFnC,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,eAAa;QAAE4B,IAAI,EAAJA,IAAI;QAAEE,OAAO,EAAPA;MAAQ,CAAC,CAAC;IACxD,CAAC;IAEDM,eAAe,WAAAA,gBAACR,IAAI,EAAEC,KAAK,EAAE;MAC3B/B,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,uBAAqB;QAAE4B,IAAI,EAAJA,IAAI;QAAEC,KAAK,EAALA;MAAM,CAAC,CAAC;IAC9D,CAAC;IAEDQ,aAAa,WAAAA,cAACC,KAAK,EAAEC,OAAO,EAAE;MAC5B,IAAIA,OAAO,CAACC,WAAW,EAAE;QACvBxD,cAAc,CAACsD,KAAK,CAAC,GAAGC,OAAO,CAACC,WAAW;QAC3C,OAAOD,OAAO,CAACC,WAAW;MAC5B;MACA1C,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,qBAAAM,aAAA,CAAAA,aAAA,KAAwBiC,OAAO;QAAED,KAAK,EAALA;MAAK,EAAE,CAAC;IAClE,CAAC;IAEDG,gBAAgB,WAAAA,iBAACH,KAAK,EAAEI,OAAO,EAAE;MAC/B5C,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,wBAAsB;QAAEsC,KAAK,EAALA,KAAK;QAAEI,OAAO,EAAPA;MAAQ,CAAC,CAAC;IAClE,CAAC;IAEDC,UAAU,WAAAA,WAACC,aAAa,EAAE;MACxB9C,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,kBAAgB4C,aAAa,CAAC;IACvD,CAAC;IAEDC,WAAW,WAAAA,YAACD,aAAa,EAAEE,EAAE,EAAE;MAC7BhD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,mBAAiB;QAAE4C,aAAa,EAAbA,aAAa;QAAEE,EAAE,EAAFA;MAAG,CAAC,CAAC;IAChE,CAAC;IAEDC,WAAW,WAAAA,YAACC,KAAK,EAAExC,MAAM,EAAEyC,QAAQ,EAAE;MACnC,IAAKjH,OAAO,CAACgH,KAAK,CAAC,EAAG;QACpBlD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,mBAAiB;UACtCkD,MAAM,EAAEF,KAAK;UAAExC,MAAM,EAANA,MAAM;UAAEyC,QAAQ,EAARA;QACzB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLnD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,mBAAiB;UACtCwB,KAAK,EAAEwB,KAAK;UAAExC,MAAM,EAANA,MAAM;UAAEyC,QAAQ,EAARA;QACxB,CAAC,CAAC;MACJ;IACF,CAAC;IAEDE,mBAAmB,WAAAA,oBAACH,KAAK,EAAEI,WAAW,EAAE;MACtC,IAAKpH,OAAO,CAACgH,KAAK,CAAC,EAAG;QACpBlD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,2BAAyB;UAAEkD,MAAM,EAAEF,KAAK;UAAEI,WAAW,EAAXA;QAAY,CAAC,CAAC;MACjF,CAAC,MAAM;QACLtD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,2BAAyB;UAAEwB,KAAK,EAAEwB,KAAK;UAAEI,WAAW,EAAXA;QAAY,CAAC,CAAC;MAChF;IACF,CAAC;IAEDC,UAAU,WAAAA,WAACL,KAAK,EAAExC,MAAM,EAAEyC,QAAQ,EAAE;MAClC,IAAKjH,OAAO,CAACgH,KAAK,CAAC,EAAG;QACpBlD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,kBAAgB;UACrCuB,KAAK,EAAEyB,KAAK;UAAExC,MAAM,EAANA,MAAM;UAAEyC,QAAQ,EAARA;QACxB,CAAC,CAAC;MACJ,CAAC,MAAM;QACLnD,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,kBAAgB;UACrC4B,IAAI,EAAEoB,KAAK;UAAExC,MAAM,EAANA,MAAM;UAAEyC,QAAQ,EAARA;QACvB,CAAC,CAAC;MACJ;IACF,CAAC;IAEDK,QAAQ,WAAAA,SAAChB,KAAK,EAAEI,OAAO,EAAuC;MAAA,IAArClC,MAAM,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEsD,eAAe,GAAAtD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MAC1DH,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,gBAAc;QACnCsC,KAAK,EAALA,KAAK;QAAEI,OAAO,EAAPA,OAAO;QAAElC,MAAM,EAANA,MAAM;QAAE+C,eAAe,EAAfA;MAC1B,CAAC,CAAC;IACJ,CAAC;IAEDC,OAAO,WAAAA,QAAClB,KAAK,EAAEI,OAAO,EAAuC;MAAA,IAArClC,MAAM,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEsD,eAAe,GAAAtD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MACzDH,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,eAAa;QAClCsC,KAAK,EAALA,KAAK;QAAEI,OAAO,EAAPA,OAAO;QAAElC,MAAM,EAANA,MAAM;QAAE+C,eAAe,EAAfA;MAC1B,CAAC,CAAC;IACJ,CAAC;IAEDE,QAAQ,WAAAA,SAACnB,KAAK,EAAEd,KAAK,EAAuC;MAAA,IAArChB,MAAM,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEsD,eAAe,GAAAtD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;MACxDH,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,gBAAc;QACnCsC,KAAK,EAALA,KAAK;QAAEd,KAAK,EAALA,KAAK;QAAEhB,MAAM,EAANA;MAChB,CAAC,CAAC;IACJ,CAAC;IAEDkD,WAAW,WAAAA,YAACC,GAAG,EAAE;MACf7D,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,mBAAiB;QAAED,OAAO,EAAPA,QAAO;QAAE4D,GAAG,EAAHA;MAAI,CAAC,CAAC;IAC3D,CAAC;IAEDC,WAAW,WAAAA,YAACD,GAAG,EAAE;MACf7D,KAAK,CAACsB,MAAM,IAAAC,MAAA,CAAKrB,MAAM,mBAAiB;QAAED,OAAO,EAAPA,QAAO;QAAE4D,GAAG,EAAHA;MAAI,CAAC,CAAC;IAC3D;EACF,CAAC;AACH;AAEA,IAAIE,MAAM,GAAG,KAAK;AAElB,gBAAsBC,aAAaA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,cAAA,CAAAC,KAAA,OAAAjE,SAAA;AAAA;AAelC,SAAAgE,eAAA;EAAAA,cAAA,GAAAE,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAfM,SAAAC,SAA6BxE,KAAK,EAAEyE,OAAO;IAAA,IAAAC,WAAA,EAAAC,OAAA,EAAA1E,OAAA,EAAA2E,IAAA;IAAA,OAAAN,mBAAA,CAAAO,IAAA,UAAAC,UAAAC,SAAA;MAAA,kBAAAA,SAAA,CAAAC,IAAA,GAAAD,SAAA,CAAAE,IAAA;QAAA;UAAA,KAC5ClB,MAAM;YAAAgB,SAAA,CAAAE,IAAA;YAAA;UAAA;UAAA,OAAAF,SAAA,CAAAG,MAAA;QAAA;UAIVnB,MAAM,GAAG,IAAI;UAACW,WAAA,GAAAS,0BAAA,CACSnI,YAAY,CAAC,CAAC;UAAA+H,SAAA,CAAAC,IAAA;UAAAN,WAAA,CAAAU,CAAA;QAAA;UAAA,KAAAT,OAAA,GAAAD,WAAA,CAAAW,CAAA,IAAAC,IAAA;YAAAP,SAAA,CAAAE,IAAA;YAAA;UAAA;UAAzBhF,OAAO,GAAA0E,OAAA,CAAAtC,KAAA;UAAA0C,SAAA,CAAAE,IAAA;UAAA,OACEhI,WAAW,CAACgD,OAAO,CAAC;QAAA;UAAjC2E,IAAI,GAAAG,SAAA,CAAAQ,IAAA;UAEV,IAAKX,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEY,IAAI,EAAG;YAChBZ,IAAI,CAACY,IAAI,CAACxF,KAAK,CAAC;UAClB;QAAC;UAAA+E,SAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,SAAA,CAAAE,IAAA;UAAA;QAAA;UAAAF,SAAA,CAAAC,IAAA;UAAAD,SAAA,CAAAU,EAAA,GAAAV,SAAA;UAAAL,WAAA,CAAAgB,CAAA,CAAAX,SAAA,CAAAU,EAAA;QAAA;UAAAV,SAAA,CAAAC,IAAA;UAAAN,WAAA,CAAAiB,CAAA;UAAA,OAAAZ,SAAA,CAAAa,MAAA;QAAA;UAEH;UACAnB,OAAO,CAACoB,YAAY,CAAC,CAAC;QAAC;QAAA;UAAA,OAAAd,SAAA,CAAAe,IAAA;MAAA;IAAA,GAAAtB,QAAA;EAAA,CACxB;EAAA,OAAAL,cAAA,CAAAC,KAAA,OAAAjE,SAAA;AAAA;AAED,OAAO,SAAS4F,cAAcA,CAAA,EAAG;EAC/B,OAAOhC,MAAM;AACf;AAEA,OAAO,IAAMiC,KAAK,GAAG,SAARA,KAAKA,CAAA,EAAc;EAC9B,OAAO;IACLC,QAAQ,EAAiB,EAAE;IAC3BC,YAAY,EAAa,CAAC,CAAC;IAC3BC,YAAY,EAAa,CAAC,CAAC;IAC3BC,UAAU,EAAe,CAAC,CAAC;IAC3BC,WAAW,EAAc,EAAE;IAC3BC,YAAY,EAAa,CAAC,CAAC;IAC3BC,iBAAiB,EAAQ,CAAC,CAAC;IAC3BC,iBAAiB,EAAAC,eAAA,KAAW3H,IAAI,EAAG,IAAI,CAAE;IACzC4H,aAAa,EAAY,EAAE;IAC3BC,UAAU,EAAe,EAAE;IAC3BC,gBAAgB,EAAS,CAAC,CAAC;IAC3BC,WAAW,EAAc,CAAC,CAAC;IAC3BC,YAAY,EAAa,EAAE;IAC3BC,gBAAgB,EAAS,EAAE;IAC3BC,uBAAuB,EAAE,EAAE;IAC3BC,WAAW,EAAc,EAAE;IAC3BpF,OAAO,EAAkB,CAAC,CAAC;IAC3BG,OAAO,EAAkB,CAAC,CAAC;IAC3BM,eAAe,EAAU,CAAC,CAAC;IAC3B4E,gBAAgB,EAAS,CAAC;IAC1BC,KAAK,EAAoB;MACvBC,QAAQ,EAAY,CAAC,CAAC;MACtBC,UAAU,EAAU,CAAC,CAAC;MACtBC,MAAM,EAAc,CAAC,CAAC;MACtBC,IAAI,EAAgB,CAAC,CAAC;MACtBC,KAAK,EAAe,CAAC,CAAC;MACtBC,MAAM,EAAc,CAAC,CAAC;MACtBC,IAAI,EAAgB,CAAC,CAAC;MACtBC,YAAY,EAAQ,CAAC,CAAC;MACtBC,YAAY,EAAQ,CAAC,CAAC;MACtBC,gBAAgB,EAAI,CAAC,CAAC;MACtB,gBAAgB,EAAI,CAAC,CAAC;MACtB,kBAAkB,EAAE,CAAC;IAEvB;EACF,CAAC;AACH,CAAC;AAED,OAAO,IAAMC,OAAO,GAAG;EACrB;EACA;EACA;EACA;EACAC,QAAQ,WAAAA,SAAC/B,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAC/C,OAAO,UAACC,MAAM,EAAiC;MAAA,IAA/BC,KAAK,GAAAhI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;MAAA,IAAEiI,QAAQ,GAAAjI,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;MACxC,OAAOkI,aAAa,CAACH,MAAM,EAAElC,KAAK,CAACc,YAAY,EAAE,IAAI,EAAE,KAAK,EAAE,YAAM;QAAA,IAAAwB,kBAAA;QAClE,IAAMC,GAAG,kBAAAhH,MAAA,CAAkB2G,MAAM,CAACM,EAAE,CAACC,WAAW,CAAC,CAAC,OAAI;QAEtD,IAAKR,WAAW,CAAC,aAAa,CAAC,CAACM,GAAG,EAAEH,QAAQ,CAAC,EAAG;UAC/C,OAAOH,WAAW,CAAC,QAAQ,CAAC,CAACM,GAAG,EAAE;YAAEJ,KAAK,EAALA;UAAM,CAAC,EAAEC,QAAQ,CAAC,CAACM,IAAI,CAAC,CAAC;QAC/D;QAEA,IAAMC,GAAG,GAAG,CAAAT,MAAM,aAANA,MAAM,gBAAAI,kBAAA,GAANJ,MAAM,CAAEU,UAAU,cAAAN,kBAAA,uBAAlBA,kBAAA,CAAoBO,IAAI,KAAIX,MAAM,CAACM,EAAE,IAAI,GAAG;;QAExD;QACA;;QAEA,IAAKL,KAAK,KAAK,CAAC,EAAG;UACjB,OAAOQ,GAAG;QACZ;;QAEA;QACA,OAAOhM,SAAS,CAACgM,GAAG,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;EAED;EACAG,aAAa,WAAAA,cAAC9C,KAAK,EAAE;IACnB,OAAO,UAAC+C,YAAY,EAAK;MACvB,IAAIrH,KAAK,GAAGqH,YAAY;MAExB,IAAKC,OAAA,CAAOD,YAAY,MAAK,QAAQ,EAAG;QACtC,IAAIE,KAAK,GAAG,KAAK;QAAC,IAAAC,SAAA,GAAA/D,0BAAA,CAEEa,KAAK,CAACe,gBAAgB;UAAAoC,KAAA;QAAA;UAA1C,KAAAD,SAAA,CAAA9D,CAAA,MAAA+D,KAAA,GAAAD,SAAA,CAAA7D,CAAA,IAAAC,IAAA,GAA6C;YAAA,IAAjC8D,IAAI,GAAAD,KAAA,CAAA9G,KAAA;YACd,IAAMgH,EAAE,GAAGC,aAAa,CAACF,IAAI,CAAC5G,KAAK,CAAC;YAEpC,IAAKuG,YAAY,CAACP,EAAE,CAAChG,KAAK,CAAC6G,EAAE,CAAC,EAAG;cAC/BJ,KAAK,GAAG,IAAI;cACZvH,KAAK,GAAG0H,IAAI,CAACxG,OAAO;YACtB;UACF;QAAC,SAAA2G,GAAA;UAAAL,SAAA,CAAAxD,CAAA,CAAA6D,GAAA;QAAA;UAAAL,SAAA,CAAAvD,CAAA;QAAA;QAED,IAAK,CAACsD,KAAK,EAAG;UACZvH,KAAK,GAAGA,KAAK,CAACkH,UAAU,CAAClH,KAAK;QAChC;MACF;MAEA,IAAK,OAAOA,KAAK,KAAK,QAAQ,EAAG;QAC/B,OAAO,IAAI;MACb;MAEA,IAAMiH,GAAG,GAAGN,aAAa,CAAC3G,KAAK,EAAEsE,KAAK,CAACU,aAAa,EAAE,IAAI,EAAEV,KAAK,CAACmB,KAAK,CAACE,UAAU,EAAE,UAAC3F,KAAK,EAAK;QAC7F,IAAMc,KAAK,GAAGd,KAAK,CAACc,KAAK,CAAC,iBAAiB,CAAC;QAE5C,IAAKA,KAAK,EAAG;UACX,OAAOA,KAAK,CAAC,CAAC,CAAC,CAACgH,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAC,UAACC,CAAC;YAAA,OAAKhN,OAAO,CAACgN,CAAC,CAAC;UAAA,EAAC,CAACC,IAAI,CAAC,GAAG,CAAC;QAC9D;QAEA,OAAOjI,KAAK;MACd,CAAC,CAAC;MAEF,OAAOiH,GAAG;IACZ,CAAC;EACH,CAAC;EAEDiB,iBAAiB,WAAAA,kBAAC5D,KAAK,EAAE;IACvB,OAAO,UAAC/F,OAAO,EAAE4J,QAAQ,EAAK;MAAA,IAAAC,iBAAA;MAC5B,QAAAA,iBAAA,GAAO9D,KAAK,CAACI,UAAU,cAAA0D,iBAAA,gBAAAA,iBAAA,GAAhBA,iBAAA,CAAmB7J,OAAO,CAAC,cAAA6J,iBAAA,uBAA3BA,iBAAA,CAA8BD,QAAQ,CAAC;IAChD,CAAC;EACH,CAAC;EAEDE,UAAU,WAAAA,WAAC/D,KAAK,EAAE;IAChB,IAAMgE,GAAG,GAAG;MACVC,WAAW,EAAW,IAAI;MAC1BC,UAAU,EAAY,IAAI;MAC1BC,WAAW,EAAW,IAAI;MAC1BC,SAAS,EAAa,IAAI;MAC1BC,OAAO,EAAe,IAAI;MAC1BC,OAAO,EAAe,IAAI;MAC1BC,UAAU,EAAY,IAAI;MAC1BC,UAAU,EAAY,EAAE;MACxBC,UAAU,EAAY,KAAK;MAC3BC,WAAW,EAAWrK,SAAS;MAC/BsK,oBAAoB,EAAE;IACxB,CAAC;IAED,OAAO,UAACC,YAAY,EAAK;MACvB,IAAI,CAACA,YAAY,EAAE;QACjB,OAAO,CAAC,CAAC;MACX;MAEA,IAAM9I,IAAI,GAAIkH,OAAA,CAAO4B,YAAY,MAAK,QAAQ,GAAGA,YAAY,CAACpC,EAAE,GAAGoC,YAAa;MAChF,IAAMC,KAAK,GAAG7E,KAAK,CAACiB,WAAW,CAAC6D,IAAI,CAAC,UAACC,KAAK,EAAK;QAC9C,IAAM1B,EAAE,GAAGC,aAAa,CAACyB,KAAK,CAACvI,KAAK,CAAC;QAErC,OAAO6G,EAAE,CAAC2B,IAAI,CAAClJ,IAAI,CAAC;MACtB,CAAC,CAAC;MAEF,IAAMmJ,IAAI,GAAGtJ,MAAM,CAACuJ,MAAM,CAAC,CAAC,CAAC,EAAElB,GAAG,EAAEa,KAAK,IAAI,CAAC,CAAC,CAAC;MAEhD,OAAOI,IAAI;IACb,CAAC;EACH,CAAC;EAEDE,UAAU,WAAAA,WAACnF,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACjD,OAAO,UAAC4B,QAAQ,EAAK;MACnB,OAAO5B,WAAW,CAAC,WAAW,CAAC,CAACnM,cAAc,CAAC,CAACsP,QAAQ,CAACvB,QAAQ,CAAC,IAAI,KAAK;IAC7E,CAAC;EACH,CAAC;EAEDwB,aAAa,WAAAA,cAACrF,KAAK,EAAE;IACnB,OAAO,UAAClE,IAAI,EAAEqB,QAAQ,EAAK;MAAA,IAAAmI,KAAA;MACzBxJ,IAAI,IAAAwJ,KAAA,GAAGxJ,IAAI,cAAAwJ,KAAA,uBAAJA,KAAA,CAAM7C,WAAW,CAAC,CAAC;MAE1B,IAAKtF,QAAQ,EAAG;QACd,OAAO6C,KAAK,CAACY,gBAAgB,CAAC9E,IAAI,CAAC,IAAI,CAAC;MAC1C,CAAC,MAAM;QACL,OAAOkE,KAAK,CAACa,WAAW,CAAC/E,IAAI,CAAC,IAAI,CAAC;MACrC;IACF,CAAC;EACH,CAAC;EAEDyJ,cAAc,WAAAA,eAACvF,KAAK,EAAE;IACpB,OAAO,UAACtE,KAAK,EAAEyB,QAAQ,EAAK;MAC1BzB,KAAK,GAAGA,KAAK,CAAC+G,WAAW,CAAC,CAAC;MAE3B,IAAKtF,QAAQ,EAAG;QACd,OAAO6C,KAAK,CAACQ,iBAAiB,CAAC9E,KAAK,CAAC,IAAI,CAAC;MAC5C,CAAC,MAAM;QACL,OAAOsE,KAAK,CAACM,YAAY,CAAC5E,KAAK,CAAC,IAAI,CAAC;MACvC;IACF,CAAC;EACH,CAAC;EAED8J,mBAAmB,WAAAA,oBAACxF,KAAK,EAAE;IACzB,OAAO,UAACtE,KAAK,EAAK;MAChBA,KAAK,GAAGA,KAAK,CAAC+G,WAAW,CAAC,CAAC;MAE3B,OAAOzC,KAAK,CAACO,iBAAiB,CAAC7E,KAAK,CAAC;IACvC,CAAC;EACH,CAAC;EAED+J,OAAO,WAAAA,QAACzF,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAC9C;IACA,OAAO,SAASwD,OAAOA,CAACC,SAAS,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,aAAa,EAAEC,WAAW,EAAEC,MAAM,EAAE;MAChG;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAMC,OAAO,GAAGN,IAAI,KAAKlN,UAAU,CAACE,KAAK;MAEzC,IAAIuN,WAAW;MAEf,IAAKF,MAAM,EAAG;QACZE,WAAW,GAAG,IAAIC,MAAM,UAAA5K,MAAA,CAAW9E,WAAW,CAACuP,MAAM,CAAC,aAAW,GAAG,CAAC;MACvE;MAEA,IAAMI,IAAI,GAAG;QAAEC,QAAQ,EAAE;MAAG,CAAC;;MAE7B;MACA;MACA,IAAMC,IAAI,GAAG3K,MAAM,CAAC2K,IAAI,CAACV,QAAQ,CAAC,CAACW,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;QAAA,OAAKD,CAAC,CAACpM,MAAM,GAAGqM,CAAC,CAACrM,MAAM;MAAA,EAAC;;MAEtE;MACA,IAAMsM,YAAY,GAAGzE,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;MAClD,IAAM0E,YAAY,GAAG1E,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC;MAAC,IAAA2E,UAAA,GAAAzH,0BAAA,CAE/BmH,IAAI;QAAAO,MAAA;MAAA;QAAxB,KAAAD,UAAA,CAAAxH,CAAA,MAAAyH,MAAA,GAAAD,UAAA,CAAAvH,CAAA,IAAAC,IAAA,GAA2B;UAAA,IAAAwH,eAAA;UAAA,IAAfhL,IAAI,GAAA+K,MAAA,CAAAxK,KAAA;UACd,IAAM0K,OAAO,GAAGnB,QAAQ,CAAC9J,IAAI,CAAC;UAE9B,IAAKiL,OAAO,CAAC7E,MAAM,IAAIJ,OAAO,CAACkF,SAAS,CAACD,OAAO,CAAC7E,MAAM,CAAC,EAAG;YACzD;YACA;UACF;UAEA,IAAMqC,UAAU,GAAGwC,OAAO,CAACxC,UAAU;UAErC,IAAMuB,aAAa,KAAKxN,UAAU,IAAI,CAACiM,UAAU,IAAOuB,aAAa,KAAKvN,aAAa,IAAIgM,UAAW,EAAG;YACvG;YACA;UACF;UAEA,IAAM5J,OAAO,GAAGsH,WAAW,CAACgF,YAAY,CAACF,OAAO,CAACtM,IAAI,CAAC;UACtD,IAAM0H,KAAK,GAAGF,WAAW,IAAA1G,MAAA,CAAKZ,OAAO,YAAU,CAACoM,OAAO,CAAC;UACxD,IAAMnD,iBAAiB,GAAG9B,OAAO,CAAC8B,iBAAiB,CAAC8B,SAAS,EAAEqB,OAAO,CAACtM,IAAI,CAAC;UAE5E,IAAKsM,OAAO,CAACvE,EAAE,KAAKuD,WAAW,EAAG;YAChC;UAAA,CACD,MAAM,IAAKE,OAAO,IAAI,CAACrC,iBAAiB,EAAG;YAC1C;YACA;UACF,CAAC,MAAM,IAAK+B,IAAI,KAAKlN,UAAU,CAACI,IAAI,IAAIsJ,KAAK,IAAI,CAAC,EAAG;YACnD;YACA;YACA;UACF;UAEA,IAAM+E,KAAK,GAAGH,OAAO,CAACI,QAAQ,GAAGlF,WAAW,CAAC,QAAQ,CAAC,CAAC8E,OAAO,CAACI,QAAQ,CAAC,IAAIJ,OAAO,CAACG,KAAK,GAAGH,OAAO,CAACG,KAAK;UAEzG,IAAME,YAAY,GAAGC,cAAc,CAACH,KAAK,EAAE/E,KAAK,EAAE4E,OAAO,CAAC7E,MAAM,CAAC;UAEjE,IAAK,CAACkF,YAAY,EAAG;YACnB;YACA;UACF;UAEA,IAAI1L,KAAK;UAET,IAAKuK,OAAO,EAAG;YACbvK,KAAK,GAAG4L,YAAY,CAAClB,IAAI,EAAExC,iBAAiB,EAAE,IAAI,CAAC;UACrD,CAAC,MAAM,IAAK+B,IAAI,KAAKlN,UAAU,CAACG,QAAQ,EAAG;YACzC8C,KAAK,GAAG4L,YAAY,CAAClB,IAAI,EAAE,SAAS,CAAC;YACrC1K,KAAK,CAAChB,MAAM,GAAG,IAAI;UACrB,CAAC,MAAM,IAAKiL,IAAI,KAAKlN,UAAU,CAACI,IAAI,EAAG;YACrC6C,KAAK,GAAG4L,YAAY,CAAClB,IAAI,YAAA7K,MAAA,CAAauG,OAAO,CAACgB,aAAa,CAACiE,OAAO,CAAC7E,MAAM,CAAC,CAAG,CAAC;UACjF,CAAC,MAAM;YACLxG,KAAK,GAAG4L,YAAY,CAAClB,IAAI,EAAEW,OAAO,CAAC7E,MAAM,IAAI6E,OAAO,CAACrL,KAAK,IAAI5C,IAAI,CAAC;UACrE;UAEA,IAAIyO,KAAK,GAAGR,OAAO,CAACQ,KAAK;;UAEzB;UACA,IAAI,CAACA,KAAK,EAAG;YACXA,KAAK,GAAG;cACN9M,IAAI,EAAI,4BAA4B;cACpC+M,MAAM,EAAE;gBACNvN,OAAO,EAAGyL,SAAS;gBACnB+B,OAAO,EAAG5B,SAAS;gBACnB6B,QAAQ,EAAEX,OAAO,CAACtM;cACpB;YACF,CAAC;YAEDsM,OAAO,CAACQ,KAAK,GAAGA,KAAK;UACvB;;UAEA;UACA,IAAKA,KAAK,IAAIvE,OAAA,CAAOuE,KAAK,MAAK,QAAQ,EAAG;YACxCA,KAAK,CAACC,MAAM,GAAGD,KAAK,CAACC,MAAM,IAAI,CAAC,CAAC;YACjCD,KAAK,CAACC,MAAM,CAACC,OAAO,GAAG5B,SAAS;YAChC0B,KAAK,CAACC,MAAM,CAACvN,OAAO,GAAGyL,SAAS;UAClC;UAEAhK,KAAK,CAAC2K,QAAQ,CAACsB,IAAI,CAAC;YAClBT,KAAK,EAALA,KAAK;YACLE,YAAY,EAAZA,YAAY;YACZzB,IAAI,EAAMoB,OAAO,CAACpB,IAAI;YACtBiC,KAAK,EAAKb,OAAO,CAACa,KAAK,IAAI,KAAK;YAChCrD,UAAU,EAAVA,UAAU;YACVgD,KAAK,EAALA,KAAK;YACL9M,IAAI,EAAMsM,OAAO,CAACtM,IAAI;YACtBC,MAAM,EAAIqM,OAAO,CAACrM,MAAM,IAAIoH,OAAO,CAACuD,aAAa,CAAC,EAAAyB,eAAA,GAAAC,OAAO,CAAC7E,MAAM,cAAA4E,eAAA,uBAAdA,eAAA,CAAgBtE,EAAE,KAAI0E,KAAK,EAAEjB,OAAO,CAAC;YACvF4B,QAAQ,EAAE,CAAC,CAACd,OAAO,CAACc;UACtB,CAAC,CAAC;QACJ;;QAEA;MAAA,SAAAtE,GAAA;QAAAqD,UAAA,CAAAlH,CAAA,CAAA6D,GAAA;MAAA;QAAAqD,UAAA,CAAAjH,CAAA;MAAA;MACAmI,UAAU,CAAC1B,IAAI,EAAET,IAAI,CAAC;MAEtB,OAAOS,IAAI,CAACC,QAAQ;;MAEpB;;MAEA,SAASiB,YAAYA,CAACS,IAAI,EAAEhF,YAAY,EAAoB;QAAA,IAAlB5F,QAAQ,GAAAhD,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;QACxD,IAAIM,IAAI,GAAGqH,OAAO,CAACgB,aAAa,CAACC,YAAY,CAAC;QAC9C,IAAMiF,MAAM,GAAKvN,IAAI,KAAK3B,IAAI,IAAI2B,IAAI,CAACwN,UAAU,IAAA1M,MAAA,CAAKzC,IAAI,OAAK,CAAG;QAElE,IAAK2B,IAAI,IAAIA,IAAI,CAAC2K,QAAQ,CAAC,IAAI,CAAC,EAAG;UACjC,IAAI8C,MAAM;UAAC,IAAAC,WAAA,GAEM1N,IAAI,CAAC+I,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;UAAA,IAAA4E,YAAA,GAAAC,cAAA,CAAAF,WAAA;UAAnCD,MAAM,GAAAE,YAAA;UAAE3N,IAAI,GAAA2N,YAAA;UACbL,IAAI,GAAGT,YAAY,CAACS,IAAI,EAAEG,MAAM,CAAC;QACnC;;QAEA;QACA,IAAIhB,KAAK,GAAGzM,IAAI;QAChB,IAAM8H,GAAG,kBAAAhH,MAAA,CAAkBd,IAAI,OAAI;QAEnC,IAAKwH,WAAW,CAAC,aAAa,CAAC,CAACM,GAAG,CAAC,EAAG;UACrC2E,KAAK,GAAGjF,WAAW,CAAC,QAAQ,CAAC,CAACM,GAAG,CAAC;QACpC;QAEA,IAAI7G,KAAK,GAAG1F,MAAM,CAAC+R,IAAI,CAAC1B,QAAQ,EAAE,MAAM,EAAE5L,IAAI,CAAC;QAE/C,IAAK,CAACiB,KAAK,EAAG;UACZA,KAAK,GAAG;YACNjB,IAAI,EAAJA,IAAI;YACJyM,KAAK,EAALA,KAAK;YACLxM,MAAM,EAAOoH,OAAO,CAACyD,cAAc,CAAC9K,IAAI,EAAE0C,QAAQ,CAAC;YACnDG,WAAW,EAAEwE,OAAO,CAAC0D,mBAAmB,CAAC/K,IAAI;UAC/C,CAAC;UAEDsN,IAAI,CAAC1B,QAAQ,CAACsB,IAAI,CAACjM,KAAK,CAAC;QAC3B;QAEA,IAAKsM,MAAM,EAAG;UACZtM,KAAK,CAACsM,MAAM,GAAG,IAAI;QACrB;QAEA,IAAK,CAACtM,KAAK,CAAC2K,QAAQ,EAAG;UACrB3K,KAAK,CAAC2K,QAAQ,GAAG,EAAE;QACrB;QAEA,OAAO3K,KAAK;MACd;MAEA,SAAS2L,cAAcA,CAACiB,QAAQ,EAAEnG,KAAK,EAAED,MAAM,EAAE;QAC/C,IAAIgF,KAAK,GAAG1Q,UAAU,CAAC8R,QAAQ,CAAC;QAEhC,IAAKpC,WAAW,EAAG;UACjB,IAAI1J,KAAK,GAAG0K,KAAK,CAAC1K,KAAK,CAAC0J,WAAW,CAAC;UAEpC,IAAI,CAAC1J,KAAK,EAAE;YACV,IAAKkK,YAAY,KAAKC,YAAY,IAAIzE,MAAM,EAAG;cAC7C,IAAMqG,YAAY,GAAGzG,OAAO,CAACC,QAAQ,CAACG,MAAM,EAAEC,KAAK,EAAEwE,YAAY,CAAC;cAElE,IAAI4B,YAAY,IAAIA,YAAY,KAAKrB,KAAK,EAAG;gBAC3CA,KAAK,SAAA3L,MAAA,CAAUgN,YAAY,MAAI;gBAC/B/L,KAAK,GAAG0K,KAAK,CAAC1K,KAAK,CAAC0J,WAAW,CAAC;cAClC;YACF;UACF;UAEA,IAAK1J,KAAK,EAAG;YACX0K,KAAK,MAAA3L,MAAA,CAAO/E,UAAU,CAACgG,KAAK,CAAC,CAAC,CAAC,CAAC,gCAAAjB,MAAA,CAA6B/E,UAAU,CAACgG,KAAK,CAAC,CAAC,CAAC,CAAC,aAAAjB,MAAA,CAAY/E,UAAU,CAACgG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAG;UACtH,CAAC,MAAM;YACL,OAAO,IAAI;UACb;QACF;QAEA,OAAO0K,KAAK;MACd;IACF,CAAC;EACH,CAAC;EAEDsB,SAAS,WAAAA,UAACxI,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAChD,OAAO,UAACnG,IAAI,EAAE7B,OAAO,EAAK;MACxBA,OAAO,GAAGA,OAAO,IAAIgI,WAAW,CAAC,WAAW,CAAC;MAC7C,IAAMwG,mBAAmB,GAAGzI,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,IAAI,EAAE;MAE7D,OAAOwO,mBAAmB,CAACC,IAAI,CAAC,UAACC,EAAE;QAAA,OAAKA,EAAE,CAAC7M,IAAI,KAAKA,IAAI;MAAA,EAAC;IAC3D,CAAC;EACH,CAAC;EAED8M,SAAS,WAAAA,UAAC5I,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAChD,OAAO,UAACxH,IAAI,EAAER,OAAO,EAAK;MACxBA,OAAO,GAAGA,OAAO,IAAIgI,WAAW,CAAC,WAAW,CAAC;MAC7C,IAAM4G,mBAAmB,GAAG7I,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,IAAI,EAAE;MAE7D,OAAO4O,mBAAmB,CAACH,IAAI,CAAC,UAACC,EAAE;QAAA,OAAKA,EAAE,CAAClO,IAAI,KAAKA,IAAI;MAAA,EAAC;IAC3D,CAAC;EACH,CAAC;EAEDqO,mBAAmB,WAAAA,oBAAC9I,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAC1D;MAAA,IAAA8G,IAAA,GAAA1K,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAAO,SAAAyK,QAAMlN,IAAI,EAAE7B,OAAO;QAAA,IAAAgP,qBAAA;QAAA,IAAAC,YAAA,EAAAC,SAAA;QAAA,OAAA7K,mBAAA,CAAAO,IAAA,UAAAuK,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAArK,IAAA,GAAAqK,QAAA,CAAApK,IAAA;YAAA;cACxBhF,OAAO,GAAGA,OAAO,IAAIgI,WAAW,CAAC,WAAW,CAAC;cACvCiH,YAAY,GAAG,EAAAD,qBAAA,GAAAhQ,eAAe,CAACgB,OAAO,CAAC,cAAAgP,qBAAA,uBAAxBA,qBAAA,CAA2BnN,IAAI,CAAC,KAAK;gBAAA,OAAM,EAAE;cAAA,CAAC;cAAAuN,QAAA,CAAApK,IAAA;cAAA,OAC3CiK,YAAY,CAAC,CAAC;YAAA;cAAhCC,SAAS,GAAAE,QAAA,CAAA9J,IAAA;cAEf4J,SAAS,CAAClN,OAAO,CAAC,UAACqN,QAAQ,EAAK;gBAAA,IAAAC,eAAA,EAAAC,gBAAA,EAAAC,gBAAA,EAAAC,gBAAA;gBAC9B,IAAM5N,IAAI,GAAGwN,QAAQ,CAACxN,IAAI;gBAC1B,IAAM0G,EAAE,GAAG8G,QAAQ,CAAC9G,EAAE;gBACtB,IAAMmH,IAAI,OAAApO,MAAA,CAAQxC,cAAc,OAAAwC,MAAA,CAAMO,IAAI,OAAAP,MAAA,CAAMiH,EAAE,CAAG;gBACrD,IAAMoH,OAAO,OAAArO,MAAA,CAAQvC,kBAAkB,OAAAuC,MAAA,CAAMO,IAAI,OAAAP,MAAA,CAAMiH,EAAE,CAAG;gBAE5D8G,QAAQ,CAACO,KAAK,GAAG;kBACfC,MAAM,EAAE,EAAAP,eAAA,GAAAD,QAAQ,CAACO,KAAK,cAAAN,eAAA,uBAAdA,eAAA,CAAgBO,MAAM,KAAIH,IAAI;kBACtCI,IAAI,EAAI,EAAAP,gBAAA,GAAAF,QAAQ,CAACO,KAAK,cAAAL,gBAAA,uBAAdA,gBAAA,CAAgBO,IAAI,KAAIJ,IAAI;kBACpCK,MAAM,EAAE,EAAAP,gBAAA,GAAAH,QAAQ,CAACO,KAAK,cAAAJ,gBAAA,uBAAdA,gBAAA,CAAgBO,MAAM,KAAIL,IAAI;kBACtCM,IAAI,EAAI,EAAAP,gBAAA,GAAAJ,QAAQ,CAACO,KAAK,cAAAH,gBAAA,uBAAdA,gBAAA,CAAgBO,IAAI,KAAIL;gBAClC,CAAC;gBACDN,QAAQ,CAACd,SAAS,GAAG,IAAI;cAC3B,CAAC,CAAC;cAAC,OAAAa,QAAA,CAAAnK,MAAA,WAEIiK,SAAS;YAAA;YAAA;cAAA,OAAAE,QAAA,CAAAvJ,IAAA;UAAA;QAAA,GAAAkJ,OAAA;MAAA,CACjB;MAAA,iBAAAkB,GAAA,EAAAC,GAAA;QAAA,OAAApB,IAAA,CAAA3K,KAAA,OAAAjE,SAAA;MAAA;IAAA;EACH,CAAC;EAEDiQ,kBAAkB,WAAAA,mBAACpK,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACzD;MAAA,IAAAoI,KAAA,GAAAhM,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAAO,SAAA+L,SAAMxO,IAAI,EAAE7B,OAAO,EAAEuI,EAAE;QAAA,IAAA+H,gBAAA;QAAA,OAAAjM,mBAAA,CAAAO,IAAA,UAAA2L,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAzL,IAAA,GAAAyL,SAAA,CAAAxL,IAAA;YAAA;cAAAwL,SAAA,CAAAxL,IAAA;cAAA,OACG6C,OAAO,CAACgH,mBAAmB,CAAChN,IAAI,EAAE7B,OAAO,CAAC;YAAA;cAAnEsQ,gBAAgB,GAAAE,SAAA,CAAAlL,IAAA;cAAA,OAAAkL,SAAA,CAAAvL,MAAA,WAEfqL,gBAAgB,CAACzF,IAAI,CAAE,UAACwE,QAAQ;gBAAA,OAAKA,QAAQ,CAAC9G,EAAE,KAAKA,EAAE;cAAA,EAAC;YAAA;YAAA;cAAA,OAAAiI,SAAA,CAAA3K,IAAA;UAAA;QAAA,GAAAwK,QAAA;MAAA,CAChE;MAAA,iBAAAI,GAAA,EAAAC,GAAA,EAAAC,GAAA;QAAA,OAAAP,KAAA,CAAAjM,KAAA,OAAAjE,SAAA;MAAA;IAAA;EACH,CAAC;EAED0Q,eAAe,WAAAA,gBAAC7K,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACtD,OAAOtG,MAAM,CAACC,MAAM,CAACoE,KAAK,CAACG,YAAY,CAAC,CAAC2K,IAAI,CAAC,CAAC;EACjD,CAAC;EAEDC,cAAc,WAAAA,eAAC/K,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACrD,OAAO,UAAChI,OAAO,EAAK;MAClB,IAAMwB,KAAK,GAAGuE,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,IAAI,EAAE;MAE/C,OAAOwB,KAAK,CAACuP,OAAO,CAAC,UAAClP,IAAI,EAAK;QAC7B,IAAMmP,OAAO,GAAGnP,IAAI,CAACmP,OAAO,IAAI,EAAE;QAElC,OAAOA,OAAO,CAACxH,GAAG,CAAC,UAACvB,MAAM;UAAA,OAAA1H,aAAA,CAAAA,aAAA,KACrB0H,MAAM;YACTsG,SAAS,EAAE;UAAI;QAAA,CACf,CAAC;MACL,CAAC,CAAC;IACJ,CAAC;EACH,CAAC;EAED0C,iBAAiB,WAAAA,kBAAClL,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACxD,OAAOH,OAAO,CAAC+I,eAAe,CAACG,OAAO,CAAC,UAAClP,IAAI,EAAK;MAC/C,IAAMmP,OAAO,GAAGnP,IAAI,CAACmP,OAAO,IAAI,EAAE;MAElC,OAAOA,OAAO,CAACxH,GAAG,CAAC,UAACvB,MAAM;QAAA,OAAA1H,aAAA,CAAAA,aAAA,KACrB0H,MAAM;UACTsG,SAAS,EAAE;QAAI;MAAA,CACf,CAAC;IACL,CAAC,CAAC;EACJ,CAAC;EAED;AACF;AACA;EACE5C,QAAQ,WAAAA,SAAC5F,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAC/C;IACA,OAAO,SAAS2D,QAAQA,CAAC3L,OAAO,EAA4B;MAAA,IAAAkR,oBAAA,EAAAC,qBAAA,EAAAC,YAAA;MAAA,IAA1BC,KAAK,GAAAnR,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC1B,UAAU,CAACC,GAAG,CAAC;MACxD,IAAMwB,MAAM,IAAAiR,oBAAA,GAAGnL,KAAK,CAACC,QAAQ,CAAC6E,IAAI,CAAC,UAACyG,CAAC;QAAA,OAAKA,CAAC,CAAC9Q,IAAI,KAAKR,OAAO;MAAA,EAAC,cAAAkR,oBAAA,uBAA9CA,oBAAA,CAAgDxQ,OAAO;MACtE,IAAMsQ,OAAO,GAAGhJ,WAAW,IAAA1G,MAAA,CAAKrB,MAAM,UAAQ,CAACxE,MAAM,CAAC;MACtD,IAAM8V,OAAO,GAAG,GAAAJ,qBAAA,GAACnJ,WAAW,CAACwJ,cAAc,cAAAL,qBAAA,eAA1BA,qBAAA,CAA4BI,OAAO;MACpD,IAAME,SAAS,GAAGzJ,WAAW,CAACyJ,SAAS;MACvC,IAAMC,MAAM,GAAG,EAAAN,YAAA,GAAApJ,WAAW,IAAA1G,MAAA,CAAKrB,MAAM,UAAQ,CAACzE,KAAK,CAAC,cAAA4V,YAAA,gBAAAA,YAAA,GAArCA,YAAA,CAAwC,CAAC,CAAC,cAAAA,YAAA,uBAA1CA,YAAA,CAA4CM,MAAM,KAAI,CAAC,CAAC;MAEvE,IAAMhJ,GAAG,GAAG,CAAC,CAAC;;MAEd;MACA;MACA;MACA;MAAA,IAAAiJ,UAAA,GAAAzM,0BAAA,CACsB8L,OAAO;QAAAY,MAAA;MAAA;QAAA,IAAAC,MAAA,YAAAA,OAAA,EAAG;YAAA,IAApB5J,MAAM,GAAA2J,MAAA,CAAAxP,KAAA;YAChB,IAAI0P,WAAW,GAAG,CAAE,CAAC;YAErBT,KAAK,CAACrP,OAAO,CAAC,UAAC+P,CAAC,EAAK;cACnBD,WAAW,CAACC,CAAC,CAAC,GAAG,IAAI;YACvB,CAAC,CAAC;YAEF,IAAMC,KAAK,GAAG/J,MAAM,CAACU,UAAU,IAAI,CAAC,CAAC;YACrC,IAAM3B,WAAW,GAAGa,OAAO,CAAC,YAAY,CAAC,CAACI,MAAM,CAAC;YAEjD6J,WAAW,CAACtT,UAAU,CAACE,KAAK,CAAC,GAAGoT,WAAW,CAACtT,UAAU,CAACE,KAAK,CAAC,IAAImJ,OAAO,CAAC8B,iBAAiB,CAAC3J,OAAO,EAAEiI,MAAM,CAACM,EAAE,CAAC;YAE9G,IAAI7G,MAAM,CAACC,MAAM,CAACmQ,WAAW,CAAC,CAACG,KAAK,CAAC,UAAC9M,CAAC;cAAA,OAAK,CAACA,CAAC;YAAA,EAAC,EAAE;cAAA;YAEjD;YAEA2M,WAAW,CAACtT,UAAU,CAACG,QAAQ,CAAC,GAAGmT,WAAW,CAACtT,UAAU,CAACG,QAAQ,CAAC,IAAIkJ,OAAO,CAACqD,UAAU,CAACjD,MAAM,CAACM,EAAE,CAAC;YAEpG,IAAI7G,MAAM,CAACC,MAAM,CAACmQ,WAAW,CAAC,CAACG,KAAK,CAAC,UAAC9M,CAAC;cAAA,OAAK,CAACA,CAAC;YAAA,EAAC,EAAE;cAAA;YAEjD;YAEA,IAAM+M,SAAS,GAAGJ,WAAW,CAACtT,UAAU,CAACE,KAAK,CAAC,IAAI2S,KAAK,CAAClR,MAAM,KAAK,CAAC;;YAErE;YACA,IAAI,CAAC+R,SAAS,EAAE;cACd,IAAMC,WAAW,GAAG,CAACH,KAAK,CAACpJ,IAAI,IAC9B,OAAO5B,WAAW,CAACoL,gBAAgB,KAAK,WAAW,IAAIpL,WAAW,CAACoL,gBAAgB,KAAKX,SAAU,IAClGzK,WAAW,CAACqL,SAAS,IAAId,OAAQ;cAElC,IAAIY,WAAW,EAAE;gBACf;gBACAL,WAAW,GAAAtL,eAAA,KAAMhI,UAAU,CAACE,KAAK,EAAGoT,WAAW,CAACtT,UAAU,CAACE,KAAK,CAAC,CAAE;cACrE;YACF;;YAEA;YACA,IAAIuO,KAAK;YAETvL,MAAM,CAAC4Q,OAAO,CAACR,WAAW,CAAC,CAAC9P,OAAO,CAAC,UAAAuQ,KAAA,EAAqB;cAAA,IAAAC,KAAA,GAAApE,cAAA,CAAAmE,KAAA;gBAAnB7G,IAAI,GAAA8G,KAAA;gBAAEC,OAAO,GAAAD,KAAA;cACjD,IAAI,CAACC,OAAO,EAAE;gBACZ;cACF;cAEA,IAAI,CAAC/J,GAAG,CAACgD,IAAI,CAAC,EAAE;gBACdhD,GAAG,CAACgD,IAAI,CAAC,GAAG,CAAC,CAAC;cAChB;cAEA,IAAI,CAACuB,KAAK,EAAE;gBACVA,KAAK,GAAGpF,OAAO,CAACC,QAAQ,CAACG,MAAM,EAAEyJ,MAAM,CAACzJ,MAAM,CAACM,EAAE,CAAC,CAAC;cACrD;cAEAG,GAAG,CAACgD,IAAI,CAAC,CAACzD,MAAM,CAACM,EAAE,CAAC,GAAG;gBACrB0E,KAAK,EAALA,KAAK;gBACLvB,IAAI,EAAJA,IAAI;gBACJjL,MAAM,EAAMoH,OAAO,CAACuD,aAAa,CAAC,CAAAnD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,EAAE,KAAI0E,KAAK,EAAEvB,IAAI,KAAKlN,UAAU,CAACE,KAAK,CAAC;gBACjFuJ,MAAM,EAANA,MAAM;gBACNzH,IAAI,EAAQyH,MAAM,CAACM,EAAE;gBACrB+B,UAAU,EAAEtD,WAAW,CAACsD,UAAU,KAAK,IAAI,GAAG0H,KAAK,CAAC1H,UAAU,GAAGtD,WAAW,CAACsD,UAAU;gBACvFgD,KAAK,EAAOtG,WAAW,CAACyD;cAC1B,CAAC;YACH,CAAC,CAAC;UACJ,CAAC;UAAAiI,KAAA;QA9DD,KAAAf,UAAA,CAAAxM,CAAA,MAAAyM,MAAA,GAAAD,UAAA,CAAAvM,CAAA,IAAAC,IAAA;UAAAqN,KAAA,GAAAb,MAAA;UAAA,IAAAa,KAAA,QAaI;QAAS;MAiDZ,SAAApJ,GAAA;QAAAqI,UAAA,CAAAlM,CAAA,CAAA6D,GAAA;MAAA;QAAAqI,UAAA,CAAAjM,CAAA;MAAA;MAED,IAAMiN,YAAY,GAAGtB,KAAK,CAACuB,MAAM,CAAC,UAACb,CAAC;QAAA,OAAKA,CAAC,KAAKvT,UAAU,CAACI,IAAI;MAAA,EAAC;MAC/D,IAAMiU,KAAK,GAAG7K,WAAW,CAAC,WAAW,CAAC,CAACrM,WAAW,CAAC;;MAEnD;MACA,IAAKgX,YAAY,CAACxS,MAAM,EAAG;QACzB,IAAM8F,YAAY,GAAGF,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,IAAI,EAAE;QACtD,IAAMkG,YAAY,GAAGH,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,IAAI,EAAE;QACtD,IAAM2L,SAAQ,MAAArK,MAAA,CAAAwR,kBAAA,CAAO7M,YAAY,GAAA6M,kBAAA,CAAK5M,YAAY,EAAC;QACnD,IAAM6M,gBAAgB,GAAAD,kBAAA,CAAOH,YAAY,CAAC;QAAC,IAAAK,UAAA,GAAA9N,0BAAA,CAEvByG,SAAQ;UAAAsH,MAAA;QAAA;UAAA,IAAAC,KAAA,YAAAA,MAAA,EAAG;cAAA,IAAnBrR,IAAI,GAAAoR,MAAA,CAAA7Q,KAAA;cACd,IAAM+Q,IAAI,GAAG/W,KAAK,CAACyF,IAAI,CAAC;cACxB,IAAM0G,EAAE,GAAG4K,IAAI,CAAC3S,IAAI;;cAEpB;cACA;cACAuS,gBAAgB,CAAC/Q,OAAO,CAAC,UAAC0J,IAAI,EAAK;gBAAA,IAAA0H,SAAA;gBACjC,KAAAA,SAAA,GAAI1K,GAAG,CAACgD,IAAI,CAAC,cAAA0H,SAAA,eAATA,SAAA,CAAY7K,EAAE,CAAC,EAAE;kBACnB,OAAOG,GAAG,CAACgD,IAAI,CAAC,CAACnD,EAAE,CAAC;gBACtB;cACF,CAAC,CAAC;cAEF,IAAK4K,IAAI,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAACN,KAAK,EAAG;gBAAA;cAE1C;cAEA,IAAIM,IAAI,CAACE,MAAM,IAAI,CAACA,MAAM,CAACrL,WAAW,EAAEmL,IAAI,CAACE,MAAM,CAAC,EAAE;gBAAA;cAEtD;cAEA,IAAKF,IAAI,CAACG,UAAU,EAAG;gBAAA,IAAAC,gBAAA;gBACrB,IAAMC,eAAe,GAAG,OAAOL,IAAI,CAACG,UAAU,KAAK,QAAQ,GAAGtC,OAAO,GAAGhJ,WAAW,IAAA1G,MAAA,CAAK6R,IAAI,CAACG,UAAU,CAACvT,KAAK,UAAQ,CAACtE,MAAM,CAAC;gBAC7H,IAAMoG,MAAI,GAAG,OAAOsR,IAAI,CAACG,UAAU,KAAK,QAAQ,GAAGH,IAAI,CAACG,UAAU,IAAAC,gBAAA,GAAGJ,IAAI,CAACG,UAAU,cAAAC,gBAAA,uBAAfA,gBAAA,CAAiB1R,IAAI;gBAE1F,IAAM4R,OAAO,GAAGtX,QAAQ,CAACqX,eAAe,EAAE,IAAI,EAAExV,aAAa,CAAC6D,MAAI,CAAC,CAAC,CAAC2H,GAAG,CAAC,UAACrE,CAAC;kBAAA,OAAKA,CAAC,CAACoD,EAAE;gBAAA,EAAC;gBAErF,IAAI,CAACkL,OAAO,CAACtT,MAAM,EAAE;kBAAA;gBAErB;gBAEA,IAAIgT,IAAI,CAACO,UAAU,IAAI,CAACA,UAAU,CAAC1L,WAAW,EAAE/H,MAAM,EAAEkT,IAAI,CAACO,UAAU,EAAED,OAAO,CAAC,EAAE;kBAAA;gBAEnF;cACF;cAEA,IAAKN,IAAI,CAACQ,cAAc,EAAG;gBACzB,IAAMC,OAAO,GAAG,CAACT,IAAI,CAACQ,cAAc,IAAI,EAAE,EAAElF,IAAI,CAAC,UAAC5M,IAAI,EAAK;kBACzD,OAAO,CAAC,CAAC9F,MAAM,CAACiV,OAAO,EAAE,IAAI,EAAEhT,aAAa,CAAC6D,IAAI,CAAC,CAAC;gBACrD,CAAC,CAAC;gBAEF,IAAI,CAAC+R,OAAO,EAAE;kBAAA;gBAEd;cACF;cAEA,IAAK,OAAOT,IAAI,CAACf,gBAAgB,KAAK,WAAW,IAAIe,IAAI,CAACf,gBAAgB,KAAKpK,WAAW,CAACyJ,SAAS,EAAG;gBAAA;cAEvG;cAEA,IAAI0B,IAAI,CAACU,SAAS,IAAI,CAAC7L,WAAW,CAAC,cAAc,CAAC,CAACmL,IAAI,CAACU,SAAS,CAAC,EAAE;gBAAA;cAEpE;cAEA,IAAId,gBAAgB,CAAC5H,QAAQ,CAAC3M,UAAU,CAACE,KAAK,CAAC,IAAI,CAACmJ,OAAO,CAAC8B,iBAAiB,CAAC3J,OAAO,EAAEuI,EAAE,CAAC,EAAG;gBAC3FwK,gBAAgB,CAACe,MAAM,CAACf,gBAAgB,CAACgB,OAAO,CAACvV,UAAU,CAACE,KAAK,CAAC,EAAE,CAAC,CAAC;cACxE;cAEA,IAAIqU,gBAAgB,CAAC5H,QAAQ,CAAC3M,UAAU,CAACG,QAAQ,CAAC,IAAI,CAACkJ,OAAO,CAACqD,UAAU,CAAC3C,EAAE,CAAC,EAAG;gBAAE;gBAChFwK,gBAAgB,CAACe,MAAM,CAACf,gBAAgB,CAACgB,OAAO,CAACvV,UAAU,CAACG,QAAQ,CAAC,EAAE,CAAC,CAAC;cAC3E;;cAEA;cACA;cACA,IAAIwU,IAAI,CAACjG,QAAQ,IAAIlF,WAAW,CAAC,aAAa,CAAC,CAACmL,IAAI,CAACjG,QAAQ,CAAC,EAAE;gBAC9DiG,IAAI,CAAClG,KAAK,GAAGjF,WAAW,CAAC,QAAQ,CAAC,CAACmL,IAAI,CAACjG,QAAQ,EAAE;kBAAEhF,KAAK,EAAE;gBAAE,CAAC,CAAC,CAACO,IAAI,CAAC,CAAC;gBACtE,OAAO0K,IAAI,CAACjG,QAAQ,CAAC,CAAC;cACxB,CAAC,MAAM;gBACLiG,IAAI,CAAClG,KAAK,GAAGkG,IAAI,CAAClG,KAAK,IAAIkG,IAAI,CAAC3S,IAAI;cACtC;cAEAuS,gBAAgB,CAAC/Q,OAAO,CAAC,UAAC0J,IAAI,EAAK;gBACjC,IAAMM,OAAO,GAAGN,IAAI,KAAKlN,UAAU,CAACE,KAAK;gBACzC,IAAM+B,MAAM,GAAGoB,IAAI,CAACpB,MAAM,IAAIoH,OAAO,CAACuD,aAAa,CAAC+H,IAAI,CAAClG,KAAK,EAAEjB,OAAO,CAAC;gBAExEmH,IAAI,CAACzH,IAAI,GAAGA,IAAI;gBAChByH,IAAI,CAAC1S,MAAM,GAAGA,MAAM;gBACpB,IAAI,CAACiI,GAAG,CAACgD,IAAI,CAAC,EAAE;kBACdhD,GAAG,CAACgD,IAAI,CAAC,GAAG,CAAC,CAAC;gBAChB;gBACAhD,GAAG,CAACgD,IAAI,CAAC,CAACnD,EAAE,CAAC,GAAG4K,IAAI;cACtB,CAAC,CAAC;YACJ,CAAC;YAAAa,IAAA;UAjFD,KAAAhB,UAAA,CAAA7N,CAAA,MAAA8N,MAAA,GAAAD,UAAA,CAAA5N,CAAA,IAAAC,IAAA;YAAA2O,IAAA,GAAAd,KAAA;YAAA,IAAAc,IAAA,QAaI;UAAS;QAoEZ,SAAA1K,GAAA;UAAA0J,UAAA,CAAAvN,CAAA,CAAA6D,GAAA;QAAA;UAAA0J,UAAA,CAAAtN,CAAA;QAAA;MACH;MAEA,OAAOgD,GAAG;IACZ,CAAC;EACH,CAAC;EAEDuL,UAAU,WAAAA,WAAClO,KAAK,EAAE;IAChB,OAAO,UAACkC,MAAM,EAAK;MACjB,OAAOlC,KAAK,CAACnE,OAAO,CAACqG,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEM,EAAE,CAAC;IAClC,CAAC;EACH,CAAC;EAED2L,kBAAkB,WAAAA,mBAACnO,KAAK,EAAE;IACxB,OAAO,UAACkC,MAAM,EAAK;MACjB,OAAOlC,KAAK,CAAC1D,eAAe,CAAC4F,MAAM,CAACM,EAAE,CAAC;IACzC,CAAC;EACH,CAAC;EAED4L,UAAU,WAAAA,WAACpO,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACjD,OAAO,UAACC,MAAM,EAAK;MACjB,IAAMU,UAAU,GAAGV,MAAM,CAACU,UAAU,IAAI,CAAC,CAAC;MAC1C,IAAMyL,OAAO,GAAGzL,UAAU,CAACyL,OAAO,IAAI,EAAE;MACxC,IAAMpN,WAAW,GAAGa,OAAO,CAAC,YAAY,CAAC,CAACI,MAAM,CAAC;;MAEjD;MACA,IAAKlC,KAAK,CAAChE,OAAO,CAACkG,MAAM,CAACM,EAAE,CAAC,EAAG;QAC9B,OAAOxC,KAAK,CAAChE,OAAO,CAACkG,MAAM,CAACM,EAAE,CAAC,CAACiB,GAAG,CAAC,UAACsB,KAAK,EAAK;UAC7C,IAAK,OAAOA,KAAK,KAAK,QAAQ,EAAG;YAC/B,IAAMuJ,GAAG,GAAGtY,MAAM,CAACqY,OAAO,EAAE,MAAM,EAAEtJ,KAAK,CAAC;YAE1C,IAAKuJ,GAAG,EAAG;cACT,OAAOC,UAAU,CAACD,GAAG,EAAErM,WAAW,CAAC;YACrC,CAAC,MAAM;cACL,OAAO,IAAI;YACb;UACF,CAAC,MAAM;YACL,OAAO8C,KAAK;UACd;QACF,CAAC,CAAC,CAAC8H,MAAM,CAAC,UAACyB,GAAG;UAAA,OAAK,CAAC,CAACA,GAAG;QAAA,EAAC;MAC3B;;MAEA;MACA,IAAM3L,GAAG,GAAG1B,WAAW,CAACmD,SAAS,GAAG,CAAC7O,KAAK,CAAC,GAAG,EAAE;MAChD,IAAMgP,UAAU,GAAG3B,UAAU,CAAC2B,UAAU,IAAI,KAAK;MACjD,IAAIiK,OAAO,GAAG,KAAK;MAAC,IAAAC,UAAA,GAAAtP,0BAAA,CAEDkP,OAAO;QAAAK,MAAA;MAAA;QAA1B,KAAAD,UAAA,CAAArP,CAAA,MAAAsP,MAAA,GAAAD,UAAA,CAAApP,CAAA,IAAAC,IAAA,GAA6B;UAAA,IAAjBgP,GAAG,GAAAI,MAAA,CAAArS,KAAA;UACb,IAAKiS,GAAG,CAACK,MAAM,KAAK,MAAM,EAAG;YAC3BH,OAAO,GAAG,IAAI;YACd7L,GAAG,CAACgF,IAAI,CAACvS,IAAI,CAAC;YACd,IAAKmP,UAAU,EAAG;cAChB5B,GAAG,CAACgF,IAAI,CAACrS,aAAa,CAAC;YACzB;UACF,CAAC,MAAM;YACLqN,GAAG,CAACgF,IAAI,CAAC4G,UAAU,CAACD,GAAG,EAAErM,WAAW,CAAC,CAAC;UACxC;QACF;MAAC,SAAAsB,GAAA;QAAAkL,UAAA,CAAA/O,CAAA,CAAA6D,GAAA;MAAA;QAAAkL,UAAA,CAAA9O,CAAA;MAAA;MAED,IAAK,CAAC6O,OAAO,EAAG;QACdvY,QAAQ,CAAC0M,GAAG,EAAE,CAAC,EAAEvN,IAAI,CAAC;QACtB,IAAKmP,UAAU,EAAG;UAChBtO,QAAQ,CAAC0M,GAAG,EAAE,CAAC,EAAErN,aAAa,CAAC;QACjC;MACF;;MAEA;MACA,IAAKqN,GAAG,CAACyC,QAAQ,CAACjQ,GAAG,CAAC,EAAG;QACvBgB,YAAY,CAACwM,GAAG,EAAExN,GAAG,CAAC;QACtB,IAAK8L,WAAW,CAACoD,OAAO,EAAG;UACzB1B,GAAG,CAACgF,IAAI,CAACxS,GAAG,CAAC;QACf;MACF;MAEA,OAAOwN,GAAG;MAEV,SAAS4L,UAAUA,CAACD,GAAG,EAAErM,WAAW,EAAE;QACpC,IAAI2M,SAAS,EAAEC,KAAK,EAAEC,aAAa;QAEnC,IAAK,CAACR,GAAG,CAACK,MAAM,KAAK,EAAE,IAAIL,GAAG,CAACK,MAAM,KAAK,MAAM,KAAKL,GAAG,CAAC7T,IAAI,KAAK,KAAK,EAAG;UACxE,OAAOtF,GAAG;QACZ;QAEA,IAAKmZ,GAAG,CAACK,MAAM,KAAK,MAAM,IAAIL,GAAG,CAACxS,IAAI,KAAK,MAAM,EAAG;UAClD8S,SAAS,GAAG,MAAM;UAClBC,KAAK,GAAG,GAAG;UACXC,aAAa,GAAG;YAAEC,SAAS,EAAE;UAAK,CAAC;QACrC;QAEA,IAAKT,GAAG,CAACxS,IAAI,KAAK,QAAQ,IAAIwS,GAAG,CAACxS,IAAI,KAAK,KAAK,EAAG;UACjD8S,SAAS,GAAG,QAAQ;QACtB;QAEA,IAAMI,OAAO,GAAGV,GAAG,CAAC7T,IAAI,CAAC2K,QAAQ,CAAC,GAAG,CAAC,GAAGkJ,GAAG,CAAC7T,IAAI,CAAC+I,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAAC,UAACwL,IAAI;UAAA,OAAKA,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAGF,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC;QAAA,CAAC,CAAC,CAACzL,IAAI,CAAC,EAAE,CAAC,GAAG2K,GAAG,CAAC7T,IAAI;QAEjJ,IAAM4U,MAAM,GAAGpN,WAAW,CAAC,aAAa,CAAC;QACzC,IAAMqN,CAAC,GAAGrN,WAAW,CAAC,QAAQ,CAAC;QAC/B,IAAMkF,QAAQ,mBAAA5L,MAAA,CAAoByT,OAAO,CAACE,MAAM,CAAC,CAAC,CAAC,CAACzM,WAAW,CAAC,CAAC,GAAGuM,OAAO,CAACO,KAAK,CAAC,CAAC,CAAC,CAAG;QACvF,IAAMC,WAAW,GAAGlB,GAAG,CAACkB,WAAW,IAAI,EAAE;QACzC,IAAMC,OAAO,GAAGD,WAAW,IAAIA,WAAW,CAACA,WAAW,CAACpV,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG,GAAGoV,WAAW,CAACD,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAGC,WAAW;QAEnH,OAAO;UACL/U,IAAI,EAAG6T,GAAG,CAAC7T,IAAI,CAACgI,WAAW,CAAC,CAAC;UAC7ByE,KAAK,EAAEmI,MAAM,CAAClI,QAAQ,CAAC,GAAGmI,CAAC,CAACnI,QAAQ,CAAC,GAAGmH,GAAG,CAAC7T,IAAI;UAChD4B,KAAK,EAAEqT,eAAe,CAACpB,GAAG,CAAC;UAC3B/H,IAAI,EAAG,CAAC+H,GAAG,CAACvS,KAAK,CAAC;UAClB6S,SAAS,EAATA,SAAS;UACTE,aAAa,EAAbA,aAAa;UACbD,KAAK,EAALA,KAAK;UACLY,OAAO,EAAPA;QACF,CAAC;MACH;IACF,CAAC;EACH,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAE,aAAa,WAAAA,cAAC3P,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACvC,OAAO,UAAC4N,OAAO,EAAK;MAClB,IAAMrN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,CAAC;MAEzC,OAAOC,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,MAAM,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAKpL,WAAW,CAACoL,GAAG,CAAC;MAAA,EAAC;IAC5E,CAAC;EACH,CAAC;EAEDuN,cAAc,WAAAA,eAAC9P,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACxC,OAAO,UAAC4N,OAAO,EAAK;MAClB,IAAMrN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,CAAC;MAEzC,OAAOC,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,OAAO,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAK/K,YAAY,CAAC+K,GAAG,CAAC;MAAA,EAAC;IAC9E,CAAC;EACH,CAAC;EAEDwN,eAAe,WAAAA,gBAAC/P,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACzC,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,IAAMzN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC;MAElD,OAAOH,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,QAAQ,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAK9K,aAAa,CAAC8K,GAAG,CAAC;MAAA,EAAC;IAChF,CAAC;EACH,CAAC;EAED0N,QAAQ,WAAAA,SAACjQ,KAAK,EAAE8B,OAAO,EAAE;IACvB,OAAO,UAAC4F,QAAQ,EAAK;MACnB,IAAMzG,WAAW,GAAGa,OAAO,CAAC,YAAY,CAAC,CAAC4F,QAAQ,CAAC;MAEnD,IAAIzG,WAAW,IAAIA,WAAW,CAACgP,QAAQ,EAAE;QACvC,OAAO/W,cAAc,CAACwO,QAAQ,CAAC;MACjC;MAEA,OAAO,IAAI;IACb,CAAC;EACH,CAAC;EAEDwI,aAAa,WAAAA,cAAClQ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACvC,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,IAAMzN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC;MAElD,OAAOH,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,MAAM,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAKnL,WAAW,CAACmL,GAAG,CAAC;MAAA,EAAC;IAC5E,CAAC;EACH,CAAC;EAED4N,YAAY,WAAAA,aAACnQ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACtC,OAAO,UAACoO,IAAI,EAAK;MACf,OAAOP,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,MAAM,EAAEoO,IAAI,EAAE,UAACA,IAAI;QAAA,OAAKhZ,WAAW,CAACgZ,IAAI,CAAC;MAAA,EAAC;IAC/E,CAAC;EACH,CAAC;EAEDC,qBAAqB,WAAAA,sBAACrQ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAC/C,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,IAAMzN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC;MAElD,OAAOH,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,cAAc,EAAEO,GAAG,EAAE;QAAA,OAAM+N,OAAO,CAACC,OAAO,wBAAAhV,MAAA,CAAyBgH,GAAG,CAAG,CAAC;MAAA,EAAC;IAChH,CAAC;EACH,CAAC;EAEDiO,wBAAwB,WAAAA,yBAACxQ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAClD,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,IAAMzN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC;MAElD,OAAOH,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,kBAAkB,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAKlL,sBAAsB,CAACkL,GAAG,CAAC;MAAA,EAAC;IACnG,CAAC;EACH,CAAC;EAEDkO,+BAA+B,WAAAA,gCAACzQ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACzD,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,IAAMzN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC;MAElD,OAAOH,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,gBAAgB,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAK3K,6BAA6B,CAAC2K,GAAG,CAAC;MAAA,EAAC;IACxG,CAAC;EACH,CAAC;EAEDmO,iCAAiC,WAAAA,kCAAC1Q,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAC3D,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,IAAMzN,GAAG,GAAGT,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC;MAElD,OAAOH,SAAS,CAAC7P,KAAK,EAAEgC,SAAS,EAAE,kBAAkB,EAAEO,GAAG,EAAE,UAACA,GAAG;QAAA,OAAK1K,+BAA+B,CAAC0K,GAAG,CAAC;MAAA,EAAC;IAC5G,CAAC;EACH,CAAC;EAEDoO,eAAe,WAAAA,gBAAC3Q,KAAK,EAAE8B,OAAO,EAAE;IAC9B,OAAO,UAACsO,IAAI,EAAK;MACf,OAAOrZ,WAAU,CAACqZ,IAAI,CAAC;IACzB,CAAC;EACH,CAAC;EAED1Y,YAAY,WAAAA,aAACsI,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACtC,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,QAAQ,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAEtY,aAAY,CAAC;IACjG,CAAC;EACH,CAAC;EAEDb,UAAU,WAAAA,WAACmJ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACpC,OAAO,UAAC4N,OAAO,EAAK;MAClB,OAAOgB,aAAa,CAAC5O,SAAS,EAAE,MAAM,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,CAAC,EAAE/Y,WAAU,CAAC;IACpF,CAAC;EACH,CAAC;EAEDD,WAAW,WAAAA,YAACoJ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACrC,OAAO,UAAC4N,OAAO,EAAK;MAClB,OAAOgB,aAAa,CAAC5O,SAAS,EAAE,OAAO,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,CAAC,EAAEhZ,YAAW,CAAC;IACtF,CAAC;EACH,CAAC;EAEDE,YAAY,WAAAA,aAACkJ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACtC,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,QAAQ,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAElZ,aAAY,CAAC;IACjG,CAAC;EACH,CAAC;EAEDC,UAAU,WAAAA,WAACiJ,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACpC,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,MAAM,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAEjZ,WAAU,CAAC;IAC7F,CAAC;EACH,CAAC;EAEDG,wBAAwB,WAAAA,yBAAC8I,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAClD,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,cAAc,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAE9Y,yBAAwB,CAAC;IACnH,CAAC;EACH,CAAC;EAEDI,qBAAqB,WAAAA,sBAAC0I,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAC/C,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,kBAAkB,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAE1Y,sBAAqB,CAAC;IACpH,CAAC;EACH,CAAC;EAEDC,WAAW,WAAAA,YAACyI,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IACrC,OAAO,UAAC6O,QAAQ,EAAK;MACnB,OAAOD,aAAa,CAAC5O,SAAS,EAAE,OAAO,EAAE6O,QAAQ,EAAEtZ,YAAW,CAAC;IACjE,CAAC;EACH,CAAC;EAEDI,mBAAmB,WAAAA,oBAACqI,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAC7C,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,gBAAgB,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAErY,oBAAmB,CAAC;IAChH,CAAC;EACH,CAAC;EAEDG,qBAAqB,WAAAA,sBAACkI,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAE;IAC/C,OAAO,UAAC4N,OAAO,EAAEI,OAAO,EAAK;MAC3B,OAAOY,aAAa,CAAC5O,SAAS,EAAE,kBAAkB,EAAEF,OAAO,CAACH,YAAY,CAACiO,OAAO,EAAEI,OAAO,CAAC,EAAElY,sBAAqB,CAAC;IACpH,CAAC;EACH,CAAC;EAED6J,YAAY,WAAAA,aAAC3B,KAAK,EAAE8B,OAAO,EAAE;IAC3B,OAAO,UAAChG,IAAI,EAAEkU,OAAO,EAAK;MACxB,IAAIzN,GAAG,GAAGzG,IAAI;MAEd,IAAKkU,OAAO,EAAG;QACbzN,GAAG,MAAAhH,MAAA,CAAOO,IAAI,OAAAP,MAAA,CAAMyU,OAAO,CAAG;MAChC;MAEA,IAAKhQ,KAAK,CAACmB,KAAK,CAACQ,YAAY,CAACY,GAAG,CAAC,KAAKlI,SAAS,EAAG;QACjD,OAAO2F,KAAK,CAACmB,KAAK,CAACQ,YAAY,CAACY,GAAG,CAAC;MACtC;MAEA,IAAII,GAAG,GAAG7G,IAAI;MAEd,IAAMgV,OAAO,GAAG9Q,KAAK,CAACgB,uBAAuB,CAAC8D,IAAI,CAAC,UAACgM,OAAO,EAAK;QAC9D,IAAMzN,EAAE,GAAGC,aAAa,CAACwN,OAAO,CAACtU,KAAK,CAAC;QAEvC,OAAO6G,EAAE,CAAC2B,IAAI,CAACzC,GAAG,CAAC;MACrB,CAAC,CAAC;MAEF,IAAKuO,OAAO,EAAG;QACbnO,GAAG,GAAGmO,OAAO,CAAClU,OAAO;MACvB,CAAC,MAAM,IAAKoT,OAAO,EAAG;QACpB;QACArN,GAAG,GAAGb,OAAO,CAACH,YAAY,CAAC7F,IAAI,CAAC;MAClC;MAEAkE,KAAK,CAACmB,KAAK,CAACQ,YAAY,CAACY,GAAG,CAAC,GAAGI,GAAG;MAEnC,OAAOA,GAAG;IACZ,CAAC;EACH,CAAC;EAEDqE,SAAS,WAAAA,UAAChH,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IAChD,OAAO,UAACC,MAAM,EAAK;MACjB,IAAIS,GAAG,GAAG,KAAK;MAAC,IAAAoO,UAAA,GAAA5R,0BAAA,CAEIa,KAAK,CAACK,WAAW;QAAA2Q,MAAA;MAAA;QAArC,KAAAD,UAAA,CAAA3R,CAAA,MAAA4R,MAAA,GAAAD,UAAA,CAAA1R,CAAA,IAAAC,IAAA,GAAwC;UAAA,IAAA2R,mBAAA;UAAA,IAA5B7N,KAAI,GAAA4N,MAAA,CAAA3U,KAAA;UACd,IAAMX,KAAK,GAAGwG,MAAM,aAANA,MAAM,gBAAA+O,mBAAA,GAAN/O,MAAM,CAAEU,UAAU,cAAAqO,mBAAA,uBAAlBA,mBAAA,CAAoBvV,KAAK;UAEvC,IAAIA,KAAK,IAAIA,KAAK,CAACc,KAAK,CAAC8G,aAAa,CAACF,KAAI,CAACtH,IAAI,CAAC,IAAI9D,QAAQ,CAACoL,KAAI,CAAC,IAAIA,KAAI,CAACtH,IAAI,CAAC,EAAE;YACjF6G,GAAG,GAAGS,KAAI,CAACpG,EAAE,CAACiF,WAAW,CAAC;YAC1B;UACF;UAEA,IAAKvG,KAAK,IAAI,OAAO0H,KAAI,KAAK,QAAQ,IAAI1H,KAAK,CAACc,KAAK,CAAC8G,aAAa,CAACF,KAAI,CAAC,CAAC,EAAG;YAC3ET,GAAG,GAAG,IAAI;YACV;UACF;QACF;MAAC,SAAAY,GAAA;QAAAwN,UAAA,CAAArR,CAAA,CAAA6D,GAAA;MAAA;QAAAwN,UAAA,CAAApR,CAAA;MAAA;MAED,IAAK,CAACgD,GAAG,EAAG;QAAA,IAAAuO,UAAA,GAAA/R,0BAAA,CACUa,KAAK,CAACW,UAAU;UAAAwQ,MAAA;QAAA;UAApC,KAAAD,UAAA,CAAA9R,CAAA,MAAA+R,MAAA,GAAAD,UAAA,CAAA7R,CAAA,IAAAC,IAAA,GAAuC;YAAA,IAA3B8D,IAAI,GAAA+N,MAAA,CAAA9U,KAAA;YACd,IAAK6F,MAAM,CAACM,EAAE,CAAChG,KAAK,CAAC8G,aAAa,CAACF,IAAI,CAAC,CAAC,EAAG;cAC1CT,GAAG,GAAG,IAAI;cACV;YACF;UACF;QAAC,SAAAY,GAAA;UAAA2N,UAAA,CAAAxR,CAAA,CAAA6D,GAAA;QAAA;UAAA2N,UAAA,CAAAvR,CAAA;QAAA;MACH;MAEAK,KAAK,CAACmB,KAAK,CAACG,MAAM,CAACY,MAAM,CAACM,EAAE,CAAC,GAAGG,GAAG;MAEnC,OAAOA,GAAG;IACZ,CAAC;EACH,CAAC;EAEDyO,cAAc,WAAAA,eAACpR,KAAK,EAAE8B,OAAO,EAAEE,SAAS,EAAEC,WAAW,EAAE;IACrD,IAAMoP,UAAU,GAAG,CAAC,CAAC;IACrB,IAAMC,WAAW,GAAG,CAAC,CAAC;IACtB,IAAMxE,KAAK,GAAG7K,WAAW,CAAC,WAAW,CAAC,CAACrM,WAAW,CAAC;IAEnD,IAAKoK,KAAK,CAACkB,gBAAgB,GAAG,CAAC,EAAG;MAChC;MACA;MACA;IACF;IAEA,OAAOlB,KAAK,CAACC,QAAQ,CAAC4M,MAAM,CAAC,UAACtB,CAAC,EAAK;MAClC,IAAMrR,MAAM,GAAGqR,CAAC,CAAC5Q,OAAO;MAExB,IAAK4Q,CAAC,CAAC,QAAQ,CAAC,KAAK,KAAK,IAAI,CAACuB,KAAK,EAAG;QACrC,OAAO,KAAK;MACd;MAEA,IAAKvB,CAAC,CAACgG,QAAQ,IAAI,CAACtP,WAAW,CAACsJ,CAAC,CAACgG,QAAQ,CAAC,EAAG;QAC5C,OAAO,KAAK;MACd;MAEA,IAAK,CAACF,UAAU,CAACnX,MAAM,CAAC,EAAG;QACzB,IAAM+Q,OAAO,GAAGhJ,WAAW,IAAA1G,MAAA,CAAKrB,MAAM,UAAQ,CAACxE,MAAM,CAAC;QAEtD2b,UAAU,CAACnX,MAAM,CAAC,GAAG,EAAE;QACvBoX,WAAW,CAACpX,MAAM,CAAC,GAAG,EAAE;QAAC,IAAAsX,UAAA,GAAArS,0BAAA,CAER8L,OAAO;UAAAwG,MAAA;QAAA;UAAxB,KAAAD,UAAA,CAAApS,CAAA,MAAAqS,MAAA,GAAAD,UAAA,CAAAnS,CAAA,IAAAC,IAAA,GAA2B;YAAA,IAAfF,CAAC,GAAAqS,MAAA,CAAApV,KAAA;YACXgV,UAAU,CAACnX,MAAM,CAAC,CAACyN,IAAI,CAACvI,CAAC,CAACsS,GAAG,CAAC;YAE9B,IAAKtS,CAAC,CAACuS,MAAM,EAAG;cACd5b,SAAS,CAACub,WAAW,CAACpX,MAAM,CAAC,EAAEkF,CAAC,CAACuS,MAAM,CAAC;YAC1C;UACF;QAAC,SAAApO,GAAA;UAAAiO,UAAA,CAAA9R,CAAA,CAAA6D,GAAA;QAAA;UAAAiO,UAAA,CAAA7R,CAAA;QAAA;MACH;MAEA,IAAK4L,CAAC,CAACuC,SAAS,EAAE;QAChB,IAAM8D,QAAQ,GAAGC,KAAK,CAAC3b,OAAO,CAACqV,CAAC,CAACuC,SAAS,CAAC,GAAGvC,CAAC,CAACuC,SAAS,GAAG,CAACvC,CAAC,CAACuC,SAAS,CAAC;QAAC,IAAAgE,UAAA,GAAA3S,0BAAA,CAE1DyS,QAAQ;UAAAG,MAAA;QAAA;UAAxB,KAAAD,UAAA,CAAA1S,CAAA,MAAA2S,MAAA,GAAAD,UAAA,CAAAzS,CAAA,IAAAC,IAAA,GAA0B;YAAA,IAAfK,CAAC,GAAAoS,MAAA,CAAA1V,KAAA;YACV,IAAI,CAAC4F,WAAW,CAAC,cAAc,CAAC,CAACtC,CAAC,CAAC,EAAE;cACnC,OAAO,KAAK;YACd;UACF;QAAC,SAAA4D,GAAA;UAAAuO,UAAA,CAAApS,CAAA,CAAA6D,GAAA;QAAA;UAAAuO,UAAA,CAAAnS,CAAA;QAAA;MACH;MAEA,IAAK4L,CAAC,CAAC+B,MAAM,IAAI,CAACA,MAAM,CAACrL,WAAW,EAAEsJ,CAAC,CAAC+B,MAAM,CAAC,EAAE;QAC/C,OAAO,KAAK;MACd;MAEA,IAAK/B,CAAC,CAACgC,UAAU,EAAG;QAClB,IAAMG,OAAO,GAAG2D,UAAU,CAACnX,MAAM,CAAC,CAAC2S,MAAM,CAAC,UAACyC,CAAC;UAAA,OAAKA,CAAC,CAAC9S,KAAK,CAAC8G,aAAa,CAACiI,CAAC,CAACgC,UAAU,CAAC,CAAC;QAAA,CAAC,CAAC;QAEvF,IAAK,CAACG,OAAO,CAACtT,MAAM,EAAG;UACrB,OAAO,KAAK;QACd;QAEA,IAAKmR,CAAC,CAACoC,UAAU,IAAI,CAACA,UAAU,CAAC1L,WAAW,EAAE/H,MAAM,EAAEqR,CAAC,CAACoC,UAAU,EAAED,OAAO,CAAC,EAAE;UAC5E,OAAO,KAAK;QACd;MACF;MAEA,IAAKnC,CAAC,CAACyG,WAAW,IAAI,CAACV,WAAW,CAACpX,MAAM,CAAC,CAAC4K,IAAI,CAAC,UAACwK,CAAC;QAAA,OAAKA,CAAC,CAAC9S,KAAK,CAAC8G,aAAa,CAACiI,CAAC,CAACyG,WAAW,CAAC,CAAC;MAAA,CAAC,CAAC,EAAG;QAC/F,OAAO,KAAK;MACd;MAEA,OAAO,IAAI;IACb,CAAC,CAAC;EACJ,CAAC;EAEDC,eAAe,WAAAA,gBAACjS,KAAK,EAAE8B,OAAO,EAAE;IAC9B,OAAO,UAACrH,IAAI,EAAK;MACf,IAAKzE,MAAM,CAAC8L,OAAO,CAAC,gBAAgB,CAAC,EAAE,MAAM,EAAErH,IAAI,CAAC,EAAG;QACrD,OAAO,IAAI;MACb;MAEA,OAAO,KAAK;IACd,CAAC;EACH,CAAC;EAEDyX,cAAc,WAAAA,eAAClS,KAAK,EAAE;IACpB,OAAO,UAACkC,MAAM,EAAE8M,OAAO,EAAK;MAC1B,IAAMV,GAAG,GAAG6D,iBAAiB,CAACjQ,MAAM,EAAE8M,OAAO,CAAC;MAE9C,OAAOU,eAAe,CAACpB,GAAG,CAAC;IAC7B,CAAC;EACH,CAAC;EAED8D,mBAAmB,WAAAA,oBAACpS,KAAK,EAAE;IACzB,OAAO,UAACqS,WAAW,EAAK;MACtB,IAAMC,IAAI,GAAGtS,KAAK,CAACC,QAAQ,CAAC6E,IAAI,CAAC,UAACyG,CAAC;QAAA,OAAKA,CAAC,CAAC9Q,IAAI,KAAK4X,WAAW;MAAA,EAAC;MAE/D,OAAO,CAAC,CAACC,IAAI;IACf,CAAC;EACH;AACF,CAAC;AAED,OAAO,IAAMC,SAAS,GAAG;EACvBC,aAAa,WAAAA,cAACxS,KAAK,EAAE;IACnBA,KAAK,CAACkB,gBAAgB,GAAGlB,KAAK,CAACkB,gBAAgB,GAAG,CAAC;EACrD,CAAC;EAED;EACA4I,MAAM,WAAAA,OAAC9J,KAAK,EAAAyS,KAAA,EAAuB;IAAA,IAAnBxY,OAAO,GAAAwY,KAAA,CAAPxY,OAAO;MAAEyY,MAAM,GAAAD,KAAA,CAANC,MAAM;IAC7B,IAAMC,QAAQ,GAAG3S,KAAK,CAACC,QAAQ,CAAC2S,SAAS,CAAC,UAACrH,CAAC;MAAA,OAAKA,CAAC,CAAC9Q,IAAI,KAAKR,OAAO;IAAA,EAAC;;IAEpE;IACA,IAAI0Y,QAAQ,KAAK,CAAC,CAAC,EAAE;MACnB3S,KAAK,CAACC,QAAQ,CAAC8N,MAAM,CAAC4E,QAAQ,EAAE,CAAC,CAAC;IACpC;;IAEA;IACA,IAAI3S,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,EAAE;MAC/B,OAAO+F,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC;IACpC;IAEA,IAAI+F,KAAK,CAACI,UAAU,CAACnG,OAAO,CAAC,EAAE;MAC7B;MACA0B,MAAM,CAAC2K,IAAI,CAACtG,KAAK,CAACI,UAAU,CAACnG,OAAO,CAAC,CAAC,CAACgC,OAAO,CAAC,UAACH,IAAI,EAAK;QACvD,OAAOkE,KAAK,CAAChE,OAAO,CAACF,IAAI,CAAC;QAC1B,OAAOkE,KAAK,CAACY,gBAAgB,CAAC9E,IAAI,CAAC;QACnC,OAAOkE,KAAK,CAACmB,KAAK,CAACG,MAAM,CAACxF,IAAI,CAAC;QAC/B;QACA,OAAOkE,KAAK,CAACmB,KAAK,CAACM,MAAM,CAAC3F,IAAI,CAAC;QAC/B,OAAOkE,KAAK,CAACmB,KAAK,CAACO,IAAI,CAAC5F,IAAI,CAAC;QAC7B,OAAOkE,KAAK,CAACmB,KAAK,CAACI,IAAI,CAACzF,IAAI,CAAC;;QAE7B;QACA;QACAH,MAAM,CAAC2K,IAAI,CAACtG,KAAK,CAACmB,KAAK,CAACQ,YAAY,CAAC,CAAC1F,OAAO,CAAC,UAACb,CAAC,EAAK;UACnD,IAAMyX,CAAC,GAAG7S,KAAK,CAACmB,KAAK,CAACQ,YAAY,CAACvG,CAAC,CAAC;UAErC,IAAIyX,CAAC,KAAK/W,IAAI,EAAE;YACd,OAAOkE,KAAK,CAACmB,KAAK,CAACQ,YAAY,CAACvG,CAAC,CAAC;UACpC;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MAEF,OAAO4E,KAAK,CAACI,UAAU,CAACnG,OAAO,CAAC;IAClC;IAEA,IAAIyY,MAAM,EAAE;MACV;MACA/W,MAAM,CAAC2K,IAAI,CAACoM,MAAM,CAACjX,KAAK,CAAC,CAACQ,OAAO,CAAC,UAAC4G,IAAI,EAAK;QAC1C,IAAI7C,KAAK,CAACmB,KAAK,CAAC0B,IAAI,CAAC,EAAE;UACrBlH,MAAM,CAAC2K,IAAI,CAACoM,MAAM,CAACjX,KAAK,CAACoH,IAAI,CAAC,CAAC,CAAC5G,OAAO,CAAC,UAACH,IAAI,EAAK;YAChD,OAAOkE,KAAK,CAACmB,KAAK,CAAC0B,IAAI,CAAC,CAAC/G,IAAI,CAAC;UAChC,CAAC,CAAC;QACJ;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED7B,OAAO,WAAAA,QAAC+F,KAAK,EAAEnC,GAAG,EAAE;IAClB,IAAM8U,QAAQ,GAAG3c,MAAM,CAACgK,KAAK,CAACC,QAAQ,EAAE,MAAM,EAAEpC,GAAG,CAACpD,IAAI,CAAC;IAEzD,IAAKkY,QAAQ,EAAG;MACdhX,MAAM,CAACuJ,MAAM,CAACyN,QAAQ,EAAE9U,GAAG,CAAC;IAC9B,CAAC,MAAM;MACL9H,SAAS,CAACiK,KAAK,CAACC,QAAQ,EAAEpC,GAAG,CAAC;IAChC;EACF,CAAC;EAEDD,WAAW,WAAAA,YAACoC,KAAK,EAAA8S,KAAA,EAAoB;IAAA,IAAhB7Y,OAAO,GAAA6Y,KAAA,CAAP7Y,OAAO;MAAE4D,GAAG,GAAAiV,KAAA,CAAHjV,GAAG;IAC/B,IAAK,CAACmC,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,EAAG;MAClC+F,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,GAAG,EAAE;IAClC;IAEA,IAAM8Y,IAAI,GAAG1c,KAAK,CAACwH,GAAG,CAAC;IAEvBkV,IAAI,CAACC,OAAO,GAAG,IAAI;IAEnB,IAAML,QAAQ,GAAG3c,MAAM,CAACgK,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,EAAE,MAAM,EAAE8Y,IAAI,CAACtY,IAAI,CAAC;IAEvE,IAAKkY,QAAQ,EAAG;MACdhX,MAAM,CAACuJ,MAAM,CAACyN,QAAQ,EAAEI,IAAI,CAAC;IAC/B,CAAC,MAAM;MACLhd,SAAS,CAACiK,KAAK,CAACE,YAAY,CAACjG,OAAO,CAAC,EAAE8Y,IAAI,CAAC;IAC9C;EACF,CAAC;EAEDjV,WAAW,WAAAA,YAACkC,KAAK,EAAAiT,KAAA,EAAoB;IAAA,IAAhBhZ,OAAO,GAAAgZ,KAAA,CAAPhZ,OAAO;MAAE4D,GAAG,GAAAoV,KAAA,CAAHpV,GAAG;IAC/B,IAAK,CAACmC,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,EAAG;MAClC+F,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,GAAG,EAAE;IAClC;IAEA,IAAM8Y,IAAI,GAAG1c,KAAK,CAACwH,GAAG,CAAC;IAEvB5E,eAAe,CAACgB,OAAO,CAAC,GAAGhB,eAAe,CAACgB,OAAO,CAAC,IAAI,CAAC,CAAC;IACzDhB,eAAe,CAACgB,OAAO,CAAC,CAAC8Y,IAAI,CAACjX,IAAI,CAAC,GAAGiX,IAAI,CAAC7J,YAAY;IACvD,OAAO6J,IAAI,CAAC7J,YAAY;IAExB6J,IAAI,CAACtY,IAAI,GAAGsY,IAAI,CAACjX,IAAI;IACrBiX,IAAI,CAACvK,SAAS,GAAG,IAAI;IACrBuK,IAAI,CAACC,OAAO,GAAG,IAAI;IACnBD,IAAI,CAAC9H,OAAO,CAAChP,OAAO,CAAC,UAACiG,MAAM,EAAK;MAC/BA,MAAM,CAAC2H,KAAK,GAAArP,aAAA;QACV0Y,UAAU,MAAA3X,MAAA,CAAOxC,cAAc,OAAAwC,MAAA,CAAM2G,MAAM,CAACM,EAAE;MAAG,GAC7CN,MAAM,CAAC2H,KAAK,IAAI,CAAC,CAAC,CACvB;IACH,CAAC,CAAC;IAEF,IAAM8I,QAAQ,GAAG3c,MAAM,CAACgK,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,EAAE,MAAM,EAAE8Y,IAAI,CAACjX,IAAI,CAAC;IAEvE,IAAK6W,QAAQ,EAAG;MACdhX,MAAM,CAACuJ,MAAM,CAACyN,QAAQ,EAAEI,IAAI,CAAC;IAC/B,CAAC,MAAM;MACLhd,SAAS,CAACiK,KAAK,CAACG,YAAY,CAAClG,OAAO,CAAC,EAAE8Y,IAAI,CAAC;IAC9C;EACF,CAAC;EAEDvX,SAAS,WAAAA,UAACwE,KAAK,EAAAmT,KAAA,EAA6B;IAAA,IAAzBlZ,OAAO,GAAAkZ,KAAA,CAAPlZ,OAAO;MAAEyB,KAAK,GAAAyX,KAAA,CAALzX,KAAK;MAAED,KAAK,GAAA0X,KAAA,CAAL1X,KAAK;IACtC,IAAK,CAACxB,OAAO,EAAG;MACdA,OAAO,GAAGlC,QAAQ;IACpB;IAEA,IAAK,CAAC2D,KAAK,EAAG;MACZA,KAAK,GAAG5C,IAAI;IACd;IAEA,IAAK,CAAC5C,OAAO,CAACuF,KAAK,CAAC,EAAG;MACrBA,KAAK,GAAG,CAACA,KAAK,CAAC;IACjB;IAEA,IAAK,CAACuE,KAAK,CAACI,UAAU,CAACnG,OAAO,CAAC,EAAG;MAChC+F,KAAK,CAACI,UAAU,CAACnG,OAAO,CAAC,GAAG,CAAC,CAAC;IAChC;IAAC,IAAAmZ,WAAA,GAAAjU,0BAAA,CAEgB1D,KAAK;MAAA4X,OAAA;IAAA;MAAtB,KAAAD,WAAA,CAAAhU,CAAA,MAAAiU,OAAA,GAAAD,WAAA,CAAA/T,CAAA,IAAAC,IAAA,GAAyB;QAAA,IAAbgQ,CAAC,GAAA+D,OAAA,CAAAhX,KAAA;QACX2D,KAAK,CAACI,UAAU,CAACnG,OAAO,CAAC,CAACqV,CAAC,CAAC,GAAG5T,KAAK;MACtC;IAAC,SAAA6H,GAAA;MAAA6P,WAAA,CAAA1T,CAAA,CAAA6D,GAAA;IAAA;MAAA6P,WAAA,CAAAzT,CAAA;IAAA;EACH,CAAC;EAED5C,WAAW,WAAAA,YAACiD,KAAK,EAAAsT,KAAA,EAAgC;IAAA,IAAb9W,KAAK,GAAA8W,KAAA,CAApBxW,aAAa;MAASE,EAAE,GAAAsW,KAAA,CAAFtW,EAAE;IAC3CR,KAAK,GAAGjG,WAAW,CAACiG,KAAK,CAAC;IAC1B;IACAQ,EAAE,GAAGgD,KAAK,CAACK,WAAW,CAACsH,IAAI,CAAC;MAC1B7L,IAAI,EAAET,aAAa,CAACmB,KAAK,CAAC;MAC1BQ,EAAE,EAAFA;IACF,CAAC,CAAC,GAAGgD,KAAK,CAACK,WAAW,CAACsH,IAAI,CAACtM,aAAa,CAACmB,KAAK,CAAC,CAAC;EACnD,CAAC;EAEDK,UAAU,WAAAA,WAACmD,KAAK,EAAExD,KAAK,EAAE;IACvBA,KAAK,GAAGjG,WAAW,CAACiG,KAAK,CAAC;IAC1BwD,KAAK,CAACW,UAAU,CAACgH,IAAI,CAACtM,aAAa,CAACmB,KAAK,CAAC,CAAC;EAC7C,CAAC;EAEDX,OAAO,WAAAA,QAACmE,KAAK,EAAAuT,MAAA,EAAmB;IAAA,IAAfzX,IAAI,GAAAyX,MAAA,CAAJzX,IAAI;MAAEC,KAAK,GAAAwX,MAAA,CAALxX,KAAK;IAC1BiE,KAAK,CAACnE,OAAO,CAACC,IAAI,CAAC,GAAGC,KAAK;EAC7B,CAAC;EAEDC,OAAO,WAAAA,QAACgE,KAAK,EAAAwT,MAAA,EAAqB;IAAA,IAAjB1X,IAAI,GAAA0X,MAAA,CAAJ1X,IAAI;MAAEE,OAAO,GAAAwX,MAAA,CAAPxX,OAAO;IAC5BgE,KAAK,CAAChE,OAAO,CAACF,IAAI,CAAC,GAAGE,OAAO;EAC/B,CAAC;EAEDM,eAAe,WAAAA,gBAAC0D,KAAK,EAAAyT,MAAA,EAAmB;IAAA,IAAf3X,IAAI,GAAA2X,MAAA,CAAJ3X,IAAI;MAAEC,KAAK,GAAA0X,MAAA,CAAL1X,KAAK;IAClCiE,KAAK,CAAC1D,eAAe,CAACR,IAAI,CAAC,GAAGC,KAAK;EACrC,CAAC;EAED;EACA;EACAkB,WAAW,WAAAA,YAAC+C,KAAK,EAAA0T,MAAA,EAEd;IAAA,IADDhY,KAAK,GAAAgY,MAAA,CAALhY,KAAK;MAAE0B,MAAM,GAAAsW,MAAA,CAANtW,MAAM;MAAE1C,MAAM,GAAAgZ,MAAA,CAANhZ,MAAM;MAAEyC,QAAQ,GAAAuW,MAAA,CAARvW,QAAQ;IAE/B,IAAK,CAACC,MAAM,EAAG;MACbA,MAAM,GAAG,EAAE;IACb;IAEA,IAAK1B,KAAK,EAAG;MACX0B,MAAM,CAACuK,IAAI,CAACjM,KAAK,CAAC;IACpB;IAEA,IAAM+H,GAAG,GAAGtG,QAAQ,GAAG6C,KAAK,CAACQ,iBAAiB,GAAGR,KAAK,CAACM,YAAY;IAAC,IAAAqT,WAAA,GAAAxU,0BAAA,CAEnD/B,MAAM;MAAAwW,OAAA;IAAA;MAAvB,KAAAD,WAAA,CAAAvU,CAAA,MAAAwU,OAAA,GAAAD,WAAA,CAAAtU,CAAA,IAAAC,IAAA,GAA0B;QAAA,IAAduU,CAAC,GAAAD,OAAA,CAAAvX,KAAA;QACXoH,GAAG,CAACoQ,CAAC,CAACpR,WAAW,CAAC,CAAC,CAAC,GAAG/H,MAAM;MAC/B;IAAC,SAAA6I,GAAA;MAAAoQ,WAAA,CAAAjU,CAAA,CAAA6D,GAAA;IAAA;MAAAoQ,WAAA,CAAAhU,CAAA;IAAA;EACH,CAAC;EAED;EACA;EACA;EACA;EACAtC,mBAAmB,WAAAA,oBAAC2C,KAAK,EAAA8T,MAAA,EAAkC;IAAA,IAA9BpY,KAAK,GAAAoY,MAAA,CAALpY,KAAK;MAAE0B,MAAM,GAAA0W,MAAA,CAAN1W,MAAM;MAAEE,WAAW,GAAAwW,MAAA,CAAXxW,WAAW;IACrD,IAAK,CAACF,MAAM,EAAG;MACbA,MAAM,GAAG,EAAE;IACb;IAEA,IAAK1B,KAAK,EAAG;MACX0B,MAAM,CAACuK,IAAI,CAACjM,KAAK,CAAC;IACpB;IAAC,IAAAqY,WAAA,GAAA5U,0BAAA,CAEgB/B,MAAM;MAAA4W,OAAA;IAAA;MAAvB,KAAAD,WAAA,CAAA3U,CAAA,MAAA4U,OAAA,GAAAD,WAAA,CAAA1U,CAAA,IAAAC,IAAA,GAA0B;QAAA,IAAduU,CAAC,GAAAG,OAAA,CAAA3X,KAAA;QACX2D,KAAK,CAACO,iBAAiB,CAACsT,CAAC,CAACpR,WAAW,CAAC,CAAC,CAAC,GAAGnF,WAAW;MACxD;IAAC,SAAAiG,GAAA;MAAAwQ,WAAA,CAAArU,CAAA,CAAA6D,GAAA;IAAA;MAAAwQ,WAAA,CAAApU,CAAA;IAAA;EACH,CAAC;EAED;EACA;EACApC,UAAU,WAAAA,WAACyC,KAAK,EAAAiU,MAAA,EAEb;IAAA,IADDnY,IAAI,GAAAmY,MAAA,CAAJnY,IAAI;MAAEL,KAAK,GAAAwY,MAAA,CAALxY,KAAK;MAAEf,MAAM,GAAAuZ,MAAA,CAANvZ,MAAM;MAAEyC,QAAQ,GAAA8W,MAAA,CAAR9W,QAAQ;IAE7B,IAAK,CAAC1B,KAAK,EAAG;MACZA,KAAK,GAAG,EAAE;IACZ;IAEA,IAAKK,IAAI,EAAG;MACVL,KAAK,CAACkM,IAAI,CAAC7L,IAAI,CAAC;IAClB;IAEA,IAAM2H,GAAG,GAAGtG,QAAQ,GAAG6C,KAAK,CAACY,gBAAgB,GAAGZ,KAAK,CAACa,WAAW;IAAC,IAAAqT,WAAA,GAAA/U,0BAAA,CAEjD1D,KAAK;MAAA0Y,OAAA;IAAA;MAAtB,KAAAD,WAAA,CAAA9U,CAAA,MAAA+U,OAAA,GAAAD,WAAA,CAAA7U,CAAA,IAAAC,IAAA,GAAyB;QAAA,IAAbgQ,CAAC,GAAA6E,OAAA,CAAA9X,KAAA;QACXoH,GAAG,CAAC6L,CAAC,CAAC7M,WAAW,CAAC,CAAC,CAAC,GAAG/H,MAAM;MAC/B;IAAC,SAAA6I,GAAA;MAAA2Q,WAAA,CAAAxU,CAAA,CAAA6D,GAAA;IAAA;MAAA2Q,WAAA,CAAAvU,CAAA;IAAA;EACH,CAAC;EAED;EACA;EACA;EACAnC,QAAQ,WAAAA,SAACwC,KAAK,EAAAoU,MAAA,EAEX;IAAA,IADD5X,KAAK,GAAA4X,MAAA,CAAL5X,KAAK;MAAEI,OAAO,GAAAwX,MAAA,CAAPxX,OAAO;MAAAyX,aAAA,GAAAD,MAAA,CAAE1Z,MAAM;MAANA,MAAM,GAAA2Z,aAAA,cAAG,CAAC,GAAAA,aAAA;MAAAC,qBAAA,GAAAF,MAAA,CAAE3W,eAAe;MAAfA,eAAe,GAAA6W,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAEnDC,WAAW,CAACvU,KAAK,CAACU,aAAa,EAAElE,KAAK,EAAEI,OAAO,EAAElC,MAAM,EAAE+C,eAAe,CAAC;EAC3E,CAAC;EAEDC,OAAO,WAAAA,QAACsC,KAAK,EAAAwU,MAAA,EAEV;IAAA,IADDhY,KAAK,GAAAgY,MAAA,CAALhY,KAAK;MAAEI,OAAO,GAAA4X,MAAA,CAAP5X,OAAO;MAAA6X,aAAA,GAAAD,MAAA,CAAE9Z,MAAM;MAANA,MAAM,GAAA+Z,aAAA,cAAG,CAAC,GAAAA,aAAA;MAAAC,qBAAA,GAAAF,MAAA,CAAE/W,eAAe;MAAfA,eAAe,GAAAiX,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAEnDH,WAAW,CAACvU,KAAK,CAACc,YAAY,EAAEtE,KAAK,EAAEI,OAAO,EAAElC,MAAM,EAAE+C,eAAe,CAAC;EAC1E,CAAC;EAED;EACAE,QAAQ,WAAAA,SAACqC,KAAK,EAAA2U,MAAA,EAAgC;IAAA,IAA5BnY,KAAK,GAAAmY,MAAA,CAALnY,KAAK;MAAEd,KAAK,GAAAiZ,MAAA,CAALjZ,KAAK;MAAAkZ,aAAA,GAAAD,MAAA,CAAEja,MAAM;MAANA,MAAM,GAAAka,aAAA,cAAG,CAAC,GAAAA,aAAA;IACxCL,WAAW,CAACvU,KAAK,CAACe,gBAAgB,EAAEvE,KAAK,EAAEd,KAAK,EAAEhB,MAAM,CAAC;EAC3D,CAAC;EAEDiC,gBAAgB,WAAAA,iBAACqD,KAAK,EAAA6U,MAAA,EAAsB;IAAA,IAAlBrY,KAAK,GAAAqY,MAAA,CAALrY,KAAK;MAAEI,OAAO,GAAAiY,MAAA,CAAPjY,OAAO;IACtCJ,KAAK,GAAGjG,WAAW,CAACiG,KAAK,CAAC;IAC1BA,KAAK,GAAGnB,aAAa,CAACmB,KAAK,CAAC;IAC5BwD,KAAK,CAACgB,uBAAuB,CAAC2G,IAAI,CAAC;MAAEnL,KAAK,EAALA,KAAK;MAAEI,OAAO,EAAPA;IAAQ,CAAC,CAAC;EACxD,CAAC;EAEDL,aAAa,WAAAA,cAACyD,KAAK,EAAEvD,OAAO,EAAE;IAC5B,IAAMD,KAAK,GAAGnB,aAAa,CAAC9E,WAAW,CAACkG,OAAO,CAACD,KAAK,CAAC,CAAC;IAEvD,IAAMsY,GAAG,GAAG9U,KAAK,CAACiB,WAAW,CAAC2R,SAAS,CAAC,UAAC/U,GAAG;MAAA,OAAKA,GAAG,CAACrB,KAAK,KAAKA,KAAK;IAAA,EAAC;IACrE,IAAIqB,GAAG,GAAArD,aAAA,CAAAA,aAAA,KAAQiC,OAAO;MAAED,KAAK,EAALA;IAAK,EAAE;IAE/B,IAAKsY,GAAG,IAAI,CAAC,EAAG;MACdjX,GAAG,GAAGlC,MAAM,CAACuJ,MAAM,CAAClF,KAAK,CAACiB,WAAW,CAAC6T,GAAG,CAAC,EAAEjX,GAAG,CAAC;MAChDmC,KAAK,CAACiB,WAAW,CAAC8M,MAAM,CAAC+G,GAAG,EAAE,CAAC,EAAEjX,GAAG,CAAC;IACvC,CAAC,MAAM;MACL,IAAMA,IAAG,GAAGlC,MAAM,CAACuJ,MAAM,CAAC,CAAC,CAAC,EAAEzI,OAAO,EAAE;QAAED,KAAK,EAALA;MAAM,CAAC,CAAC;MAEjDwD,KAAK,CAACiB,WAAW,CAAC0G,IAAI,CAAC9J,IAAG,CAAC;IAC7B;EACF;AAEF,CAAC;AAED,OAAO,IAAMkX,OAAO,GAAG;EACrBC,aAAa,WAAAA,cAAAC,MAAA,EAAaC,QAAQ,EAAE;IAAA,IAApB5Z,MAAM,GAAA2Z,MAAA,CAAN3Z,MAAM;IACpBA,MAAM,CAAC,QAAQ,EAAE4Z,QAAQ,CAAC;EAC5B,CAAC;EAEDC,WAAW,WAAAA,YAAAC,MAAA,EAA4BtZ,IAAI,EAAE;IAAA,IAA/BuZ,QAAQ,GAAAD,MAAA,CAARC,QAAQ;MAAEpT,WAAW,GAAAmT,MAAA,CAAXnT,WAAW;IACjC,IAAMxG,KAAK,GAAGwG,WAAW,CAAC,WAAW,CAAC,CAACnM,cAAc,CAAC,IAAI,EAAE;IAE5DC,SAAS,CAAC0F,KAAK,EAAEK,IAAI,CAAC;IAEtBuZ,QAAQ,CAAC,WAAW,EAAE;MAAE9S,GAAG,EAAEzM,cAAc;MAAEuG,KAAK,EAAEZ;IAAM,CAAC,EAAE;MAAE2K,IAAI,EAAE;IAAK,CAAC,CAAC;EAC9E,CAAC;EAEDkP,cAAc,WAAAA,eAAAC,MAAA,EAA4BzZ,IAAI,EAAE;IAAA,IAA/BuZ,QAAQ,GAAAE,MAAA,CAARF,QAAQ;MAAEpT,WAAW,GAAAsT,MAAA,CAAXtT,WAAW;IACpC,IAAMxG,KAAK,GAAGwG,WAAW,CAAC,WAAW,CAAC,CAACnM,cAAc,CAAC,IAAI,EAAE;IAE5DK,YAAY,CAACsF,KAAK,EAAEK,IAAI,CAAC;IAEzBuZ,QAAQ,CAAC,WAAW,EAAE;MAAE9S,GAAG,EAAEzM,cAAc;MAAEuG,KAAK,EAAEZ;IAAM,CAAC,EAAE;MAAE2K,IAAI,EAAE;IAAK,CAAC,CAAC;EAC9E,CAAC;EAEDoP,WAAW,WAAAA,YAAAC,MAAA,EAAAC,MAAA,EAAiD;IAAA,IAA9CL,QAAQ,GAAAI,MAAA,CAARJ,QAAQ;MAAEpT,WAAW,GAAAwT,MAAA,CAAXxT,WAAW;IAAA,IAAMvG,KAAK,GAAAga,MAAA,CAALha,KAAK;MAAEia,QAAQ,GAAAD,MAAA,CAARC,QAAQ;IACtD,IAAMvY,MAAM,GAAG6E,WAAW,CAAC,WAAW,CAAC,CAACpM,eAAe,CAAC;IAExD,IAAK8f,QAAQ,EAAG;MACd5f,SAAS,CAACqH,MAAM,EAAE1B,KAAK,CAAC;IAC1B,CAAC,MAAM;MACLvF,YAAY,CAACiH,MAAM,EAAE1B,KAAK,CAAC;IAC7B;IAEA2Z,QAAQ,CAAC,WAAW,EAAE;MAAE9S,GAAG,EAAE1M,eAAe;MAAEwG,KAAK,EAAEe;IAAO,CAAC,EAAE;MAAEgJ,IAAI,EAAE;IAAK,CAAC,CAAC;EAChF,CAAC;EAED7J,aAAa,WAAAA,cAAAqZ,MAAA,EAAanZ,OAAO,EAAE;IAAA,IAAnBnB,MAAM,GAAAsa,MAAA,CAANta,MAAM;IACpBA,MAAM,CAAC,eAAe,EAAEmB,OAAO,CAAC;EAClC;AACF,CAAC;AAED,SAASqL,UAAUA,CAACC,IAAI,EAAEpC,IAAI,EAAE;EAC9B,IAAMkQ,EAAE,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,OAAO,CAAC;EAEjD9N,IAAI,CAAC1B,QAAQ,GAAGnO,MAAM,CAAC6P,IAAI,CAAC1B,QAAQ,EAAEwP,EAAE,CAAC;EAAC,IAAAC,WAAA,GAAA3W,0BAAA,CAEtB4I,IAAI,CAAC1B,QAAQ;IAAA0P,OAAA;EAAA;IAAjC,KAAAD,WAAA,CAAA1W,CAAA,MAAA2W,OAAA,GAAAD,WAAA,CAAAzW,CAAA,IAAAC,IAAA,GAAoC;MAAA,IAAzByF,KAAK,GAAAgR,OAAA,CAAA1Z,KAAA;MACd,IAAK0I,KAAK,CAACsB,QAAQ,EAAG;QACpByB,UAAU,CAAC/C,KAAK,EAAEY,IAAI,CAAC;MACzB;IACF;EAAC,SAAApC,GAAA;IAAAuS,WAAA,CAAApW,CAAA,CAAA6D,GAAA;EAAA;IAAAuS,WAAA,CAAAnW,CAAA;EAAA;AACH;AAEA,SAAS0C,aAAaA,CAAC2T,UAAU,EAAEC,QAAQ,EAAEC,QAAQ,EAAE/U,KAAK,EAAEgV,SAAS,EAAE;EACvE,IAAI5T,GAAG,GAAGyT,UAAU;EACpB,IAAInR,KAAK,GAAG,KAAK;EAEjB,IAAKqR,QAAQ,EAAG;IACd,IAAKlT,OAAA,CAAOgT,UAAU,MAAK,QAAQ,EAAG;MACpC,OAAOA,UAAU;IACnB;IAEAzT,GAAG,GAAGjM,GAAG,CAAC0f,UAAU,EAAEE,QAAQ,CAAC;IAE/B,IAAK,OAAO3T,GAAG,KAAK,QAAQ,EAAG;MAC7B,OAAO,IAAI;IACb;EACF;EAEA,IAAKA,GAAG,IAAIpB,KAAK,IAAIA,KAAK,CAACoB,GAAG,CAAC,EAAG;IAChC,OAAOpB,KAAK,CAACoB,GAAG,CAAC;EACnB;EAEA,IAAII,GAAG,MAAApH,MAAA,CAAOgH,GAAG,CAAG;EAAC,IAAA6T,WAAA,GAAAjX,0BAAA,CAED8W,QAAQ;IAAAI,OAAA;EAAA;IAA5B,KAAAD,WAAA,CAAAhX,CAAA,MAAAiX,OAAA,GAAAD,WAAA,CAAA/W,CAAA,IAAAC,IAAA,GAA+B;MAAA,IAAnB8D,IAAI,GAAAiT,OAAA,CAAAha,KAAA;MACd,IAAMgH,EAAE,GAAGC,aAAa,CAACF,IAAI,CAAC5G,KAAK,CAAC;MACpC,IAAM8Z,QAAQ,GAAG3T,GAAG,CAACnG,KAAK,CAAC6G,EAAE,CAAC;MAE9B,IAAKiT,QAAQ,IAAIlT,IAAI,CAACxG,OAAO,EAAG;QAC9B+F,GAAG,GAAGA,GAAG,CAAC/F,OAAO,CAACyG,EAAE,EAAED,IAAI,CAACxG,OAAO,CAAC;QAEnCiI,KAAK,GAAG,IAAI;QACZ,IAAK,CAACzB,IAAI,CAAC3F,eAAe,EAAG;UAC3B;QACF;MACF;IACF;EAAC,SAAA8F,GAAA;IAAA6S,WAAA,CAAA1W,CAAA,CAAA6D,GAAA;EAAA;IAAA6S,WAAA,CAAAzW,CAAA;EAAA;EAED,IAAK,CAACkF,KAAK,IAAIsR,SAAS,EAAG;IACzBxT,GAAG,GAAGwT,SAAS,CAACxT,GAAG,EAAEqT,UAAU,CAAC;EAClC;EAEA,IAAK7U,KAAK,EAAG;IACXA,KAAK,CAACoB,GAAG,CAAC,GAAGI,GAAG;EAClB;EAEA,OAAOA,GAAG;AACZ;AAEA,SAAS4R,WAAWA,CAAC0B,QAAQ,EAAEzZ,KAAK,EAAEI,OAAO,EAAElC,MAAM,EAAE+C,eAAe,EAAE;EACtEjB,KAAK,GAAGnB,aAAa,CAAC9E,WAAW,CAACiG,KAAK,CAAC,CAAC;EAEzCyZ,QAAQ,CAACtO,IAAI,CAAC;IACZnL,KAAK,EAALA,KAAK;IACLI,OAAO,EAAPA,OAAO;IACPlC,MAAM,EAANA,MAAM;IACN+C,eAAe,EAAfA,eAAe;IACf8Y,WAAW,EAAEN,QAAQ,CAAC7b;EACxB,CAAC,CAAC;;EAEF;EACA6b,QAAQ,CAAC1P,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC,EAAK;IACtB,IAAM+P,GAAG,GAAG/P,CAAC,CAAC/L,MAAM,GAAG8L,CAAC,CAAC9L,MAAM;IAE/B,IAAK8b,GAAG,EAAG;MACT,OAAOA,GAAG;IACZ;IAEA,OAAOhQ,CAAC,CAAC+P,WAAW,GAAG9P,CAAC,CAAC8P,WAAW;EACtC,CAAC,CAAC;AACJ;;AAEA;AACA,IAAME,UAAU,GAAG,CAAC,CAAC;AAErB,SAASpb,aAAaA,CAACqb,KAAK,EAAE;EAC5B,OAAOA,KAAK,CAACC,MAAM;AACrB;AAEA,SAASrT,aAAaA,CAACsT,GAAG,EAAE;EAC1B,IAAIjU,GAAG,GAAG8T,UAAU,CAACG,GAAG,CAAC;EAEzB,IAAK,CAACjU,GAAG,EAAG;IACVA,GAAG,GAAG,IAAIwD,MAAM,CAACyQ,GAAG,CAAC;IACrBH,UAAU,CAACG,GAAG,CAAC,GAAGjU,GAAG;EACvB;EAEA,OAAOA,GAAG;AACZ;AAEA,SAAS2K,MAAMA,CAACxL,OAAO,EAAE+U,MAAM,EAAE;EAC/B,QAAQA,MAAM;IACd,KAAKzd,OAAO,CAACE,aAAa;MAAE;QAC1B,OAAOlB,gBAAgB,CAAC0J,OAAO,CAAC;MAClC;IACA,KAAK1I,OAAO,CAACC,aAAa;MAAE;QAC1B,OAAOlB,gBAAgB,CAAC2J,OAAO,CAAC;MAClC;IACA,KAAK1I,OAAO,CAACG,OAAO;MAAE;QACpB,OAAO,CAAC,CAACud,OAAO,CAAChV,OAAO,CAAC;MAC3B;IACA,KAAK1I,OAAO,CAACI,UAAU;MAAE;QACvB,OAAO,CAACsd,OAAO,CAAChV,OAAO,CAAC;MAC1B;IACA,KAAK1I,OAAO,CAACK,YAAY;MAAE;QACzB,OAAO,CAACsd,SAAS,CAACjV,OAAO,CAAC;MAC5B;IACA,KAAK1I,OAAO,CAACM,aAAa;MAAE;QAC1B,OAAOoI,OAAO,CAACkV,cAAc;MAC/B;IACA,KAAK5d,OAAO,CAACO,mBAAmB;MAAE;QAChC,OAAOmI,OAAO,eAAe,CAACzM,SAAS,CAAC,CAACyP,IAAI,CAAC,UAACzF,CAAC;UAAA,OAAKA,CAAC,CAAC6V,QAAQ,CAACza,IAAI,KAAKpC,oBAAoB;QAAA,EAAC;MAChG;IACA,KAAKe,OAAO,CAACQ,KAAK;MAAE;QAClB,OAAOqd,WAAW,CAACnV,OAAO,CAAC;MAC7B;IACA,KAAK1I,OAAO,CAACS,YAAY;MAAE;QACzB,OAAO,CAACiI,OAAO,CAAC,sBAAsB,CAAC;MACzC;IACA,KAAK1I,OAAO,CAACU,wBAAwB;MAAE;QACrC,OAAO,CAACgI,OAAO,CAAC,uBAAuB,CAAC;MAC1C;IACA;MACE,OAAO,KAAK;EACd;AACF;;AAEA;AACA,OAAO,SAASmV,WAAWA,CAACnV,OAAO,EAAE;EAAA,IAAAoV,oBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA,EAAAC,qBAAA;EACnC,IAAMC,eAAe,GAAG,CAAC,EAAAL,oBAAA,GAAApV,OAAO,CAAC,sBAAsB,CAAC,CAACnM,UAAU,CAAC6hB,OAAO,CAAC,cAAAN,oBAAA,uBAAnDA,oBAAA,CAAqDO,eAAe,KAAI,EAAE,EAAErS,QAAQ,CAAC,KAAK,CAAC;EACpH,IAAMsS,mBAAmB,GAAG,CAAC,EAAAP,qBAAA,GAAArV,OAAO,CAAC,sBAAsB,CAAC,CAACnM,UAAU,CAACgiB,OAAO,CAAC,cAAAR,qBAAA,uBAAnDA,qBAAA,CAAqDM,eAAe,KAAI,EAAE,EAAErS,QAAQ,CAAC,KAAK,CAAC;EACxH,IAAMwS,cAAc,GAAG,CAAC,EAAAR,qBAAA,GAAAtV,OAAO,CAAC,sBAAsB,CAAC,CAACtM,OAAO,CAACqiB,GAAG,CAAC,cAAAT,qBAAA,uBAA5CA,qBAAA,CAA8CK,eAAe,KAAI,EAAE,EAAErS,QAAQ,CAAC,KAAK,CAAC;EAC5G,IAAM0S,WAAW,GAAG,CAAC,EAAAT,qBAAA,GAAAvV,OAAO,CAAC,sBAAsB,CAAC,CAACtM,OAAO,CAACuiB,YAAY,CAAC,cAAAV,qBAAA,uBAArDA,qBAAA,CAAuDI,eAAe,KAAI,EAAE,EAAErS,QAAQ,CAAC,KAAK,CAAC;EAClH,IAAM4S,oBAAoB,GAAG,CAAC,EAAAV,qBAAA,GAAAxV,OAAO,CAAC,sBAAsB,CAAC,CAACtM,OAAO,CAACyiB,SAAS,CAAC,cAAAX,qBAAA,uBAAlDA,qBAAA,CAAoDG,eAAe,KAAI,EAAE,EAAErS,QAAQ,CAAC,KAAK,CAAC;EAExH,OAAOmS,eAAe,IAAIG,mBAAmB,IAAIE,cAAc,IAAIE,WAAW,IAAIE,oBAAoB;AACxG;AAEA,SAAS7F,iBAAiBA,CAACjQ,MAAM,EAAE8M,OAAO,EAAE;EAC1C,IAAMpM,UAAU,GAAGV,MAAM,CAACU,UAAU,IAAI,CAAC,CAAC;EAC1C,IAAMyL,OAAO,GAAGzL,UAAU,CAACyL,OAAO,IAAI,EAAE;EAExC,OAAOrY,MAAM,CAACqY,OAAO,EAAE,MAAM,EAAEW,OAAO,CAAC;AACzC;AAEA,SAASU,eAAeA,CAACpB,GAAG,EAAE;EAC5B;EACA;EACA;EACA,IAAMjS,KAAK,GAAGiS,GAAG,CAACvS,KAAK,CAACkM,UAAU,CAAC,GAAG,CAAC,OAAA1M,MAAA,CAAQ+S,GAAG,CAACvS,KAAK,IAAMuS,GAAG,CAACvS,KAAK;EACvE,IAAM8I,KAAK,GAAGxI,KAAK,CAACG,KAAK,CAACrD,WAAW,CAAC;EAEtC,IAAI0L,KAAK,IAAIA,KAAK,CAACzK,MAAM,KAAK,CAAC,EAAE;IAC/B,IAAM8d,UAAU,GAAGC,QAAQ,CAACtT,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAEzC,OAAO,UAACuT,GAAG;MAAA,IAAAC,aAAA;MAAA,QAAAA,aAAA,GAAKD,GAAG,CAAClD,QAAQ,cAAAmD,aAAA,gBAAAA,aAAA,GAAZA,aAAA,CAAcC,MAAM,cAAAD,aAAA,uBAApBA,aAAA,CAAuBH,UAAU,CAAC;IAAA;EACpD;EAEA,OAAO7b,KAAK;AACd;;AAEA;AACA,SAAS0a,SAASA,CAACjV,OAAO,EAAE;EAAA,IAAAyW,eAAA;EAC1B,IAAM9Q,OAAO,GAAG3F,OAAO,CAAC,gBAAgB,CAAC;EAEzC,OAAO,CAAC,EAAC2F,OAAO,aAAPA,OAAO,gBAAA8Q,eAAA,GAAP9Q,OAAO,CAAE+Q,MAAM,cAAAD,eAAA,eAAfA,eAAA,CAAiBE,YAAY;AACxC;AAEA,SAAS9K,UAAUA,CAAC1L,WAAW,EAAE/H,MAAM,EAAEwe,IAAI,EAAEhL,OAAO,EAAE;EAAA,IAAAiL,WAAA,GAAAxZ,0BAAA,CAChCuO,OAAO;IAAAkL,OAAA;EAAA;IAA7B,KAAAD,WAAA,CAAAvZ,CAAA,MAAAwZ,OAAA,GAAAD,WAAA,CAAAtZ,CAAA,IAAAC,IAAA,GAAgC;MAAA,IAApBuZ,MAAM,GAAAD,OAAA,CAAAvc,KAAA;MAChB,IAAM6F,MAAM,GAAGD,WAAW,IAAA1G,MAAA,CAAKrB,MAAM,gBAAc,CAAC2e,MAAM,CAAC;MAC3D,IAAMC,IAAI,GAAGJ,IAAI,CAACjW,WAAW,CAAC,CAAC;MAC/B,IAAMsW,iBAAiB,GAAG7W,MAAM,CAAC6W,iBAAiB,IAAI,EAAE;MACxD,IAAMtB,eAAe,GAAGvV,MAAM,CAACuV,eAAe,IAAI,EAAE;MACpD,IAAMuB,IAAI,GAAG,GAAAzd,MAAA,CAAAwR,kBAAA,CAAIgM,iBAAiB,GAAAhM,kBAAA,CAAK0K,eAAe,GAAEhU,GAAG,CAAC,UAACC,CAAC;QAAA,OAAKA,CAAC,CAACjB,WAAW,CAAC,CAAC;MAAA,EAAC;MAEnF,IAAK,CAACuW,IAAI,CAAC5T,QAAQ,CAAC0T,IAAI,CAAC,IAAI,CAACE,IAAI,CAAC5T,QAAQ,YAAA7J,MAAA,CAAaud,IAAI,CAAG,CAAC,EAAG;QACjE,OAAO,KAAK;MACd;IACF;EAAC,SAAAvV,GAAA;IAAAoV,WAAA,CAAAjZ,CAAA,CAAA6D,GAAA;EAAA;IAAAoV,WAAA,CAAAhZ,CAAA;EAAA;EAED,OAAO,IAAI;AACb;;AAEA;AACA,OAAO,SAASmX,OAAOA,CAAChV,OAAO,EAAE;EAAA,IAAAmX,qBAAA;EAC/B,IAAMpT,SAAS,IAAAoT,qBAAA,GAAGnX,OAAO,CAAC,gBAAgB,CAAC,cAAAmX,qBAAA,uBAAzBA,qBAAA,CAA2BzW,EAAE;EAE/C,IAAK,CAACqD,SAAS,EAAG;IAChB,OAAO,IAAI;EACb;EAEA,IAAMqT,OAAO,GAAGpX,OAAO,CAAC,kBAAkB,CAAC;EAC3C,IAAMqX,UAAU,GAAG,EAAE;EACrB,IAAIC,WAAW,GAAG,IAAI;EAAC,IAAAC,WAAA,GAAAla,0BAAA,CAEF+Z,OAAO;IAAAI,OAAA;EAAA;IAA5B,KAAAD,WAAA,CAAAja,CAAA,MAAAka,OAAA,GAAAD,WAAA,CAAAha,CAAA,IAAAC,IAAA,GAA8B;MAAA,IAAnBuN,MAAM,GAAAyM,OAAA,CAAAjd,KAAA;MACf,IAAAkd,aAAA,GAAmB1M,MAAM,CAACrJ,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;QAAAgW,cAAA,GAAAnR,cAAA,CAAAkR,aAAA;QAAlCzd,IAAI,GAAA0d,cAAA;QAAEhX,EAAE,GAAAgX,cAAA;MAEf,IAAI1d,IAAI,KAAK,SAAS,EAAE;QACtB,IAAIsd,WAAW,KAAK,IAAI,EAAE;UACxB;UACA,OAAO,IAAI;QACb;QACAA,WAAW,GAAG5W,EAAE;MAClB,CAAC,MAAM,IAAI1G,IAAI,KAAK,IAAI,EAAE;QACxBqd,UAAU,CAACxR,IAAI,CAACnF,EAAE,CAAC;MACrB,CAAC,MAAM;QACL;QACA,OAAO,IAAI;MACb;IACF;;IAEA;EAAA,SAAAe,GAAA;IAAA8V,WAAA,CAAA3Z,CAAA,CAAA6D,GAAA;EAAA;IAAA8V,WAAA,CAAA1Z,CAAA;EAAA;EACA,IAAI,CAACyZ,WAAW,EAAE;IAChB,OAAO,IAAI;EACb;;EAEA;EACA;EACA,IAAMtC,OAAO,GAAGhV,OAAO,CAAC,iBAAiB,CAAC,CAACnM,UAAU,CAAC4D,OAAO,KAAAgC,MAAA,CAAMsK,SAAS,OAAAtK,MAAA,CAAM6d,WAAW,CAAG,CAAC;;EAEjG;EACA,IAAID,UAAU,CAAC/e,MAAM,KAAK,CAAC,EAAE;IAC3B,OAAO0c,OAAO;EAChB;;EAEA;EACA,IAAM2C,eAAe,GAAG3C,OAAO,CAACqC,UAAU,CAACO,MAAM,CAAC,UAAC1N,CAAC,EAAE2N,EAAE,EAAK;IAC3D3N,CAAC,CAAC2N,EAAE,CAACzE,QAAQ,CAACza,IAAI,CAAC,GAAG,IAAI;IAE1B,OAAOuR,CAAC;EACV,CAAC,EAAE,CAAC,CAAC,CAAC;;EAEN;EACA,IAAMnH,KAAK,GAAGsU,UAAU,CAACO,MAAM,CAAC,UAACE,KAAK,EAAED,EAAE,EAAK;IAC7C,OAAOF,eAAe,CAACE,EAAE,CAAC,GAAGC,KAAK,GAAG,CAAC,GAAG,CAAC;EAC5C,CAAC,EAAE,CAAC,CAAC;EAEL,IAAI/U,KAAK,KAAKsU,UAAU,CAAC/e,MAAM,EAAE;IAC/B,OAAO,IAAI;EACb;EAEA,OAAO0c,OAAO;AAChB;AAEA,SAASjH,SAASA,CAAC7P,KAAK,EAAEgC,SAAS,EAAEa,IAAI,EAAEN,GAAG,EAAEsX,QAAQ,EAAE;EACxD,IAAM1Y,KAAK,GAAGnB,KAAK,CAACmB,KAAK,CAAC0B,IAAI,CAAC;EAE/B,IAAK1B,KAAK,CAACoB,GAAG,CAAC,KAAKlI,SAAS,EAAG;IAC9B,OAAO8G,KAAK,CAACoB,GAAG,CAAC;EACnB;;EAEA;EACA,IAAI,CAAC,CAACP,SAAS,CAACvD,OAAO,CAACqb,UAAU,CAACjX,IAAI,EAAEN,GAAG,CAAC,EAAE;IAC7CpB,KAAK,CAACoB,GAAG,CAAC,GAAG,IAAI;IAEjB,OAAOpB,KAAK,CAACoB,GAAG,CAAC;EACnB;;EAEA;EACA,IAAI;IACFsX,QAAQ,CAACtX,GAAG,CAAC;IACbpB,KAAK,CAACoB,GAAG,CAAC,GAAG,IAAI;EACnB,CAAC,CAAC,OAAO7C,CAAC,EAAE;IACVyB,KAAK,CAACoB,GAAG,CAAC,GAAG,KAAK;EACpB;EAEA,OAAOpB,KAAK,CAACoB,GAAG,CAAC;AACnB;AAEA,SAASqO,aAAaA,CAAC5O,SAAS,EAAEa,IAAI,EAAEN,GAAG,EAAEsX,QAAQ,EAAE;EACrD,IAAME,GAAG,GAAG/X,SAAS,CAACvD,OAAO,CAACqb,UAAU,CAACjX,IAAI,EAAEN,GAAG,CAAC;EAEnD,IAAIwX,GAAG,EAAE;IACP,IAAI,OAAOA,GAAG,KAAK,UAAU,EAAE;MAC7B,OAAOA,GAAG;IACZ;IAEA,OAAO;MAAA,OAAMA,GAAG;IAAA;EAClB;EAEA,OAAOF,QAAQ,CAACtX,GAAG,CAAC;AACtB","ignoreList":[]}]}