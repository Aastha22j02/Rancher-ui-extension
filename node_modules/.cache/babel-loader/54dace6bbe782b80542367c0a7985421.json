{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/CatalogLoadDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/CatalogLoadDialog.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapGetters","isEmpty","CATALOG","SECRET","SERVICE","WORKLOAD_TYPES","UI_PLUGIN_LABELS","UI_PLUGIN_NAMESPACE","TYPES","SECRET_TYPES","allHash","ResourceManager","AsyncButton","LabeledSelect","Loading","Banner","LabeledInput","DEFAULT_DEPLOYMENT","type","DEPLOYMENT","metadata","name","namespace","labels","spec","replicas","selector","matchLabels","template","containers","image","imagePullPolicy","imagePullSecrets","restartPolicy","DEFAULT_SERVICE","_defineProperty","CATALOG_IMAGE","ports","port","protocol","targetPort","DEFAULT_REPO","CLUSTER_REPO","url","initialState","deploymentValues","structuredClone","serviceValues","repoValues","canModifyName","canModifyImage","imagePullNamespacedSecrets","extensionUrl","extensionDeployment","extensionSvc","extensionRepo","extensionCrd","components","mixins","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hash","wrap","_callee$","_context","prev","next","$store","getters","deployments","dispatch","services","secondaryResourceData","secondaryResourceDataConfig","resourceManagerFetchSecondaryResources","stop","data","_objectSpread","computed","allRepos","namespacedDeployments","filter","dep","namespacedServices","svc","methods","applyTo","var","parsingFunc","secret","_type","DOCKER","DOCKER_JSON","showDialog","$modal","show","closeDialog","result","hide","$emit","Object","assign","$data","loadImage","btnCb","_this2","_callee2","_callee2$","_context2","extractImageName","loadDeployment","loadService","loadRepo","title","t","message","timeout","root","Error","t0","handleGrowlError","_this3","_callee3","exists","error","_callee3$","_context3","find","parseDeploymentValues","sent","save","_statusText","_this4","_callee4","serviceName","serviceResource","_callee4$","_context4","concat","abrupt","parseServiceValues","id","clusterIP","t1","_this5","_callee5","chartName","_callee5$","_context5","repo","clean","parseRepoValues","out","$set","addLabel","addTo","assignLabels","length","map","source","args","i","path","split","currentObj","j","extractImageVersion","regex","matches","exec","remove","e","arguments","undefined"],"sources":["node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/CatalogLoadDialog.vue"],"sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { CATALOG, SECRET, SERVICE, WORKLOAD_TYPES } from '@shell/config/types';\nimport { UI_PLUGIN_LABELS, UI_PLUGIN_NAMESPACE } from '@shell/config/uiplugins';\nimport { TYPES as SECRET_TYPES } from '@shell/models/secret';\nimport { allHash } from '@shell/utils/promise';\n\nimport ResourceManager from '@shell/mixins/resource-manager';\n\nimport AsyncButton from '@shell/components/AsyncButton';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport Loading from '@shell/components/Loading.vue';\nimport { Banner } from '@components/Banner';\nimport { LabeledInput } from '@components/Form/LabeledInput';\n\nconst DEFAULT_DEPLOYMENT = {\n  type:     WORKLOAD_TYPES.DEPLOYMENT,\n  metadata: {\n    name:      '',\n    namespace: UI_PLUGIN_NAMESPACE,\n    labels:    {}\n  },\n  spec: {\n    replicas: 1,\n    selector: { matchLabels: {} },\n    template: {\n      metadata: {\n        namespace: UI_PLUGIN_NAMESPACE,\n        labels:    {}\n      },\n      spec: {\n        containers: [\n          {\n            image:           '',\n            imagePullPolicy: 'Always',\n            name:            'container-0'\n          }\n        ],\n        imagePullSecrets: [],\n        restartPolicy:    'Always'\n      }\n    }\n  }\n};\n\nconst DEFAULT_SERVICE = {\n  type:     SERVICE,\n  metadata: {\n    name:      '',\n    namespace: UI_PLUGIN_NAMESPACE,\n    labels:    { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: '' }\n  },\n  spec: {\n    ports: [\n      {\n        name:       '',\n        port:       8080,\n        protocol:   'TCP',\n        targetPort: 8080\n      }\n    ],\n    selector: { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: '' },\n    type:     'ClusterIP'\n  }\n};\n\nconst DEFAULT_REPO = {\n  type:     CATALOG.CLUSTER_REPO,\n  metadata: {\n    name:   '',\n    labels: { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: '' }\n  },\n  spec: { url: null }\n};\n\nconst initialState = () => {\n  const deploymentValues = structuredClone(DEFAULT_DEPLOYMENT);\n  const serviceValues = structuredClone(DEFAULT_SERVICE);\n  const repoValues = structuredClone(DEFAULT_REPO);\n\n  return {\n    deploymentValues,\n    serviceValues,\n    repoValues,\n    canModifyName:              true,\n    canModifyImage:             true,\n    imagePullSecrets:           [],\n    imagePullNamespacedSecrets: [],\n    extensionUrl:               null,\n    extensionDeployment:        null,\n    extensionSvc:               null,\n    extensionRepo:              null,\n    extensionCrd:               null\n  };\n};\n\nexport default {\n  components: {\n    AsyncButton, Banner, LabeledInput, Loading, LabeledSelect\n  },\n\n  mixins: [ResourceManager],\n\n  async fetch() {\n    const hash = {};\n\n    if ( this.$store.getters['management/canList'](WORKLOAD_TYPES.DEPLOYMENT) ) {\n      hash.deployments = this.$store.dispatch('management/findAll', { type: WORKLOAD_TYPES.DEPLOYMENT });\n    }\n\n    if ( this.$store.getters['management/canList'](SERVICE) ) {\n      hash.services = this.$store.dispatch('management/findAll', { type: SERVICE });\n    }\n\n    await allHash(hash);\n\n    this.secondaryResourceData = this.secondaryResourceDataConfig();\n    this.resourceManagerFetchSecondaryResources(this.secondaryResourceData);\n  },\n\n  data() {\n    return {\n      ...initialState(),\n      secondaryResourceData: null\n    };\n  },\n\n  computed: {\n    ...mapGetters({ allRepos: 'catalog/repos' }),\n\n    namespacedDeployments() {\n      return this.$store.getters['management/all'](WORKLOAD_TYPES.DEPLOYMENT).filter((dep) => dep.metadata.namespace === UI_PLUGIN_NAMESPACE);\n    },\n\n    namespacedServices() {\n      return this.$store.getters['management/all'](SERVICE).filter((svc) => svc.metadata.namespace === UI_PLUGIN_NAMESPACE);\n    }\n  },\n\n  methods: {\n    secondaryResourceDataConfig() {\n      return {\n        namespace: UI_PLUGIN_NAMESPACE,\n        data:      {\n          [SECRET]: {\n            applyTo: [\n              {\n                var:         'imagePullNamespacedSecrets',\n                parsingFunc: (data) => {\n                  return data.filter((secret) => (secret._type === SECRET_TYPES.DOCKER || secret._type === SECRET_TYPES.DOCKER_JSON));\n                }\n              }\n            ]\n          }\n        }\n      };\n    },\n\n    showDialog() {\n      this.$modal.show('catalogLoadDialog');\n    },\n\n    closeDialog(result) {\n      this.$modal.hide('catalogLoadDialog');\n      this.$emit('closed', result);\n\n      // Reset state\n      Object.assign(this.$data, initialState());\n      this.secondaryResourceData = this.secondaryResourceDataConfig();\n      this.resourceManagerFetchSecondaryResources(this.secondaryResourceData);\n    },\n\n    async loadImage(btnCb) {\n      try {\n        if (!isEmpty(this.deploymentValues.spec.template.spec.containers[0].image)) {\n          const image = this.deploymentValues.spec.template.spec.containers[0].image;\n          const name = this.extractImageName(image);\n\n          if (name) {\n            // Create deployment\n            await this.loadDeployment(image, name, btnCb);\n\n            if (this.extensionDeployment) {\n              // Create service\n              await this.loadService(name, btnCb);\n            }\n\n            if (this.extensionSvc) {\n              // Create helm repo\n              await this.loadRepo(name, btnCb);\n            }\n\n            if (this.extensionRepo) {\n              btnCb(true);\n              this.closeDialog();\n              this.$store.dispatch('growl/success', {\n                title:   this.t('plugins.manageCatalog.imageLoad.success.title', { name }),\n                message: this.t('plugins.manageCatalog.imageLoad.success.message'),\n                timeout: 4000,\n              }, { root: true });\n              this.$emit('refresh');\n            }\n          } else {\n            throw new Error('Unable to determine image name');\n          }\n        }\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n      }\n    },\n\n    async loadDeployment(image, name, btnCb) {\n      const exists = this.namespacedDeployments.find((dep) => dep.spec.template.spec.containers[0].image === image);\n\n      if (!exists) {\n        // Sets deploymentValues with name, labels, and imagePullSecrets\n        const deploymentValues = this.parseDeploymentValues(name);\n\n        this.extensionDeployment = await this.$store.dispatch('management/create', deploymentValues);\n\n        try {\n          await this.extensionDeployment.save();\n        } catch (e) {\n          this.handleGrowlError(e, true);\n          btnCb(false);\n        }\n      } else {\n        const error = {\n          _statusText: this.t('plugins.manageCatalog.imageLoad.error.exists.deployment.title'),\n          message:     this.t('plugins.manageCatalog.imageLoad.error.exists.deployment.message', { image })\n        };\n\n        this.handleGrowlError(error);\n        btnCb(false);\n      }\n    },\n\n    async loadService(name, btnCb) {\n      const serviceName = `${ name }-svc`;\n      const exists = this.namespacedServices.find((svc) => svc.metadata.name === serviceName);\n\n      if (exists) {\n        const error = {\n          _statusText: this.t('plugins.manageCatalog.imageLoad.error.exists.service.title'),\n          message:     this.t('plugins.manageCatalog.imageLoad.error.exists.service.message', { svc: serviceName })\n        };\n\n        this.handleGrowlError(error, true);\n        btnCb(false);\n\n        return;\n      }\n\n      // Sets serviceValues with name, label, and selector\n      const serviceValues = this.parseServiceValues(name, serviceName);\n      const serviceResource = await this.$store.dispatch('management/create', serviceValues);\n\n      try {\n        await serviceResource.save();\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n\n        return;\n      }\n\n      try {\n        this.extensionSvc = await this.$store.dispatch('management/find', {\n          type:      SERVICE,\n          id:        `${ UI_PLUGIN_NAMESPACE }/${ serviceResource.metadata.name }`,\n          namespace: UI_PLUGIN_NAMESPACE\n        });\n\n        if (this.extensionSvc) {\n          this.extensionUrl = `http://${ this.extensionSvc.spec.clusterIP }:${ this.extensionSvc.spec.ports[0].port }`;\n        } else {\n          throw new Error('Error fetching extension service');\n        }\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n      }\n    },\n\n    async loadRepo(name, btnCb) {\n      const chartName = `${ name }-charts`;\n      const exists = this.allRepos.find((repo) => repo.metadata.name === chartName);\n\n      if (exists) {\n        const error = {\n          _statusText: this.t('plugins.manageCatalog.imageLoad.error.exists.repo.title'),\n          message:     this.t('plugins.manageCatalog.imageLoad.error.exists.repo.message', { repo: chartName })\n        };\n\n        this.handleGrowlError(error);\n        btnCb(false);\n        this.clean();\n\n        return;\n      }\n\n      // Set repoValues with name, label, and url\n      const repoValues = this.parseRepoValues(chartName);\n\n      this.extensionRepo = await this.$store.dispatch('management/create', repoValues);\n\n      try {\n        await this.extensionRepo.save();\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n      }\n    },\n\n    parseDeploymentValues(name) {\n      let out = {};\n\n      this.$set(this.deploymentValues.metadata, 'name', name);\n\n      const addLabel = { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: name };\n      const addTo = ['metadata.labels', 'spec.selector.matchLabels', 'spec.template.metadata.labels'];\n\n      // Populates workloadselector labels\n      out = this.assignLabels(this.deploymentValues, addLabel, addTo);\n\n      if (this.imagePullSecrets.length) {\n        out.spec.template.spec.imagePullSecrets = this.imagePullSecrets.map((secret) => {\n          return { name: secret };\n        });\n      }\n\n      return out;\n    },\n\n    parseServiceValues(name, serviceName) {\n      const out = this.serviceValues;\n\n      out.metadata.name = serviceName;\n      out.metadata.labels[UI_PLUGIN_LABELS.CATALOG_IMAGE] = name;\n      out.spec.selector[UI_PLUGIN_LABELS.CATALOG_IMAGE] = name;\n\n      return out;\n    },\n\n    parseRepoValues(chartName) {\n      const out = this.repoValues;\n\n      out.metadata.name = chartName;\n      out.metadata.labels[UI_PLUGIN_LABELS.CATALOG_IMAGE] = this.deploymentValues.metadata.name;\n      out.spec.url = this.extensionUrl;\n\n      return out;\n    },\n\n    assignLabels(source, labels, args) {\n      for (let i = 0; i < args.length; i++) {\n        const path = args[i].split('.');\n        let currentObj = source;\n\n        for (let j = 0; j < path.length - 1; j++) {\n          currentObj = currentObj[path[j]];\n        }\n\n        currentObj[path[path.length - 1]] = labels;\n      }\n\n      return source;\n    },\n\n    extractImageVersion(image) {\n      // Returns the version number with optional pre-release identifiers\n      const regex = /:(\\d+\\.\\d+\\.\\d+([-\\w\\d]+)*)$/;\n      const matches = regex.exec(image);\n\n      if (matches) {\n        return matches[1];\n      }\n\n      return null;\n    },\n\n    extractImageName(image) {\n      // Returns the name within the image that prefixes the version number\n      const regex = /\\/([^/:]+)(?::\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9]+)?|$)/;\n      const matches = regex.exec(image);\n\n      if (matches) {\n        return matches[1];\n      }\n\n      return null;\n    },\n\n    clean() {\n      // Remove failed resources\n      if (this.extensionDeployment) {\n        this.extensionDeployment.remove();\n      }\n      if (this.extensionSvc) {\n        this.extensionSvc.remove();\n      }\n      if (this.extensionRepo) {\n        this.extensionRepo.remove();\n      }\n    },\n\n    handleGrowlError(e, clean = false) {\n      const error = e?.data || e;\n\n      this.$store.dispatch('growl/error', {\n        title:   error._statusText,\n        message: error.message,\n        timeout: 5000,\n      }, { root: true });\n\n      if (clean) {\n        this.clean();\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <modal\n    name=\"catalogLoadDialog\"\n    height=\"auto\"\n    :scrollable=\"true\"\n    @closed=\"closeDialog()\"\n  >\n    <Loading\n      v-if=\"$fetchState.loading\"\n      mode=\"relative\"\n    />\n    <div\n      v-else\n      class=\"plugin-install-dialog\"\n    >\n      <template>\n        <div>\n          <h4>\n            {{ t('plugins.manageCatalog.imageLoad.load') }}\n          </h4>\n          <p>\n            {{ t('plugins.manageCatalog.imageLoad.prompt') }}\n          </p>\n\n          <div class=\"custom mt-10\">\n            <Banner\n              color=\"info\"\n              :label=\"t('plugins.manageCatalog.imageLoad.banner')\"\n              class=\"mt-10\"\n            />\n          </div>\n\n          <div class=\"custom mt-10\">\n            <div class=\"fields\">\n              <LabeledInput\n                v-model.trim=\"deploymentValues.spec.template.spec.containers[0].image\"\n                label-key=\"plugins.manageCatalog.imageLoad.fields.image.label\"\n                placeholder-key=\"plugins.manageCatalog.imageLoad.fields.image.placeholder\"\n              />\n            </div>\n          </div>\n          <div class=\"custom mt-10\">\n            <div class=\"fields\">\n              <LabeledSelect\n                v-model=\"imagePullSecrets\"\n                :label=\"t('plugins.manageCatalog.imageLoad.fields.imagePullSecrets.label')\"\n                :tooltip=\"t('plugins.manageCatalog.imageLoad.fields.imagePullSecrets.tooltip')\"\n                :multiple=\"true\"\n                :taggable=\"true\"\n                :options=\"imagePullNamespacedSecrets\"\n                option-label=\"metadata.name\"\n                :reduce=\"service => service.metadata.name\"\n              />\n              <Banner\n                color=\"warning\"\n                class=\"mt-10\"\n              >\n                <span v-clean-html=\"t('plugins.manageCatalog.imageLoad.fields.secrets.banner', {}, true)\" />\n              </Banner>\n            </div>\n          </div>\n        </div>\n      </template>\n\n      <div class=\"custom mt-10\">\n        <div class=\"fields\">\n          <div class=\"dialog-buttons mt-20\">\n            <button\n              class=\"btn role-secondary\"\n              data-testid=\"image-load-ext-modal-cancel-btn\"\n              @click=\"closeDialog()\"\n            >\n              {{ t('generic.cancel') }}\n            </button>\n            <AsyncButton\n              mode=\"load\"\n              data-testid=\"image-load-ext-modal-install-btn\"\n              @click=\"loadImage\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </modal>\n</template>\n\n<style lang=\"scss\" scoped>\n  .plugin-install-dialog {\n    padding: 10px;\n\n    h4 {\n      font-weight: bold;\n    }\n\n    .dialog-panel {\n      display: flex;\n      flex-direction: column;\n      min-height: 100px;\n\n      p {\n        margin-bottom: 5px;\n      }\n\n      .dialog-info {\n        flex: 1;\n      }\n    }\n\n    .dialog-buttons {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 10px;\n\n      > *:not(:last-child) {\n        margin-right: 10px;\n      }\n    }\n  }\n</style>\n"],"mappings":"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","ignoreList":[]}]}