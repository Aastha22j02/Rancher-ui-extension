{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/models/workload.service.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/workload.service.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["findBy","TARGET_WORKLOADS","UI_MANAGED","HCI","HCI_LABELS_ANNOTATIONS","WORKLOAD_TYPES","SERVICE","clone","get","SteveModel","shortenedImage","WorkloadService","_SteveModel","_classCallCheck","_callSuper","arguments","_inherits","_createClass","key","value","_getPortsWithServiceType","_asyncToGenerator","_regeneratorRuntime","mark","_callee","ports","canAccessServices","services","clusterIPServicePorts","loadBalancerServicePorts","nodePortServicePorts","wrap","_callee$","_context","prev","next","containers","forEach","container","push","apply","_toConsumableArray","initContainers","$getters","getServicesOwned","t0","sent","length","svc","_svc$spec","_svc$spec2","_svc$spec3","spec","type","port","name","concat","containerPort","protocol","toLowerCase","hostPort","_listeningPort","_serviceType","portSpec","nodePort","abrupt","stop","getPortsWithServiceType","_getServicesOwned","_callee2","force","normanTypes","selectorKey","normanSelectorValue","steveSelectorValue","allSvc","_args2","_callee2$","_context2","undefined","_defineProperty","REPLICA_SET","DEPLOYMENT","STATEFUL_SET","DAEMON_SET","Object","keys","workloadSelector","_type","metadata","namespace","$dispatch","opt","root","filter","_svc$spec4","_svc$spec5","selector","images","CRON_JOB","includes","image","map","jobTemplate","template","_servicesFromContainerPorts","_callee3","mode","ownerRef","annotations","clusterIP","loadBalancer","existing","toSave","toRemove","clusterIPProxy","nodePortProxy","loadBalancerProxy","portsWithIpam","_callee3$","_context3","apiVersion","controller","kind","uid","JSON","stringify","ownerReferences","externalTrafficPolicy","isFromNorman","service","targetPort","npPort","lbPort","id","p","_ipam","CLOUD_PROVIDER_IPAM","servicesFromContainerPorts","_x","_x2","cleanForSave","data","val","_superPropGet","__active","cleanContainerForSave","active","_init","error","default"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/models/workload.service.js"],"sourcesContent":["\nimport { findBy } from '@shell/utils/array';\nimport { TARGET_WORKLOADS, UI_MANAGED, HCI as HCI_LABELS_ANNOTATIONS } from '@shell/config/labels-annotations';\nimport { WORKLOAD_TYPES, SERVICE } from '@shell/config/types';\nimport { clone, get } from '@shell/utils/object';\nimport SteveModel from '@shell/plugins/steve/steve-class';\nimport { shortenedImage } from '@shell/utils/string';\n\nexport default class WorkloadService extends SteveModel {\n  async getPortsWithServiceType() {\n    const ports = [];\n\n    this.containers.forEach((container) => ports.push(...(container.ports || [])));\n    (this.initContainers || []).forEach((container) => ports.push(...(container.ports || [])));\n\n    // Only get services owned if we can access the service resource\n    const canAccessServices = this.$getters['schemaFor'](SERVICE);\n    const services = canAccessServices ? await this.getServicesOwned() : [];\n    const clusterIPServicePorts = [];\n    const loadBalancerServicePorts = [];\n    const nodePortServicePorts = [];\n\n    if (services.length) {\n      services.forEach((svc) => {\n        switch (svc.spec.type) {\n        case 'ClusterIP':\n          clusterIPServicePorts.push(...(svc?.spec?.ports || []));\n          break;\n        case 'LoadBalancer':\n          loadBalancerServicePorts.push(...(svc?.spec?.ports || []));\n          break;\n        case 'NodePort':\n          nodePortServicePorts.push(...(svc?.spec?.ports || []));\n          break;\n        default:\n          break;\n        }\n      });\n    }\n    ports.forEach((port) => {\n      const name = port.name ? port.name : `${ port.containerPort }${ port.protocol.toLowerCase() }${ port.hostPort || port._listeningPort || '' }`;\n\n      port.name = name;\n\n      if (port._serviceType && port._serviceType !== '') {\n        return;\n      }\n\n      if (loadBalancerServicePorts.length) {\n        const portSpec = findBy(loadBalancerServicePorts, 'name', name);\n\n        if (portSpec) {\n          port._listeningPort = portSpec.port;\n\n          port._serviceType = 'LoadBalancer';\n\n          return;\n        }\n      } if (nodePortServicePorts.length) {\n        const portSpec = findBy(nodePortServicePorts, 'name', name);\n\n        if (portSpec) {\n          port._listeningPort = portSpec.nodePort;\n\n          port._serviceType = 'NodePort';\n\n          return;\n        }\n      } if (clusterIPServicePorts.length) {\n        if (findBy(clusterIPServicePorts, 'name', name)) {\n          port._serviceType = 'ClusterIP';\n        }\n      }\n    });\n\n    return ports;\n  }\n\n  async getServicesOwned(force = false) {\n    const normanTypes = {\n      [WORKLOAD_TYPES.REPLICA_SET]:  'replicaSet',\n      [WORKLOAD_TYPES.DEPLOYMENT]:   'deployment',\n      [WORKLOAD_TYPES.STATEFUL_SET]: 'statefulSet',\n      [WORKLOAD_TYPES.DAEMON_SET]:   'daemonSet',\n    };\n    const selectorKey = Object.keys(this.workloadSelector)[0];\n\n    const normanSelectorValue =\n      `${ normanTypes[this._type ? this._type : this.type] }-${\n        this.metadata.namespace\n      }-${ this.metadata.name }`;\n\n    const steveSelectorValue = this.workloadSelector[selectorKey];\n    const allSvc = await this.$dispatch('cluster/findAll', { type: SERVICE, opt: { force } }, { root: true });\n\n    return (allSvc || []).filter((svc) => (svc.spec?.selector || {})[selectorKey] === steveSelectorValue || (svc.spec?.selector || {})[selectorKey] === normanSelectorValue );\n  }\n\n  get imageNames() {\n    let containers;\n    const images = [];\n\n    if (this.type === WORKLOAD_TYPES.CRON_JOB) {\n      containers = get(this, 'spec.jobTemplate.spec.template.spec.containers');\n    } else {\n      containers = get(this, 'spec.template.spec.containers');\n    }\n    if (containers) {\n      containers.forEach((container) => {\n        if (!images.includes(container.image)) {\n          images.push(container.image);\n        }\n      });\n    }\n\n    return images.map(shortenedImage);\n  }\n\n  get containers() {\n    if (this.type === WORKLOAD_TYPES.CRON_JOB) {\n      // cronjob pod template is nested slightly different than other types\n      const { spec: { jobTemplate: { spec: { template: { spec: { containers } } } } } } = this;\n\n      return containers;\n    }\n\n    if ( this.spec.containers ) {\n      return this.spec.containers;\n    }\n\n    const { spec:{ template:{ spec:{ containers } } } } = this;\n\n    return containers;\n  }\n\n  get initContainers() {\n    if (this.type === WORKLOAD_TYPES.CRON_JOB) {\n      // cronjob pod template is nested slightly different than other types\n      const { spec: { jobTemplate: { spec: { template: { spec: { initContainers } } } } } } = this;\n\n      return initContainers;\n    }\n\n    if (this.spec.initContainers) {\n      return this.spec.initContainers;\n    }\n\n    const { spec:{ template:{ spec:{ initContainers } } } } = this;\n\n    return initContainers;\n  }\n\n  get workloadSelector() {\n    return {\n      'workload.user.cattle.io/workloadselector': `${ this._type ? this._type : this.type }-${\n        this.metadata.namespace\n      }-${ this.metadata.name }`\n    };\n  }\n\n  // create clusterip, nodeport, loadbalancer services from container port spec\n  async servicesFromContainerPorts(mode, ports) {\n    const ownerRef = {\n      apiVersion: this.apiVersion,\n      controller: true,\n      kind:       this.kind,\n      name:       this.metadata.name,\n      uid:        this.metadata.uid\n    };\n\n    const annotations = { [TARGET_WORKLOADS]: JSON.stringify([`${ this.metadata.namespace }/${ this.metadata.name }`]), [UI_MANAGED]: 'true' };\n\n    let clusterIP = {\n      type: SERVICE,\n      spec: {\n        ports:    [],\n        selector: this.workloadSelector,\n        type:     'ClusterIP'\n      },\n      metadata: {\n        name:            this.metadata.name,\n        namespace:       this.metadata.namespace,\n        annotations,\n        ownerReferences: [ownerRef]\n      },\n    };\n\n    let nodePort = {\n      type: SERVICE,\n      spec: {\n        ports:    [],\n        selector: this.workloadSelector,\n        type:     'NodePort'\n      },\n      metadata: {\n        name:            `${ this.metadata.name }-nodeport`,\n        namespace:       this.metadata.namespace,\n        annotations,\n        ownerReferences: [ownerRef]\n      },\n    };\n\n    let loadBalancer = {\n      type: SERVICE,\n      spec: {\n        ports:                 [],\n        selector:              this.workloadSelector,\n        type:                  'LoadBalancer',\n        externalTrafficPolicy: 'Cluster'\n      },\n      metadata: {\n        name:            `${ this.metadata.name }-loadbalancer`,\n        namespace:       this.metadata.namespace,\n        annotations,\n        ownerReferences: [ownerRef]\n      },\n    };\n\n    const existing = await this.getServicesOwned(this.isFromNorman);\n\n    if (existing && existing.length) {\n      existing.forEach((service) => {\n        switch (service.spec.type) {\n        case 'ClusterIP':\n          clusterIP = service;\n          clusterIP.spec.ports = [];\n          break;\n        case 'NodePort':\n          nodePort = service;\n          nodePort.spec.ports = [];\n          break;\n        case 'LoadBalancer':\n          loadBalancer = service;\n          loadBalancer.spec.ports = [];\n          break;\n        default:\n          break;\n        }\n      });\n    }\n    ports.forEach((port) => {\n      const portSpec = {\n        name: port.name, protocol: port.protocol, port: port.containerPort, targetPort: port.containerPort\n      };\n\n      if (port._serviceType !== '') {\n        clusterIP.spec.ports.push(portSpec);\n        switch (port._serviceType) {\n        case 'NodePort': {\n          const npPort = clone(portSpec);\n\n          if (port._listeningPort) {\n            npPort.nodePort = port._listeningPort;\n          }\n          nodePort.spec.ports.push(npPort);\n          break; }\n        case 'LoadBalancer': {\n          const lbPort = clone(portSpec);\n\n          if (port._listeningPort) {\n            lbPort.port = port._listeningPort;\n          }\n          loadBalancer.spec.ports.push(lbPort);\n          break; }\n        default:\n          break;\n        }\n      }\n    });\n\n    const toSave = [];\n    const toRemove = [];\n    let clusterIPProxy;\n\n    if (clusterIP.spec.ports.length > 0) {\n      if (clusterIP.id) {\n        clusterIPProxy = clusterIP;\n      } else {\n        clusterIPProxy = await this.$dispatch(`cluster/create`, clusterIP, { root: true });\n      }\n      toSave.push(clusterIPProxy);\n    } else if (clusterIP.id) {\n      toRemove.push(clusterIP);\n    }\n\n    if (nodePort.spec.ports.length > 0) {\n      let nodePortProxy;\n\n      // if id is defined it's a preexisting service\n      if (nodePort.id) {\n        nodePortProxy = nodePort;\n      } else {\n        nodePortProxy = await this.$dispatch(`cluster/create`, nodePort, { root: true });\n      }\n      toSave.push(nodePortProxy);\n      // if id defined but no ports, the service already exists but should be removed (user has removed all container ports mapping to it)\n    } else if (nodePort.id) {\n      toRemove.push(nodePort);\n    }\n\n    if (loadBalancer.spec.ports.length > 0) {\n      let loadBalancerProxy;\n\n      if (loadBalancer.id) {\n        loadBalancerProxy = loadBalancer;\n      } else {\n        loadBalancerProxy = await this.$dispatch(`cluster/create`, loadBalancer, { root: true });\n      }\n\n      const portsWithIpam = ports.filter((p) => p._ipam) || [];\n\n      if (portsWithIpam.length > 0) {\n        loadBalancerProxy.metadata.annotations[HCI_LABELS_ANNOTATIONS.CLOUD_PROVIDER_IPAM] = portsWithIpam[0]._ipam;\n      }\n\n      toSave.push(loadBalancerProxy);\n    } else if (loadBalancer.id) {\n      toRemove.push(loadBalancer);\n    }\n\n    return { toSave, toRemove };\n  }\n\n  cleanForSave(data) {\n    const val = super.cleanForSave(data);\n\n    delete val.__active;\n    delete val.type;\n\n    return val;\n  }\n\n  cleanContainerForSave(container) {\n    delete container.__active;\n    delete container.active;\n    delete container._init;\n    delete container.error;\n\n    return container;\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}