{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--17-0!/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLnRvLXByaW1pdGl2ZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmRhdGUudG8tcHJpbWl0aXZlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMiOwppbXBvcnQgX3R5cGVvZiBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgX3NsaWNlZFRvQXJyYXkgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2xpY2VkVG9BcnJheSI7CmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCBfY2xhc3NDYWxsQ2hlY2sgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY2xhc3NDYWxsQ2hlY2siOwppbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzIjsKaW1wb3J0IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iOwppbXBvcnQgX2dldFByb3RvdHlwZU9mIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldFByb3RvdHlwZU9mIjsKaW1wb3J0IF9pbmhlcml0cyBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5lbnRyaWVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LmtleXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwpmdW5jdGlvbiBfdG9Qcm9wZXJ0eUtleSh0KSB7IHZhciBpID0gX3RvUHJpbWl0aXZlKHQsICJzdHJpbmciKTsgcmV0dXJuICJzeW1ib2wiID09IF90eXBlb2YoaSkgPyBpIDogaSArICIiOyB9CmZ1bmN0aW9uIF90b1ByaW1pdGl2ZSh0LCByKSB7IGlmICgib2JqZWN0IiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDsgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07IGlmICh2b2lkIDAgIT09IGUpIHsgdmFyIGkgPSBlLmNhbGwodCwgciB8fCAiZGVmYXVsdCIpOyBpZiAoIm9iamVjdCIgIT0gX3R5cGVvZihpKSkgcmV0dXJuIGk7IHRocm93IG5ldyBUeXBlRXJyb3IoIkBAdG9QcmltaXRpdmUgbXVzdCByZXR1cm4gYSBwcmltaXRpdmUgdmFsdWUuIik7IH0gcmV0dXJuICgic3RyaW5nIiA9PT0gciA/IFN0cmluZyA6IE51bWJlcikodCk7IH0KaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvdWJ1bnR1L3N1c2Vjb25mL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKZnVuY3Rpb24gX2NhbGxTdXBlcih0LCBvLCBlKSB7IHJldHVybiBvID0gX2dldFByb3RvdHlwZU9mKG8pLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0LCBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgPyBSZWZsZWN0LmNvbnN0cnVjdChvLCBlIHx8IFtdLCBfZ2V0UHJvdG90eXBlT2YodCkuY29uc3RydWN0b3IpIDogby5hcHBseSh0LCBlKSk7IH0KZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgdHJ5IHsgdmFyIHQgPSAhQm9vbGVhbi5wcm90b3R5cGUudmFsdWVPZi5jYWxsKFJlZmxlY3QuY29uc3RydWN0KEJvb2xlYW4sIFtdLCBmdW5jdGlvbiAoKSB7fSkpOyB9IGNhdGNoICh0KSB7fSByZXR1cm4gKF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QgPSBmdW5jdGlvbiBfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyByZXR1cm4gISF0OyB9KSgpOyB9CmltcG9ydCB7IFNURVZFIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCBTY2hlbWEgZnJvbSAnLi9zY2hlbWEnOwppbXBvcnQgeyB3YWl0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL2FzeW5jJzsKdmFyIFNjaGVtYURlZmluaXRpb25DYWNoZSA9IHt9OwovKioKICogU3RldmUgU2NoZW1hIHNwZWNpZmljIGZ1bmN0aW9uYWxpdHkKICovCnZhciBTdGV2ZVNjaGVtYSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1NjaGVtYSkgewogIC8qKgogICAqIFRoaXMgc2hvdWxkIG1hdGNoIHRoZSByb290IFNjaGVtYSBjdG9yICguLi5hcmdzIHRocm93cyB0cyBlcnJvcikKICAgKi8KICBmdW5jdGlvbiBTdGV2ZVNjaGVtYShkYXRhLCBjdHgsIHJlaHlkcmF0ZU5hbWVzcGFjZSwgc2V0Q2xvbmUpIHsKICAgIHZhciBfdGhpczsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTdGV2ZVNjaGVtYSk7CiAgICBfdGhpcyA9IF9jYWxsU3VwZXIodGhpcywgU3RldmVTY2hlbWEsIFtkYXRhLCBjdHgsIHJlaHlkcmF0ZU5hbWVzcGFjZSwgc2V0Q2xvbmVdKTsKICAgIGlmICghU2NoZW1hRGVmaW5pdGlvbkNhY2hlW190aGlzLnN0b3JlXSkgewogICAgICBTY2hlbWFEZWZpbml0aW9uQ2FjaGVbX3RoaXMuc3RvcmVdID0gewogICAgICAgIGlkczoge30sCiAgICAgICAgZGVmaW5pdGlvbnM6IHt9CiAgICAgIH07CiAgICB9CiAgICBfdGhpcy5yZXF1aXJlc1Jlc291cmNlRmllbGRzID0gX3RoaXMuX3Jlc291cmNlRmllbGRzID09PSBudWxsOyAvLyBUaGlzIGlzIHNldCBwcmUgY3RvciB2aWEgYHNldCdlciwgYnV0IFRTIGNvbXBsYWlucyB0aGF0IGl0J3Mgbm90IGluaXRpYWxpc2VkCiAgICByZXR1cm4gX3RoaXM7CiAgfQogIF9pbmhlcml0cyhTdGV2ZVNjaGVtYSwgX1NjaGVtYSk7CiAgcmV0dXJuIF9jcmVhdGVDbGFzcyhTdGV2ZVNjaGVtYSwgW3sKICAgIGtleTogImhhc1Jlc291cmNlRmllbGRzIiwKICAgIGdldDoKICAgIC8vIE5vdGVzIG9uIFNjaGVtYXMsIHJlc291cmNlRmllbGRzIGFuZCBzY2hlbWFEZWZpbml0aW9ucwogICAgLy8gLSBTY2hlbWFzIHByZXZpb3VzbHkgY29udGFpbmVkIGEgYHJlc291cmNlRmllbGRzYCBjb2xsZWN0aW9uLCB3aGljaCBpcyBub3cgbnVsbAogICAgLy8gLSByZXNvdXJjZUZpZWxkcyBub3cgY29tZSBmcm9tIGEgbmV3IGBzY2hlbWFEZWZpbml0aW9uc2AgZW5kcG9pbnQKICAgIC8vIC0gZm9yIG5lYXRuZXNzIC8gc2FmZXR5IC8gY29tcGF0aWJpbGl0eSB3aXRoIG5vcm1hbiByZXNvdXJjZXMuLi4gd2UgZmV0Y2ggc2NoZW1hRGVmaW5pdGlvbnMgYW5kIHJldHVybiB0aGVpciByZXNvdXJjZUZpZWxkcyBpbiBhIHJlc291cmNlRmllbGRzIGdldHRlcgogICAgLyoqKioqKioqKioqKioqKioqKgogICAgICogUmVzb3VyY2UgRmllbGRzCiAgICAgKioqKioqKioqKioqKioqKioqIC8KICAgICAgIC8qKgogICAgICogSXMgdGhlIHByb3BlcnR5IGByZXNvdXJjZUZpZWxkc2AgYXZhaWxhYmxlCiAgICAgKgogICAgICogSWYgdGhlIHNjaGVtYSBkZWZpbml0aW9uIGlzIHJlcXVpcmVkIGFuZCBpdCBoYXNuJ3QgYmVlbiBmZXRjaGVkIHRoaXMgd2lsbCBiZSBmYWxzZQogICAgICoKICAgICAqIFRoaXMgaXMgYSBub24tZXJyb3JpbmcgcmVxdWVzdCwgdW5saWtlIHRoZSByZXNvdXJjZUZpZWxkcyBnZXR0ZXIgd2hpY2ggd2lsbCBlcnJvciBpZiBzY2hlbWEgZGVmaW5pdGlvbiBpcyByZXF1aXJlZCBidXQgbWlzc2luZwogICAgICovCiAgICBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfYTsKICAgICAgaWYgKHRoaXMucmVxdWlyZXNSZXNvdXJjZUZpZWxkcykgewogICAgICAgIHJldHVybiAhISgoX2EgPSB0aGlzLnNjaGVtYURlZmluaXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXNvdXJjZUZpZWxkcyk7CiAgICAgIH0KICAgICAgcmV0dXJuICEhdGhpcy5fcmVzb3VyY2VGaWVsZHM7CiAgICB9CiAgICAvKioKICAgICAqIEZpZWxkcyBhc3NvY2lhdGVkIHdpdGggaW5zdGFuY2VzIG9mIHRoaXMgc2NoZW1hCiAgICAgKgogICAgICogVGhpcyB3aWxsIGVpdGhlciBjb21lIGRpcmVjdGx5IGZyb20gdGhlIHNjaGVtYSBvciBmcm9tIHRoZSBzY2hlbWEncyBkZWZpbml0aW9uCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJyZXNvdXJjZUZpZWxkcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKHRoaXMucmVxdWlyZXNSZXNvdXJjZUZpZWxkcykgewogICAgICAgIGlmICghdGhpcy5zY2hlbWFEZWZpbml0aW9uc0lkcykgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJDYW5ub3QgZmluZCByZXNvdXJjZUZpZWxkcyBmb3IgU2NoZW1hICIuY29uY2F0KHRoaXMuaWQsICIgKHNjaGVtYURlZmluaXRpb25zIGhhdmUgbm90IGJlZW4gZmV0Y2hlZCkgIikpOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMuc2NoZW1hRGVmaW5pdGlvbikgewogICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCJObyBzY2hlbWFEZWZpbml0aW9uIGZvciAiLmNvbmNhdCh0aGlzLmlkLCAiIGZvdW5kIChub3QgaW4gc2NoZW1hRGVmaW5pdGlvbiByZXNwb25zZSkgIikpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWFEZWZpbml0aW9uLnJlc291cmNlRmllbGRzOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLl9yZXNvdXJjZUZpZWxkczsKICAgIH0KICAgIC8qKgogICAgICogQXBwbHkgdGhlIG9yaWdpbmFsIGByZXNvdXJjZUZpZWxkc2AgcGFyYW0gKGlmIGl0IGV4aXN0cykuIElmIGl0IGRvZXMgbm90IHRoZW4gd2UnbGwgbmVlZCB0byBmZXRjaCB0aGUgc2NoZW1hIGRlZmluaXRpb24KICAgICAqLywKICAgIHNldDogZnVuY3Rpb24gc2V0KHJlc291cmNlRmllbGRzKSB7CiAgICAgIHRoaXMuX3Jlc291cmNlRmllbGRzID0gcmVzb3VyY2VGaWVsZHM7CiAgICAgIHRoaXMucmVxdWlyZXNSZXNvdXJjZUZpZWxkcyA9IHRoaXMuX3Jlc291cmNlRmllbGRzID09PSBudWxsOwogICAgfQogICAgLyoqCiAgICAgKiBFbnN1cmUgdGhpcyBzY2hlbWEgaGFzIGEgcG9wdWxhdGVkIGByZXNvdXJjZUZpZWxkc2AgcHJvcGVydHkKICAgICAqCiAgICAgKiBUaGlzIGhhcHBlbnMgdmlhIG1ha2luZyBhIHJlcXVlc3QgdG8gZmV0Y2ggdGhlIHNjaGVtYSBkZWZpbml0aW9uCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJmZXRjaFJlc291cmNlRmllbGRzIiwKICAgIHZhbHVlOiAoZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoUmVzb3VyY2VGaWVsZHMgPSBfYXN5bmNUb0dlbmVyYXRvcigvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIGRlcHRoLAogICAgICAgICAgdXJsLAogICAgICAgICAgcmVzLAogICAgICAgICAgX2FyZ3MgPSBhcmd1bWVudHM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIGRlcHRoID0gX2FyZ3MubGVuZ3RoID4gMCAmJiBfYXJnc1swXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3NbMF0gOiAwOwogICAgICAgICAgICAgIGlmICh0aGlzLnJlcXVpcmVzUmVzb3VyY2VGaWVsZHMpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIpOwogICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgaWYgKCF0aGlzLnNjaGVtYURlZmluaXRpb24pIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA1OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuc2NoZW1hRGVmaW5pdGlvbik7CiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICB1cmwgPSB0aGlzLnNjaGVtYURlZmluaXRpb25Vcmw7CiAgICAgICAgICAgICAgaWYgKHVybCkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCJVbmFibGUgdG8gZmV0Y2ggc2NoZW1hIGRlZmluaXRpb25zIGZvciAiLmNvbmNhdCh0aGlzLmlkLCAiIChmYWlsZWQgdG8gZmluZCB1cmwgb2Ygc2NoZW1hIGRlZmluaXRpb24pIikpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIGlmICghKGRlcHRoID49IDQpKSB7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgY29uc29sZS53YXJuKCJVbmFibGUgdG8gZmV0Y2ggc2NoZW1hIGRlZmluaXRpb25zIGZvciAiLmNvbmNhdCh0aGlzLmlkLCAiICh0b28gbWFueSBmYWlsZWQgcmVxdWVzdHMpIikpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iKTsKICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTI7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDE1OwogICAgICAgICAgICAgIHJldHVybiB0aGlzLiRkaXNwYXRjaCgncmVxdWVzdCcsIHsKICAgICAgICAgICAgICAgIHR5cGU6IFNURVZFLlNDSEVNQV9ERUZJTklUSU9OLAogICAgICAgICAgICAgICAgdXJsOiB1cmwKICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgY2FzZSAxNToKICAgICAgICAgICAgICByZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyNjsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAxODoKICAgICAgICAgICAgICBfY29udGV4dC5wcmV2ID0gMTg7CiAgICAgICAgICAgICAgX2NvbnRleHQudDAgPSBfY29udGV4dFsiY2F0Y2giXSgxMik7CiAgICAgICAgICAgICAgaWYgKCEoKF9jb250ZXh0LnQwID09PSBudWxsIHx8IF9jb250ZXh0LnQwID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfY29udGV4dC50MC5fc3RhdHVzKSA9PT0gNTAwKSkgewogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI0OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAyMzsKICAgICAgICAgICAgICByZXR1cm4gd2FpdCgyMDAwKTsKICAgICAgICAgICAgY2FzZSAyMzoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB0aGlzLmZldGNoUmVzb3VyY2VGaWVsZHMoKytkZXB0aCkpOwogICAgICAgICAgICBjYXNlIDI0OgogICAgICAgICAgICAgIGNvbnNvbGUud2FybigiVW5hYmxlIHRvIGZldGNoIHNjaGVtYSBkZWZpbml0aW9ucyBmb3IgIi5jb25jYXQodGhpcy5pZCksIF9jb250ZXh0LnQwKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LmFicnVwdCgicmV0dXJuIik7CiAgICAgICAgICAgIGNhc2UgMjY6CiAgICAgICAgICAgICAgdGhpcy5jYWNoZVNjaGVtYURlZmluaXRpb25SZXNwb25zZShyZXMpOwogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5hYnJ1cHQoInJldHVybiIsIHRoaXMuc2NoZW1hRGVmaW5pdGlvbik7CiAgICAgICAgICAgIGNhc2UgMjg6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCB0aGlzLCBbWzEyLCAxOF1dKTsKICAgICAgfSkpOwogICAgICBmdW5jdGlvbiBmZXRjaFJlc291cmNlRmllbGRzKCkgewogICAgICAgIHJldHVybiBfZmV0Y2hSZXNvdXJjZUZpZWxkcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CiAgICAgIHJldHVybiBmZXRjaFJlc291cmNlRmllbGRzOwogICAgfSgpCiAgICAvKioKICAgICAqIENvbnZlcnQgY29sbGVjdGlvbiBvZiBzY2hlbWEgZGVmaW5pdGlvbnMgZm9yIHRoaXMgc2NoZW1hIGludG8gb2JqZWN0cyB3ZSBjYW4gc3RvcmUKICAgICAqCiAgICAgKiBTcGxpdCBvdXQgZm9yIHVuaXQgdGVzdGluZyBwdXJwb3NlcwogICAgICovCiAgICApCiAgfSwgewogICAga2V5OiAiY2FjaGVTY2hlbWFEZWZpbml0aW9uUmVzcG9uc2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhY2hlU2NoZW1hRGVmaW5pdGlvblJlc3BvbnNlKHJlcykgewogICAgICB2YXIgX3JlcyRkZWZpbml0aW9ucyA9IHJlcy5kZWZpbml0aW9ucywKICAgICAgICBfcmVzJGRlZmluaXRpb25UeXBlID0gcmVzLmRlZmluaXRpb25UeXBlLAogICAgICAgIHNlbGYgPSBfcmVzJGRlZmluaXRpb25zW19yZXMkZGVmaW5pdGlvblR5cGVdLAogICAgICAgIG90aGVycyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVzJGRlZmluaXRpb25zLCBbX3JlcyRkZWZpbml0aW9uVHlwZV0ubWFwKF90b1Byb3BlcnR5S2V5KSk7CiAgICAgIHZhciBzdG9yZSA9IHRoaXMuc3RvcmU7CiAgICAgIFNjaGVtYURlZmluaXRpb25DYWNoZVtzdG9yZV0uaWRzW3RoaXMuaWRdID0gewogICAgICAgIHNlbGY6IHNlbGYudHlwZSwKICAgICAgICBvdGhlcnM6IE9iamVjdC5rZXlzKG90aGVycykKICAgICAgfTsKICAgICAgT2JqZWN0LmVudHJpZXMocmVzLmRlZmluaXRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChfcmVmKSB7CiAgICAgICAgdmFyIF9yZWYyID0gX3NsaWNlZFRvQXJyYXkoX3JlZiwgMiksCiAgICAgICAgICB0eXBlID0gX3JlZjJbMF0sCiAgICAgICAgICBzZCA9IF9yZWYyWzFdOwogICAgICAgIFNjaGVtYURlZmluaXRpb25DYWNoZVtzdG9yZV0uZGVmaW5pdGlvbnNbdHlwZV0gPSBzZDsKICAgICAgfSk7CiAgICB9CiAgICAvKioqKioqKioqKioqKioqKioqKioqCiAgICAgKiBTY2hlbWEgRGVmaW5pdGlvbnMKICAgICAqKioqKioqKioqKioqKioqKioqKiogLwogICAgICAgLyoqCiAgICAgKiBTdG9yZSB0aGlzIHNjaGVtYSdzIGRlZmluaXRpb24gYW5kIGEgY29sbGVjdGlvbiBvZiBhc3NvY2lhdGVkIGRlZmluaXRpb25zIChhbGwgaWRzKQogICAgICovCiAgICAvKioKICAgICAqIFRoZSBzY2hlbWEgZGVmaW5pdGlvbiBmb3IgdGhpcyBzY2hlbWEKICAgICAqLwogIH0sIHsKICAgIGtleTogInNjaGVtYURlZmluaXRpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIGlmICghdGhpcy5zY2hlbWFEZWZpbml0aW9uc0lkcykgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHJldHVybiBTY2hlbWFEZWZpbml0aW9uQ2FjaGVbdGhpcy5zdG9yZV0uZGVmaW5pdGlvbnNbdGhpcy5zY2hlbWFEZWZpbml0aW9uc0lkcy5zZWxmXTsKICAgIH0KICAgIC8qKgogICAgICogVGhlIHNjaGVtYSBkZWZpbml0aW9ucyBmb3IgdGhpcyBzY2hlbWEgZGVmaW5pdGlvbidzIHJlc291cmNlRmllbGRzCiAgICAgKi8KICB9LCB7CiAgICBrZXk6ICJzY2hlbWFEZWZpbml0aW9ucyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIGlmICghdGhpcy5zY2hlbWFEZWZpbml0aW9uc0lkcykgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLnNjaGVtYURlZmluaXRpb25zSWRzLm90aGVycy5yZWR1Y2UoZnVuY3Rpb24gKHJlcywgZCkgewogICAgICAgIHJlc1tkXSA9IFNjaGVtYURlZmluaXRpb25DYWNoZVtfdGhpczIuc3RvcmVdLmRlZmluaXRpb25zW2RdOwogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0sIHt9KTsKICAgIH0KICAgIC8qKgogICAgICogVVJMIHRvIGZldGNoIHRoaXMgc2NoZW1hJ3MgZGVmaW5pdGlvbgogICAgICovCiAgfSwgewogICAga2V5OiAic2NoZW1hRGVmaW5pdGlvblVybCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF9hLCBfYjsKICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMubGlua3MpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5zZWxmKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IucmVwbGFjZSgnL3NjaGVtYXMvJywgJy9zY2hlbWFEZWZpbml0aW9ucy8nKTsKICAgIH0KICAgIC8qKioqKioqKioqKioqKioqKioqKioKICAgICAqIExvY2FsIFByb3BlcnRpZXMKICAgICAqCiAgICAgKiBUaGlzIGNvdWxkIGJlIHNldCBpbiB0aGUgY3RvciwgaG93ZXZlciBhcmUgcmVtb3ZlZCBpbiBgcmVwbGFjZVJlc291cmNlYCB3aGVuIHRoZXJlIGFyZSBzb2NrZXQgdXBkYXRlcy4uCiAgICAgKiAuLi4gc28gdXNlIGdldHRlcnMgaW5zdGVhZAogICAgICoKICAgICAqKioqKioqKioqKioqKioqKioqKiovCiAgICAvKioKICAgICAqIFRoZSBuYW1lIChuYW1lc3BhY2UpIG9mIHRoZSB2dWV4IHN0b3JlIHRoaXMgc2NoZW1hIGxpdmVzIGluIChpLmUuIGNsdXN0ZXIsIG1hbmFnZW1lbnQsIGV0YykKICAgICAqLwogIH0sIHsKICAgIGtleTogInN0b3JlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX2EsIF9iOwogICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy4kY3R4LnN0YXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY29uZmlnKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubmFtZXNwYWNlOwogICAgfQogIH0sIHsKICAgIGtleTogInNjaGVtYURlZmluaXRpb25zSWRzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX2E7CiAgICAgIHJldHVybiAoX2EgPSBTY2hlbWFEZWZpbml0aW9uQ2FjaGVbdGhpcy5zdG9yZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5pZHNbdGhpcy5pZF07CiAgICB9CiAgfV0sIFt7CiAgICBrZXk6ICJyZXNldCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVzZXQoc3RvcmUpIHsKICAgICAgZGVsZXRlIFNjaGVtYURlZmluaXRpb25DYWNoZVtzdG9yZV07CiAgICB9CiAgfV0pOwp9KFNjaGVtYSk7CmV4cG9ydCB7IFN0ZXZlU2NoZW1hIGFzIGRlZmF1bHQgfTs="},{"version":3,"names":["STEVE","Schema","wait","SchemaDefinitionCache","SteveSchema","_Schema","data","ctx","rehydrateNamespace","setClone","_this","_classCallCheck","_callSuper","store","ids","definitions","requiresResourceFields","_resourceFields","_inherits","_createClass","key","get","_a","schemaDefinition","resourceFields","schemaDefinitionsIds","Error","concat","id","set","value","_fetchResourceFields","_asyncToGenerator","_regeneratorRuntime","mark","_callee","depth","url","res","_args","arguments","wrap","_callee$","_context","prev","next","length","undefined","abrupt","schemaDefinitionUrl","console","warn","$dispatch","type","SCHEMA_DEFINITION","sent","t0","_status","fetchResourceFields","cacheSchemaDefinitionResponse","stop","apply","_res$definitions","_res$definitionType","definitionType","self","others","_objectWithoutProperties","map","_toPropertyKey","Object","keys","entries","forEach","_ref","_ref2","_slicedToArray","sd","_this2","reduce","d","_b","links","replace","$ctx","state","config","namespace","reset","default"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts"],"sourcesContent":["import { STEVE } from '@shell/config/types';\nimport Schema from './schema';\nimport { wait } from '@shell/utils/async';\n\ninterface ResourceField {\n  type: string,\n  description: string,\n}\ntype ResourceFields = { [id: string]: ResourceField }\n\ninterface SchemaDefinition {\n  type: string,\n  description: string,\n  resourceFields: ResourceFields\n}\ntype SchemaDefinitions = { [definitionId: string]: SchemaDefinition }\n\ntype SchemaId = {\n  self: string;\n  others: string[];\n}\ntype SchemaIds = { [schemaId: string]: SchemaId }\n\ninterface SchemaDefinitionResponse {\n  definitions: SchemaDefinitions,\n  definitionType: string,\n}\n\nconst SchemaDefinitionCache: { [store: string]: {\n  ids: SchemaIds,\n  definitions: SchemaDefinitions,\n} } = {};\n\n/**\n * Steve Schema specific functionality\n */\nexport default class SteveSchema extends Schema {\n  static reset(store: string): void {\n    delete SchemaDefinitionCache[store];\n  }\n\n  _resourceFields?: ResourceFields;\n\n  /**\n   * If resourceFields have not been provided, they are required to be fetched aka schemaDefinition world\n   */\n  requiresResourceFields: boolean;\n\n  // These are just for typing, eventually we'll get them when Schema is fully converted to typescript\n  id?: string;\n  type?: string;\n  links?: any;\n  $ctx?: any;\n\n  /**\n   * This should match the root Schema ctor (...args throws ts error)\n   */\n  constructor(data: unknown, ctx: unknown, rehydrateNamespace?: null | undefined, setClone?: boolean) {\n    super(data, ctx, rehydrateNamespace, setClone);\n\n    if (!SchemaDefinitionCache[this.store]) {\n      SchemaDefinitionCache[this.store] = {\n        ids:         {},\n        definitions: {}\n      };\n    }\n\n    this.requiresResourceFields = this._resourceFields === null; // This is set pre ctor via `set'er, but TS complains that it's not initialised\n  }\n\n  // Notes on Schemas, resourceFields and schemaDefinitions\n  // - Schemas previously contained a `resourceFields` collection, which is now null\n  // - resourceFields now come from a new `schemaDefinitions` endpoint\n  // - for neatness / safety / compatibility with norman resources... we fetch schemaDefinitions and return their resourceFields in a resourceFields getter\n\n  /******************\n   * Resource Fields\n   ****************** /\n\n  /**\n   * Is the property `resourceFields` available\n   *\n   * If the schema definition is required and it hasn't been fetched this will be false\n   *\n   * This is a non-erroring request, unlike the resourceFields getter which will error if schema definition is required but missing\n   */\n  get hasResourceFields(): boolean {\n    if (this.requiresResourceFields) {\n      return !!this.schemaDefinition?.resourceFields;\n    }\n\n    return !!this._resourceFields;\n  }\n\n  /**\n   * Fields associated with instances of this schema\n   *\n   * This will either come directly from the schema or from the schema's definition\n   */\n  get resourceFields(): ResourceFields {\n    if (this.requiresResourceFields) {\n      if (!this.schemaDefinitionsIds) {\n        throw new Error(`Cannot find resourceFields for Schema ${ this.id } (schemaDefinitions have not been fetched) `);\n      }\n\n      if (!this.schemaDefinition) {\n        throw new Error(`No schemaDefinition for ${ this.id } found (not in schemaDefinition response) `);\n      }\n\n      return this.schemaDefinition.resourceFields;\n    }\n\n    return this._resourceFields as ResourceFields;\n  }\n\n  /**\n   * Apply the original `resourceFields` param (if it exists). If it does not then we'll need to fetch the schema definition\n   */\n  set resourceFields(resourceFields: ResourceFields) {\n    this._resourceFields = resourceFields;\n    this.requiresResourceFields = this._resourceFields === null;\n  }\n\n  /**\n   * Ensure this schema has a populated `resourceFields` property\n   *\n   * This happens via making a request to fetch the schema definition\n   */\n  async fetchResourceFields(depth = 0): Promise<SchemaDefinition | null | undefined> {\n    if (!this.requiresResourceFields) {\n      // Not needed, no-op\n      return;\n    }\n\n    if (this.schemaDefinition) {\n      // Already have it, no-op\n      return this.schemaDefinition;\n    }\n\n    const url = this.schemaDefinitionUrl;\n\n    if (!url) {\n      console.warn(`Unable to fetch schema definitions for ${ this.id } (failed to find url of schema definition)`); // eslint-disable-line no-console\n\n      return;\n    }\n\n    if (depth >= 4) {\n      console.warn(`Unable to fetch schema definitions for ${ this.id } (too many failed requests)`); // eslint-disable-line no-console\n\n      return;\n    }\n\n    let res;\n\n    try {\n      // Make a direct request to fetch the schema definition\n      res = await this.$dispatch('request', {\n        type: STEVE.SCHEMA_DEFINITION,\n        url\n      });\n    } catch (e: any) {\n      if ( e?._status === 500) {\n        // Rancher could be updating it's definition cache, attempt a few times\n        await wait(2000);\n\n        return this.fetchResourceFields(++depth);\n      }\n\n      console.warn(`Unable to fetch schema definitions for ${ this.id }`, e); // eslint-disable-line no-console\n\n      return;\n    }\n\n    this.cacheSchemaDefinitionResponse(res);\n\n    return this.schemaDefinition;\n  }\n\n  /**\n   * Convert collection of schema definitions for this schema into objects we can store\n   *\n   * Split out for unit testing purposes\n   */\n  private cacheSchemaDefinitionResponse(res: SchemaDefinitionResponse): void {\n    const { [res.definitionType]: self, ...others } = res.definitions;\n    const store = this.store;\n\n    SchemaDefinitionCache[store].ids[this.id as string] = { self: self.type, others: Object.keys(others) };\n    Object.entries(res.definitions).forEach(([type, sd]) => {\n      SchemaDefinitionCache[store].definitions[type] = sd;\n    });\n  }\n\n  /*********************\n   * Schema Definitions\n   ********************* /\n\n  /**\n   * Store this schema's definition and a collection of associated definitions (all ids)\n   */\n\n  /**\n   * The schema definition for this schema\n   */\n  get schemaDefinition(): SchemaDefinition | null {\n    if (!this.schemaDefinitionsIds) {\n      return null;\n    }\n\n    return SchemaDefinitionCache[this.store].definitions[this.schemaDefinitionsIds.self];\n  }\n\n  /**\n   * The schema definitions for this schema definition's resourceFields\n   */\n  get schemaDefinitions(): SchemaDefinitions | null {\n    if (!this.schemaDefinitionsIds) {\n      return null;\n    }\n\n    return this.schemaDefinitionsIds.others.reduce((res, d) => {\n      res[d] = SchemaDefinitionCache[this.store].definitions[d];\n\n      return res;\n    }, {} as SchemaDefinitions);\n  }\n\n  /**\n   * URL to fetch this schema's definition\n   */\n  get schemaDefinitionUrl(): string {\n    return this.links?.self?.replace('/schemas/', '/schemaDefinitions/');\n  }\n\n  /*********************\n   * Local Properties\n   *\n   * This could be set in the ctor, however are removed in `replaceResource` when there are socket updates..\n   * ... so use getters instead\n   *\n   *********************/\n\n  /**\n   * The name (namespace) of the vuex store this schema lives in (i.e. cluster, management, etc)\n   */\n  private get store(): string {\n    return this.$ctx.state?.config?.namespace;\n  }\n\n  private get schemaDefinitionsIds(): SchemaId | undefined {\n    return SchemaDefinitionCache[this.store]?.ids[this.id as string];\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}