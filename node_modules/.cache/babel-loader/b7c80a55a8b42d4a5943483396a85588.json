{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--17-0!/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["PaginationFilterField","PaginationParamProjectOrNamespace","PaginationParamFilter","NAMESPACE_FILTER_ALL_SYSTEM","NAMESPACE_FILTER_ALL_USER","NAMESPACE_FILTER_P_FULL_PREFIX","uniq","CONFIG_MAP","MANAGEMENT","NAMESPACE","NODE","POD","NamespaceProjectFilters","_classCallCheck","_createClass","key","value","handlePrefAndSettingFilter","allNamespaces","showDynamicRancherNamespaces","productHidesSystemNamespaces","reduce","res","ns","hideObscure","isObscure","hideSystem","isSystem","push","createSingleField","field","name","equals","handleSystemOrUserFilter","isAllSystem","isAllUser","allSystem","filter","createMultipleFields","map","handleSelectionFilter","neu","isLocalCluster","projectsOrNamespaces","projectOrNamespace","filters","selection","startsWith","projects","replace","StevePaginationUtils","_NamespaceProjectFilt","_callSuper","arguments","_inherits","convertArrayPath","path","concat","substring","createSortForPagination","sortByPath","createParamsFromNsFilter","_ref","isAllNamespaces","length","_filters","apply","_toConsumableArray","_filters2","createParamsForPagination","schema","opt","_this","pagination","params","namespaceParam","convertPaginationParams","page","pageSize","_a","sort","validateFields","checked","Array","invalid","joined","s","validateField","asc","join","console","warn","id","_b","state","includes","VALID_FIELDS","find","fields","f","attributes","columns","at","_this2","undefined","filterStrings","exactPartial","exact","param","unique","Object","keys","_defineProperty"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts"],"sourcesContent":["import { ActionFindPageArgs } from '@shell/types/store/dashboard-store.types';\nimport { PaginationParam, PaginationFilterField, PaginationParamProjectOrNamespace, PaginationParamFilter } from '@shell/types/store/pagination.types';\nimport { NAMESPACE_FILTER_ALL_SYSTEM, NAMESPACE_FILTER_ALL_USER, NAMESPACE_FILTER_P_FULL_PREFIX } from '@shell/utils/namespace-filter';\nimport Namespace from '@shell/models/namespace';\nimport { uniq } from '@shell/utils/array';\nimport {\n  CONFIG_MAP, MANAGEMENT, NAMESPACE, NODE, POD\n} from '@shell/config/types';\nimport { Schema } from 'plugins/steve/schema';\n\nclass NamespaceProjectFilters {\n  /**\n   * User needs all resources.... except if there's some settings which should remove resources in specific circumstances\n   */\n  protected handlePrefAndSettingFilter(allNamespaces: Namespace[], showDynamicRancherNamespaces: boolean, productHidesSystemNamespaces: boolean): PaginationParamFilter[] {\n    // These are AND'd together\n    // Not ns 1 AND ns 2\n    return allNamespaces.reduce((res, ns) => {\n      // Links to ns.isObscure and covers things like `c-`, `user-`, etc (see OBSCURE_NAMESPACE_PREFIX)\n      const hideObscure = showDynamicRancherNamespaces ? false : ns.isObscure;\n      // Links to ns.isSystem and covers things like ns with system annotation, hardcoded list, etc\n      const hideSystem = productHidesSystemNamespaces ? ns.isSystem : false;\n\n      if (hideObscure || hideSystem) {\n        res.push(PaginationParamFilter.createSingleField({\n          field: 'metadata.namespace', value: ns.name, equals: false\n        }));\n      }\n\n      return res;\n    }, [] as PaginationParamFilter[]);\n  }\n\n  /**\n   * User needs either all user resources... or all system\n   *\n   * System resources revolve around the namespace's isSystem property\n   *\n   * Users resources are those not in system namespaces\n   */\n  protected handleSystemOrUserFilter(allNamespaces: Namespace[], isAllSystem: boolean, isAllUser: boolean) {\n    const allSystem = allNamespaces.filter((ns) => ns.isSystem);\n\n    // > Neither of these use projectsOrNamespaces to avoid scenarios where the local cluster provides a namespace which has\n    // > a matching project... which could lead to results in the user project resource being included in the system filter\n    if (isAllSystem) {\n      // return resources in system ns 1 OR in system ns 2 ...\n      // &filter=metadata.namespace=system ns 1,metadata.namespace=system ns 2\n      return [PaginationParamFilter.createMultipleFields(\n        allSystem.map(\n          (ns) => new PaginationFilterField({ field: 'metadata.namespace', value: ns.name })\n        )\n      )];\n    } else { // if isAllUser\n      // return resources not in system ns 1 AND not in system ns 2 ...\n      // &filter=metadata.namespace!=system ns 1&filter=metadata.namespace!=system ns 2\n      return allSystem.map((ns) => PaginationParamFilter.createSingleField({\n        field: 'metadata.namespace', value: ns.name, equals: false\n      }));\n    }\n  }\n\n  /**\n   * User needs resources in a set of projects or namespaces\n   */\n  protected handleSelectionFilter(neu: string[], isLocalCluster: boolean) {\n    // User has one or more projects or namespaces. We can pass this straight through to projectsornamespaces\n\n    // return resources in project 1 OR namespace 2\n    // &projectsornamespaces=project 1,namespace 2\n    const projectsOrNamespaces = [\n      new PaginationParamProjectOrNamespace({ projectOrNamespace: neu })\n    ];\n\n    if (isLocalCluster) {\n      // > As per `handleSystemOrUserFilter` above, we need to be careful of the local cluster where there's namespaces related to projects with the same id\n      // > In this case\n      // - We're including resources in the project and it's related namespace (via projectsornamespaces)\n      // - We're also then excluding resources in the related namespace (via below `filter`)\n\n      // Exclude resources NOT in projects namespace 1 AND not in projects namespace 2\n      // &filter=metadata.namespace!=pn1&filter=metadata.namespace!=pn2\n      return {\n        projectsOrNamespaces,\n        filters: neu\n          .filter((selection) => selection.startsWith(NAMESPACE_FILTER_P_FULL_PREFIX))\n          .map((projects) => PaginationParamFilter.createSingleField({\n            field: 'metadata.namespace', value: projects.replace(NAMESPACE_FILTER_P_FULL_PREFIX, ''), equals: false\n          }))\n      };\n    }\n\n    return { projectsOrNamespaces, filters: [] };\n  }\n}\n\n/**\n * Helper functions for steve pagination\n */\nclass StevePaginationUtils extends NamespaceProjectFilters {\n  /**\n   * Filtering with the vai cache supports specific fields\n   * 1) Those listed here\n   * 2) Those references in the schema's attributes.fields list (which is used by generic lists)\n   */\n  static VALID_FIELDS: { [type: string]: { field: string, startsWith?: boolean }[]} = {\n    '': [// all types\n      { field: 'metadata.name' },\n      { field: 'metadata.namespace' },\n      // { field: 'id' }, // Pending API support\n      // { field: 'metadata.state.name' }, // Pending API support\n      { field: 'metadata.creationTimestamp' },\n    ],\n    [NODE]: [\n      { field: 'status.nodeInfo.kubeletVersion' },\n      { field: 'status.nodeInfo.operatingSystem' },\n    ],\n    [POD]: [\n      { field: 'spec.containers.image' },\n      { field: 'spec.nodeName' },\n    ],\n    [MANAGEMENT.NODE]: [\n      { field: 'status.nodeName' },\n    ],\n    [CONFIG_MAP]: [\n      { field: 'metadata.labels[harvesterhci.io/cloud-init-template]' }\n    ],\n    [NAMESPACE]: [\n      { field: 'metadata.labels[field.cattle.io/projectId]' }\n    ]\n  }\n\n  private convertArrayPath(path: string): string {\n    if (path.startsWith('metadata.fields.')) {\n      return `metadata.fields[${ path.substring(16) }]`;\n    }\n\n    return path;\n  }\n\n  public createSortForPagination(sortByPath: string): string {\n    return this.convertArrayPath(sortByPath);\n  }\n\n  /**\n   * Given the selection of projects or namespaces come up with `filter` and `projectsornamespace` query params\n   */\n  public createParamsFromNsFilter({\n    allNamespaces,\n    selection,\n    isAllNamespaces,\n    isLocalCluster,\n    showDynamicRancherNamespaces,\n    productHidesSystemNamespaces,\n  }: {\n    allNamespaces: Namespace[],\n    selection: string[],\n    /**\n     * There is no user provided filter\n     */\n    isAllNamespaces: boolean,\n    /**\n     * Weird things be happening if the target cluster is local / upstream. Uses this to check what cluster we're in\n     */\n    isLocalCluster: boolean,\n    /**\n     * Links to ns.isObscure and covers things like `c-`, `user-`, etc (see OBSCURE_NAMESPACE_PREFIX)\n     */\n    showDynamicRancherNamespaces: boolean,\n    /**\n     * Links to ns.isSystem and covers things like ns with system annotation, hardcoded list, etc\n     */\n    productHidesSystemNamespaces: boolean,\n  }): {\n    projectsOrNamespaces: PaginationParamProjectOrNamespace[],\n    filters: PaginationParamFilter[]\n  } {\n    // Hold up, why are we doing yet another way to convert the user's project / namespace filter to a set of something?\n    // - When doing this for local pagination `getActiveNamespaces` provides a full list of applicable namespaces.\n    //   Lists then filter resource locally using those namespaces\n    // - Pagination cannot take this approach of 'gimme all resources in these namespaces' primarily for the 'Only User Namespaces' case\n    //   - User could have 2k namespaces. This would result in 2k+ namespaces added to the url (namespace=1,namespace=2,namespace=3, etc)\n    // - Instead we do\n    //   - All but not given settings - Gimme resources NOT in system or obscure namespaces\n    //   - Only System Namespaces - Gimme resources in the system namespaces (which shouldn't be many namespaces)\n    //   - Only User Namespaces - Gimme resources NOT in system namespaces\n    //   - User selection - Gimme resources in specific Projects or Namespaces\n    if (isAllNamespaces && (showDynamicRancherNamespaces && !productHidesSystemNamespaces)) {\n      // No-op. Everything is returned\n      return {\n        projectsOrNamespaces: [],\n        filters:              []\n      };\n    }\n\n    // used to return resources in / not in projects/namespaces (entries are checked in both types)\n    // &projectsornamespaces=project 1,namespace 2\n    let projectsOrNamespaces: PaginationParamProjectOrNamespace[] = [];\n    // used to return resources in / not in namespaces\n    // &filter=metadata.namespace=abc\n    let filters: PaginationParamFilter[] = [];\n\n    if (!showDynamicRancherNamespaces || productHidesSystemNamespaces) {\n      // We need to hide dynamic namespaces ('c-', 'p-', etc) OR system namespaces\n      filters = this.handlePrefAndSettingFilter(allNamespaces, showDynamicRancherNamespaces, productHidesSystemNamespaces);\n    }\n\n    const isAllSystem = selection[0] === NAMESPACE_FILTER_ALL_SYSTEM;\n    const isAllUser = selection[0] === NAMESPACE_FILTER_ALL_USER;\n\n    if (selection.length === 1 && (isAllSystem || isAllUser)) {\n      // Filter by resources either in or not in system namespaces\n      filters.push(...this.handleSystemOrUserFilter(allNamespaces, isAllSystem, isAllUser ));\n    } else {\n      // User has one or more projects or namespaces\n      const res = this.handleSelectionFilter(selection, isLocalCluster);\n\n      projectsOrNamespaces = res.projectsOrNamespaces;\n      filters.push(...res.filters);\n    }\n\n    return {\n      projectsOrNamespaces,\n      filters\n    };\n  }\n\n  public createParamsForPagination(schema: Schema, opt: ActionFindPageArgs): string | undefined {\n    if (!opt.pagination) {\n      return;\n    }\n\n    const params: string[] = [];\n    const namespaceParam = this.convertPaginationParams(schema, opt.pagination.projectsOrNamespaces);\n\n    if (namespaceParam) {\n      params.push(namespaceParam);\n    }\n\n    if (opt.pagination.page) {\n      params.push(`page=${ opt.pagination.page }`);\n    }\n\n    if (opt.pagination.pageSize) {\n      params.push(`pagesize=${ opt.pagination.pageSize }`);\n    }\n\n    if (opt.pagination.sort?.length) {\n      const validateFields = {\n        checked: new Array<string>(),\n        invalid: new Array<string>(),\n      };\n\n      const joined = opt.pagination.sort\n        .map((s) => {\n          this.validateField(validateFields, schema, s.field);\n\n          return `${ s.asc ? '' : '-' }${ this.convertArrayPath(s.field) }`;\n        })\n        .join(',');\n\n      params.push(`sort=${ joined }`);\n\n      if (validateFields.invalid.length) {\n        console.warn(`Pagination API does not support sorting '${ schema.id }' by the requested fields: ${ uniq(validateFields.invalid).join(', ') }`); // eslint-disable-line no-console\n      }\n    }\n\n    if (opt.pagination.filters?.length) {\n      const filters = this.convertPaginationParams(schema, opt.pagination.filters);\n\n      if (filters) {\n        params.push(filters);\n      }\n    }\n\n    // Note - There is a `limit` property that is by default 100,000. This can be disabled by using `limit=-1`,\n    // but we shouldn't be fetching any pages big enough to exceed the default\n\n    return params.join('&');\n  }\n\n  /**\n   * Check if the API supports filtering by this field\n   */\n  private validateField(state: { checked: string[], invalid: string[]}, schema: Schema, field?: string) {\n    if (!field) {\n      return; // no field, so not invalid\n    }\n\n    if (state.checked.includes(field)) {\n      return; // already checked, exit early\n    }\n\n    state.checked.push(field);\n\n    // First check in our hardcoded list of supported filters\n    if ([\n      StevePaginationUtils.VALID_FIELDS[''], // Global\n      StevePaginationUtils.VALID_FIELDS[schema.id], // Type specific\n    ].find((fields) => fields?.find((f) => {\n      if (f.startsWith) {\n        if (field.startsWith(f.field)) {\n          return true;\n        }\n      } else {\n        return field === f.field;\n      }\n    }))) {\n      return;\n    }\n\n    // Then check in schema (the api automatically supports these)\n    if (!!schema?.attributes.columns.find(\n      // This isn't the most performant, but the string is tiny\n      (at) => at.field.replace('$.', '').replace('[', '.').replace(']', '') === field\n    )) {\n      return;\n    }\n\n    state.invalid.push(field);\n  }\n\n  /**\n   * Convert our {@link PaginationParam} definition of params to a set of url params\n   */\n  private convertPaginationParams(schema: Schema, filters: PaginationParam[] = []): string {\n    const validateFields = {\n      checked: new Array<string>(),\n      invalid: new Array<string>(),\n    };\n    const filterStrings = filters\n      .filter((filter) => !!filter.fields.length)\n      .map((filter) => {\n        const joined = filter.fields\n          .map((field) => {\n            if (field.field) {\n              // Check if the API supports filtering by this field\n              this.validateField(validateFields, schema, field.field);\n\n              const exactPartial = field.exact ? `'${ field.value }'` : field.value;\n\n              return `${ this.convertArrayPath(field.field) }${ field.equals ? '=' : '!=' }${ exactPartial }`;\n            }\n\n            return field.value;\n          })\n          .join(','); // This means OR\n\n        return `${ filter.param }${ filter.equals ? '=' : '!=' }${ joined }`;\n      });\n    const unique = filterStrings.reduce((res, s) => {\n      res[s] = true;\n\n      return res;\n    }, { } as {[filterString: string] : boolean });\n\n    const res = Object.keys(unique).join('&'); // This means AND\n\n    if (validateFields.invalid.length) {\n      console.warn(`Pagination API does not support filtering '${ schema.id }' by the requested fields: ${ uniq(validateFields.invalid).join(', ') }`); // eslint-disable-line no-console\n    }\n\n    return res;\n  }\n}\n\nexport default new StevePaginationUtils();\n"],"mappings":"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","ignoreList":[]}]}