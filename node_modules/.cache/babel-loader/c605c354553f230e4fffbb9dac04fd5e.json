{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js??ref--17-0!/home/ubuntu/susecon-2024-ext-demo/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerLogs.test.ts","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerLogs.test.ts","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["shallowMount","ContainerLogs","base64Encode","Buffer","addEventListener","jest","mock","getDefaultOptions","propsData","tab","active","height","pod","spec","nodeName","links","view","os","data","range","mocks","$store","getters","fn","currentProduct","inStore","describe","it","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrapper","data1","messageCallback","data2","wrap","_callee$","_context","prev","next","clearAllMocks","sent","calls","find","_ref2","_ref3","_slicedToArray","e","detail","vm","$nextTick","expect","backlog","toHaveLength","rawMsg","toBe","trimEnd","stop","_callee2","_callee2$","_context2","_ref5","_ref6","filtered","_callee3","part1","part2","_callee3$","_context3","_ref8","_ref9","concat","_callee4","message","arr","_callee4$","_context4","from","slice","toString","_ref11","_ref12","_callee5","part3","part4","_callee5$","_context5","_ref14","_ref15","_callee6","part5","part6","_callee6$","_context6","_ref17","_ref18"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/nav/WindowManager/__tests__/ContainerLogs.test.ts"],"sourcesContent":["import { shallowMount } from '@vue/test-utils';\nimport ContainerLogs from '@shell/components/nav/WindowManager/ContainerLogs.vue';\nimport { base64Encode } from '@shell/utils/crypto';\nimport { Buffer } from 'buffer';\nimport { addEventListener } from '@shell/utils/socket';\n\njest.mock('@shell/utils/socket');\n\nconst getDefaultOptions = () => {\n  return {\n    propsData: {\n      tab:    {},\n      active: true,\n      height: 100,\n      pod:    {\n        spec:  { nodeName: 'nodeId' },\n        links: { view: 'url' },\n        os:    'linux'\n      },\n    },\n    data() {\n      return { range: '30 minute' };\n    },\n    mocks: {\n      $store: {\n        getters: {\n          'prefs/get':    jest.fn(),\n          'i18n/t':       jest.fn(),\n          currentProduct: { inStore: 'cluster' }\n        }\n      }\n    }\n  };\n};\n\ndescribe('component: ContainerLogs', () => {\n  it('should receive messages correctly', async() => {\n    jest.clearAllMocks();\n    const wrapper = await shallowMount(ContainerLogs, getDefaultOptions());\n\n    const data1 = 'container logs test1\\n';\n    const messageCallback = addEventListener.mock.calls.find(([e]) => e === 'message')[1];\n\n    messageCallback({ detail: { data: base64Encode(data1) } });\n\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    expect(wrapper.vm.backlog[0].rawMsg).toBe(data1.trimEnd());\n    const data2 = 'container logs test2 中文日志内容测试\\n';\n\n    messageCallback({ detail: { data: base64Encode(data2) } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(2);\n    expect(wrapper.vm.backlog[1].rawMsg).toBe(data2.trimEnd());\n  });\n\n  it('should not fail for an empty message/string', async() => {\n    jest.clearAllMocks();\n    const wrapper = await shallowMount(ContainerLogs, getDefaultOptions());\n\n    const data1 = '';\n    const messageCallback = addEventListener.mock.calls.find(([e]) => e === 'message')[1];\n\n    messageCallback({ detail: { data: base64Encode(data1) } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(0);\n    expect(wrapper.vm.filtered).toHaveLength(0);\n  });\n\n  it('should merge the message which be truncated line', async() => {\n    jest.clearAllMocks();\n    const wrapper = await shallowMount(ContainerLogs, getDefaultOptions());\n    const part1 = 'container logs part1';\n    const messageCallback = addEventListener.mock.calls.find(([e]) => e === 'message')[1];\n\n    messageCallback({ detail: { data: base64Encode(part1) } });\n    await wrapper.vm.$nextTick();\n\n    expect(wrapper.vm.backlog).toHaveLength(0);\n    const part2 = 'container logs part2\\n';\n\n    messageCallback({ detail: { data: base64Encode(part2) } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    expect(wrapper.vm.backlog[0].rawMsg).toBe(`${ part1 }${ part2 }`.trimEnd());\n  });\n\n  it('should merge truncated 2-byte utf-8 character messages', async() => {\n    jest.clearAllMocks();\n    const wrapper = await shallowMount(ContainerLogs, getDefaultOptions());\n    // Contains 2-byte utf-8 character message with one character truncation\n    const message = '¡¢£¤¥\\n';\n    const arr = Buffer.from(message);\n\n    const part1 = arr.slice(0, 3).toString('base64');\n    const part2 = arr.slice(3).toString('base64');\n\n    const messageCallback = addEventListener.mock.calls.find(([e]) => e === 'message')[1];\n\n    messageCallback({ detail: { data: part1 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(0);\n    messageCallback({ detail: { data: part2 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    expect(wrapper.vm.backlog[0].rawMsg).toBe(message.trimEnd());\n  });\n  it('should merge truncated 3-byte utf-8 character messages', async() => {\n    jest.clearAllMocks();\n    const wrapper = await shallowMount(ContainerLogs, getDefaultOptions());\n    // Contains 3-byte utf-8 character message with one character truncation\n    const message = 'ࠀࠁࠂࠃ\\n';\n    const arr = Buffer.from(message);\n    // Truncate at the fourth byte\n    const part1 = arr.slice(0, 4).toString('base64');\n    const part2 = arr.slice(4).toString('base64');\n\n    const messageCallback = addEventListener.mock.calls.find(([e]) => e === 'message')[1];\n\n    messageCallback({ detail: { data: part1 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(0);\n    messageCallback({ detail: { data: part2 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    expect(wrapper.vm.backlog[0].rawMsg).toBe(message.trimEnd());\n\n    // Truncate at the fifth byte\n    const part3 = arr.slice(0, 5).toString('base64');\n    const part4 = arr.slice(5).toString('base64');\n\n    messageCallback({ detail: { data: part3 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    messageCallback({ detail: { data: part4 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(2);\n    expect(wrapper.vm.backlog[1].rawMsg).toBe(message.trimEnd());\n  });\n\n  it('should merge truncated 4-byte utf-8 character messages', async() => {\n    jest.clearAllMocks();\n    const wrapper = await shallowMount(ContainerLogs, getDefaultOptions());\n    // Contains 4-byte utf-8 character message with one character truncation\n    const message = '𐀀𐀁𐀂𐀃\\n';\n    const arr = Buffer.from(message);\n\n    // Truncate at the fifth byte\n    const part1 = arr.slice(0, 5).toString('base64');\n    const part2 = arr.slice(5).toString('base64');\n\n    const messageCallback = addEventListener.mock.calls.find(([e]) => e === 'message')[1];\n\n    messageCallback({ detail: { data: part1 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(0);\n    messageCallback({ detail: { data: part2 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    expect(wrapper.vm.backlog[0].rawMsg).toBe(message.trimEnd());\n\n    // Truncate at the sixth byte\n    const part3 = arr.slice(0, 6).toString('base64');\n    const part4 = arr.slice(6).toString('base64');\n\n    messageCallback({ detail: { data: part3 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(1);\n    messageCallback({ detail: { data: part4 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(2);\n    expect(wrapper.vm.backlog[1].rawMsg).toBe(message.trimEnd());\n\n    // Truncate at the seventh byte\n    const part5 = arr.slice(0, 7).toString('base64');\n    const part6 = arr.slice(7).toString('base64');\n\n    messageCallback({ detail: { data: part5 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(2);\n    messageCallback({ detail: { data: part6 } });\n    await wrapper.vm.$nextTick();\n    expect(wrapper.vm.backlog).toHaveLength(3);\n    expect(wrapper.vm.backlog[2].rawMsg).toBe(message.trimEnd());\n  });\n});\n"],"mappings":"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","ignoreList":[]}]}