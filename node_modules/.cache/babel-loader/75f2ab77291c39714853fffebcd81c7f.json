{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Vue","addObject","addObjects","clear","removeObject","SCHEMA","COUNT","normalizeType","keyFieldFor","addSchemaIndexFields","classify","garbageCollect","registerType","state","type","cache","types","list","haveAll","haveSelector","haveNamespace","undefined","revision","generation","loadCounter","Object","defineProperty","value","Map","set","replace","existing","data","_i","_Object$keys","keys","length","k","_i2","_Object$keys2","replaceResource","getters","cleanResource","load","_ref","ctx","keyField","keyFieldForType","opts","rootGetters","limit","id","entry","map","get","rm","shift","delete","baseType","forgetType","gcResetType","resetStore","commit","console","log","config","namespace","_i3","_Object$keys3","concat","gcResetStore","remove","obj","_remove","batchChanges","_ref2","batch","batchTypes","combinedBatch","forEach","batchType","_typeOption$alias","typeOption","alias","aliasType","_i4","_Object$entries","entries","_Object$entries$_i","_slicedToArray","key","_objectSpread","combinedBatchTypes","normalizedType","typeCache","typeCacheIndexMap","resource","index","removeAtIndexes","push","classyResource","sort","cacheIndex","loopIndex","splice","loadAll","_ref3","skipHaveAll","slice","proxies","x","i","applyConfig","assign","loadMulti","_ref4","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","loadSelector","_ref5","selector","_iterator2","_step2","loadMerge","_ref6","allLatest","find","toLoadEntry","loadAdd","_ref7","forgetAll","_ref8","setHaveAll","_ref9","setHaveNamespace","_ref10","loadedAll","_ref11","reset","incrementLoadCounter","typeData"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/dashboard-store/mutations.js"],"sourcesContent":["import Vue from 'vue';\nimport { addObject, addObjects, clear, removeObject } from '@shell/utils/array';\nimport { SCHEMA, COUNT } from '@shell/config/types';\nimport { normalizeType, keyFieldFor } from '@shell/plugins/dashboard-store/normalize';\nimport { addSchemaIndexFields } from '@shell/plugins/steve/schema.utils';\nimport { classify } from '@shell/plugins/dashboard-store/classify';\nimport garbageCollect from '@shell/utils/gc/gc';\n\nfunction registerType(state, type) {\n  let cache = state.types[type];\n\n  if ( !cache ) {\n    cache = {\n      list:          [],\n      haveAll:       false,\n      haveSelector:  {},\n      haveNamespace: undefined, // If the cached list only contains resources for a namespace, this will contain the ns name\n      revision:      0, // The highest known resourceVersion from the server for this type\n      generation:    0, // Updated every time something is loaded for this type\n      loadCounter:   0, // Used to cancel incremental loads if the page changes during load\n    };\n\n    // Not enumerable so they don't get sent back to the client for SSR\n    Object.defineProperty(cache, 'map', { value: new Map() });\n\n    Vue.set(state.types, type, cache);\n  }\n\n  return cache;\n}\n\nexport function replace(existing, data) {\n  for ( const k of Object.keys(existing) ) {\n    delete existing[k];\n  }\n\n  for ( const k of Object.keys(data) ) {\n    Vue.set(existing, k, data[k]);\n  }\n\n  return existing;\n}\n\nfunction replaceResource(existing, data, getters) {\n  data = getters.cleanResource(existing, data);\n\n  return replace(existing, data);\n}\n\nexport function load(state, { data, ctx, existing }) {\n  const { getters } = ctx;\n  let type = normalizeType(data.type);\n  const keyField = getters.keyFieldForType(type);\n  const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n  const limit = opts?.limit;\n\n  // Inject special fields for indexing schemas\n  if ( type === SCHEMA ) {\n    addSchemaIndexFields(data);\n  }\n\n  const id = data[keyField];\n\n  let cache = registerType(state, type);\n\n  cache.generation++;\n\n  let entry;\n\n  if ( existing && !existing.id ) {\n    // A specific proxy instance to used was passed in (for create -> save),\n    // use it instead of making a new proxy\n    entry = replaceResource(existing, data, getters);\n    addObject(cache.list, entry);\n    cache.map.set(id, entry);\n    // console.log('### Mutation added from existing proxy', type, id);\n  } else {\n    entry = cache.map.get(id);\n\n    if ( entry ) {\n      // There's already an entry in the store, update it\n      replaceResource(entry, data, getters);\n      // console.log('### Mutation Updated', type, id);\n    } else {\n      // There's no entry, make a new proxy\n      entry = classify(ctx, data);\n      addObject(cache.list, entry);\n      cache.map.set(id, entry);\n      // console.log('### Mutation', type, id);\n\n      // If there is a limit to the number of resources we can store for this type then\n      // remove the first one to keep the list size to that limit\n      if (limit && cache.list.length > limit) {\n        const rm = cache.list.shift();\n\n        cache.map.delete(rm.id);\n      }\n    }\n  }\n\n  if ( data.baseType ) {\n    type = normalizeType(data.baseType);\n    cache = state.types[type];\n    if ( cache ) {\n      addObject(cache.list, entry);\n      cache.map.set(id, entry);\n    }\n  }\n\n  return entry;\n}\n\nexport function forgetType(state, type) {\n  const cache = state.types[type];\n\n  if ( cache ) {\n    cache.haveAll = false;\n    cache.haveSelector = {};\n    cache.haveNamespace = undefined;\n    cache.revision = 0;\n    cache.generation = 0;\n    clear(cache.list);\n    cache.map.clear();\n    delete state.types[type];\n\n    garbageCollect.gcResetType(state, type);\n\n    return true;\n  }\n}\n\nexport function resetStore(state, commit) {\n  // eslint-disable-next-line no-console\n  console.log('Reset store: ', state.config.namespace);\n\n  for ( const type of Object.keys(state.types) ) {\n    commit(`${ state.config.namespace }/forgetType`, type);\n  }\n\n  garbageCollect.gcResetStore(state);\n}\n\nexport function remove(state, obj, getters) {\n  if (obj) {\n    let type = normalizeType(obj.type);\n    const keyField = getters[`${ state.config.namespace }/keyFieldForType`](type);\n    const id = obj[keyField];\n\n    let entry = state.types[type];\n\n    if ( entry ) {\n      removeObject(entry.list, obj);\n      entry.map.delete(id);\n    }\n\n    if ( obj.baseType ) {\n      type = normalizeType(obj.baseType);\n      entry = state.types[type];\n\n      if ( entry ) {\n        removeObject(entry.list, obj);\n        entry.map.delete(id);\n      }\n    }\n  }\n}\n\nexport function batchChanges(state, { ctx, batch }) {\n  const batchTypes = Object.keys(batch);\n  const combinedBatch = {};\n\n  batchTypes.forEach((batchType) => {\n    combinedBatch[batchType] = batch[batchType];\n    const typeOption = ctx.rootGetters['type-map/optionsFor'](batchType);\n\n    if (typeOption?.alias?.length > 0) {\n      const alias = typeOption?.alias || [];\n\n      alias.forEach((aliasType) => {\n        combinedBatch[aliasType] = {};\n        for (const [key, value] of Object.entries(batch[batchType])) {\n          combinedBatch[aliasType][key] = {\n            ...value,\n            type: aliasType\n          };\n        }\n      });\n    }\n  });\n\n  const combinedBatchTypes = Object.keys(combinedBatch);\n\n  combinedBatchTypes.forEach((type) => {\n    const normalizedType = normalizeType(type === 'counts' ? COUNT : type);\n    const keyField = keyFieldFor(normalizedType);\n    const typeCache = registerType(state, normalizedType);\n\n    // making a map for every resource's location in the list is gonna ensure we only have to loop through the big list once.\n    const typeCacheIndexMap = {};\n\n    typeCache.list.forEach((resource, index) => {\n      typeCacheIndexMap[resource[keyField]] = index;\n    });\n\n    const removeAtIndexes = [];\n\n    // looping through the batch, executing changes, deferring creates and removes since they change the array length\n    Object.keys(combinedBatch[normalizedType]).forEach((id) => {\n      const index = typeCacheIndexMap[id];\n      const resource = combinedBatch[normalizedType][id];\n\n      // an empty resource passed into batch changes is how we'll signal which ones to delete\n      if (Object.keys(resource).length === 0 && index !== undefined) {\n        typeCache.map.delete(id);\n        removeAtIndexes.push(index);\n      } else if (Object.keys(resource).length === 0) {\n        // No op. We're removing it... but we don't have it in the cache\n      } else {\n        if (normalizedType === SCHEMA) {\n          addSchemaIndexFields(resource);\n        }\n        const classyResource = classify(ctx, resource);\n\n        if (index === undefined) {\n          typeCache.list.push(classyResource);\n          typeCache.map.set(id, classyResource);\n\n          typeCacheIndexMap[classyResource[keyField]] = typeCache.list.length - 1;\n        } else {\n          replaceResource(typeCache.list[index], resource, ctx.getters);\n        }\n      }\n    });\n\n    // looping through the removeAtIndexes, making sure to offset by iteration so the array changing doesn't mess us up\n    removeAtIndexes.sort().forEach((cacheIndex, loopIndex) => {\n      typeCache.list.splice(cacheIndex - loopIndex, 1);\n    });\n\n    const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n    const limit = opts?.limit;\n\n    // If there is a limit to the number of resources we can store for this type then\n    // remove the first one to keep the list size to that limit\n    if (limit && typeCache.list.length > limit) {\n      const rm = typeCache.list.shift();\n\n      typeCache.map.delete(rm.id);\n    }\n\n    typeCache.generation++;\n  });\n}\n\nexport function loadAll(state, {\n  type,\n  data,\n  ctx,\n  skipHaveAll,\n  namespace,\n  revision\n}) {\n  const { getters } = ctx;\n\n  if (!data) {\n    return;\n  }\n\n  const opts = ctx.rootGetters[`type-map/optionsFor`](type);\n  const limit = opts?.limit;\n\n  // If there is a limit, only store the last elements from the list to keep to that limit\n  if (limit) {\n    data = data.slice(-limit);\n  }\n\n  const keyField = getters.keyFieldForType(type);\n  const proxies = data.map((x) => classify(ctx, x));\n  const cache = registerType(state, type);\n\n  clear(cache.list);\n  cache.map.clear();\n  cache.revision = revision || 0;\n  cache.generation++;\n\n  addObjects(cache.list, proxies);\n\n  for ( let i = 0 ; i < proxies.length ; i++ ) {\n    cache.map.set(proxies[i][keyField], proxies[i]);\n  }\n\n  // Allow requester to skip setting that everything has loaded\n  if (!skipHaveAll) {\n    cache.haveNamespace = namespace;\n    cache.haveAll = !namespace;\n  }\n\n  return proxies;\n}\n\nexport default {\n  registerType,\n  load,\n\n  applyConfig(state, config) {\n    if ( !state.config ) {\n      state.config = {};\n    }\n\n    Object.assign(state.config, config);\n  },\n\n  loadMulti(state, { data, ctx }) {\n    // console.log('### Mutation loadMulti', data?.length);\n    for ( const entry of data ) {\n      load(state, { data: entry, ctx });\n    }\n  },\n\n  loadSelector(state, {\n    type, entries, ctx, selector, revision\n  }) {\n    const cache = registerType(state, type);\n\n    for ( const data of entries ) {\n      load(state, { data, ctx });\n    }\n\n    cache.haveSelector[selector] = true;\n    cache.revision = revision || 0;\n  },\n\n  loadAll,\n\n  /**\n   * Handles changes (add, update, remove) to multiple resources for multiple types\n   */\n  batchChanges,\n\n  loadMerge(state, { type, data: allLatest, ctx }) {\n    const { commit, getters } = ctx;\n    // const allLatest = await dispatch('findAll', { type, opt: { force: true, load, _NONE } });\n    // const allExisting = getters.all({type});\n    const keyField = getters.keyFieldForType(type);\n    const cache = state.types[type];\n\n    allLatest.forEach((entry) => {\n      const existing = state.types[type].map.get(entry[keyField]);\n\n      load(state, {\n        data: entry, ctx, existing\n      });\n    });\n    cache.list.forEach((entry) => {\n      if (!allLatest.find((toLoadEntry) => toLoadEntry.id === entry.id)) {\n        commit('remove', entry);\n      }\n    });\n  },\n\n  // Add a set of resources to the store for a given type\n  // Don't mark the 'haveAll' field - this is used for incremental loading\n  loadAdd(state, { type, data: allLatest, ctx }) {\n    const { getters } = ctx;\n    const keyField = getters.keyFieldForType(type);\n\n    allLatest.forEach((entry) => {\n      const existing = state.types[type].map.get(entry[keyField]);\n\n      load(state, {\n        data: entry, ctx, existing\n      });\n    });\n  },\n\n  forgetAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    clear(cache.list);\n    cache.map.clear();\n    cache.generation++;\n  },\n\n  setHaveAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    cache.haveAll = true;\n  },\n\n  setHaveNamespace(state, { type, namespace }) {\n    const cache = registerType(state, type);\n\n    cache.haveNamespace = namespace;\n  },\n\n  loadedAll(state, { type }) {\n    const cache = registerType(state, type);\n\n    cache.generation++;\n    cache.haveAll = true;\n  },\n\n  remove(state, obj) {\n    if (obj) {\n      remove(state, obj, this.getters);\n    }\n  },\n\n  reset(state) {\n    resetStore(state, this.commit);\n  },\n\n  forgetType,\n\n  incrementLoadCounter(state, type) {\n    const typeData = state.types[type];\n\n    if (typeData) {\n      typeData.loadCounter++;\n    }\n  },\n\n};\n"],"mappings":"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","ignoreList":[]}]}