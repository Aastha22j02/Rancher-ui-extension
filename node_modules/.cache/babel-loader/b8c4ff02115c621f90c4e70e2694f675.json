{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/components/Questions/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/components/Questions/index.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdHlwZW9mIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IiOwppbXBvcnQgX2RlZmluZVByb3BlcnR5IGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKZnVuY3Rpb24gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIociwgZSkgeyB2YXIgdCA9ICJ1bmRlZmluZWQiICE9IHR5cGVvZiBTeW1ib2wgJiYgcltTeW1ib2wuaXRlcmF0b3JdIHx8IHJbIkBAaXRlcmF0b3IiXTsgaWYgKCF0KSB7IGlmIChBcnJheS5pc0FycmF5KHIpIHx8ICh0ID0gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIpKSB8fCBlICYmIHIgJiYgIm51bWJlciIgPT0gdHlwZW9mIHIubGVuZ3RoKSB7IHQgJiYgKHIgPSB0KTsgdmFyIF9uID0gMCwgRiA9IGZ1bmN0aW9uIEYoKSB7fTsgcmV0dXJuIHsgczogRiwgbjogZnVuY3Rpb24gbigpIHsgcmV0dXJuIF9uID49IHIubGVuZ3RoID8geyBkb25lOiAhMCB9IDogeyBkb25lOiAhMSwgdmFsdWU6IHJbX24rK10gfTsgfSwgZTogZnVuY3Rpb24gZShyKSB7IHRocm93IHI7IH0sIGY6IEYgfTsgfSB0aHJvdyBuZXcgVHlwZUVycm9yKCJJbnZhbGlkIGF0dGVtcHQgdG8gaXRlcmF0ZSBub24taXRlcmFibGUgaW5zdGFuY2UuXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuIik7IH0gdmFyIG8sIGEgPSAhMCwgdSA9ICExOyByZXR1cm4geyBzOiBmdW5jdGlvbiBzKCkgeyB0ID0gdC5jYWxsKHIpOyB9LCBuOiBmdW5jdGlvbiBuKCkgeyB2YXIgciA9IHQubmV4dCgpOyByZXR1cm4gYSA9IHIuZG9uZSwgcjsgfSwgZTogZnVuY3Rpb24gZShyKSB7IHUgPSAhMCwgbyA9IHI7IH0sIGY6IGZ1bmN0aW9uIGYoKSB7IHRyeSB7IGEgfHwgbnVsbCA9PSB0LnJldHVybiB8fCB0LnJldHVybigpOyB9IGZpbmFsbHkgeyBpZiAodSkgdGhyb3cgbzsgfSB9IH07IH0KZnVuY3Rpb24gX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5KHIsIGEpIHsgaWYgKHIpIHsgaWYgKCJzdHJpbmciID09IHR5cGVvZiByKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkociwgYSk7IHZhciB0ID0ge30udG9TdHJpbmcuY2FsbChyKS5zbGljZSg4LCAtMSk7IHJldHVybiAiT2JqZWN0IiA9PT0gdCAmJiByLmNvbnN0cnVjdG9yICYmICh0ID0gci5jb25zdHJ1Y3Rvci5uYW1lKSwgIk1hcCIgPT09IHQgfHwgIlNldCIgPT09IHQgPyBBcnJheS5mcm9tKHIpIDogIkFyZ3VtZW50cyIgPT09IHQgfHwgL14oPzpVaXxJKW50KD86OHwxNnwzMikoPzpDbGFtcGVkKT9BcnJheSQvLnRlc3QodCkgPyBfYXJyYXlMaWtlVG9BcnJheShyLCBhKSA6IHZvaWQgMDsgfSB9CmZ1bmN0aW9uIF9hcnJheUxpa2VUb0FycmF5KHIsIGEpIHsgKG51bGwgPT0gYSB8fCBhID4gci5sZW5ndGgpICYmIChhID0gci5sZW5ndGgpOyBmb3IgKHZhciBlID0gMCwgbiA9IEFycmF5KGEpOyBlIDwgYTsgZSsrKSBuW2VdID0gcltlXTsgcmV0dXJuIG47IH0KaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvdWJ1bnR1L3N1c2Vjb25mL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9yZWdlbmVyYXRvci9pbmRleC5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKZnVuY3Rpb24gb3duS2V5cyhlLCByKSB7IHZhciB0ID0gT2JqZWN0LmtleXMoZSk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBvID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKTsgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHIpLmVudW1lcmFibGU7IH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pOyB9IHJldHVybiB0OyB9CmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQoZSkgeyBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykgeyB2YXIgdCA9IG51bGwgIT0gYXJndW1lbnRzW3JdID8gYXJndW1lbnRzW3JdIDoge307IHIgJSAyID8gb3duS2V5cyhPYmplY3QodCksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IF9kZWZpbmVQcm9wZXJ0eShlLCByLCB0W3JdKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHQsIHIpKTsgfSk7IH0gcmV0dXJuIGU7IH0KaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZyb20uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zeW1ib2wuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5tYXRjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy50cmltLmpzIjsKaW1wb3J0IEpleGwgZnJvbSAnamV4bCc7CmltcG9ydCBUYWIgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvVGFiYmVkL1RhYic7CmltcG9ydCB7IGdldCwgc2V0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IHNvcnRCeSwgY2FtZWxDYXNlIH0gZnJvbSAnbG9kYXNoJzsKaW1wb3J0IHsgX0VESVQgfSBmcm9tICdAc2hlbGwvY29uZmlnL3F1ZXJ5LXBhcmFtcyc7CmltcG9ydCBTdHJpbmdUeXBlIGZyb20gJy4vU3RyaW5nJzsKaW1wb3J0IEJvb2xlYW5UeXBlIGZyb20gJy4vQm9vbGVhbic7CmltcG9ydCBFbnVtVHlwZSBmcm9tICcuL0VudW0nOwppbXBvcnQgSW50VHlwZSBmcm9tICcuL0ludCc7CmltcG9ydCBGbG9hdFR5cGUgZnJvbSAnLi9GbG9hdCc7CmltcG9ydCBBcnJheVR5cGUgZnJvbSAnLi9BcnJheSc7CmltcG9ydCBNYXBUeXBlIGZyb20gJy4vUXVlc3Rpb25NYXAnOwppbXBvcnQgUmVmZXJlbmNlVHlwZSBmcm9tICcuL1JlZmVyZW5jZSc7CmltcG9ydCBDbG91ZENyZWRlbnRpYWxUeXBlIGZyb20gJy4vQ2xvdWRDcmVkZW50aWFsJzsKaW1wb3J0IFJhZGlvVHlwZSBmcm9tICcuL1JhZGlvJzsKaW1wb3J0IFlhbWxUeXBlIGZyb20gJy4vWWFtbCc7CmltcG9ydCBMb2FkaW5nIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL0xvYWRpbmcnOwpleHBvcnQgdmFyIGtub3duVHlwZXMgPSB7CiAgc3RyaW5nOiBTdHJpbmdUeXBlLAogIGhvc3RuYW1lOiBTdHJpbmdUeXBlLAogIG11bHRpbGluZTogU3RyaW5nVHlwZSwKICBwYXNzd29yZDogU3RyaW5nVHlwZSwKICBpcGFkZHI6IFN0cmluZ1R5cGUsCiAgY2lkcjogU3RyaW5nVHlwZSwKICBjcm9uOiBTdHJpbmdUeXBlLAogIGJvb2xlYW46IEJvb2xlYW5UeXBlLAogIGVudW06IEVudW1UeXBlLAogIGludDogSW50VHlwZSwKICBmbG9hdDogRmxvYXRUeXBlLAogIHF1ZXN0aW9uTWFwOiBNYXBUeXBlLAogIHJlZmVyZW5jZTogUmVmZXJlbmNlVHlwZSwKICBjb25maWdtYXA6IFJlZmVyZW5jZVR5cGUsCiAgc2VjcmV0OiBSZWZlcmVuY2VUeXBlLAogIHN0b3JhZ2VjbGFzczogUmVmZXJlbmNlVHlwZSwKICBwdmM6IFJlZmVyZW5jZVR5cGUsCiAgY2xvdWRjcmVkZW50aWFsOiBDbG91ZENyZWRlbnRpYWxUeXBlLAogIHJhZGlvOiBSYWRpb1R5cGUsCiAgeWFtbDogWWFtbFR5cGUKfTsKZXhwb3J0IGZ1bmN0aW9uIGNvbXBvbmVudEZvclF1ZXN0aW9uKHEpIHsKICB2YXIgdHlwZSA9IChxLnR5cGUgfHwgJycpLnRvTG93ZXJDYXNlKCk7CiAgaWYgKGtub3duVHlwZXNbdHlwZV0pIHsKICAgIHJldHVybiB0eXBlOwogIH0gZWxzZSBpZiAodHlwZS5zdGFydHNXaXRoKCdhcnJheVsnKSkgewogICAgLy8gVGhpcyBvbmx5IHJlYWxseSB3b3JrcyBmb3IgYXJyYXlbc3RyaW5nfG11bHRpbGluZV0sIGJ1dCBjbG9zZSBlbm91Z2ggZm9yIG5vdy4KICAgIHJldHVybiBBcnJheVR5cGU7CiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ21hcFsnKSkgewogICAgLy8gU2FtZSwgb25seSB3b3JrcyB3aXRoIG1hcFtzdHJpbmd8bXVsdGlsaW5lXQogICAgcmV0dXJuIE1hcFR5cGU7CiAgfSBlbHNlIGlmICh0eXBlLnN0YXJ0c1dpdGgoJ3JlZmVyZW5jZVsnKSkgewogICAgLy8gU2FtZSwgb25seSB3b3JrcyB3aXRoIG1hcFtzdHJpbmd8bXVsdGlsaW5lXQogICAgcmV0dXJuIFJlZmVyZW5jZVR5cGU7CiAgfQogIHJldHVybiAnc3RyaW5nJzsKfQpleHBvcnQgZnVuY3Rpb24gc2NoZW1hVG9RdWVzdGlvbnMoZmllbGRzKSB7CiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhmaWVsZHMpOwogIHZhciBvdXQgPSBbXTsKICBmb3IgKHZhciBfaSA9IDAsIF9rZXlzID0ga2V5czsgX2kgPCBfa2V5cy5sZW5ndGg7IF9pKyspIHsKICAgIHZhciBrID0gX2tleXNbX2ldOwogICAgb3V0LnB1c2goX29iamVjdFNwcmVhZCh7CiAgICAgIHZhcmlhYmxlOiBrLAogICAgICBsYWJlbDogawogICAgfSwgZmllbGRzW2tdKSk7CiAgfQogIHJldHVybiBvdXQ7Cn0KZnVuY3Rpb24gbWlncmF0ZShleHByKSB7CiAgdmFyIG91dDsKICBpZiAoZXhwci5pbmNsdWRlcygnfHwnKSkgewogICAgb3V0ID0gZXhwci5zcGxpdCgnfHwnKS5tYXAoZnVuY3Rpb24gKHgpIHsKICAgICAgcmV0dXJuIG1pZ3JhdGUoeCk7CiAgICB9KS5qb2luKCcgfHwgJyk7CiAgfSBlbHNlIGlmIChleHByLmluY2x1ZGVzKCcmJicpKSB7CiAgICBvdXQgPSBleHByLnNwbGl0KCcmJicpLm1hcChmdW5jdGlvbiAoeCkgewogICAgICByZXR1cm4gbWlncmF0ZSh4KTsKICAgIH0pLmpvaW4oJyAmJiAnKTsKICB9IGVsc2UgewogICAgdmFyIHBhcnRzID0gZXhwci5tYXRjaCgvXiguKikoIT89KSguKikkLyk7CiAgICBpZiAocGFydHMpIHsKICAgICAgdmFyIGtleSA9IHBhcnRzWzFdLnRyaW0oKTsKICAgICAgdmFyIG9wID0gcGFydHNbMl0udHJpbSgpID09PSAnIT0nID8gJyE9JyA6ICc9PSc7CiAgICAgIHZhciB2YWwgPSBwYXJ0c1szXS50cmltKCk7CiAgICAgIGlmICh2YWwgPT09ICd0cnVlJyB8fCB2YWwgPT09ICdmYWxzZScgfHwgdmFsID09PSAnbnVsbCcpIHsKICAgICAgICBvdXQgPSAiIi5jb25jYXQoa2V5LCAiICIpLmNvbmNhdChvcCwgIiAiKS5jb25jYXQodmFsKTsKICAgICAgfSBlbHNlIGlmICh2YWwgPT09ICcnKSB7CiAgICAgICAgLy8gRXhpc3RpbmcgY2hhcnRzIGV4cGVjdCBgZm9vPWAgd2l0aCBge2ZvbzogbnVsbH1gIHRvIGJlIHRydWUuCiAgICAgICAgaWYgKG9wID09PSAnIT0nKSB7CiAgICAgICAgICBvdXQgPSAiISEiLmNvbmNhdChrZXkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBvdXQgPSAiISIuY29uY2F0KGtleSk7CiAgICAgICAgfQogICAgICAgIC8vIG91dCA9IGAkeyBvcCA9PT0gJyEnID8gJyEnIDogJycgfSgkeyBrZXkgfSA9PSAiIiB8fCAkeyBrZXkgfSA9PSBudWxsKWA7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgb3V0ID0gIiIuY29uY2F0KGtleSwgIiAiKS5jb25jYXQob3AsICIgXCIiKS5jb25jYXQodmFsLCAiXCIiKTsKICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgdHJ5IHsKICAgICAgICBKZXhsLmNvbXBpbGUoZXhwcik7CiAgICAgICAgb3V0ID0gZXhwcjsKICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIG1pZ3JhdGluZyBleHByZXNzaW9uOicsIGV4cHIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKCiAgICAgICAgb3V0ID0gJ3RydWUnOwogICAgICB9CiAgICB9CiAgfQogIHJldHVybiBvdXQ7Cn0KZXhwb3J0IGRlZmF1bHQgewogIGNvbXBvbmVudHM6IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwga25vd25UeXBlcyksIHt9LCB7CiAgICBUYWI6IFRhYiwKICAgIExvYWRpbmc6IExvYWRpbmcKICB9KSwKICBwcm9wczogewogICAgbW9kZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IF9FRElUCiAgICB9LAogICAgdmFsdWU6IHsKICAgICAgdHlwZTogT2JqZWN0LAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIHRhYmJlZDogewogICAgICB0eXBlOiBbQm9vbGVhbiwgU3RyaW5nXSwKICAgICAgZGVmYXVsdDogdHJ1ZQogICAgfSwKICAgIC8vIENhbiBiZSBhIGNoYXJ0VmVyc2lvbiwgcmVzb3VyY2UgU2NoZW1hLCBvciBhbiBBcnJheSBvZiBxdWVzdGlvbiBvYmplY3RzCiAgICBzb3VyY2U6IHsKICAgICAgdHlwZTogW09iamVjdCwgQXJyYXldLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIHRhcmdldE5hbWVzcGFjZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAogICAgaWdub3JlVmFyaWFibGVzOiB7CiAgICAgIHR5cGU6IEFycmF5LAogICAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gW107CiAgICAgIH0KICAgIH0sCiAgICBkaXNhYmxlZDogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGluU3RvcmU6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnY2x1c3RlcicKICAgIH0sCiAgICBlbWl0OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZhbHNlCiAgICB9CiAgfSwKICBmZXRjaDogZnVuY3Rpb24gZmV0Y2goKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwogICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIGlmICghKF90aGlzLnNvdXJjZS50eXBlID09PSAnc2NoZW1hJyAmJiBfdGhpcy5zb3VyY2UucmVxdWlyZXNSZXNvdXJjZUZpZWxkcykpIHsKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgfQogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMzsKICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNvdXJjZS5mZXRjaFJlc291cmNlRmllbGRzKCk7CiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgIH0KICAgICAgfSwgX2NhbGxlZSk7CiAgICB9KSkoKTsKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICB2YWx1ZUdlbmVyYXRpb246IDAKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgYWxsUXVlc3Rpb25zOiBmdW5jdGlvbiBhbGxRdWVzdGlvbnMoKSB7CiAgICAgIHZhciBfdGhpcyRzb3VyY2UkcXVlc3Rpb247CiAgICAgIGlmICgoX3RoaXMkc291cmNlJHF1ZXN0aW9uID0gdGhpcy5zb3VyY2UucXVlc3Rpb25zKSAhPT0gbnVsbCAmJiBfdGhpcyRzb3VyY2UkcXVlc3Rpb24gIT09IHZvaWQgMCAmJiBfdGhpcyRzb3VyY2UkcXVlc3Rpb24ucXVlc3Rpb25zKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlLnF1ZXN0aW9ucy5xdWVzdGlvbnM7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5zb3VyY2UudHlwZSA9PT0gJ3NjaGVtYScgJiYgdGhpcy5zb3VyY2UucmVzb3VyY2VGaWVsZHMpIHsKICAgICAgICByZXR1cm4gc2NoZW1hVG9RdWVzdGlvbnModGhpcy5zb3VyY2UucmVzb3VyY2VGaWVsZHMpOwogICAgICB9IGVsc2UgaWYgKF90eXBlb2YodGhpcy5zb3VyY2UpID09PSAnb2JqZWN0JykgewogICAgICAgIHJldHVybiBzY2hlbWFUb1F1ZXN0aW9ucyh0aGlzLnNvdXJjZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CiAgICB9LAogICAgc2hvd25RdWVzdGlvbnM6IGZ1bmN0aW9uIHNob3duUXVlc3Rpb25zKCkgewogICAgICB2YXIgdmFsdWVzID0gdGhpcy52YWx1ZTsKICAgICAgdmFyIHZtID0gdGhpczsKICAgICAgaWYgKHRoaXMudmFsdWVHZW5lcmF0aW9uIDwgMCkgewogICAgICAgIC8vIFBvaW50bGVzcyBjb25kaXRpb24gdG8gZ2V0IHRoaXMgdG8gZGVwZW5kIG9uIGdlbmVyYXRpb24gYW5kIHJlY29tcHV0ZQogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB2YXIgb3V0ID0gW107CiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcih0aGlzLmFsbFF1ZXN0aW9ucyksCiAgICAgICAgX3N0ZXA7CiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciBxID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICBpZiAodGhpcy5pZ25vcmVWYXJpYWJsZXMuaW5jbHVkZXMocS52YXJpYWJsZSkpIHsKICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICB9CiAgICAgICAgICBhZGRRdWVzdGlvbihxKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQogICAgICByZXR1cm4gb3V0OwogICAgICBmdW5jdGlvbiBhZGRRdWVzdGlvbihxKSB7CiAgICAgICAgdmFyIF9xJHN1YnF1ZXN0aW9uczsKICAgICAgICB2YXIgZGVwdGggPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDE7CiAgICAgICAgdmFyIHBhcmVudEdyb3VwID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7CiAgICAgICAgaWYgKCF2bS5zaG91bGRTaG93KHEsIHZhbHVlcykpIHsKICAgICAgICAgIHJldHVybjsKICAgICAgICB9CiAgICAgICAgcS5kZXB0aCA9IGRlcHRoOwogICAgICAgIHEuZ3JvdXAgPSBxLmdyb3VwIHx8IHBhcmVudEdyb3VwOwogICAgICAgIG91dC5wdXNoKHEpOwogICAgICAgIGlmICgoX3Ekc3VicXVlc3Rpb25zID0gcS5zdWJxdWVzdGlvbnMpICE9PSBudWxsICYmIF9xJHN1YnF1ZXN0aW9ucyAhPT0gdm9pZCAwICYmIF9xJHN1YnF1ZXN0aW9ucy5sZW5ndGggJiYgdm0uc2hvdWxkU2hvd1N1YihxLCB2YWx1ZXMpKSB7CiAgICAgICAgICB2YXIgX2l0ZXJhdG9yMiA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKHEuc3VicXVlc3Rpb25zKSwKICAgICAgICAgICAgX3N0ZXAyOwogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICB2YXIgc3ViID0gX3N0ZXAyLnZhbHVlOwogICAgICAgICAgICAgIGFkZFF1ZXN0aW9uKHN1YiwgZGVwdGggKyAxLCBxLmdyb3VwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgY2hhcnROYW1lOiBmdW5jdGlvbiBjaGFydE5hbWUoKSB7CiAgICAgIHZhciBfdGhpcyRzb3VyY2UkY2hhcnQ7CiAgICAgIHJldHVybiAoX3RoaXMkc291cmNlJGNoYXJ0ID0gdGhpcy5zb3VyY2UuY2hhcnQpID09PSBudWxsIHx8IF90aGlzJHNvdXJjZSRjaGFydCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkc291cmNlJGNoYXJ0Lm5hbWU7CiAgICB9LAogICAgZ3JvdXBzOiBmdW5jdGlvbiBncm91cHMoKSB7CiAgICAgIHZhciBtYXAgPSB7fTsKICAgICAgdmFyIGRlZmF1bHRHcm91cCA9ICdRdWVzdGlvbnMnOwogICAgICB2YXIgd2VpZ2h0ID0gdGhpcy5zaG93blF1ZXN0aW9ucy5sZW5ndGg7CiAgICAgIHZhciBfaXRlcmF0b3IzID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIodGhpcy5zaG93blF1ZXN0aW9ucyksCiAgICAgICAgX3N0ZXAzOwogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yMy5zKCk7ICEoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgcSA9IF9zdGVwMy52YWx1ZTsKICAgICAgICAgIHZhciBncm91cCA9IHEuZ3JvdXAgfHwgZGVmYXVsdEdyb3VwOwogICAgICAgICAgdmFyIG5vcm1hbGl6ZWQgPSBncm91cC50cmltKCkudG9Mb3dlckNhc2UoKTsKICAgICAgICAgIHZhciBuYW1lID0gdGhpcy4kc3RvcmUuZ2V0dGVyc1snaTE4bi93aXRoRmFsbGJhY2snXSgiY2hhcnRzLiIuY29uY2F0KHRoaXMuY2hhcnROYW1lLCAiLmdyb3VwLiIpLmNvbmNhdChjYW1lbENhc2UoZ3JvdXApKSwgbnVsbCwgZ3JvdXApOwogICAgICAgICAgaWYgKCFtYXBbbm9ybWFsaXplZF0pIHsKICAgICAgICAgICAgbWFwW25vcm1hbGl6ZWRdID0gewogICAgICAgICAgICAgIG5hbWU6IG5hbWUsCiAgICAgICAgICAgICAgcXVlc3Rpb25zOiBbXSwKICAgICAgICAgICAgICB3ZWlnaHQ6IHdlaWdodC0tCiAgICAgICAgICAgIH07CiAgICAgICAgICB9CiAgICAgICAgICBtYXBbbm9ybWFsaXplZF0ucXVlc3Rpb25zLnB1c2gocSk7CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IzLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IzLmYoKTsKICAgICAgfQogICAgICB2YXIgb3V0ID0gT2JqZWN0LnZhbHVlcyhtYXApOwogICAgICByZXR1cm4gc29ydEJ5KG91dCwgJ3dlaWdodDpkZXNjJyk7CiAgICB9LAogICAgYXNUYWJzOiBmdW5jdGlvbiBhc1RhYnMoKSB7CiAgICAgIGlmICh0aGlzLnRhYmJlZCA9PT0gZmFsc2UgfHwgdGhpcy50YWJiZWQgPT09ICduZXZlcicpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKHRoaXMudGFiYmVkID09PSAnbXVsdGlwbGUnKSB7CiAgICAgICAgcmV0dXJuICEhdGhpcy5ncm91cHMubGVuZ3RoOwogICAgICB9CiAgICAgIHJldHVybiB0cnVlOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIHZhbHVlOiB7CiAgICAgIGRlZXA6IHRydWUsCiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoKSB7CiAgICAgICAgdGhpcy52YWx1ZUdlbmVyYXRpb24rKzsKICAgICAgfQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgZ2V0OiBnZXQsCiAgICBzZXQ6IHNldCwKICAgIGNvbXBvbmVudEZvclF1ZXN0aW9uOiBjb21wb25lbnRGb3JRdWVzdGlvbiwKICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHZhcmlhYmxlLCAkZXZlbnQpIHsKICAgICAgc2V0KHRoaXMudmFsdWUsIHZhcmlhYmxlLCAkZXZlbnQpOwogICAgICBpZiAodGhpcy5lbWl0KSB7CiAgICAgICAgdGhpcy4kZW1pdCgndXBkYXRlZCcpOwogICAgICB9CiAgICB9LAogICAgZXZhbEV4cHI6IGZ1bmN0aW9uIGV2YWxFeHByKGV4cHIsIHZhbHVlcywgcXVlc3Rpb24sIGFsbFF1ZXN0aW9ucykgewogICAgICB0cnkgewogICAgICAgIHZhciBvdXQgPSBKZXhsLmV2YWxTeW5jKGV4cHIsIHZhbHVlcyk7CgogICAgICAgIC8vIGNvbnNvbGUubG9nKCdFdmFsJywgZXhwciwgJz0+ICcsIG91dCk7CgogICAgICAgIC8vIElmIHRoZSB2YXJpYWJsZSBjb250YWlucyBhIGh5cGhlbiwgY2hlY2sgaWYgaXQgZXZhbHVhdGVzIHRvIHRydWUKICAgICAgICAvLyBhY2NvcmRpbmcgdG8gdGhlIGV2YWx1YXRpb24gbG9naWMgdXNlZCBpbiB0aGUgb2xkIFVJLgogICAgICAgIC8vIFRoaXMgaGVscHMgdXNlcnMgYXZvaWQgbWFudWFsIHdvcmsgdG8gbWlncmF0ZSBmcm9tIGxlZ2FjeSBhcHBzLgogICAgICAgIGlmICghb3V0ICYmIGV4cHIuaW5jbHVkZXMoJy0nKSkgewogICAgICAgICAgdmFyIHJlcyA9IHRoaXMuZXZhbHVhdGUocXVlc3Rpb24sIGFsbFF1ZXN0aW9ucyk7CiAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgIH0KICAgICAgICByZXR1cm4gb3V0OwogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBldmFsdWF0aW5nIGV4cHJlc3Npb246JywgZXhwciwgdmFsdWVzKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCgogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICB9LAogICAgZXZhbHVhdGU6IGZ1bmN0aW9uIGV2YWx1YXRlKHF1ZXN0aW9uLCBhbGxRdWVzdGlvbnMpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIGlmICghcXVlc3Rpb24uc2hvd19pZikgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHZhciBhbmQgPSBxdWVzdGlvbi5zaG93X2lmLnNwbGl0KCcmJicpOwogICAgICB2YXIgb3IgPSBxdWVzdGlvbi5zaG93X2lmLnNwbGl0KCd8fCcpOwogICAgICB2YXIgcmVzdWx0OwogICAgICBpZiAoZ2V0KG9yLCAnbGVuZ3RoJykgPiAxKSB7CiAgICAgICAgcmVzdWx0ID0gb3Iuc29tZShmdW5jdGlvbiAoc2hvd0lmKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLmNhbEV4cHJlc3Npb24oc2hvd0lmLCBhbGxRdWVzdGlvbnMpOwogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdCA9IGFuZC5ldmVyeShmdW5jdGlvbiAoc2hvd0lmKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMyLmNhbEV4cHJlc3Npb24oc2hvd0lmLCBhbGxRdWVzdGlvbnMpOwogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9LAogICAgY2FsRXhwcmVzc2lvbjogZnVuY3Rpb24gY2FsRXhwcmVzc2lvbihzaG93SWYsIGFsbFF1ZXN0aW9ucykgewogICAgICBpZiAoc2hvd0lmLmluY2x1ZGVzKCchPScpKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaXNOb3RFcXVhbChzaG93SWYsIGFsbFF1ZXN0aW9ucyk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHRoaXMuaXNFcXVhbChzaG93SWYsIGFsbFF1ZXN0aW9ucyk7CiAgICAgIH0KICAgIH0sCiAgICBpc0VxdWFsOiBmdW5jdGlvbiBpc0VxdWFsKHNob3dJZiwgYWxsUXVlc3Rpb25zKSB7CiAgICAgIHNob3dJZiA9IHNob3dJZi50cmltKCk7CiAgICAgIHZhciB2YXJpYWJsZXMgPSB0aGlzLmdldFZhcmlhYmxlcyhzaG93SWYsICc9Jyk7CiAgICAgIGlmICh2YXJpYWJsZXMpIHsKICAgICAgICB2YXIgbGVmdCA9IHRoaXMuc3RyaW5naWZ5QW5zd2VyKHRoaXMuZ2V0QW5zd2VyKHZhcmlhYmxlcy5sZWZ0LCBhbGxRdWVzdGlvbnMpKTsKICAgICAgICB2YXIgcmlnaHQgPSB0aGlzLnN0cmluZ2lmeUFuc3dlcih2YXJpYWJsZXMucmlnaHQpOwogICAgICAgIHJldHVybiBsZWZ0ID09PSByaWdodDsKICAgICAgfQogICAgICByZXR1cm4gZmFsc2U7CiAgICB9LAogICAgaXNOb3RFcXVhbDogZnVuY3Rpb24gaXNOb3RFcXVhbChzaG93SWYsIGFsbFF1ZXN0aW9ucykgewogICAgICBzaG93SWYgPSBzaG93SWYudHJpbSgpOwogICAgICB2YXIgdmFyaWFibGVzID0gdGhpcy5nZXRWYXJpYWJsZXMoc2hvd0lmLCAnIT0nKTsKICAgICAgaWYgKHZhcmlhYmxlcykgewogICAgICAgIHZhciBsZWZ0ID0gdGhpcy5zdHJpbmdpZnlBbnN3ZXIodGhpcy5nZXRBbnN3ZXIodmFyaWFibGVzLmxlZnQsIGFsbFF1ZXN0aW9ucykpOwogICAgICAgIHZhciByaWdodCA9IHRoaXMuc3RyaW5naWZ5QW5zd2VyKHZhcmlhYmxlcy5yaWdodCk7CiAgICAgICAgcmV0dXJuIGxlZnQgIT09IHJpZ2h0OwogICAgICB9CiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCiAgICBnZXRWYXJpYWJsZXM6IGZ1bmN0aW9uIGdldFZhcmlhYmxlcyhzaG93SWYsIG9wZXJhdG9yKSB7CiAgICAgIGlmIChzaG93SWYuaW5jbHVkZXMob3BlcmF0b3IpKSB7CiAgICAgICAgdmFyIGFycmF5ID0gc2hvd0lmLnNwbGl0KG9wZXJhdG9yKTsKICAgICAgICBpZiAoYXJyYXkubGVuZ3RoID09PSAyKSB7CiAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICBsZWZ0OiBhcnJheVswXSwKICAgICAgICAgICAgcmlnaHQ6IGFycmF5WzFdCiAgICAgICAgICB9OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIG51bGw7CiAgICB9LAogICAgZ2V0QW5zd2VyOiBmdW5jdGlvbiBnZXRBbnN3ZXIodmFyaWFibGUsIHF1ZXN0aW9ucykgewogICAgICB2YXIgZm91bmQgPSBxdWVzdGlvbnMuZmluZChmdW5jdGlvbiAocSkgewogICAgICAgIHJldHVybiBxLnZhcmlhYmxlID09PSB2YXJpYWJsZTsKICAgICAgfSk7CiAgICAgIGlmIChmb3VuZCkgewogICAgICAgIC8vIEVxdWl2YWxlbnQgdG8gZmluZGluZyBxdWVzdGlvbi5hbnN3ZXIgaW4gRW1iZXIKICAgICAgICByZXR1cm4gZ2V0KHRoaXMudmFsdWUsIGZvdW5kLnZhcmlhYmxlKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdmFyaWFibGU7CiAgICAgIH0KICAgIH0sCiAgICBzdHJpbmdpZnlBbnN3ZXI6IGZ1bmN0aW9uIHN0cmluZ2lmeUFuc3dlcihhbnN3ZXIpIHsKICAgICAgaWYgKGFuc3dlciA9PT0gdW5kZWZpbmVkIHx8IGFuc3dlciA9PT0gbnVsbCkgewogICAgICAgIHJldHVybiAnJzsKICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYW5zd2VyID09PSAnc3RyaW5nJykgewogICAgICAgIHJldHVybiBhbnN3ZXI7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuICIiLmNvbmNhdChhbnN3ZXIpOwogICAgICB9CiAgICB9LAogICAgc2hvdWxkU2hvdzogZnVuY3Rpb24gc2hvdWxkU2hvdyhxLCB2YWx1ZXMpIHsKICAgICAgdmFyIGV4cHIgPSBxLmlmOwogICAgICBpZiAoZXhwciA9PT0gdW5kZWZpbmVkICYmIHEuc2hvd19pZiAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgZXhwciA9IG1pZ3JhdGUocS5zaG93X2lmKTsKICAgICAgfQogICAgICBpZiAoZXhwcikgewogICAgICAgIHZhciBzaG93biA9ICEhdGhpcy5ldmFsRXhwcihleHByLCB2YWx1ZXMsIHEsIHRoaXMuYWxsUXVlc3Rpb25zKTsKICAgICAgICByZXR1cm4gc2hvd247CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9LAogICAgc2hvdWxkU2hvd1N1YjogZnVuY3Rpb24gc2hvdWxkU2hvd1N1YihxLCB2YWx1ZXMpIHsKICAgICAgLy8gU2lnaCwgYm90aCBzaW5ndWxhciBhbmQgcGx1cmFsIGFyZSB1c2VkIGluIHRoZSB3aWxkLi4uCiAgICAgIHZhciBleHByID0gcS5zdWJxdWVzdGlvbnNfaWYgPT09IHVuZGVmaW5lZCA/IHEuc3VicXVlc3Rpb25faWYgOiBxLnN1YnF1ZXN0aW9uc19pZjsKICAgICAgdmFyIG9sZCA9IHEuc2hvd19zdWJxdWVzdGlvbnNfaWYgPT09IHVuZGVmaW5lZCA/IHEuc2hvd19zdWJxdWVzdGlvbl9pZiA6IHEuc2hvd19zdWJxdWVzdGlvbnNfaWY7CiAgICAgIGlmICghZXhwciAmJiBvbGQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIGlmIChvbGQgPT09IGZhbHNlIHx8IG9sZCA9PT0gJ2ZhbHNlJykgewogICAgICAgICAgZXhwciA9ICIhIi5jb25jYXQocS52YXJpYWJsZSk7CiAgICAgICAgfSBlbHNlIGlmIChvbGQgPT09IHRydWUgfHwgb2xkID09PSAndHJ1ZScpIHsKICAgICAgICAgIGV4cHIgPSAiISEiLmNvbmNhdChxLnZhcmlhYmxlKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgZXhwciA9ICIiLmNvbmNhdChxLnZhcmlhYmxlLCAiID09IFwiIikuY29uY2F0KG9sZCwgIlwiIik7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChleHByKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuZXZhbEV4cHIoZXhwciwgdmFsdWVzLCBxLCB0aGlzLmFsbFF1ZXN0aW9ucyk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRydWU7CiAgICB9CiAgfQp9Ow=="},{"version":3,"names":["Jexl","Tab","get","set","sortBy","camelCase","_EDIT","StringType","BooleanType","EnumType","IntType","FloatType","ArrayType","MapType","ReferenceType","CloudCredentialType","RadioType","YamlType","Loading","knownTypes","string","hostname","multiline","password","ipaddr","cidr","cron","boolean","enum","int","float","questionMap","reference","configmap","secret","storageclass","pvc","cloudcredential","radio","yaml","componentForQuestion","q","type","toLowerCase","startsWith","schemaToQuestions","fields","keys","Object","out","_i","_keys","length","k","push","_objectSpread","variable","label","migrate","expr","includes","split","map","x","join","parts","match","key","trim","op","val","concat","compile","e","console","error","components","props","mode","String","default","value","required","tabbed","Boolean","source","Array","targetNamespace","ignoreVariables","disabled","inStore","emit","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","requiresResourceFields","fetchResourceFields","stop","data","valueGeneration","computed","allQuestions","_this$source$question","questions","resourceFields","_typeof","shownQuestions","values","vm","_iterator","_createForOfIteratorHelper","_step","s","n","done","addQuestion","err","f","_q$subquestions","depth","arguments","undefined","parentGroup","shouldShow","group","subquestions","shouldShowSub","_iterator2","_step2","sub","chartName","_this$source$chart","chart","name","groups","defaultGroup","weight","_iterator3","_step3","normalized","$store","getters","asTabs","watch","deep","handler","methods","update","$event","$emit","evalExpr","question","evalSync","res","evaluate","_this2","show_if","and","or","result","some","showIf","calExpression","every","isNotEqual","isEqual","variables","getVariables","left","stringifyAnswer","getAnswer","right","operator","array","found","find","answer","if","shown","subquestions_if","subquestion_if","old","show_subquestions_if","show_subquestion_if"],"sources":["node_modules/@rancher/shell/components/Questions/index.vue"],"sourcesContent":["<script>\nimport Jexl from 'jexl';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport { get, set } from '@shell/utils/object';\nimport { sortBy, camelCase } from 'lodash';\nimport { _EDIT } from '@shell/config/query-params';\nimport StringType from './String';\nimport BooleanType from './Boolean';\nimport EnumType from './Enum';\nimport IntType from './Int';\nimport FloatType from './Float';\nimport ArrayType from './Array';\nimport MapType from './QuestionMap';\nimport ReferenceType from './Reference';\nimport CloudCredentialType from './CloudCredential';\nimport RadioType from './Radio';\nimport YamlType from './Yaml';\nimport Loading from '@shell/components/Loading';\n\nexport const knownTypes = {\n  string:          StringType,\n  hostname:        StringType,\n  multiline:       StringType,\n  password:        StringType,\n  ipaddr:          StringType,\n  cidr:            StringType,\n  cron:            StringType,\n  boolean:         BooleanType,\n  enum:            EnumType,\n  int:             IntType,\n  float:           FloatType,\n  questionMap:     MapType,\n  reference:       ReferenceType,\n  configmap:       ReferenceType,\n  secret:          ReferenceType,\n  storageclass:    ReferenceType,\n  pvc:             ReferenceType,\n  cloudcredential: CloudCredentialType,\n  radio:           RadioType,\n  yaml:            YamlType,\n};\n\nexport function componentForQuestion(q) {\n  const type = (q.type || '').toLowerCase();\n\n  if ( knownTypes[type] ) {\n    return type;\n  } else if ( type.startsWith('array[') ) { // This only really works for array[string|multiline], but close enough for now.\n    return ArrayType;\n  } else if ( type.startsWith('map[') ) { // Same, only works with map[string|multiline]\n    return MapType;\n  } else if ( type.startsWith('reference[') ) { // Same, only works with map[string|multiline]\n    return ReferenceType;\n  }\n\n  return 'string';\n}\n\nexport function schemaToQuestions(fields) {\n  const keys = Object.keys(fields);\n  const out = [];\n\n  for ( const k of keys ) {\n    out.push({\n      variable: k,\n      label:    k,\n      ...fields[k],\n    });\n  }\n\n  return out;\n}\n\nfunction migrate(expr) {\n  let out;\n\n  if ( expr.includes('||') ) {\n    out = expr.split('||').map((x) => migrate(x)).join(' || ');\n  } else if ( expr.includes('&&') ) {\n    out = expr.split('&&').map((x) => migrate(x)).join(' && ');\n  } else {\n    const parts = expr.match(/^(.*)(!?=)(.*)$/);\n\n    if ( parts ) {\n      const key = parts[1].trim();\n      const op = parts[2].trim() === '!=' ? '!=' : '==';\n      const val = parts[3].trim();\n\n      if ( val === 'true' || val === 'false' || val === 'null' ) {\n        out = `${ key } ${ op } ${ val }`;\n      } else if ( val === '' ) {\n        // Existing charts expect `foo=` with `{foo: null}` to be true.\n        if ( op === '!=' ) {\n          out = `!!${ key }`;\n        } else {\n          out = `!${ key }`;\n        }\n        // out = `${ op === '!' ? '!' : '' }(${ key } == \"\" || ${ key } == null)`;\n      } else {\n        out = `${ key } ${ op } \"${ val }\"`;\n      }\n    } else {\n      try {\n        Jexl.compile(expr);\n\n        out = expr;\n      } catch (e) {\n        console.error('Error migrating expression:', expr); // eslint-disable-line no-console\n\n        out = 'true';\n      }\n    }\n  }\n\n  return out;\n}\n\nexport default {\n  components: {\n    ...knownTypes,\n    Tab,\n    Loading,\n  },\n\n  props: {\n    mode: {\n      type:    String,\n      default: _EDIT,\n    },\n\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    tabbed: {\n      type:    [Boolean, String],\n      default: true,\n    },\n\n    // Can be a chartVersion, resource Schema, or an Array of question objects\n    source: {\n      type:     [Object, Array],\n      required: true,\n    },\n\n    targetNamespace: {\n      type:     String,\n      required: true\n    },\n\n    ignoreVariables: {\n      type:    Array,\n      default: () => [],\n    },\n\n    disabled: {\n      type:    Boolean,\n      default: false,\n    },\n\n    inStore: {\n      type:    String,\n      default: 'cluster'\n    },\n\n    emit: {\n      type:    Boolean,\n      default: false,\n    }\n  },\n\n  async fetch() {\n    // If this source is a schema, ensure the schema's `resourceFields` is populated\n    if (this.source.type === 'schema' && this.source.requiresResourceFields) {\n      await this.source.fetchResourceFields();\n    }\n  },\n\n  data() {\n    return { valueGeneration: 0 };\n  },\n\n  computed: {\n    allQuestions() {\n      if ( this.source.questions?.questions ) {\n        return this.source.questions.questions;\n      } else if ( this.source.type === 'schema' && this.source.resourceFields ) {\n        return schemaToQuestions(this.source.resourceFields);\n      } else if ( typeof this.source === 'object' ) {\n        return schemaToQuestions(this.source);\n      } else {\n        return [];\n      }\n    },\n\n    shownQuestions() {\n      const values = this.value;\n      const vm = this;\n\n      if ( this.valueGeneration < 0 ) {\n        // Pointless condition to get this to depend on generation and recompute\n        return;\n      }\n\n      const out = [];\n\n      for ( const q of this.allQuestions ) {\n        if ( this.ignoreVariables.includes(q.variable) ) {\n          continue;\n        }\n\n        addQuestion(q);\n      }\n\n      return out;\n\n      function addQuestion(q, depth = 1, parentGroup) {\n        if ( !vm.shouldShow(q, values) ) {\n          return;\n        }\n\n        q.depth = depth;\n        q.group = q.group || parentGroup;\n\n        out.push(q);\n\n        if ( q.subquestions?.length && vm.shouldShowSub(q, values) ) {\n          for ( const sub of q.subquestions ) {\n            addQuestion(sub, depth + 1, q.group);\n          }\n        }\n      }\n    },\n\n    chartName() {\n      return this.source.chart?.name;\n    },\n\n    groups() {\n      const map = {};\n      const defaultGroup = 'Questions';\n      let weight = this.shownQuestions.length;\n\n      for ( const q of this.shownQuestions ) {\n        const group = q.group || defaultGroup;\n\n        const normalized = group.trim().toLowerCase();\n        const name = this.$store.getters['i18n/withFallback'](`charts.${ this.chartName }.group.${ camelCase(group) }`, null, group);\n\n        if ( !map[normalized] ) {\n          map[normalized] = {\n            name,\n            questions: [],\n            weight:    weight--,\n          };\n        }\n\n        map[normalized].questions.push(q);\n      }\n\n      const out = Object.values(map);\n\n      return sortBy(out, 'weight:desc');\n    },\n\n    asTabs() {\n      if ( this.tabbed === false || this.tabbed === 'never' ) {\n        return false;\n      }\n\n      if ( this.tabbed === 'multiple' ) {\n        return !!this.groups.length;\n      }\n\n      return true;\n    },\n  },\n\n  watch: {\n    value: {\n      deep: true,\n\n      handler() {\n        this.valueGeneration++;\n      },\n    }\n  },\n\n  methods: {\n    get,\n    set,\n    componentForQuestion,\n\n    update(variable, $event) {\n      set(this.value, variable, $event);\n      if (this.emit) {\n        this.$emit('updated');\n      }\n    },\n    evalExpr(expr, values, question, allQuestions) {\n      try {\n        const out = Jexl.evalSync(expr, values);\n\n        // console.log('Eval', expr, '=> ', out);\n\n        // If the variable contains a hyphen, check if it evaluates to true\n        // according to the evaluation logic used in the old UI.\n        // This helps users avoid manual work to migrate from legacy apps.\n        if (!out && expr.includes('-')) {\n          const res = this.evaluate(question, allQuestions);\n\n          return res;\n        }\n\n        return out;\n      } catch (err) {\n        console.error('Error evaluating expression:', expr, values); // eslint-disable-line no-console\n\n        return true;\n      }\n    },\n    evaluate(question, allQuestions) {\n      if ( !question.show_if ) {\n        return true;\n      }\n      const and = question.show_if.split('&&');\n      const or = question.show_if.split('||');\n\n      let result;\n\n      if ( get(or, 'length') > 1 ) {\n        result = or.some((showIf) => this.calExpression(showIf, allQuestions));\n      } else {\n        result = and.every((showIf) => this.calExpression(showIf, allQuestions));\n      }\n\n      return result;\n    },\n    calExpression(showIf, allQuestions) {\n      if ( showIf.includes('!=')) {\n        return this.isNotEqual(showIf, allQuestions);\n      } else {\n        return this.isEqual(showIf, allQuestions);\n      }\n    },\n    isEqual(showIf, allQuestions) {\n      showIf = showIf.trim();\n      const variables = this.getVariables(showIf, '=');\n\n      if ( variables ) {\n        const left = this.stringifyAnswer(this.getAnswer(variables.left, allQuestions));\n        const right = this.stringifyAnswer(variables.right);\n\n        return left === right;\n      }\n\n      return false;\n    },\n    isNotEqual(showIf, allQuestions) {\n      showIf = showIf.trim();\n      const variables = this.getVariables(showIf, '!=');\n\n      if ( variables ) {\n        const left = this.stringifyAnswer(this.getAnswer(variables.left, allQuestions));\n        const right = this.stringifyAnswer(variables.right);\n\n        return left !== right;\n      }\n\n      return false;\n    },\n    getVariables(showIf, operator) {\n      if ( showIf.includes(operator)) {\n        const array = showIf.split(operator);\n\n        if ( array.length === 2 ) {\n          return {\n            left:  array[0],\n            right: array[1]\n          };\n        } else {\n          return null;\n        }\n      }\n\n      return null;\n    },\n    getAnswer(variable, questions) {\n      const found = questions.find((q) => q.variable === variable);\n\n      if ( found ) {\n        // Equivalent to finding question.answer in Ember\n        return get(this.value, found.variable);\n      } else {\n        return variable;\n      }\n    },\n    stringifyAnswer(answer) {\n      if ( answer === undefined || answer === null ) {\n        return '';\n      } else if ( typeof answer === 'string' ) {\n        return answer;\n      } else {\n        return `${ answer }`;\n      }\n    },\n    shouldShow(q, values) {\n      let expr = q.if;\n\n      if ( expr === undefined && q.show_if !== undefined ) {\n        expr = migrate(q.show_if);\n      }\n\n      if ( expr ) {\n        const shown = !!this.evalExpr(expr, values, q, this.allQuestions);\n\n        return shown;\n      }\n\n      return true;\n    },\n    shouldShowSub(q, values) {\n      // Sigh, both singular and plural are used in the wild...\n      let expr = ( q.subquestions_if === undefined ? q.subquestion_if : q.subquestions_if);\n      const old = ( q.show_subquestions_if === undefined ? q.show_subquestion_if : q.show_subquestions_if);\n\n      if ( !expr && old !== undefined ) {\n        if ( old === false || old === 'false' ) {\n          expr = `!${ q.variable }`;\n        } else if ( old === true || old === 'true' ) {\n          expr = `!!${ q.variable }`;\n        } else {\n          expr = `${ q.variable } == \"${ old }\"`;\n        }\n      }\n\n      if ( expr ) {\n        return this.evalExpr(expr, values, q, this.allQuestions);\n      }\n\n      return true;\n    }\n  },\n};\n</script>\n\n<template>\n  <Loading\n    v-if=\"$fetchState.pending\"\n    mode=\"relative\"\n  />\n  <form v-else-if=\"asTabs\">\n    <Tab\n      v-for=\"g in groups\"\n      :key=\"g.name\"\n      :name=\"g.name\"\n      :label=\"g.name\"\n      :weight=\"g.weight\"\n    >\n      <div\n        v-for=\"q in g.questions\"\n        :key=\"q.variable\"\n        class=\"row question\"\n      >\n        <div class=\"col span-12\">\n          <component\n            :is=\"componentForQuestion(q)\"\n            :in-store=\"inStore\"\n            :question=\"q\"\n            :target-namespace=\"targetNamespace\"\n            :value=\"get(value, q.variable)\"\n            :disabled=\"disabled\"\n            :chart-name=\"chartName\"\n            @input=\"update(q.variable, $event)\"\n          />\n        </div>\n      </div>\n    </Tab>\n  </form>\n  <form v-else>\n    <div\n      v-for=\"g in groups\"\n      :key=\"g.name\"\n    >\n      <h3 v-if=\"groups.length > 1\">\n        {{ g.label }}\n      </h3>\n      <div\n        v-for=\"q in g.questions\"\n        :key=\"q.variable\"\n        class=\"row question\"\n      >\n        <div class=\"col span-12\">\n          <component\n            :is=\"componentForQuestion(q)\"\n            :in-store=\"inStore\"\n            :question=\"q\"\n            :target-namespace=\"targetNamespace\"\n            :mode=\"mode\"\n            :value=\"get(value, q.variable)\"\n            :disabled=\"disabled\"\n            :chart-name=\"chartName\"\n            @input=\"update(q.variable, $event)\"\n          />\n        </div>\n      </div>\n    </div>\n  </form>\n</template>\n\n<style lang=\"scss\" scoped>\n  .question {\n    margin-top: 10px;\n\n    &:first-child {\n      margin-top: 0;\n    }\n  }\n</style>\n"],"mappings":"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","ignoreList":[]}]}