{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/utils/object.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/utils/object.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["cloneDeep","flattenDeep","compact","JSONPath","Vue","transform","isObject","isArray","isEqual","difference","splitObjectPath","joinObjectPath","addObject","set","obj","path","value","ptr","parts","i","length","key","getAllValues","keysInOrder","split","currentValue","forEach","currentKey","map","indexValue","Array","arr","flat","filter","val","get","Error","startsWith","json","wrap","e","console","log","includes","_obj","remove","parentAry","undefined","leafKey","pop","parent","deleteProperty","pathAr","propToDelete","reduce","o","k","getter","clone","isEmpty","Object","keys","isSimpleKeyValue","_typeof","values","every","v","cleanUp","each","definedKeys","concat","subkey","diff","from","to","out","res","toVal","fromVal","fromKeys","toKeys","missing","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","f","isEqualBasic","fromValue","toValue","changeset","parentPath","arguments","_toConsumableArray","op","_objectSpread","changesetConflicts","a","b","sort","seen","_iterator2","_step2","ok","aa","bb","_iterator4","parentKeys","_step4","parentKey","_iterator3","_step3","_iterator5","_step5","push","applyChangeset","entry","pickBy","predicate","entries","_ref","_ref2","_slicedToArray","toDictionary","array","callback","assign","apply","item","_defineProperty","dropKeys","_iterator6","_step6"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/utils/object.js"],"sourcesContent":["import cloneDeep from 'lodash/cloneDeep';\nimport flattenDeep from 'lodash/flattenDeep';\nimport compact from 'lodash/compact';\nimport { JSONPath } from 'jsonpath-plus';\nimport Vue from 'vue';\nimport transform from 'lodash/transform';\nimport isObject from 'lodash/isObject';\nimport isArray from 'lodash/isArray';\nimport isEqual from 'lodash/isEqual';\nimport difference from 'lodash/difference';\nimport { splitObjectPath, joinObjectPath } from '@shell/utils/string';\nimport { addObject } from '@shell/utils/array';\n\nexport function set(obj, path, value) {\n  let ptr = obj;\n\n  if (!ptr) {\n    return;\n  }\n\n  const parts = splitObjectPath(path);\n\n  for (let i = 0; i < parts.length; i++) {\n    const key = parts[i];\n\n    if ( i === parts.length - 1 ) {\n      Vue.set(ptr, key, value);\n    } else if ( !ptr[key] ) {\n      // Make sure parent keys exist\n      Vue.set(ptr, key, {});\n    }\n\n    ptr = ptr[key];\n  }\n\n  return obj;\n}\n\nexport function getAllValues(obj, path) {\n  const keysInOrder = path.split('.');\n  let currentValue = [obj];\n\n  keysInOrder.forEach((currentKey) => {\n    currentValue = currentValue.map((indexValue) => {\n      if (Array.isArray(indexValue)) {\n        return indexValue.map((arr) => arr[currentKey]).flat();\n      } else if (indexValue) {\n        return indexValue[currentKey];\n      } else {\n        return null;\n      }\n    }).flat();\n  });\n\n  return currentValue.filter((val) => val !== null);\n}\n\nexport function get(obj, path) {\n  if ( !path) {\n    throw new Error('Cannot translate an empty input. The t function requires a string.');\n  }\n  if ( path.startsWith('$') ) {\n    try {\n      return JSONPath({\n        path,\n        json: obj,\n        wrap: false,\n      });\n    } catch (e) {\n      console.log('JSON Path error', e, path, obj); // eslint-disable-line no-console\n\n      return '(JSON Path err)';\n    }\n  }\n  if ( !path.includes('.') ) {\n    return obj?.[path];\n  }\n\n  const parts = splitObjectPath(path);\n\n  for (let i = 0; i < parts.length; i++) {\n    if (!obj) {\n      return;\n    }\n\n    obj = obj[parts[i]];\n  }\n\n  return obj;\n}\n\nexport function remove(obj, path) {\n  const parentAry = splitObjectPath(path);\n\n  // Remove the very last part of the path\n\n  if (parentAry.length === 1) {\n    Vue.set(obj, path, undefined);\n    delete obj[path];\n  } else {\n    const leafKey = parentAry.pop();\n    const parent = get(obj, joinObjectPath(parentAry));\n\n    if ( parent ) {\n      Vue.set(parent, leafKey, undefined);\n      delete parent[leafKey];\n    }\n  }\n\n  return obj;\n}\n\n/**\n * `delete` a property at the given path.\n *\n * This is similar to `remove` but doesn't need any fancy kube obj path splitting\n * and doesn't use `Vue.set` (avoids reactivity)\n */\nexport function deleteProperty(obj, path) {\n  const pathAr = path.split('.');\n  const propToDelete = pathAr.pop();\n\n  // Walk down path until final prop, then delete final prop\n  delete pathAr.reduce((o, k) => o[k] || {}, obj)[propToDelete];\n}\n\nexport function getter(path) {\n  return function(obj) {\n    return get(obj, path);\n  };\n}\n\nexport function clone(obj) {\n  return cloneDeep(obj);\n}\n\nexport function isEmpty(obj) {\n  if ( !obj ) {\n    return true;\n  }\n\n  return !Object.keys(obj).length;\n}\n\n/**\n * Checks to see if the object is a simple key value pair where all values are\n * just primitives.\n * @param {any} obj\n */\nexport function isSimpleKeyValue(obj) {\n  return obj !== null &&\n    !Array.isArray(obj) &&\n    typeof obj === 'object' &&\n    Object.values(obj || {}).every((v) => typeof v !== 'object');\n}\n\n/*\nreturns an object with no key/value pairs (including nested) where the value is:\n  empty array\n  empty object\n  null\n  undefined\n*/\nexport function cleanUp(obj) {\n  Object.keys(obj).map((key) => {\n    const val = obj[key];\n\n    if ( Array.isArray(val) ) {\n      obj[key] = val.map((each) => {\n        if (each !== null && each !== undefined) {\n          return cleanUp(each);\n        }\n      });\n      if (obj[key].length === 0) {\n        delete obj[key];\n      }\n    } else if (typeof val === 'undefined' || val === null) {\n      delete obj[key];\n    } else if ( isObject(val) ) {\n      if (isEmpty(val)) {\n        delete obj[key];\n      }\n      obj[key] = cleanUp(val);\n    }\n  });\n\n  return obj;\n}\n\nexport function definedKeys(obj) {\n  const keys = Object.keys(obj).map((key) => {\n    const val = obj[key];\n\n    if ( Array.isArray(val) ) {\n      return `\"${ key }\"`;\n    } else if ( isObject(val) ) {\n      // no need for quotes around the subkey since the recursive call will fill that in via one of the other two statements in the if block\n      return ( definedKeys(val) || [] ).map((subkey) => `\"${ key }\".${ subkey }`);\n    } else {\n      return `\"${ key }\"`;\n    }\n  });\n\n  return compact(flattenDeep(keys));\n}\n\nexport function diff(from, to) {\n  from = from || {};\n  to = to || {};\n\n  // Copy values in 'to' that are different than from\n  const out = transform(to, (res, toVal, k) => {\n    const fromVal = from[k];\n\n    if ( isEqual(toVal, fromVal) ) {\n      return;\n    }\n\n    if ( Array.isArray(toVal) || Array.isArray(fromVal) ) {\n      // Don't diff arrays, just use the whole value\n      res[k] = toVal;\n    } else if ( isObject(toVal) && isObject(from[k]) ) {\n      res[k] = diff(fromVal, toVal);\n    } else {\n      res[k] = toVal;\n    }\n  });\n\n  const fromKeys = definedKeys(from);\n  const toKeys = definedKeys(to);\n\n  // Return keys that are in 'from' but not 'to.'\n  const missing = difference(fromKeys, toKeys);\n\n  for ( const k of missing ) {\n    set(out, k, null);\n  }\n\n  return out;\n}\n\n/**\n * Super simple lodash isEqual equivalent.\n *\n * Only checks root properties for strict equality\n */\nfunction isEqualBasic(from, to) {\n  const fromKeys = Object.keys(from || {});\n  const toKeys = Object.keys(to || {});\n\n  if (fromKeys.length !== toKeys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < fromKeys.length; i++) {\n    const fromValue = from[fromKeys[i]];\n    const toValue = to[fromKeys[i]];\n\n    if (fromValue !== toValue) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport { isEqualBasic as isEqual };\n\nexport function changeset(from, to, parentPath = []) {\n  let out = {};\n\n  if ( isEqual(from, to) ) {\n    return out;\n  }\n\n  for ( const k in from ) {\n    const path = joinObjectPath([...parentPath, k]);\n\n    if ( !(k in to) ) {\n      out[path] = { op: 'remove', path };\n    } else if ( (isObject(from[k]) && isObject(to[k])) || (isArray(from[k]) && isArray(to[k])) ) {\n      out = { ...out, ...changeset(from[k], to[k], [...parentPath, k]) };\n    } else if ( !isEqual(from[k], to[k]) ) {\n      out[path] = {\n        op: 'change', from: from[k], value: to[k]\n      };\n    }\n  }\n\n  for ( const k in to ) {\n    if ( !(k in from) ) {\n      const path = joinObjectPath([...parentPath, k]);\n\n      out[path] = { op: 'add', value: to[k] };\n    }\n  }\n\n  return out;\n}\n\nexport function changesetConflicts(a, b) {\n  let keys = Object.keys(a).sort();\n  const out = [];\n  const seen = {};\n\n  for ( const k of keys ) {\n    let ok = true;\n    const aa = a[k];\n    const bb = b[k];\n\n    // If we've seen a change for a parent of this key before (e.g. looking at `spec.replicas` and there's already been a change to `spec`), assume they conflict\n    for ( const parentKey of parentKeys(k) ) {\n      if ( seen[parentKey] ) {\n        ok = false;\n        break;\n      }\n    }\n\n    seen[k] = true;\n\n    if ( ok && bb ) {\n      switch ( `${ aa.op }-${ bb.op }` ) {\n      case 'add-add':\n      case 'add-change':\n      case 'change-add':\n      case 'change-change':\n        ok = isEqual(aa.value, bb.value);\n        break;\n\n      case 'add-remove':\n      case 'change-remove':\n      case 'remove-add':\n      case 'remove-change':\n        ok = false;\n        break;\n\n      case 'remove-remove':\n      default:\n        ok = true;\n        break;\n      }\n    }\n\n    if ( !ok ) {\n      addObject(out, k);\n    }\n  }\n\n  // Check parent keys going the other way\n  keys = Object.keys(b).sort();\n  for ( const k of keys ) {\n    let ok = true;\n\n    for ( const parentKey of parentKeys(k) ) {\n      if ( seen[parentKey] ) {\n        ok = false;\n        break;\n      }\n    }\n\n    seen[k] = true;\n\n    if ( !ok ) {\n      addObject(out, k);\n    }\n  }\n\n  return out.sort();\n\n  function parentKeys(k) {\n    const out = [];\n    const parts = splitObjectPath(k);\n\n    parts.pop();\n\n    while ( parts.length ) {\n      const path = joinObjectPath(parts);\n\n      out.push(path);\n      parts.pop();\n    }\n\n    return out;\n  }\n}\n\nexport function applyChangeset(obj, changeset) {\n  let entry;\n\n  for ( const path in changeset ) {\n    entry = changeset[path];\n\n    if ( entry.op === 'add' || entry.op === 'change' ) {\n      set(obj, path, entry.value);\n    } else if ( entry.op === 'remove' ) {\n      remove(obj, path);\n    } else {\n      throw new Error(`Unknown operation:${ entry.op }`);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Creates an object composed of the `object` properties `predicate` returns\n */\nexport function pickBy(obj = {}, predicate = (value, key) => false) {\n  return Object.entries(obj)\n    .reduce((res, [key, value]) => {\n      if (predicate(value, key)) {\n        res[key] = value;\n      }\n\n      return res;\n    }, {});\n}\n\n/**\n * Convert list to dictionary from a given function\n * @param {*} array\n * @param {*} callback\n * @returns\n */\nexport const toDictionary = (array, callback) => Object.assign(\n  {}, ...array.map((item) => ({ [item]: callback(item) }))\n);\n\nexport function dropKeys(obj, keys) {\n  if ( !obj ) {\n    return;\n  }\n\n  for ( const k of keys ) {\n    delete obj[k];\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}