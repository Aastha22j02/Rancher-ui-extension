{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/getters.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/getters.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["isArray","BY_TYPE","lookup","NAMESPACE","SCHEMA","COUNT","UI","SteveModel","HybridModel","cleanHybridResources","NormanModel","urlFor","normalizeType","pAndNFiltering","stevePaginationUtils","parse","splitObjectPath","parseType","STEVE_AGE_COL","STEVE_ID_COL","STEVE_LIST_GROUPS","STEVE_NAMESPACE_COL","STEVE_STATE_COL","createHeaders","STEVE_MODEL_TYPES","NORMAN","STEVE","GC_IGNORE_TYPES","_defineProperty","NAV_LINK","steveRegEx","RegExp","urlOptions","url","opt","schema","parsedUrl","isSteve","test","path","stevePagination","createParamsForPagination","concat","includes","labelSelector","filter","keys","Object","forEach","key","vals","filterStrings","map","val","encodeURI","urlEnding","charAt","length","nextStringConnector","join","namespaceProjectFilter","checkAndCreateParam","limit","sortBy","orderBy","sortOrder","_opt","Array","excludeFields","_toConsumableArray","excludeParamsString","field","state","getters","type","id","namespaced","isApplicable","urlObj","URL","pathname","substring","parts","split","splice","toString","defaultModel","obj","which","config","modelBaseClass","_obj$type","_obj$type2","startsWith","classify","rootState","_obj$metadata","customModel","namespace","metadata","name","_obj$type3","_obj$type4","cleanResource","existing","data","_Object$getPrototypeO","counts","_objectSpread","typeSuperClass","getPrototypeOf","constructor","podsByNamespace","list","gcIgnoreTypes","currentGeneration","cache","types","generation","pathExistsInSchema","schemaFor","requiresResourceFields","hasResourceFields","console","warn","schemaDefinitions","schemaOrSchemaDefinition","_schemaOrSchemaDefini","shift","resourceFields","pop","headersFor","rootGetters","_ref","_ref2","typeMapGetters","typeMapState","pagination","headers","paginationHeaders","typeOptions","columns","age","optionsFor","ctx","_ref3","opts","steveOpts","listMandatorySort","listGroupsWillOverride","attributes","listGroups"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/getters.js"],"sourcesContent":["import { isArray } from '@shell/utils/array';\nimport { BY_TYPE } from '@shell/plugins/dashboard-store/classify';\nimport { lookup } from '@shell/plugins/dashboard-store/model-loader';\nimport { NAMESPACE, SCHEMA, COUNT, UI } from '@shell/config/types';\n\nimport SteveModel from './steve-class';\nimport HybridModel, { cleanHybridResources } from './hybrid-class';\nimport NormanModel from './norman-class';\nimport { urlFor } from '@shell/plugins/dashboard-store/getters';\nimport { normalizeType } from '@shell/plugins/dashboard-store/normalize';\nimport pAndNFiltering from '@shell/plugins/steve/projectAndNamespaceFiltering.utils';\nimport stevePaginationUtils from '@shell/plugins/steve/steve-pagination-utils';\nimport { parse } from '@shell/utils/url';\nimport { splitObjectPath } from '@shell/utils/string';\nimport { parseType } from '@shell/models/schema';\nimport {\n  STEVE_AGE_COL,\n  STEVE_ID_COL, STEVE_LIST_GROUPS, STEVE_NAMESPACE_COL, STEVE_STATE_COL\n} from '@shell/config/pagination-table-headers';\nimport { createHeaders } from '@shell/store/type-map.utils';\n\nexport const STEVE_MODEL_TYPES = {\n  NORMAN:  'norman',\n  STEVE:   'steve',\n  BY_TYPE: 'byType'\n};\n\nconst GC_IGNORE_TYPES = {\n  [COUNT]:       true,\n  [NAMESPACE]:   true,\n  [SCHEMA]:      true,\n  [UI.NAV_LINK]: true,\n};\n\n// Include calls to /v1 AND /k8s/clusters/<cluster id>/v1\nconst steveRegEx = new RegExp('(/v1)|(\\/k8s\\/clusters\\/[a-z0-9-]+\\/v1)');\n\nexport default {\n  urlOptions: () => (url, opt, schema) => {\n    opt = opt || {};\n    const parsedUrl = parse(url);\n    const isSteve = steveRegEx.test(parsedUrl.path);\n\n    const stevePagination = stevePaginationUtils.createParamsForPagination(schema, opt);\n\n    if (stevePagination) {\n      url += `${ (url.includes('?') ? '&' : '?') + stevePagination }`;\n    } else {\n      // labelSelector\n      if ( opt.labelSelector ) {\n        url += `${ url.includes('?') ? '&' : '?' }labelSelector=${ opt.labelSelector }`;\n      }\n      // End: labelSelector\n\n      // Filter\n      if ( opt.filter ) {\n        url += `${ (url.includes('?') ? '&' : '?') }`;\n        const keys = Object.keys(opt.filter);\n\n        keys.forEach((key) => {\n          let vals = opt.filter[key];\n\n          if ( !isArray(vals) ) {\n            vals = [vals];\n          }\n\n          // Steve's filter options now support more complex filtering not yet implemented here #9341\n          if (isSteve) {\n            url += `${ (url.includes('filter=') ? '&' : 'filter=') }`;\n          }\n\n          const filterStrings = vals.map((val) => {\n            return `${ encodeURI(key) }=${ encodeURI(val) }`;\n          });\n          const urlEnding = url.charAt(url.length - 1);\n          const nextStringConnector = ['&', '?', '='].includes(urlEnding) ? '' : '&';\n\n          url += `${ nextStringConnector }${ filterStrings.join('&') }`;\n        });\n      }\n\n      // `opt.namespaced` is either\n      // - a string representing a single namespace - add restriction to the url\n      // - an array of namespaces or projects - add restriction as a param\n      const namespaceProjectFilter = pAndNFiltering.checkAndCreateParam(opt);\n\n      if (namespaceProjectFilter) {\n        url += `${ (url.includes('?') ? '&' : '?') + namespaceProjectFilter }`;\n      }\n      // End: Filter\n\n      // Limit\n      const limit = opt.limit;\n\n      if ( limit ) {\n        url += `${ url.includes('?') ? '&' : '?' }limit=${ limit }`;\n      }\n      // End: Limit\n\n      // Sort\n      // Steve's sort options supports multi-column sorting and column specific sort orders, not implemented yet #9341\n      const sortBy = opt.sortBy;\n      const orderBy = opt.sortOrder;\n\n      if ( sortBy ) {\n        if (isSteve) {\n          url += `${ url.includes('?') ? '&' : '?' }sort=${ (orderBy === 'desc' ? '-' : '') + encodeURI(sortBy) }`;\n        } else {\n          url += `${ url.includes('?') ? '&' : '?' }sort=${ encodeURI(sortBy) }`;\n          if ( orderBy ) {\n            url += `${ url.includes('?') ? '&' : '?' }order=${ encodeURI(orderBy) }`;\n          }\n        }\n      }\n      // End: Sort\n    }\n\n    // Exclude\n    // excludeFields should be an array of strings representing the paths of the fields to exclude\n    // only works on Steve but is ignored without error by Norman\n    if (isSteve) {\n      if (Array.isArray(opt?.excludeFields)) {\n        opt.excludeFields = [...opt.excludeFields, 'metadata.managedFields'];\n      } else {\n        opt.excludeFields = ['metadata.managedFields'];\n      }\n      const excludeParamsString = opt.excludeFields.map((field) => `exclude=${ field }`).join('&');\n\n      url += `${ url.includes('?') ? '&' : '?' }${ excludeParamsString }`;\n    }\n    // End: Exclude\n\n    return url;\n  },\n\n  urlFor: (state, getters) => (type, id, opt) => {\n    let url = urlFor(state, getters)(type, id, opt);\n\n    // `namespaced` is either\n    // - a string representing a single namespace - add restriction to the url\n    // - an array of namespaces or projects - add restriction as a param\n    if (!opt?.url && opt?.namespaced && !pAndNFiltering.isApplicable(opt)) {\n      // Update path to include `namespace`, but take into account\n      // - if there is an id\n      // - if there are query params\n\n      // Construct a url so query params / fragments are avoided\n      const urlObj = new URL(url);\n      const path = urlObj.pathname;\n\n      if (!!path?.length && path[path.length - 1] === '/') {\n        urlObj.pathname = path.substring(0, path.length - 1);\n      }\n      const parts = urlObj.pathname.split('/');\n\n      if (id) {\n        // namespace should go before the id in the path\n        parts.splice(parts.length - 1, 0, opt.namespaced);\n        urlObj.pathname = parts.join('/');\n      } else {\n        // namespace should go at the end of the path\n        urlObj.pathname = `${ urlObj.pathname.split('/').join('/') }/${ opt.namespaced }`;\n      }\n\n      url = urlObj.toString();\n    }\n\n    return url;\n  },\n\n  defaultModel: (state) => (obj) => {\n    const which = state.config.modelBaseClass || STEVE_MODEL_TYPES.BY_TYPE.STEVE;\n\n    if ( which === STEVE_MODEL_TYPES.BY_TYPE ) {\n      if ( obj?.type?.startsWith('management.cattle.io.') || obj?.type?.startsWith('project.cattle.io.')) {\n        return HybridModel;\n      } else {\n        return SteveModel;\n      }\n    } else if ( which === STEVE_MODEL_TYPES.NORMAN ) {\n      return NormanModel;\n    } else {\n      return SteveModel;\n    }\n  },\n\n  classify: (state, getters, rootState) => (obj) => {\n    const customModel = lookup(state.config.namespace, obj?.type, obj?.metadata?.name, rootState);\n\n    if (customModel) {\n      return customModel;\n    }\n\n    const which = state.config.modelBaseClass || BY_TYPE;\n\n    if ( which === BY_TYPE ) {\n      if ( obj?.type?.startsWith('management.cattle.io.') || obj?.type?.startsWith('project.cattle.io.')) {\n        return HybridModel;\n      } else {\n        return SteveModel;\n      }\n    } else if ( which === STEVE_MODEL_TYPES.NORMAN ) {\n      return NormanModel;\n    } else {\n      return SteveModel;\n    }\n  },\n\n  cleanResource: () => (existing, data) => {\n    /**\n   * Resource counts are contained within a single 'count' resource with a 'counts' field that is a map of resource types\n   * When counts are updated through the websocket, only the resources that changed are sent so we can't load the new 'count' resource into the store as we would another resource\n   */\n    if (data?.type === COUNT && existing) {\n      data.counts = { ...existing.counts, ...data.counts };\n\n      return data;\n    }\n\n    // If the existing model has a cleanResource method, use it\n    if (existing?.cleanResource && typeof existing.cleanResource === 'function') {\n      return existing.cleanResource(data);\n    }\n\n    const typeSuperClass = Object.getPrototypeOf(Object.getPrototypeOf(existing))?.constructor;\n\n    return typeSuperClass === HybridModel ? cleanHybridResources(data) : data;\n  },\n\n  // Return all the pods for a given namespace\n  podsByNamespace: (state) => (namespace) => {\n    const map = state.podsByNamespace[namespace];\n\n    return map?.list || [];\n  },\n\n  gcIgnoreTypes: () => {\n    return GC_IGNORE_TYPES;\n  },\n\n  currentGeneration: (state) => (type) => {\n    type = normalizeType(type);\n\n    const cache = state.types[type];\n\n    if ( !cache ) {\n      return null;\n    }\n\n    return cache.generation;\n  },\n\n  /**\n   * Checks the norman or steve schema resourceFields for the given path\n   */\n  pathExistsInSchema: (state, getters) => (type, path) => {\n    const schema = getters.schemaFor(type);\n\n    if (schema.requiresResourceFields && !schema.hasResourceFields) {\n      console.warn(`pathExistsInSchema requires schema ${ schema.id } to have resources fields via schema definition but none were found. has the schema 'fetchResourceFields' been called?`); // eslint-disable-line no-console\n\n      return false;\n    }\n\n    const schemaDefinitions = schema.requiresResourceFields ? schema.schemaDefinitions : null;\n    const parts = splitObjectPath(path);\n    let schemaOrSchemaDefinition = schema;\n\n    // Iterate down the parts (properties) until there are no parts left (success) or the path cannot be found (failure)\n    while ( parts.length ) {\n      const key = parts.shift();\n\n      const field = schemaOrSchemaDefinition.resourceFields?.[key];\n\n      type = field?.type;\n\n      if ( !type ) {\n        return false;\n      }\n\n      if ( parts.length ) {\n        type = parseType(type, field).pop(); // Get the main part of array[map[something]] => something\n\n        schemaOrSchemaDefinition = schemaDefinitions ? schemaDefinitions?.[type] : getters.schemaFor(type);\n\n        if ( !schema ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n\n  /*\n   * Override the vanilla type-map headersFor. This allows custom columns\n   */\n  headersFor: (state, getters, rootState, rootGetters) => ({\n    getters: typeMapGetters,\n    state: typeMapState,\n  }, { schema, pagination }) => {\n    if (!pagination ) {\n      return;\n    }\n\n    return createHeaders({\n      state: typeMapState, getters: typeMapGetters, rootGetters\n    }, {\n      headers:     typeMapState.paginationHeaders,\n      typeOptions: typeMapGetters['optionsFor'](schema, true),\n      schema,\n      columns:     {\n        state:     STEVE_STATE_COL,\n        namespace: STEVE_NAMESPACE_COL,\n        age:       STEVE_AGE_COL,\n        id:        STEVE_ID_COL\n      }\n    });\n  },\n\n  /**\n   * Override the vanilla type-map optionsFor. This allows custom list values\n   */\n  optionsFor: () => (ctx, { schema, pagination, opts }) => {\n    if (pagination) {\n      // As headers are hardcoded each list should have specific default sort option\n      // This avoids the sortable table adding both name and id (which when combined with group would result in 3 sort args, which isn't supported)\n      const steveOpts = { listMandatorySort: [] };\n\n      if (!opts.listGroupsWillOverride && schema.attributes.namespaced) {\n        // There's no pre-configured settings... and we're paginating... so use pagination specific groups\n        steveOpts.listGroups = STEVE_LIST_GROUPS;\n        steveOpts.listGroupsWillOverride = true;\n      }\n\n      return steveOpts;\n    }\n  },\n\n};\n"],"mappings":"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","ignoreList":[]}]}