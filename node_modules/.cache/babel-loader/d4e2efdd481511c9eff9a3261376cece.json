{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/nav/WindowManager/ContainerShell.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/nav/WindowManager/ContainerShell.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["allHash","addParams","base64Decode","base64Encode","Select","NODE","Socket","EVENT_CONNECTED","EVENT_CONNECTING","EVENT_DISCONNECTED","EVENT_MESSAGE","EVENT_CONNECT_ERROR","Window","commands","linux","windows","components","props","tab","type","Object","required","active","Boolean","height","Number","default","undefined","width","pod","initialContainer","String","commandOnFirstConnect","data","_this$pod","container","defaultContainerName","socket","terminal","fitAddon","searchAddon","webglAddon","canvasAddon","isOpen","isOpening","backlog","node","keepAliveTimer","errorMsg","backupShells","os","retries","computed","xtermConfig","allowProposedApi","cursorBlink","useStyle","fontSize","containerChoices","_this$pod2","spec","containers","map","x","name","watch","connect","fit","beforeDestroy","clearInterval","cleanup","mounted","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_this$pod$spec","nodeId","schema","wrap","_callee$","_context","prev","next","nodeName","$store","getters","dispatch","id","t0","setupTerminal","setInterval","stop","methods","_this2","_callee2","docStyle","xterm","addons","_callee2$","_context2","getComputedStyle","document","querySelector","sent","webgl","weblinks","search","canvas","Terminal","_objectSpread","theme","background","getPropertyValue","trim","foreground","cursor","selectionBackground","FitAddon","SearchAddon","WebglAddon","e","CanvasAddon","loadAddon","WebLinksAddon","open","$refs","flush","onData","input","msg","concat","write","send","push","clear","getSocketUrl","_this$pod3","_this3","links","view","filter","shell","shift","url","replace","stdout","stdin","stderr","tty","command","_this4","_callee3","_callee3$","_context3","disconnect","reset","abrupt","addEventListener","console","error","paste","length","t","detail","substr","focus","slice","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","f","arg","_ref","proposeDimensions","rows","cols","message","JSON","stringify","Width","Math","floor","Height","dispose"],"sources":["node_modules/@rancher/shell/components/nav/WindowManager/ContainerShell.vue"],"sourcesContent":["<script>\nimport { allHash } from '@shell/utils/promise';\nimport { addParams } from '@shell/utils/url';\nimport { base64Decode, base64Encode } from '@shell/utils/crypto';\nimport Select from '@shell/components/form/Select';\nimport { NODE } from '@shell/config/types';\n\nimport Socket, {\n  EVENT_CONNECTED,\n  EVENT_CONNECTING,\n  EVENT_DISCONNECTED,\n  EVENT_MESSAGE,\n  //  EVENT_FRAME_TIMEOUT,\n  EVENT_CONNECT_ERROR,\n} from '@shell/utils/socket';\nimport Window from './Window';\n\nconst commands = {\n  linux: [\n    '/bin/sh',\n    '-c',\n    'TERM=xterm-256color; export TERM; [ -x /bin/bash ] && ([ -x /usr/bin/script ] && /usr/bin/script -q -c \"/bin/bash\" /dev/null || exec /bin/bash) || exec /bin/sh',\n  ],\n  windows: ['cmd']\n};\n\nexport default {\n  components: { Window, Select },\n\n  props: {\n    // The definition of the tab itself\n    tab: {\n      type:     Object,\n      required: true,\n    },\n\n    // Is this tab currently displayed\n    active: {\n      type:     Boolean,\n      required: true,\n    },\n\n    // The height of the window\n    height: {\n      type:    Number,\n      default: undefined,\n    },\n\n    // The width of the window\n    width: {\n      type:    Number,\n      default: undefined,\n    },\n\n    // The pod to connect to\n    pod: {\n      type:     Object,\n      required: true,\n    },\n\n    // The container in the pod to initially show\n    initialContainer: {\n      type:    String,\n      default: null,\n    },\n\n    // Runs this command immediately after connecting\n    commandOnFirstConnect: {\n      type:    String,\n      default: null\n    }\n  },\n\n  data() {\n    return {\n      container:      this.initialContainer || this.pod?.defaultContainerName,\n      socket:         null,\n      terminal:       null,\n      fitAddon:       null,\n      searchAddon:    null,\n      webglAddon:     null,\n      canvasAddon:    null,\n      isOpen:         false,\n      isOpening:      false,\n      backlog:        [],\n      node:           null,\n      keepAliveTimer: null,\n      errorMsg:       '',\n      backupShells:   ['linux', 'windows'],\n      os:             undefined,\n      retries:        0\n    };\n  },\n\n  computed: {\n    xtermConfig() {\n      return {\n        allowProposedApi: true,\n        cursorBlink:      true,\n        useStyle:         true,\n        fontSize:         12,\n      };\n    },\n\n    containerChoices() {\n      return this.pod?.spec?.containers?.map((x) => x.name) || [];\n    },\n  },\n\n  watch: {\n    container() {\n      this.connect();\n    },\n\n    height() {\n      this.fit();\n    },\n\n    width() {\n      this.fit();\n    },\n  },\n\n  beforeDestroy() {\n    clearInterval(this.keepAliveTimer);\n    this.cleanup();\n  },\n\n  async mounted() {\n    const nodeId = this.pod.spec?.nodeName;\n\n    try {\n      const schema = this.$store.getters[`cluster/schemaFor`](NODE);\n\n      if (schema) {\n        await this.$store.dispatch('cluster/find', { type: NODE, id: nodeId });\n      }\n    } catch {}\n\n    await this.setupTerminal();\n    await this.connect();\n\n    clearInterval(this.keepAliveTimer);\n    this.keepAliveTimer = setInterval(() => {\n      this.fit();\n    }, 60 * 1000);\n  },\n\n  methods: {\n    async setupTerminal() {\n      const docStyle = getComputedStyle(document.querySelector('body'));\n      const xterm = await import(/* webpackChunkName: \"xterm\" */ 'xterm');\n\n      const addons = await allHash({\n        fit:      import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-fit'),\n        webgl:    import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-webgl'),\n        weblinks: import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-web-links'),\n        search:   import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-search'),\n        canvas:   import(/* webpackChunkName: \"xterm\" */ 'xterm-addon-canvas')\n      });\n\n      const terminal = new xterm.Terminal({\n        theme: {\n          background:          docStyle.getPropertyValue('--terminal-bg').trim(),\n          foreground:          docStyle.getPropertyValue('--terminal-text').trim(),\n          cursor:              docStyle.getPropertyValue('--terminal-cursor').trim(),\n          selectionBackground: docStyle.getPropertyValue('--terminal-selection').trim(),\n        },\n        ...this.xtermConfig,\n      });\n\n      this.fitAddon = new addons.fit.FitAddon();\n      this.searchAddon = new addons.search.SearchAddon();\n\n      try {\n        this.webglAddon = new addons.webgl.WebglAddon();\n      } catch (e) {\n        // Some browsers (Safari) don't support the webgl renderer, so don't use it.\n        this.webglAddon = null;\n        this.canvasAddon = new addons.canvas.CanvasAddon();\n      }\n\n      terminal.loadAddon(this.fitAddon);\n      terminal.loadAddon(this.searchAddon);\n      terminal.loadAddon(new addons.weblinks.WebLinksAddon());\n      terminal.open(this.$refs.xterm);\n\n      if (this.webglAddon) {\n        terminal.loadAddon(this.webglAddon);\n      } else {\n        terminal.loadAddon(this.canvasAddon);\n      }\n\n      this.fit();\n      this.flush();\n\n      terminal.onData((input) => {\n        const msg = `0${ base64Encode(input) }`;\n\n        this.write(msg);\n      });\n\n      this.terminal = terminal;\n    },\n\n    write(msg) {\n      if (this.isOpen) {\n        this.socket.send(msg);\n      } else {\n        this.backlog.push(msg);\n      }\n    },\n\n    clear() {\n      this.terminal.clear();\n    },\n\n    getSocketUrl() {\n      if (!this.pod?.links?.view) {\n        return;\n      }\n\n      if (this.pod.os) {\n        this.os = this.pod.os;\n        this.backupShells = this.backupShells.filter((shell) => shell !== this.pod.os);\n      } else {\n        this.os = this.backupShells.shift();\n      }\n\n      const url = addParams(\n        `${ this.pod.links.view.replace(/^http/, 'ws') }/exec`,\n        {\n          container: this.container,\n          stdout:    1,\n          stdin:     1,\n          stderr:    1,\n          tty:       1,\n          command:   commands[this.os],\n        }\n      );\n\n      return url;\n    },\n\n    async connect() {\n      if (this.socket) {\n        await this.socket.disconnect();\n        this.socket = null;\n        this.terminal.reset();\n      }\n\n      const url = this.getSocketUrl();\n\n      if (!url) {\n        return;\n      }\n\n      this.socket = new Socket(url, false, 0, 'base64.channel.k8s.io');\n\n      this.socket.addEventListener(EVENT_CONNECTING, (e) => {\n        this.isOpen = false;\n        this.isOpening = true;\n        this.errorMsg = '';\n      });\n\n      this.socket.addEventListener(EVENT_CONNECT_ERROR, (e) => {\n        this.isOpen = false;\n        this.isOpening = false;\n        console.error('Connect Error', e); // eslint-disable-line no-console\n      });\n\n      this.socket.addEventListener(EVENT_CONNECTED, (e) => {\n        this.isOpen = true;\n        this.isOpening = false;\n        this.fit();\n        this.flush();\n\n        if (this.commandOnFirstConnect) {\n          this.terminal.paste(`${ this.commandOnFirstConnect }`);\n        }\n      });\n\n      this.socket.addEventListener(EVENT_DISCONNECTED, (e) => {\n        this.isOpen = false;\n        this.isOpening = false;\n\n        // If we had an error message, try connecting with the next command\n        if (this.errorMsg) {\n          this.terminal.write(this.errorMsg);\n          if (this.backupShells.length && this.retries < 2) {\n            this.retries++;\n            // we're not really counting on this being a reactive change so there's no need to fire the whole action\n            this.pod.os = undefined;\n            // the pod will still return an os if one's been defined in the node so we'll skip the backups if that's the case and rely on retry count to break the retry loop\n            if (!this.pod.os) {\n              this.os = undefined;\n            }\n            this.connect();\n          } else {\n            // Output an message to let he user know none of the shell commands worked\n            this.terminal.write(this.t('wm.containerShell.failed'));\n          }\n        }\n      });\n\n      this.socket.addEventListener(EVENT_MESSAGE, (e) => {\n        const type = e.detail.data.substr(0, 1);\n        const msg = base64Decode(e.detail.data.substr(1));\n\n        this.errorMsg = '';\n\n        if (`${ type }` === '1') {\n          if (msg) {\n            // we're not really counting on this being a reactive change so there's no need to fire the whole action\n            this.pod.os = this.os;\n          }\n          this.terminal.write(msg);\n        } else {\n          console.error(msg); // eslint-disable-line no-console\n\n          if (`${ type }` === '3') {\n            this.errorMsg = msg;\n          }\n        }\n      });\n\n      this.socket.connect();\n      this.terminal.focus();\n    },\n\n    flush() {\n      const backlog = this.backlog.slice();\n\n      this.backlog = [];\n\n      for (const data of backlog) {\n        this.socket.send(data);\n      }\n    },\n\n    fit(arg) {\n      if (!this.fitAddon) {\n        return;\n      }\n\n      this.fitAddon.fit();\n\n      const { rows, cols } = this.fitAddon.proposeDimensions() || {};\n\n      if (!this.isOpen) {\n        return;\n      }\n\n      const message = `4${ base64Encode(\n        JSON.stringify({\n          Width:  Math.floor(cols),\n          Height: Math.floor(rows),\n        })\n      ) }`;\n\n      this.socket.send(message);\n    },\n\n    cleanup() {\n      if (this.socket) {\n        this.socket.disconnect();\n        this.socket = null;\n      }\n\n      if (this.terminal) {\n        this.terminal.dispose();\n        this.terminal = null;\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Window\n    :active=\"active\"\n    :before-close=\"cleanup\"\n  >\n    <template #title>\n      <Select\n        v-if=\"containerChoices.length > 0\"\n        v-model=\"container\"\n        :disabled=\"containerChoices.length === 1\"\n        class=\"containerPicker auto-width pull-left\"\n        :options=\"containerChoices\"\n        :clearable=\"false\"\n        placement=\"top\"\n      >\n        <template #selected-option=\"option\">\n          <t\n            v-if=\"option\"\n            k=\"wm.containerShell.containerName\"\n            :label=\"option.label\"\n          />\n        </template>\n      </Select>\n      <div class=\"pull-left ml-5\">\n        <button\n          class=\"btn btn-sm bg-primary\"\n          @click=\"clear\"\n        >\n          <t k=\"wm.containerShell.clear\" />\n        </button>\n      </div>\n      <div class=\"status pull-left\">\n        <t\n          v-if=\"isOpen\"\n          k=\"wm.connection.connected\"\n          class=\"text-success\"\n        />\n        <t\n          v-else-if=\"isOpening\"\n          k=\"wm.connection.connecting\"\n          class=\"text-warning\"\n          :raw=\"true\"\n        />\n        <t\n          v-else\n          k=\"wm.connection.disconnected\"\n          class=\"text-error\"\n        />\n      </div>\n    </template>\n    <template #body>\n      <div\n        class=\"shell-container\"\n        :class=\"{ open: isOpen, closed: !isOpen }\"\n      >\n        <div\n          ref=\"xterm\"\n          class=\"shell-body\"\n        />\n        <resize-observer @notify=\"fit\" />\n      </div>\n    </template>\n  </Window>\n</template>\n\n<style lang=\"scss\">\n  .xterm-char-measure-element {\n    position: static;\n  }\n</style>\n\n<style lang=\"scss\" scoped>\n.text-warning {\n  animation: flasher 2.5s linear infinite;\n}\n\n@keyframes flasher {\n  50% {\n    opacity: 0;\n  }\n}\n\n.shell-container {\n  height: 100%;\n  overflow: hidden;\n  .resize-observer {\n    display: none;\n  }\n}\n\n.shell-body {\n  padding: calc(2 * var(--outline-width));\n  height: 100%;\n\n  & > .terminal.focus {\n    outline: var(--outline-width) solid var(--outline);\n  }\n}\n\n.containerPicker {\n  ::v-deep &.unlabeled-select {\n    display: inline-block;\n    min-width: 200px;\n    height: 30px;\n    min-height: 30px;\n    width: initial;\n  }\n}\n\n.status {\n  align-items: center;\n  display: flex;\n  min-width: 80px;\n  height: 30px;\n  margin-left: 10px;\n}\n</style>\n"],"mappings":"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","ignoreList":[]}]}