{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/management.cattle.io.cluster.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/management.cattle.io.cluster.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90b0NvbnN1bWFibGVBcnJheSBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7CmltcG9ydCBfYXN5bmNUb0dlbmVyYXRvciBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9hc3luY1RvR2VuZXJhdG9yIjsKaW1wb3J0IF9jbGFzc0NhbGxDaGVjayBmcm9tICJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjayI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlQ2xhc3MiOwppbXBvcnQgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4gZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiI7CmltcG9ydCBfZ2V0IGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2dldCI7CmltcG9ydCBfZ2V0UHJvdG90eXBlT2YgZnJvbSAiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZ2V0UHJvdG90eXBlT2YiOwppbXBvcnQgX2luaGVyaXRzIGZyb20gIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzIjsKaW1wb3J0IF9yZWdlbmVyYXRvclJ1bnRpbWUgZnJvbSAiL2hvbWUvdWJ1bnR1L3N1c2Vjb24tMjAyNC1leHQtZGVtby9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmZ1bmN0aW9uIF9jYWxsU3VwZXIodCwgbywgZSkgeyByZXR1cm4gbyA9IF9nZXRQcm90b3R5cGVPZihvKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odCwgX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpID8gUmVmbGVjdC5jb25zdHJ1Y3QobywgZSB8fCBbXSwgX2dldFByb3RvdHlwZU9mKHQpLmNvbnN0cnVjdG9yKSA6IG8uYXBwbHkodCwgZSkpOyB9CmZ1bmN0aW9uIF9pc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QoKSB7IHRyeSB7IHZhciB0ID0gIUJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2YuY2FsbChSZWZsZWN0LmNvbnN0cnVjdChCb29sZWFuLCBbXSwgZnVuY3Rpb24gKCkge30pKTsgfSBjYXRjaCAodCkge30gcmV0dXJuIChfaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0ID0gZnVuY3Rpb24gX2lzTmF0aXZlUmVmbGVjdENvbnN0cnVjdCgpIHsgcmV0dXJuICEhdDsgfSkoKTsgfQppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maW5kLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVmbGVjdC5jb25zdHJ1Y3QuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5lbmRzLXdpdGguanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuaW5jbHVkZXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcubWF0Y2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcucmVwbGFjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zdGFydHMtd2l0aC5qcyI7CmltcG9ydCB7IENBVEFMT0csIENMVVNURVJfQkFER0UgfSBmcm9tICdAc2hlbGwvY29uZmlnL2xhYmVscy1hbm5vdGF0aW9ucyc7CmltcG9ydCB7IE5PREUsIEZMRUVULCBNQU5BR0VNRU5ULCBDQVBJIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCB7IGluc2VydEF0LCBhZGRPYmplY3QsIHJlbW92ZU9iamVjdCB9IGZyb20gJ0BzaGVsbC91dGlscy9hcnJheSc7CmltcG9ydCB7IGRvd25sb2FkRmlsZSB9IGZyb20gJ0BzaGVsbC91dGlscy9kb3dubG9hZCc7CmltcG9ydCB7IHBhcnNlU2kgfSBmcm9tICdAc2hlbGwvdXRpbHMvdW5pdHMnOwppbXBvcnQgeyBwYXJzZUNvbG9yLCB0ZXh0Q29sb3IgfSBmcm9tICdAc2hlbGwvdXRpbHMvY29sb3InOwppbXBvcnQganN5YW1sIGZyb20gJ2pzLXlhbWwnOwppbXBvcnQgeyBlYWNoTGltaXQgfSBmcm9tICdAc2hlbGwvdXRpbHMvcHJvbWlzZSc7CmltcG9ydCB7IGFkZFBhcmFtcyB9IGZyb20gJ0BzaGVsbC91dGlscy91cmwnOwppbXBvcnQgeyBpc0VtcHR5IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IEhBUlZFU1RFUl9OQU1FIGFzIEhBUlZFU1RFUiB9IGZyb20gJ0BzaGVsbC9jb25maWcvZmVhdHVyZXMnOwppbXBvcnQgeyBpc0hhcnZlc3RlckNsdXN0ZXIgfSBmcm9tICdAc2hlbGwvdXRpbHMvY2x1c3Rlcic7CmltcG9ydCBIeWJyaWRNb2RlbCBmcm9tICdAc2hlbGwvcGx1Z2lucy9zdGV2ZS9oeWJyaWQtY2xhc3MnOwppbXBvcnQgeyBMSU5VWCwgV0lORE9XUyB9IGZyb20gJ0BzaGVsbC9zdG9yZS9jYXRhbG9nJzsKaW1wb3J0IHsgS09OVEFJTkVSX1RPX0RSSVZFUiB9IGZyb20gJy4vbWFuYWdlbWVudC5jYXR0bGUuaW8ua29udGFpbmVyZHJpdmVyJzsKaW1wb3J0IHsgUElOTkVEX0NMVVNURVJTIH0gZnJvbSAnQHNoZWxsL3N0b3JlL3ByZWZzJzsKaW1wb3J0IHsgY29weVRleHRUb0NsaXBib2FyZCB9IGZyb20gJ0BzaGVsbC91dGlscy9jbGlwYm9hcmQnOwoKLy8gU2VlIHRyYW5zbGF0aW9uIGZpbGUgY2x1c3Rlci5wcm92aWRlcnMgZm9yIGxpc3Qgb2YgcHJvdmlkZXJzCi8vIElmIHRoZSBsb2dvIGlzIG5vdCBuYW1lZCB3aXRoIHRoZSBwcm92aWRlciBuYW1lLCBhZGQgYW4gb3ZlcnJpZGUgaGVyZQp2YXIgUFJPVklERVJfTE9HT19PVkVSUklERSA9IHt9OwpmdW5jdGlvbiBmaW5kUmVsYXRpb25zaGlwKHZlcmIsIHR5cGUpIHsKICB2YXIgX3JlbGF0aW9uc2hpcHMkZmluZDsKICB2YXIgcmVsYXRpb25zaGlwcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogW107CiAgdmFyIGZyb20gPSAiIi5jb25jYXQodmVyYiwgIlR5cGUiKTsKICB2YXIgaWQgPSAiIi5jb25jYXQodmVyYiwgIklkIik7CiAgcmV0dXJuIChfcmVsYXRpb25zaGlwcyRmaW5kID0gcmVsYXRpb25zaGlwcy5maW5kKGZ1bmN0aW9uIChyKSB7CiAgICByZXR1cm4gcltmcm9tXSA9PT0gdHlwZTsKICB9KSkgPT09IG51bGwgfHwgX3JlbGF0aW9uc2hpcHMkZmluZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3JlbGF0aW9uc2hpcHMkZmluZFtpZF07Cn0KdmFyIE1nbXRDbHVzdGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfSHlicmlkTW9kZWwpIHsKICBmdW5jdGlvbiBNZ210Q2x1c3RlcigpIHsKICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZ210Q2x1c3Rlcik7CiAgICByZXR1cm4gX2NhbGxTdXBlcih0aGlzLCBNZ210Q2x1c3RlciwgYXJndW1lbnRzKTsKICB9CiAgX2luaGVyaXRzKE1nbXRDbHVzdGVyLCBfSHlicmlkTW9kZWwpOwogIHJldHVybiBfY3JlYXRlQ2xhc3MoTWdtdENsdXN0ZXIsIFt7CiAgICBrZXk6ICJkZXRhaWxzIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgb3V0ID0gW3sKICAgICAgICBsYWJlbDogJ1Byb3Zpc2lvbmVyJywKICAgICAgICBjb250ZW50OiB0aGlzLnByb3Zpc2lvbmVyRGlzcGxheQogICAgICB9LCB7CiAgICAgICAgbGFiZWw6ICdNYWNoaW5lIFByb3ZpZGVyJywKICAgICAgICBjb250ZW50OiB0aGlzLm1hY2hpbmVQcm92aWRlckRpc3BsYXkKICAgICAgfSwgewogICAgICAgIGxhYmVsOiAnS3ViZXJuZXRlcyBWZXJzaW9uJywKICAgICAgICBjb250ZW50OiB0aGlzLmt1YmVybmV0ZXNWZXJzaW9uCiAgICAgIH1dOwogICAgICByZXR1cm4gb3V0OwogICAgfQogIH0sIHsKICAgIGtleTogIl9hdmFpbGFibGVBY3Rpb25zIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgb3V0ID0gX2dldChfZ2V0UHJvdG90eXBlT2YoTWdtdENsdXN0ZXIucHJvdG90eXBlKSwgIl9hdmFpbGFibGVBY3Rpb25zIiwgdGhpcyk7CiAgICAgIGluc2VydEF0KG91dCwgMCwgewogICAgICAgIGFjdGlvbjogJ29wZW5TaGVsbCcsCiAgICAgICAgbGFiZWw6IHRoaXMudCgnbmF2LnNoZWxsJyksCiAgICAgICAgaWNvbjogJ2ljb24gaWNvbi10ZXJtaW5hbCcsCiAgICAgICAgZW5hYmxlZDogISF0aGlzLmxpbmtzLnNoZWxsCiAgICAgIH0pOwogICAgICBpbnNlcnRBdChvdXQsIDEsIHsKICAgICAgICBhY3Rpb246ICdkb3dubG9hZEt1YmVDb25maWcnLAogICAgICAgIGJ1bGtBY3Rpb246ICdkb3dubG9hZEt1YmVDb25maWdCdWxrJywKICAgICAgICBsYWJlbDogdGhpcy50KCduYXYua3ViZWNvbmZpZy5kb3dubG9hZCcpLAogICAgICAgIGljb246ICdpY29uIGljb24tZG93bmxvYWQnLAogICAgICAgIGJ1bGthYmxlOiB0cnVlLAogICAgICAgIGVuYWJsZWQ6IHRoaXMuJHJvb3RHZXR0ZXJzWydpc1JhbmNoZXInXSAmJiB0aGlzLmhhc0FjdGlvbignZ2VuZXJhdGVLdWJlY29uZmlnJykKICAgICAgfSk7CiAgICAgIGluc2VydEF0KG91dCwgMiwgewogICAgICAgIGFjdGlvbjogJ2NvcHlLdWJlQ29uZmlnJywKICAgICAgICBsYWJlbDogdGhpcy50KCdjbHVzdGVyLmNvcHlDb25maWcnKSwKICAgICAgICBidWxrYWJsZTogZmFsc2UsCiAgICAgICAgZW5hYmxlZDogdGhpcy4kcm9vdEdldHRlcnNbJ2lzUmFuY2hlciddICYmIHRoaXMuaGFzQWN0aW9uKCdnZW5lcmF0ZUt1YmVjb25maWcnKSwKICAgICAgICBpY29uOiAnaWNvbiBpY29uLWNvcHknCiAgICAgIH0pOwogICAgICByZXR1cm4gb3V0OwogICAgfQogIH0sIHsKICAgIGtleTogImNhbkRlbGV0ZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJHNwZWM7CiAgICAgIHJldHVybiB0aGlzLmhhc0xpbmsoJ3JlbW92ZScpICYmICEodGhpcyAhPT0gbnVsbCAmJiB0aGlzICE9PSB2b2lkIDAgJiYgKF90aGlzJHNwZWMgPSB0aGlzLnNwZWMpICE9PSBudWxsICYmIF90aGlzJHNwZWMgIT09IHZvaWQgMCAmJiBfdGhpcyRzcGVjLmludGVybmFsKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtYWNoaW5lUG9vbHMiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIHZhciBwb29scyA9IHRoaXMuJGdldHRlcnNbJ2FsbCddKE1BTkFHRU1FTlQuTk9ERV9QT09MKTsKICAgICAgcmV0dXJuIHBvb2xzLmZpbHRlcihmdW5jdGlvbiAoeCkgewogICAgICAgIHZhciBfeCRzcGVjOwogICAgICAgIHJldHVybiAoKF94JHNwZWMgPSB4LnNwZWMpID09PSBudWxsIHx8IF94JHNwZWMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF94JHNwZWMuY2x1c3Rlck5hbWUpID09PSBfdGhpcy5pZDsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvdmlzaW9uZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyRzdGF0dXMsIF90aGlzJHN0YXR1czI7CiAgICAgIGlmICgoX3RoaXMkc3RhdHVzID0gdGhpcy5zdGF0dXMpICE9PSBudWxsICYmIF90aGlzJHN0YXR1cyAhPT0gdm9pZCAwICYmIF90aGlzJHN0YXR1cy5wcm92aWRlcikgewogICAgICAgIHJldHVybiB0aGlzLnN0YXR1cy5wcm92aWRlcjsKICAgICAgfQoKICAgICAgLy8gRm9yIGltcG9ydGVkIEszcyBjbHVzdGVycywgdGhpcy5zdGF0dXMuZHJpdmVyIGlzICdrM3MuJwogICAgICByZXR1cm4gKF90aGlzJHN0YXR1czIgPSB0aGlzLnN0YXR1cykgIT09IG51bGwgJiYgX3RoaXMkc3RhdHVzMiAhPT0gdm9pZCAwICYmIF90aGlzJHN0YXR1czIuZHJpdmVyID8gdGhpcy5zdGF0dXMuZHJpdmVyIDogJ2ltcG9ydGVkJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJtYWNoaW5lUHJvdmlkZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyRtYWNoaW5lUG9vbHMsIF90aGlzJHNwZWMyOwogICAgICB2YXIga2luZCA9IChfdGhpcyRtYWNoaW5lUG9vbHMgPSB0aGlzLm1hY2hpbmVQb29scykgPT09IG51bGwgfHwgX3RoaXMkbWFjaGluZVBvb2xzID09PSB2b2lkIDAgfHwgKF90aGlzJG1hY2hpbmVQb29scyA9IF90aGlzJG1hY2hpbmVQb29sc1swXSkgPT09IG51bGwgfHwgX3RoaXMkbWFjaGluZVBvb2xzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRtYWNoaW5lUG9vbHMucHJvdmlkZXI7CiAgICAgIGlmIChraW5kKSB7CiAgICAgICAgcmV0dXJuIGtpbmQucmVwbGFjZSgvY29uZmlnJC9pLCAnJykudG9Mb3dlckNhc2UoKTsKICAgICAgfSBlbHNlIGlmICgoX3RoaXMkc3BlYzIgPSB0aGlzLnNwZWMpICE9PSBudWxsICYmIF90aGlzJHNwZWMyICE9PSB2b2lkIDAgJiYgX3RoaXMkc3BlYzIuaW50ZXJuYWwpIHsKICAgICAgICByZXR1cm4gJ2xvY2FsJzsKICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJya2VUZW1wbGF0ZVZlcnNpb24iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyRzcGVjMzsKICAgICAgcmV0dXJuIChfdGhpcyRzcGVjMyA9IHRoaXMuc3BlYykgPT09IG51bGwgfHwgX3RoaXMkc3BlYzMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHNwZWMzLmNsdXN0ZXJUZW1wbGF0ZVJldmlzaW9uTmFtZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcm92aWRlckZvckVtYmVyUGFyYW0iLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIC8vIEVtYmVyIHdhbnRzIG9uZSB3b3JkIGNhbGxlZCBwcm92aWRlciB0byB0ZWxsIHdoYXQgY29tcG9uZW50IHRvIHNob3csIGJ1dCBoYXMgbXVjaCBpbmRpcmVjdCBtYXBwaW5nIHRvIGZpZ3VyZSBvdXQgd2hhdCBpdCBpcy4KICAgICAgdmFyIHByb3ZpZGVyOwogICAgICAvLyBQcm92aXNpb25lciBpcyB0aGUgIjxzb21ldGhpbmc+Q29uZmlnIiBpbiB0aGUgbW9kZWwKICAgICAgdmFyIHByb3Zpc2lvbmVyID0gS09OVEFJTkVSX1RPX0RSSVZFUlsodGhpcy5wcm92aXNpb25lciB8fCAnJykudG9Mb3dlckNhc2UoKV0gfHwgdGhpcy5wcm92aXNpb25lcjsKICAgICAgaWYgKHByb3Zpc2lvbmVyID09PSAncmFuY2hlckt1YmVybmV0ZXNFbmdpbmUnKSB7CiAgICAgICAgdmFyIF90aGlzJG1hY2hpbmVQb29sczI7CiAgICAgICAgLy8gTG9vayBmb3IgYSBjbG91ZCBwcm92aWRlciBpbiBvbmUgb2YgdGhlIG5vZGUgdGVtcGxhdGVzCiAgICAgICAgaWYgKChfdGhpcyRtYWNoaW5lUG9vbHMyID0gdGhpcy5tYWNoaW5lUG9vbHMpICE9PSBudWxsICYmIF90aGlzJG1hY2hpbmVQb29sczIgIT09IHZvaWQgMCAmJiBfdGhpcyRtYWNoaW5lUG9vbHMyWzBdKSB7CiAgICAgICAgICB2YXIgX3RoaXMkbWFjaGluZVBvb2xzJDsKICAgICAgICAgIHByb3ZpZGVyID0gKChfdGhpcyRtYWNoaW5lUG9vbHMkID0gdGhpcy5tYWNoaW5lUG9vbHNbMF0pID09PSBudWxsIHx8IF90aGlzJG1hY2hpbmVQb29scyQgPT09IHZvaWQgMCB8fCAoX3RoaXMkbWFjaGluZVBvb2xzJCA9IF90aGlzJG1hY2hpbmVQb29scyQubm9kZVRlbXBsYXRlKSA9PT0gbnVsbCB8fCBfdGhpcyRtYWNoaW5lUG9vbHMkID09PSB2b2lkIDAgfHwgKF90aGlzJG1hY2hpbmVQb29scyQgPSBfdGhpcyRtYWNoaW5lUG9vbHMkLnNwZWMpID09PSBudWxsIHx8IF90aGlzJG1hY2hpbmVQb29scyQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJG1hY2hpbmVQb29scyQuZHJpdmVyKSB8fCBudWxsOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwcm92aWRlciA9ICdjdXN0b20nOwogICAgICAgIH0KICAgICAgfSBlbHNlIGlmICh0aGlzLmRyaXZlcikgewogICAgICAgIHByb3ZpZGVyID0gdGhpcy5kcml2ZXI7CiAgICAgIH0gZWxzZSBpZiAocHJvdmlzaW9uZXIgJiYgcHJvdmlzaW9uZXIuZW5kc1dpdGgoJ3YyJykpIHsKICAgICAgICBwcm92aWRlciA9IHByb3Zpc2lvbmVyOwogICAgICB9IGVsc2UgewogICAgICAgIHByb3ZpZGVyID0gJ2ltcG9ydCc7CiAgICAgIH0KICAgICAgcmV0dXJuIHByb3ZpZGVyOwogICAgfQogIH0sIHsKICAgIGtleTogImVtYmVyRWRpdFBhdGgiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBjbHVzdGVyVGVtcGxhdGVSZXZpc2lvbjsKCiAgICAgIC8vIElmIHRoZSBSS0UxIGNsdXN0ZXIgaXMgY3JlYXRlZCBmcm9tIGFuIFJLRSB0ZW1wbGF0ZSwgd2UgbmVlZAogICAgICAvLyB0byBnZXQgdGhlIHRlbXBsYXRlIHZlcnNpb24gdG8gcGFzcyBpbnRvIHRoZSBFbWJlciBVSSBmb3IKICAgICAgLy8gdGhlIGlGcmFtZWQgZWRpdCBjbHVzdGVyIGZvcm0KICAgICAgaWYgKHRoaXMucmtlVGVtcGxhdGVWZXJzaW9uKSB7CiAgICAgICAgY2x1c3RlclRlbXBsYXRlUmV2aXNpb24gPSB0aGlzLnJrZVRlbXBsYXRlVmVyc2lvbjsKICAgICAgfQogICAgICB2YXIgcHJvdmlkZXIgPSB0aGlzLnByb3ZpZGVyRm9yRW1iZXJQYXJhbTsKCiAgICAgIC8vIEF2b2lkIHBhc3NpbmcgZmFsc3kgdmFsdWVzIGFzIHF1ZXJ5IHBhcmFtZXRlcnMKICAgICAgdmFyIHFwID0ge307CiAgICAgIGlmIChwcm92aWRlcikgewogICAgICAgIHFwWydwcm92aWRlciddID0gcHJvdmlkZXI7CiAgICAgIH0KICAgICAgaWYgKGNsdXN0ZXJUZW1wbGF0ZVJldmlzaW9uKSB7CiAgICAgICAgcXBbJ2NsdXN0ZXJUZW1wbGF0ZVJldmlzaW9uJ10gPSBjbHVzdGVyVGVtcGxhdGVSZXZpc2lvbjsKICAgICAgfQoKICAgICAgLy8gQ29waWVkIG91dCBvZiBodHRwczovL2dpdGh1Yi5jb20vcmFuY2hlci91aS9ibG9iLzIwZjU2ZGM1NGM0ZmMwOWI1ZjkxMWU1MzNjYjc1MWMxMzYwOWFkYWYvYXBwL21vZGVscy9jbHVzdGVyLmpzI0w4NDQKICAgICAgaWYgKHByb3ZpZGVyID09PSAnaW1wb3J0JyAmJiBpc0VtcHR5KHRoaXMuZWtzQ29uZmlnKSAmJiBpc0VtcHR5KHRoaXMuZ2tlQ29uZmlnKSkgewogICAgICAgIHFwLmltcG9ydFByb3ZpZGVyID0gJ290aGVyJzsKICAgICAgfSBlbHNlIGlmIChwcm92aWRlciA9PT0gJ2FtYXpvbmVrcycgJiYgIWlzRW1wdHkodGhpcy5la3NDb25maWcpIHx8IHByb3ZpZGVyID09PSAnZ2tlJyAmJiAhaXNFbXB0eSh0aGlzLmdrZUNvbmZpZykKICAgICAgLy8gfHwgc29tZXRoaW5nIGZvciBha3MgdjIKICAgICAgKSB7CiAgICAgICAgcXAuaW1wb3J0UHJvdmlkZXIgPSBLT05UQUlORVJfVE9fRFJJVkVSW3Byb3ZpZGVyXTsKICAgICAgfQogICAgICBpZiAodGhpcy5jbHVzdGVyVGVtcGxhdGVSZXZpc2lvbklkKSB7CiAgICAgICAgcXAuY2x1c3RlclRlbXBsYXRlUmV2aXNpb24gPSB0aGlzLmNsdXN0ZXJUZW1wbGF0ZVJldmlzaW9uSWQ7CiAgICAgIH0KICAgICAgdmFyIHBhdGggPSBhZGRQYXJhbXMoIi9jLyIuY29uY2F0KGVzY2FwZSh0aGlzLmlkKSwgIi9lZGl0IiksIHFwKTsKICAgICAgcmV0dXJuIHBhdGg7CiAgICB9CiAgfSwgewogICAga2V5OiAiZ3JvdXBCeUxhYmVsIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy4kcm9vdEdldHRlcnNbJ2kxOG4vdCddKCdyZXNvdXJjZVRhYmxlLmdyb3VwTGFiZWwubm90SW5BV29ya3NwYWNlJyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNSZWFkeSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgLy8gSWYgdGhlIENvbm5lY3RlZCBjb25kaXRpb24gZXhpc3RzLCB1c2UgdGhhdCAoMi42KykKICAgICAgaWYgKHRoaXMuaGFzQ29uZGl0aW9uKCdDb25uZWN0ZWQnKSkgewogICAgICAgIHJldHVybiB0aGlzLmlzQ29uZGl0aW9uKCdDb25uZWN0ZWQnKTsKICAgICAgfQoKICAgICAgLy8gT3RoZXJ3aXNlIHVzZSBSZWFkeSAob2xkZXIpCiAgICAgIHJldHVybiB0aGlzLmlzQ29uZGl0aW9uKCdSZWFkeScpOwogICAgfQogIH0sIHsKICAgIGtleTogImt1YmVybmV0ZXNWZXJzaW9uUmF3IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkc3RhdHVzMywgX3RoaXMkc3BlYzQ7CiAgICAgIHZhciBmcm9tU3RhdHVzID0gKF90aGlzJHN0YXR1czMgPSB0aGlzLnN0YXR1cykgPT09IG51bGwgfHwgX3RoaXMkc3RhdHVzMyA9PT0gdm9pZCAwIHx8IChfdGhpcyRzdGF0dXMzID0gX3RoaXMkc3RhdHVzMy52ZXJzaW9uKSA9PT0gbnVsbCB8fCBfdGhpcyRzdGF0dXMzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzdGF0dXMzLmdpdFZlcnNpb247CiAgICAgIHZhciBmcm9tU3BlYyA9IChfdGhpcyRzcGVjNCA9IHRoaXMuc3BlYykgPT09IG51bGwgfHwgX3RoaXMkc3BlYzQgPT09IHZvaWQgMCB8fCAoX3RoaXMkc3BlYzQgPSBfdGhpcyRzcGVjNFsiIi5jb25jYXQodGhpcy5wcm92aXNpb25lciwgIkNvbmZpZyIpXSkgPT09IG51bGwgfHwgX3RoaXMkc3BlYzQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHNwZWM0Lmt1YmVybmV0ZXNWZXJzaW9uOwogICAgICByZXR1cm4gZnJvbVN0YXR1cyB8fCBmcm9tU3BlYzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJrdWJlcm5ldGVzVmVyc2lvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMua3ViZXJuZXRlc1ZlcnNpb25SYXcgfHwgdGhpcy4kcm9vdEdldHRlcnNbJ2kxOG4vdCddKCdnZW5lcmljLnByb3Zpc2lvbmluZycpOwogICAgfQogIH0sIHsKICAgIGtleTogImt1YmVybmV0ZXNWZXJzaW9uQmFzZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHRoaXMua3ViZXJuZXRlc1ZlcnNpb24ucmVwbGFjZSgvWystXS4qJC8sICcnKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJrdWJlcm5ldGVzVmVyc2lvbkV4dGVuc2lvbiIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgaWYgKHRoaXMua3ViZXJuZXRlc1ZlcnNpb24ubWF0Y2goL1srLV0vKSkgewogICAgICAgIHJldHVybiB0aGlzLmt1YmVybmV0ZXNWZXJzaW9uLnJlcGxhY2UoL14uKihbKy1dKS8sICckMScpOwogICAgICB9CiAgICAgIHJldHVybiAnJzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcm92aWRlck9zIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkc3RhdHVzNDsKICAgICAgaWYgKChfdGhpcyRzdGF0dXM0ID0gdGhpcy5zdGF0dXMpICE9PSBudWxsICYmIF90aGlzJHN0YXR1czQgIT09IHZvaWQgMCAmJiBfdGhpcyRzdGF0dXM0LnByb3ZpZGVyLmVuZHNXaXRoKCcud2luZG93cycpKSB7CiAgICAgICAgcmV0dXJuICd3aW5kb3dzJzsKICAgICAgfQogICAgICByZXR1cm4gJ2xpbnV4JzsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcm92aWRlck9zTG9nbyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgcmV0dXJuIHJlcXVpcmUoIn5zaGVsbC9hc3NldHMvaW1hZ2VzL3ZlbmRvci8iLmNvbmNhdCh0aGlzLnByb3ZpZGVyT3MsICIuc3ZnIikpOwogICAgfQogIH0sIHsKICAgIGtleTogIndvcmtlck9TcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJHN0YXR1czUsIF90aGlzJHN0YXR1czY7CiAgICAgIC8vIHJrZTEgY2x1c3RlcnMgaGF2ZSB3aW5kb3dzIHN1cHBvcnQgZGVmaW5lZCBvbiBjcmVhdGUKICAgICAgLy8gcmtlMiBjbHVzdGVycyByZXBvcnQgbGludXggd29ya2VycyBpbiBtZ210IGNsdXN0ZXIgc3RhdHVzCiAgICAgIHZhciBya2UyV2luZG93c1dvcmtlcnMgPSAoX3RoaXMkc3RhdHVzNSA9IHRoaXMuc3RhdHVzKSA9PT0gbnVsbCB8fCBfdGhpcyRzdGF0dXM1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzdGF0dXM1LndpbmRvd3NXb3JrZXJDb3VudDsKICAgICAgdmFyIHJrZTJMaW51eFdvcmtlcnMgPSAoX3RoaXMkc3RhdHVzNiA9IHRoaXMuc3RhdHVzKSA9PT0gbnVsbCB8fCBfdGhpcyRzdGF0dXM2ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzdGF0dXM2LmxpbnV4V29ya2VyQ291bnQ7CiAgICAgIGlmIChya2UyV2luZG93c1dvcmtlcnMgfHwgcmtlMkxpbnV4V29ya2VycykgewogICAgICAgIHZhciBvdXQgPSBbXTsKICAgICAgICBpZiAocmtlMldpbmRvd3NXb3JrZXJzKSB7CiAgICAgICAgICBvdXQucHVzaChXSU5ET1dTKTsKICAgICAgICB9CiAgICAgICAgaWYgKHJrZTJMaW51eFdvcmtlcnMpIHsKICAgICAgICAgIG91dC5wdXNoKExJTlVYKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIG91dDsKICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3ZpZGVyT3MgPT09IFdJTkRPV1MpIHsKICAgICAgICByZXR1cm4gW1dJTkRPV1NdOwogICAgICB9CiAgICAgIHJldHVybiBbTElOVVhdOwogICAgfQogIH0sIHsKICAgIGtleTogImlzTG9jYWwiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBfdGhpcyRzcGVjNTsKICAgICAgcmV0dXJuICgoX3RoaXMkc3BlYzUgPSB0aGlzLnNwZWMpID09PSBudWxsIHx8IF90aGlzJHNwZWM1ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzcGVjNS5pbnRlcm5hbCkgPT09IHRydWU7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNIYXJ2ZXN0ZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiBpc0hhcnZlc3RlckNsdXN0ZXIodGhpcyk7CiAgICB9CiAgfSwgewogICAga2V5OiAiaXNIb3N0ZWRLdWJlcm5ldGVzUHJvdmlkZXIiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHZhciBwcm92aWRlcnMgPSBbJ0FLUycsICdFS1MnLCAnR0tFJ107CiAgICAgIHJldHVybiBwcm92aWRlcnMuaW5jbHVkZXModGhpcy5wcm92aXNpb25lcik7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvdmlkZXJMb2dvIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkc3RhdHVzNzsKICAgICAgdmFyIHByb3ZpZGVyID0gKChfdGhpcyRzdGF0dXM3ID0gdGhpcy5zdGF0dXMpID09PSBudWxsIHx8IF90aGlzJHN0YXR1czcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHN0YXR1czcucHJvdmlkZXIpIHx8ICdrdWJlcm5ldGVzJzsKICAgICAgaWYgKHRoaXMuaXNIYXJ2ZXN0ZXIpIHsKICAgICAgICBwcm92aWRlciA9IEhBUlZFU1RFUjsKICAgICAgfQogICAgICAvLyBPbmx5IGludGVyZXN0ZWQgaW4gdGhlIHBhcnQgYmVmb3JlIHRoZSBwZXJpb2QKICAgICAgdmFyIHBydiA9IHByb3ZpZGVyLnNwbGl0KCcuJylbMF07CiAgICAgIC8vIEFsbG93IG92ZXJyaWRlcyBpZiBuZWVkZWQKICAgICAgdmFyIGxvZ28gPSBQUk9WSURFUl9MT0dPX09WRVJSSURFW3Bydl0gfHwgcHJ2OwogICAgICB2YXIgaWNvbjsKICAgICAgdHJ5IHsKICAgICAgICBpY29uID0gcmVxdWlyZSgifnNoZWxsL2Fzc2V0cy9pbWFnZXMvcHJvdmlkZXJzLyIuY29uY2F0KHBydiwgIi5zdmciKSk7CiAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICBjb25zb2xlLndhcm4oIkNhbiBub3QgZmluZCBwcm92aWRlciBsb2dvIGZvciBwcm92aWRlciAiLmNvbmNhdChsb2dvKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQogICAgICAgIC8vIFVzZSBmYWxsYmFjayBnZW5lcmljIEt1YmVybmV0ZXMgaWNvbgogICAgICAgIGljb24gPSByZXF1aXJlKCJ+c2hlbGwvYXNzZXRzL2ltYWdlcy9wcm92aWRlcnMva3ViZXJuZXRlcy5zdmciKTsKICAgICAgfQogICAgICByZXR1cm4gaWNvbjsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwcm92aWRlck1lbnVMb2dvIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5wcm92aWRlckxvZ287CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvdmlkZXJOYXZMb2dvIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5wcm92aWRlckxvZ287CiAgICB9CgogICAgLy8gQ3VzdG9tIGJhZGdlIHRvIHNob3cgZm9yIHRoZSBDbHVzdGVyIChpZiB0aGUgYXBwcm9wcmlhdGUgYW5ub3RhdGlvbnMgYXJlIHNldCkKICB9LCB7CiAgICBrZXk6ICJiYWRnZSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJG1ldGFkYXRhLCBfdGhpcyRtZXRhZGF0YTIsIF90aGlzJG1ldGFkYXRhMzsKICAgICAgdmFyIHRleHQgPSAoX3RoaXMkbWV0YWRhdGEgPSB0aGlzLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfdGhpcyRtZXRhZGF0YSA9PT0gdm9pZCAwIHx8IChfdGhpcyRtZXRhZGF0YSA9IF90aGlzJG1ldGFkYXRhLmFubm90YXRpb25zKSA9PT0gbnVsbCB8fCBfdGhpcyRtZXRhZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkbWV0YWRhdGFbQ0xVU1RFUl9CQURHRS5URVhUXTsKICAgICAgaWYgKCF0ZXh0KSB7CiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDsKICAgICAgfQogICAgICB2YXIgY29sb3IgPSAoKF90aGlzJG1ldGFkYXRhMiA9IHRoaXMubWV0YWRhdGEpID09PSBudWxsIHx8IF90aGlzJG1ldGFkYXRhMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkbWV0YWRhdGEyLmFubm90YXRpb25zW0NMVVNURVJfQkFER0UuQ09MT1JdKSB8fCAnIzdmN2Y3Zic7CiAgICAgIHZhciBpY29uVGV4dCA9ICgoX3RoaXMkbWV0YWRhdGEzID0gdGhpcy5tZXRhZGF0YSkgPT09IG51bGwgfHwgX3RoaXMkbWV0YWRhdGEzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRtZXRhZGF0YTMuYW5ub3RhdGlvbnNbQ0xVU1RFUl9CQURHRS5JQ09OX1RFWFRdKSB8fCAnJzsKICAgICAgcmV0dXJuIHsKICAgICAgICB0ZXh0OiB0ZXh0LAogICAgICAgIGNvbG9yOiBjb2xvciwKICAgICAgICB0ZXh0Q29sb3I6IHRleHRDb2xvcihwYXJzZUNvbG9yKGNvbG9yKSksCiAgICAgICAgaWNvblRleHQ6IGljb25UZXh0LnN1YnN0cigwLCAyKQogICAgICB9OwogICAgfQogIH0sIHsKICAgIGtleTogInNjb3BlIiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICByZXR1cm4gdGhpcy5pc0xvY2FsID8gQ0FUQUxPRy5fTUFOQUdFTUVOVCA6IENBVEFMT0cuX0RPV05TVFJFQU07CiAgICB9CiAgfSwgewogICAga2V5OiAic2V0Q2x1c3Rlck5hbWVMYWJlbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q2x1c3Rlck5hbWVMYWJlbChhbmRTYXZlKSB7CiAgICAgIHZhciBfdGhpcyRvd25lclJlZmVyZW5jZXMsIF90aGlzJG1ldGFkYXRhNDsKICAgICAgaWYgKChfdGhpcyRvd25lclJlZmVyZW5jZXMgPSB0aGlzLm93bmVyUmVmZXJlbmNlcykgIT09IG51bGwgJiYgX3RoaXMkb3duZXJSZWZlcmVuY2VzICE9PSB2b2lkIDAgJiYgX3RoaXMkb3duZXJSZWZlcmVuY2VzLmxlbmd0aCB8fCAoKF90aGlzJG1ldGFkYXRhNCA9IHRoaXMubWV0YWRhdGEpID09PSBudWxsIHx8IF90aGlzJG1ldGFkYXRhNCA9PT0gdm9pZCAwIHx8IChfdGhpcyRtZXRhZGF0YTQgPSBfdGhpcyRtZXRhZGF0YTQubGFiZWxzKSA9PT0gbnVsbCB8fCBfdGhpcyRtZXRhZGF0YTQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJG1ldGFkYXRhNFtGTEVFVC5DTFVTVEVSX05BTUVdKSA9PT0gdGhpcy5pZCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLm1ldGFkYXRhID0gdGhpcy5tZXRhZGF0YSB8fCB7fTsKICAgICAgdGhpcy5tZXRhZGF0YS5sYWJlbHMgPSB0aGlzLm1ldGFkYXRhLmxhYmVscyB8fCB7fTsKICAgICAgdGhpcy5tZXRhZGF0YS5sYWJlbHNbRkxFRVQuQ0xVU1RFUl9OQU1FXSA9IHRoaXMuaWQ7CiAgICAgIGlmIChhbmRTYXZlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZSgpOwogICAgICB9CiAgICB9CiAgfSwgewogICAga2V5OiAiYXZhaWxhYmxlQ3B1IiwKICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICB2YXIgX3RoaXMkc3RhdHVzJHJlcXVlc3RlLCBfdGhpcyRzdGF0dXMkYWxsb2NhdGE7CiAgICAgIHZhciByZXNlcnZlZCA9IHBhcnNlU2koKF90aGlzJHN0YXR1cyRyZXF1ZXN0ZSA9IHRoaXMuc3RhdHVzLnJlcXVlc3RlZCkgPT09IG51bGwgfHwgX3RoaXMkc3RhdHVzJHJlcXVlc3RlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzdGF0dXMkcmVxdWVzdGUuY3B1KTsKICAgICAgdmFyIGFsbG9jYXRhYmxlID0gcGFyc2VTaSgoX3RoaXMkc3RhdHVzJGFsbG9jYXRhID0gdGhpcy5zdGF0dXMuYWxsb2NhdGFibGUpID09PSBudWxsIHx8IF90aGlzJHN0YXR1cyRhbGxvY2F0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkc3RhdHVzJGFsbG9jYXRhLmNwdSk7CiAgICAgIGlmIChhbGxvY2F0YWJsZSA+IDAgJiYgcmVzZXJ2ZWQgPj0gMCkgewogICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBhbGxvY2F0YWJsZSAtIHJlc2VydmVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogImF2YWlsYWJsZU1lbW9yeSIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJHN0YXR1cyRyZXF1ZXN0ZTIsIF90aGlzJHN0YXR1cyRhbGxvY2F0YTI7CiAgICAgIHZhciByZXNlcnZlZCA9IHBhcnNlU2koKF90aGlzJHN0YXR1cyRyZXF1ZXN0ZTIgPSB0aGlzLnN0YXR1cy5yZXF1ZXN0ZWQpID09PSBudWxsIHx8IF90aGlzJHN0YXR1cyRyZXF1ZXN0ZTIgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJHN0YXR1cyRyZXF1ZXN0ZTIubWVtb3J5KTsKICAgICAgdmFyIGFsbG9jYXRhYmxlID0gcGFyc2VTaSgoX3RoaXMkc3RhdHVzJGFsbG9jYXRhMiA9IHRoaXMuc3RhdHVzLmFsbG9jYXRhYmxlKSA9PT0gbnVsbCB8fCBfdGhpcyRzdGF0dXMkYWxsb2NhdGEyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfdGhpcyRzdGF0dXMkYWxsb2NhdGEyLm1lbW9yeSk7CiAgICAgIGlmIChhbGxvY2F0YWJsZSA+IDAgJiYgcmVzZXJ2ZWQgPj0gMCkgewogICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBhbGxvY2F0YWJsZSAtIHJlc2VydmVkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgfQogICAgfQogIH0sIHsKICAgIGtleTogIm9wZW5TaGVsbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gb3BlblNoZWxsKCkgewogICAgICB0aGlzLiRkaXNwYXRjaCgnd20vb3BlbicsIHsKICAgICAgICBpZDogImt1YmVjdGwtIi5jb25jYXQodGhpcy5pZCksCiAgICAgICAgbGFiZWw6IHRoaXMuJHJvb3RHZXR0ZXJzWydpMThuL3QnXSgnd20ua3ViZWN0bFNoZWxsLnRpdGxlJywgewogICAgICAgICAgbmFtZTogdGhpcy5uYW1lRGlzcGxheQogICAgICAgIH0pLAogICAgICAgIGljb246ICd0ZXJtaW5hbCcsCiAgICAgICAgY29tcG9uZW50OiAnS3ViZWN0bFNoZWxsJywKICAgICAgICBhdHRyczogewogICAgICAgICAgY2x1c3RlcjogdGhpcywKICAgICAgICAgIHBvZDoge30KICAgICAgICB9CiAgICAgIH0sIHsKICAgICAgICByb290OiB0cnVlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogImdlbmVyYXRlS3ViZUNvbmZpZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2dlbmVyYXRlS3ViZUNvbmZpZyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHJlczsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUkKF9jb250ZXh0KSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZG9BY3Rpb24oJ2dlbmVyYXRlS3ViZWNvbmZpZycpOwogICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgcmVzID0gX2NvbnRleHQuc2VudDsKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCByZXMuY29uZmlnKTsKICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVLdWJlQ29uZmlnKCkgewogICAgICAgIHJldHVybiBfZ2VuZXJhdGVLdWJlQ29uZmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGdlbmVyYXRlS3ViZUNvbmZpZzsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImRvd25sb2FkS3ViZUNvbmZpZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2Rvd25sb2FkS3ViZUNvbmZpZyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBjb25maWc7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVLdWJlQ29uZmlnKCk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBjb25maWcgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICBkb3dubG9hZEZpbGUoIiIuY29uY2F0KHRoaXMubmFtZURpc3BsYXksICIueWFtbCIpLCBjb25maWcsICdhcHBsaWNhdGlvbi95YW1sJyk7CiAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlMiwgdGhpcyk7CiAgICAgIH0pKTsKICAgICAgZnVuY3Rpb24gZG93bmxvYWRLdWJlQ29uZmlnKCkgewogICAgICAgIHJldHVybiBfZG93bmxvYWRLdWJlQ29uZmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGRvd25sb2FkS3ViZUNvbmZpZzsKICAgIH0oKQogIH0sIHsKICAgIGtleTogImRvd25sb2FkS3ViZUNvbmZpZ0J1bGsiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9kb3dubG9hZEt1YmVDb25maWdCdWxrID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoaXRlbXMpIHsKICAgICAgICB2YXIgb2JqLCBmaXJzdCwgb3V0OwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTMkKF9jb250ZXh0MykgewogICAgICAgICAgd2hpbGUgKDEpIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgb2JqID0ge307CiAgICAgICAgICAgICAgZmlyc3QgPSB0cnVlOwogICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNDsKICAgICAgICAgICAgICByZXR1cm4gZWFjaExpbWl0KGl0ZW1zLCAxMCwgZnVuY3Rpb24gKGl0ZW0sIGlkeCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGl0ZW0uZ2VuZXJhdGVLdWJlQ29uZmlnKCkudGhlbihmdW5jdGlvbiAoY29uZmlnKSB7CiAgICAgICAgICAgICAgICAgIHZhciBlbnRyeSA9IGpzeWFtbC5sb2FkKGNvbmZpZyk7CiAgICAgICAgICAgICAgICAgIGlmIChmaXJzdCkgewogICAgICAgICAgICAgICAgICAgIG9iaiA9IGVudHJ5OwogICAgICAgICAgICAgICAgICAgIGZpcnN0ID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIF9vYmokY2x1c3RlcnMsIF9vYmokdXNlcnMsIF9vYmokY29udGV4dHM7CiAgICAgICAgICAgICAgICAgICAgKF9vYmokY2x1c3RlcnMgPSBvYmouY2x1c3RlcnMpLnB1c2guYXBwbHkoX29iaiRjbHVzdGVycywgX3RvQ29uc3VtYWJsZUFycmF5KGVudHJ5LmNsdXN0ZXJzKSk7CiAgICAgICAgICAgICAgICAgICAgKF9vYmokdXNlcnMgPSBvYmoudXNlcnMpLnB1c2guYXBwbHkoX29iaiR1c2VycywgX3RvQ29uc3VtYWJsZUFycmF5KGVudHJ5LnVzZXJzKSk7CiAgICAgICAgICAgICAgICAgICAgKF9vYmokY29udGV4dHMgPSBvYmouY29udGV4dHMpLnB1c2guYXBwbHkoX29iaiRjb250ZXh0cywgX3RvQ29uc3VtYWJsZUFycmF5KGVudHJ5LmNvbnRleHRzKSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgZGVsZXRlIG9ialsnY3VycmVudC1jb250ZXh0J107CiAgICAgICAgICAgICAgb3V0ID0ganN5YW1sLmR1bXAob2JqKTsKICAgICAgICAgICAgICBkb3dubG9hZEZpbGUoJ2t1YmVjb25maWcueWFtbCcsIG91dCwgJ2FwcGxpY2F0aW9uL3lhbWwnKTsKICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUzKTsKICAgICAgfSkpOwogICAgICBmdW5jdGlvbiBkb3dubG9hZEt1YmVDb25maWdCdWxrKF94KSB7CiAgICAgICAgcmV0dXJuIF9kb3dubG9hZEt1YmVDb25maWdCdWxrLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGRvd25sb2FkS3ViZUNvbmZpZ0J1bGs7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJjb3B5S3ViZUNvbmZpZyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2NvcHlLdWJlQ29uZmlnID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9fcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTQoKSB7CiAgICAgICAgdmFyIGNvbmZpZzsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0NC5wcmV2ID0gX2NvbnRleHQ0Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gMDsKICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVLdWJlQ29uZmlnKCk7CiAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjb25maWcgPSBfY29udGV4dDQuc2VudDsKICAgICAgICAgICAgICBpZiAoIWNvbmZpZykgewogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSA3OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIF9jb250ZXh0NC5uZXh0ID0gNzsKICAgICAgICAgICAgICByZXR1cm4gY29weVRleHRUb0NsaXBib2FyZChjb25maWcpOwogICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMTsKICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSA5OgogICAgICAgICAgICAgIF9jb250ZXh0NC5wcmV2ID0gOTsKICAgICAgICAgICAgICBfY29udGV4dDQudDAgPSBfY29udGV4dDRbImNhdGNoIl0oMCk7CiAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMsIFtbMCwgOV1dKTsKICAgICAgfSkpOwogICAgICBmdW5jdGlvbiBjb3B5S3ViZUNvbmZpZygpIHsKICAgICAgICByZXR1cm4gX2NvcHlLdWJlQ29uZmlnLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGNvcHlLdWJlQ29uZmlnOwogICAgfSgpCiAgfSwgewogICAga2V5OiAiZmV0Y2hOb2RlTWV0cmljcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoTm9kZU1ldHJpY3MgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNSgpIHsKICAgICAgICB2YXIgbm9kZXMsIG5vZGVNZXRyaWNzLCBzb21lTm9uV29ya2VyUm9sZXMsIG1ldHJpY3MsIGluaXRpYWxBZ2dyZWdhdGlvbjsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSBzd2l0Y2ggKF9jb250ZXh0NS5wcmV2ID0gX2NvbnRleHQ1Lm5leHQpIHsKICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kZGlzcGF0Y2goJ2NsdXN0ZXIvZmluZEFsbCcsIHsKICAgICAgICAgICAgICAgIHR5cGU6IE5PREUKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICBub2RlcyA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gNTsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy4kZGlzcGF0Y2goJ2NsdXN0ZXIvZmluZEFsbCcsIHsKICAgICAgICAgICAgICAgIHR5cGU6IE5PREUKICAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICByb290OiB0cnVlCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBub2RlTWV0cmljcyA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgIHNvbWVOb25Xb3JrZXJSb2xlcyA9IG5vZGVzLnNvbWUoZnVuY3Rpb24gKG5vZGUpIHsKICAgICAgICAgICAgICAgIHJldHVybiBub2RlLmhhc0FSb2xlICYmICFub2RlLmlzV29ya2VyOwogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgIG1ldHJpY3MgPSBub2RlTWV0cmljcy5maWx0ZXIoZnVuY3Rpb24gKG1ldHJpYykgewogICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBub2Rlcy5maW5kKGZ1bmN0aW9uIChuZCkgewogICAgICAgICAgICAgICAgICByZXR1cm4gbmQuaWQgPT09IG1ldHJpYy5pZDsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgcmV0dXJuIG5vZGUgJiYgKCFzb21lTm9uV29ya2VyUm9sZXMgfHwgbm9kZS5pc1dvcmtlcik7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgaW5pdGlhbEFnZ3JlZ2F0aW9uID0gewogICAgICAgICAgICAgICAgY3B1OiAwLAogICAgICAgICAgICAgICAgbWVtb3J5OiAwCiAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICBpZiAoIWlzRW1wdHkobWV0cmljcykpIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0NS5uZXh0ID0gMTE7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIG51bGwpOwogICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuYWJydXB0KCJyZXR1cm4iLCBtZXRyaWNzLnJlZHVjZShmdW5jdGlvbiAoYWdnLCBtZXRyaWMpIHsKICAgICAgICAgICAgICAgIHZhciBfbWV0cmljJHVzYWdlLCBfbWV0cmljJHVzYWdlMjsKICAgICAgICAgICAgICAgIGFnZy5jcHUgKz0gcGFyc2VTaShtZXRyaWMgPT09IG51bGwgfHwgbWV0cmljID09PSB2b2lkIDAgfHwgKF9tZXRyaWMkdXNhZ2UgPSBtZXRyaWMudXNhZ2UpID09PSBudWxsIHx8IF9tZXRyaWMkdXNhZ2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9tZXRyaWMkdXNhZ2UuY3B1KTsKICAgICAgICAgICAgICAgIGFnZy5tZW1vcnkgKz0gcGFyc2VTaShtZXRyaWMgPT09IG51bGwgfHwgbWV0cmljID09PSB2b2lkIDAgfHwgKF9tZXRyaWMkdXNhZ2UyID0gbWV0cmljLnVzYWdlKSA9PT0gbnVsbCB8fCBfbWV0cmljJHVzYWdlMiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX21ldHJpYyR1c2FnZTIubWVtb3J5KTsKICAgICAgICAgICAgICAgIHJldHVybiBhZ2c7CiAgICAgICAgICAgICAgfSwgaW5pdGlhbEFnZ3JlZ2F0aW9uKSk7CiAgICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUsIHRoaXMpOwogICAgICB9KSk7CiAgICAgIGZ1bmN0aW9uIGZldGNoTm9kZU1ldHJpY3MoKSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaE5vZGVNZXRyaWNzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KICAgICAgcmV0dXJuIGZldGNoTm9kZU1ldHJpY3M7CiAgICB9KCkKICB9LCB7CiAgICBrZXk6ICJub2RlcyIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CiAgICAgIHJldHVybiB0aGlzLiRnZXR0ZXJzWydhbGwnXShNQU5BR0VNRU5ULk5PREUpLmZpbHRlcihmdW5jdGlvbiAobm9kZSkgewogICAgICAgIHJldHVybiBub2RlLmlkLnN0YXJ0c1dpdGgoX3RoaXMyLmlkKTsKICAgICAgfSk7CiAgICB9CiAgfSwgewogICAga2V5OiAicHJvdkNsdXN0ZXJJZCIsCiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgdmFyIF90aGlzJHNwZWM2LCBfdGhpcyRtZXRhZGF0YTUsIF90aGlzJG1ldGFkYXRhNjsKICAgICAgdmFyIGlzUktFMSA9ICEhKChfdGhpcyRzcGVjNiA9IHRoaXMuc3BlYykgIT09IG51bGwgJiYgX3RoaXMkc3BlYzYgIT09IHZvaWQgMCAmJiBfdGhpcyRzcGVjNi5yYW5jaGVyS3ViZXJuZXRlc0VuZ2luZUNvbmZpZyk7CiAgICAgIC8vIE5vdGU6IFJLRTEgcHJvdmlzaW9uaW5nIGNsdXN0ZXIgSURzIGFyZSBpbiBhIGRpZmZlcmVudCBmb3JtYXQuIEZvciBleGFtcGxlLAogICAgICAvLyBSS0UyIGNsdXN0ZXIgSURzIGluY2x1ZGUgdGhlIG5hbWUgLSBmbGVldC1kZWZhdWx0L2NsdXN0ZXItbmFtZSAtIHdoZXJlYXMgYW4gUktFMQogICAgICAvLyBjbHVzdGVyIGhhcyB0aGUgbGVzcyBodW1hbiByZWFkYWJsZSBtYW5hZ2VtZW50IGNsdXN0ZXIgSUQgaW4gaXQ6IGZsZWV0LWRlZmF1bHQvYy1raGs0OAoKICAgICAgdmFyIHZlcmIgPSB0aGlzLmlzTG9jYWwgfHwgaXNSS0UxIHx8IHRoaXMuaXNIb3N0ZWRLdWJlcm5ldGVzUHJvdmlkZXIgPyAndG8nIDogJ2Zyb20nOwogICAgICB2YXIgcmVzID0gZmluZFJlbGF0aW9uc2hpcCh2ZXJiLCBDQVBJLlJBTkNIRVJfQ0xVU1RFUiwgKF90aGlzJG1ldGFkYXRhNSA9IHRoaXMubWV0YWRhdGEpID09PSBudWxsIHx8IF90aGlzJG1ldGFkYXRhNSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3RoaXMkbWV0YWRhdGE1LnJlbGF0aW9uc2hpcHMpOwogICAgICBpZiAocmVzKSB7CiAgICAgICAgcmV0dXJuIHJlczsKICAgICAgfQogICAgICByZXR1cm4gZmluZFJlbGF0aW9uc2hpcCh2ZXJiID09PSAndG8nID8gJ2Zyb20nIDogJ3RvJywgQ0FQSS5SQU5DSEVSX0NMVVNURVIsIChfdGhpcyRtZXRhZGF0YTYgPSB0aGlzLm1ldGFkYXRhKSA9PT0gbnVsbCB8fCBfdGhpcyRtZXRhZGF0YTYgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF90aGlzJG1ldGFkYXRhNi5yZWxhdGlvbnNoaXBzKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwaW5uZWQiLAogICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgIHJldHVybiB0aGlzLiRyb290R2V0dGVyc1sncHJlZnMvZ2V0J10oUElOTkVEX0NMVVNURVJTKS5pbmNsdWRlcyh0aGlzLmlkKTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJwaW4iLAogICAgdmFsdWU6IGZ1bmN0aW9uIHBpbigpIHsKICAgICAgdmFyIHR5cGVzID0gdGhpcy4kcm9vdEdldHRlcnNbJ3ByZWZzL2dldCddKFBJTk5FRF9DTFVTVEVSUykgfHwgW107CiAgICAgIGFkZE9iamVjdCh0eXBlcywgdGhpcy5pZCk7CiAgICAgIHRoaXMuJGRpc3BhdGNoKCdwcmVmcy9zZXQnLCB7CiAgICAgICAga2V5OiBQSU5ORURfQ0xVU1RFUlMsCiAgICAgICAgdmFsdWU6IHR5cGVzCiAgICAgIH0sIHsKICAgICAgICByb290OiB0cnVlCiAgICAgIH0pOwogICAgfQogIH0sIHsKICAgIGtleTogInVucGluIiwKICAgIHZhbHVlOiBmdW5jdGlvbiB1bnBpbigpIHsKICAgICAgdmFyIHR5cGVzID0gdGhpcy4kcm9vdEdldHRlcnNbJ3ByZWZzL2dldCddKFBJTk5FRF9DTFVTVEVSUykgfHwgW107CiAgICAgIHJlbW92ZU9iamVjdCh0eXBlcywgdGhpcy5pZCk7CiAgICAgIHRoaXMuJGRpc3BhdGNoKCdwcmVmcy9zZXQnLCB7CiAgICAgICAga2V5OiBQSU5ORURfQ0xVU1RFUlMsCiAgICAgICAgdmFsdWU6IHR5cGVzCiAgICAgIH0sIHsKICAgICAgICByb290OiB0cnVlCiAgICAgIH0pOwogICAgfQogIH1dKTsKfShIeWJyaWRNb2RlbCk7CmV4cG9ydCB7IE1nbXRDbHVzdGVyIGFzIGRlZmF1bHQgfTs="},{"version":3,"names":["CATALOG","CLUSTER_BADGE","NODE","FLEET","MANAGEMENT","CAPI","insertAt","addObject","removeObject","downloadFile","parseSi","parseColor","textColor","jsyaml","eachLimit","addParams","isEmpty","HARVESTER_NAME","HARVESTER","isHarvesterCluster","HybridModel","LINUX","WINDOWS","KONTAINER_TO_DRIVER","PINNED_CLUSTERS","copyTextToClipboard","PROVIDER_LOGO_OVERRIDE","findRelationship","verb","type","_relationships$find","relationships","arguments","length","undefined","from","concat","id","find","r","MgmtCluster","_HybridModel","_classCallCheck","_callSuper","_inherits","_createClass","key","get","out","label","content","provisionerDisplay","machineProviderDisplay","kubernetesVersion","_get","_getPrototypeOf","prototype","action","t","icon","enabled","links","shell","bulkAction","bulkable","$rootGetters","hasAction","_this$spec","hasLink","spec","internal","_this","pools","$getters","NODE_POOL","filter","x","_x$spec","clusterName","_this$status","_this$status2","status","provider","driver","_this$machinePools","_this$spec2","kind","machinePools","replace","toLowerCase","_this$spec3","clusterTemplateRevisionName","provisioner","_this$machinePools2","_this$machinePools$","nodeTemplate","endsWith","clusterTemplateRevision","rkeTemplateVersion","providerForEmberParam","qp","eksConfig","gkeConfig","importProvider","clusterTemplateRevisionId","path","escape","hasCondition","isCondition","_this$status3","_this$spec4","fromStatus","version","gitVersion","fromSpec","kubernetesVersionRaw","match","_this$status4","require","providerOs","_this$status5","_this$status6","rke2WindowsWorkers","windowsWorkerCount","rke2LinuxWorkers","linuxWorkerCount","push","_this$spec5","providers","includes","_this$status7","isHarvester","prv","split","logo","e","console","warn","providerLogo","_this$metadata","_this$metadata2","_this$metadata3","text","metadata","annotations","TEXT","color","COLOR","iconText","ICON_TEXT","substr","isLocal","_MANAGEMENT","_DOWNSTREAM","value","setClusterNameLabel","andSave","_this$ownerReferences","_this$metadata4","ownerReferences","labels","CLUSTER_NAME","save","_this$status$requeste","_this$status$allocata","reserved","requested","cpu","allocatable","Math","max","_this$status$requeste2","_this$status$allocata2","memory","openShell","$dispatch","name","nameDisplay","component","attrs","cluster","pod","root","_generateKubeConfig","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","doAction","sent","abrupt","config","stop","generateKubeConfig","apply","_downloadKubeConfig","_callee2","_callee2$","_context2","downloadKubeConfig","_downloadKubeConfigBulk","_callee3","items","obj","first","_callee3$","_context3","item","idx","then","entry","load","_obj$clusters","_obj$users","_obj$contexts","clusters","_toConsumableArray","users","contexts","dump","downloadKubeConfigBulk","_x","_copyKubeConfig","_callee4","_callee4$","_context4","t0","copyKubeConfig","_fetchNodeMetrics","_callee5","nodes","nodeMetrics","someNonWorkerRoles","metrics","initialAggregation","_callee5$","_context5","some","node","hasARole","isWorker","metric","nd","reduce","agg","_metric$usage","_metric$usage2","usage","fetchNodeMetrics","_this2","startsWith","_this$spec6","_this$metadata5","_this$metadata6","isRKE1","rancherKubernetesEngineConfig","isHostedKubernetesProvider","RANCHER_CLUSTER","pin","types","unpin","default"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/management.cattle.io.cluster.js"],"sourcesContent":["import { CATALOG, CLUSTER_BADGE } from '@shell/config/labels-annotations';\nimport { NODE, FLEET, MANAGEMENT, CAPI } from '@shell/config/types';\nimport { insertAt, addObject, removeObject } from '@shell/utils/array';\nimport { downloadFile } from '@shell/utils/download';\nimport { parseSi } from '@shell/utils/units';\nimport { parseColor, textColor } from '@shell/utils/color';\nimport jsyaml from 'js-yaml';\nimport { eachLimit } from '@shell/utils/promise';\nimport { addParams } from '@shell/utils/url';\nimport { isEmpty } from '@shell/utils/object';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { isHarvesterCluster } from '@shell/utils/cluster';\nimport HybridModel from '@shell/plugins/steve/hybrid-class';\nimport { LINUX, WINDOWS } from '@shell/store/catalog';\nimport { KONTAINER_TO_DRIVER } from './management.cattle.io.kontainerdriver';\nimport { PINNED_CLUSTERS } from '@shell/store/prefs';\nimport { copyTextToClipboard } from '@shell/utils/clipboard';\n\n// See translation file cluster.providers for list of providers\n// If the logo is not named with the provider name, add an override here\nconst PROVIDER_LOGO_OVERRIDE = {};\n\nfunction findRelationship(verb, type, relationships = []) {\n  const from = `${ verb }Type`;\n  const id = `${ verb }Id`;\n\n  return relationships.find((r) => r[from] === type)?.[id];\n}\n\nexport default class MgmtCluster extends HybridModel {\n  get details() {\n    const out = [\n      {\n        label:   'Provisioner',\n        content: this.provisionerDisplay\n      },\n      {\n        label:   'Machine Provider',\n        content: this.machineProviderDisplay\n      },\n      {\n        label:   'Kubernetes Version',\n        content: this.kubernetesVersion,\n      },\n    ];\n\n    return out;\n  }\n\n  get _availableActions() {\n    const out = super._availableActions;\n\n    insertAt(out, 0, {\n      action:  'openShell',\n      label:   this.t('nav.shell'),\n      icon:    'icon icon-terminal',\n      enabled: !!this.links.shell,\n    });\n\n    insertAt(out, 1, {\n      action:     'downloadKubeConfig',\n      bulkAction: 'downloadKubeConfigBulk',\n      label:      this.t('nav.kubeconfig.download'),\n      icon:       'icon icon-download',\n      bulkable:   true,\n      enabled:    this.$rootGetters['isRancher'] && this.hasAction('generateKubeconfig'),\n    });\n\n    insertAt(out, 2, {\n      action:   'copyKubeConfig',\n      label:    this.t('cluster.copyConfig'),\n      bulkable: false,\n      enabled:  this.$rootGetters['isRancher'] && this.hasAction('generateKubeconfig'),\n      icon:     'icon icon-copy',\n    });\n\n    return out;\n  }\n\n  get canDelete() {\n    return this.hasLink('remove') && !this?.spec?.internal;\n  }\n\n  get machinePools() {\n    const pools = this.$getters['all'](MANAGEMENT.NODE_POOL);\n\n    return pools.filter((x) => x.spec?.clusterName === this.id);\n  }\n\n  get provisioner() {\n    if (this.status?.provider ) {\n      return this.status.provider;\n    }\n\n    // For imported K3s clusters, this.status.driver is 'k3s.'\n    return this.status?.driver ? this.status.driver : 'imported';\n  }\n\n  get machineProvider() {\n    const kind = this.machinePools?.[0]?.provider;\n\n    if ( kind ) {\n      return kind.replace(/config$/i, '').toLowerCase();\n    } else if ( this.spec?.internal ) {\n      return 'local';\n    }\n\n    return null;\n  }\n\n  get rkeTemplateVersion() {\n    return this.spec?.clusterTemplateRevisionName;\n  }\n\n  get providerForEmberParam() {\n    // Ember wants one word called provider to tell what component to show, but has much indirect mapping to figure out what it is.\n    let provider;\n    // Provisioner is the \"<something>Config\" in the model\n    const provisioner = KONTAINER_TO_DRIVER[(this.provisioner || '').toLowerCase()] || this.provisioner;\n\n    if ( provisioner === 'rancherKubernetesEngine' ) {\n      // Look for a cloud provider in one of the node templates\n      if ( this.machinePools?.[0] ) {\n        provider = this.machinePools[0]?.nodeTemplate?.spec?.driver || null;\n      } else {\n        provider = 'custom';\n      }\n    } else if ( this.driver ) {\n      provider = this.driver;\n    } else if ( provisioner && provisioner.endsWith('v2') ) {\n      provider = provisioner;\n    } else {\n      provider = 'import';\n    }\n\n    return provider;\n  }\n\n  get emberEditPath() {\n    let clusterTemplateRevision;\n\n    // If the RKE1 cluster is created from an RKE template, we need\n    // to get the template version to pass into the Ember UI for\n    // the iFramed edit cluster form\n    if (this.rkeTemplateVersion) {\n      clusterTemplateRevision = this.rkeTemplateVersion;\n    }\n    const provider = this.providerForEmberParam;\n\n    // Avoid passing falsy values as query parameters\n    const qp = { };\n\n    if (provider) {\n      qp['provider'] = provider;\n    }\n\n    if (clusterTemplateRevision) {\n      qp['clusterTemplateRevision'] = clusterTemplateRevision;\n    }\n\n    // Copied out of https://github.com/rancher/ui/blob/20f56dc54c4fc09b5f911e533cb751c13609adaf/app/models/cluster.js#L844\n    if ( provider === 'import' && isEmpty(this.eksConfig) && isEmpty(this.gkeConfig) ) {\n      qp.importProvider = 'other';\n    } else if (\n      (provider === 'amazoneks' && !isEmpty(this.eksConfig) ) ||\n       (provider === 'gke' && !isEmpty(this.gkeConfig) )\n       // || something for aks v2\n    ) {\n      qp.importProvider = KONTAINER_TO_DRIVER[provider];\n    }\n\n    if ( this.clusterTemplateRevisionId ) {\n      qp.clusterTemplateRevision = this.clusterTemplateRevisionId;\n    }\n\n    const path = addParams(`/c/${ escape(this.id) }/edit`, qp);\n\n    return path;\n  }\n\n  get groupByLabel() {\n    return this.$rootGetters['i18n/t']('resourceTable.groupLabel.notInAWorkspace');\n  }\n\n  get isReady() {\n    // If the Connected condition exists, use that (2.6+)\n    if ( this.hasCondition('Connected') ) {\n      return this.isCondition('Connected');\n    }\n\n    // Otherwise use Ready (older)\n    return this.isCondition('Ready');\n  }\n\n  get kubernetesVersionRaw() {\n    const fromStatus = this.status?.version?.gitVersion;\n    const fromSpec = this.spec?.[`${ this.provisioner }Config`]?.kubernetesVersion;\n\n    return fromStatus || fromSpec;\n  }\n\n  get kubernetesVersion() {\n    return this.kubernetesVersionRaw || this.$rootGetters['i18n/t']('generic.provisioning');\n  }\n\n  get kubernetesVersionBase() {\n    return this.kubernetesVersion.replace(/[+-].*$/, '');\n  }\n\n  get kubernetesVersionExtension() {\n    if ( this.kubernetesVersion.match(/[+-]/) ) {\n      return this.kubernetesVersion.replace(/^.*([+-])/, '$1');\n    }\n\n    return '';\n  }\n\n  get providerOs() {\n    if ( this.status?.provider.endsWith('.windows')) {\n      return 'windows';\n    }\n\n    return 'linux';\n  }\n\n  get providerOsLogo() {\n    return require(`~shell/assets/images/vendor/${ this.providerOs }.svg`);\n  }\n\n  get workerOSs() {\n    // rke1 clusters have windows support defined on create\n    // rke2 clusters report linux workers in mgmt cluster status\n    const rke2WindowsWorkers = this.status?.windowsWorkerCount;\n    const rke2LinuxWorkers = this.status?.linuxWorkerCount;\n\n    if (rke2WindowsWorkers || rke2LinuxWorkers ) {\n      const out = [];\n\n      if (rke2WindowsWorkers) {\n        out.push(WINDOWS);\n      }\n      if (rke2LinuxWorkers) {\n        out.push(LINUX);\n      }\n\n      return out;\n    } else if (this.providerOs === WINDOWS) {\n      return [WINDOWS];\n    }\n\n    return [LINUX];\n  }\n\n  get isLocal() {\n    return this.spec?.internal === true;\n  }\n\n  get isHarvester() {\n    return isHarvesterCluster(this);\n  }\n\n  get isHostedKubernetesProvider() {\n    const providers = ['AKS', 'EKS', 'GKE'];\n\n    return providers.includes(this.provisioner);\n  }\n\n  get providerLogo() {\n    let provider = this.status?.provider || 'kubernetes';\n\n    if (this.isHarvester) {\n      provider = HARVESTER;\n    }\n    // Only interested in the part before the period\n    const prv = provider.split('.')[0];\n    // Allow overrides if needed\n    const logo = PROVIDER_LOGO_OVERRIDE[prv] || prv;\n\n    let icon;\n\n    try {\n      icon = require(`~shell/assets/images/providers/${ prv }.svg`);\n    } catch (e) {\n      console.warn(`Can not find provider logo for provider ${ logo }`); // eslint-disable-line no-console\n      // Use fallback generic Kubernetes icon\n      icon = require(`~shell/assets/images/providers/kubernetes.svg`);\n    }\n\n    return icon;\n  }\n\n  get providerMenuLogo() {\n    return this.providerLogo;\n  }\n\n  get providerNavLogo() {\n    return this.providerLogo;\n  }\n\n  // Custom badge to show for the Cluster (if the appropriate annotations are set)\n  get badge() {\n    const text = this.metadata?.annotations?.[CLUSTER_BADGE.TEXT];\n\n    if (!text) {\n      return undefined;\n    }\n\n    const color = this.metadata?.annotations[CLUSTER_BADGE.COLOR] || '#7f7f7f';\n    const iconText = this.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || '';\n\n    return {\n      text,\n      color,\n      textColor: textColor(parseColor(color)),\n      iconText:  iconText.substr(0, 2)\n    };\n  }\n\n  get scope() {\n    return this.isLocal ? CATALOG._MANAGEMENT : CATALOG._DOWNSTREAM;\n  }\n\n  setClusterNameLabel(andSave) {\n    if ( this.ownerReferences?.length || this.metadata?.labels?.[FLEET.CLUSTER_NAME] === this.id ) {\n      return;\n    }\n\n    this.metadata = this.metadata || {};\n    this.metadata.labels = this.metadata.labels || {};\n    this.metadata.labels[FLEET.CLUSTER_NAME] = this.id;\n\n    if ( andSave ) {\n      return this.save();\n    }\n  }\n\n  get availableCpu() {\n    const reserved = parseSi(this.status.requested?.cpu);\n    const allocatable = parseSi(this.status.allocatable?.cpu);\n\n    if ( allocatable > 0 && reserved >= 0 ) {\n      return Math.max(0, allocatable - reserved);\n    } else {\n      return null;\n    }\n  }\n\n  get availableMemory() {\n    const reserved = parseSi(this.status.requested?.memory);\n    const allocatable = parseSi(this.status.allocatable?.memory);\n\n    if ( allocatable > 0 && reserved >= 0 ) {\n      return Math.max(0, allocatable - reserved);\n    } else {\n      return null;\n    }\n  }\n\n  openShell() {\n    this.$dispatch('wm/open', {\n      id:        `kubectl-${ this.id }`,\n      label:     this.$rootGetters['i18n/t']('wm.kubectlShell.title', { name: this.nameDisplay }),\n      icon:      'terminal',\n      component: 'KubectlShell',\n      attrs:     {\n        cluster: this,\n        pod:     {}\n      }\n    }, { root: true });\n  }\n\n  async generateKubeConfig() {\n    const res = await this.doAction('generateKubeconfig');\n\n    return res.config;\n  }\n\n  async downloadKubeConfig() {\n    const config = await this.generateKubeConfig();\n\n    downloadFile(`${ this.nameDisplay }.yaml`, config, 'application/yaml');\n  }\n\n  async downloadKubeConfigBulk(items) {\n    let obj = {};\n    let first = true;\n\n    await eachLimit(items, 10, (item, idx) => {\n      return item.generateKubeConfig().then((config) => {\n        const entry = jsyaml.load(config);\n\n        if ( first ) {\n          obj = entry;\n          first = false;\n        } else {\n          obj.clusters.push(...entry.clusters);\n          obj.users.push(...entry.users);\n          obj.contexts.push(...entry.contexts);\n        }\n      });\n    });\n\n    delete obj['current-context'];\n\n    const out = jsyaml.dump(obj);\n\n    downloadFile('kubeconfig.yaml', out, 'application/yaml');\n  }\n\n  async copyKubeConfig() {\n    try {\n      const config = await this.generateKubeConfig();\n\n      if (config) {\n        await copyTextToClipboard(config);\n      }\n    } catch {}\n  }\n\n  async fetchNodeMetrics() {\n    const nodes = await this.$dispatch('cluster/findAll', { type: NODE }, { root: true });\n    const nodeMetrics = await this.$dispatch('cluster/findAll', { type: NODE }, { root: true });\n\n    const someNonWorkerRoles = nodes.some((node) => node.hasARole && !node.isWorker);\n\n    const metrics = nodeMetrics.filter((metric) => {\n      const node = nodes.find((nd) => nd.id === metric.id);\n\n      return node && (!someNonWorkerRoles || node.isWorker);\n    });\n    const initialAggregation = {\n      cpu:    0,\n      memory: 0\n    };\n\n    if (isEmpty(metrics)) {\n      return null;\n    }\n\n    return metrics.reduce((agg, metric) => {\n      agg.cpu += parseSi(metric?.usage?.cpu);\n      agg.memory += parseSi(metric?.usage?.memory);\n\n      return agg;\n    }, initialAggregation);\n  }\n\n  get nodes() {\n    return this.$getters['all'](MANAGEMENT.NODE).filter((node) => node.id.startsWith(this.id));\n  }\n\n  get provClusterId() {\n    const isRKE1 = !!this.spec?.rancherKubernetesEngineConfig;\n    // Note: RKE1 provisioning cluster IDs are in a different format. For example,\n    // RKE2 cluster IDs include the name - fleet-default/cluster-name - whereas an RKE1\n    // cluster has the less human readable management cluster ID in it: fleet-default/c-khk48\n\n    const verb = this.isLocal || isRKE1 || this.isHostedKubernetesProvider ? 'to' : 'from';\n    const res = findRelationship(verb, CAPI.RANCHER_CLUSTER, this.metadata?.relationships);\n\n    if (res) {\n      return res;\n    }\n\n    return findRelationship(verb === 'to' ? 'from' : 'to', CAPI.RANCHER_CLUSTER, this.metadata?.relationships);\n  }\n\n  get pinned() {\n    return this.$rootGetters['prefs/get'](PINNED_CLUSTERS).includes(this.id);\n  }\n\n  pin() {\n    const types = this.$rootGetters['prefs/get'](PINNED_CLUSTERS) || [];\n\n    addObject(types, this.id);\n\n    this.$dispatch('prefs/set', { key: PINNED_CLUSTERS, value: types }, { root: true });\n  }\n\n  unpin() {\n    const types = this.$rootGetters['prefs/get'](PINNED_CLUSTERS) || [];\n\n    removeObject(types, this.id);\n\n    this.$dispatch('prefs/set', { key: PINNED_CLUSTERS, value: types }, { root: true });\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAO,EAAEC,aAAa,QAAQ,kCAAkC;AACzE,SAASC,IAAI,EAAEC,KAAK,EAAEC,UAAU,EAAEC,IAAI,QAAQ,qBAAqB;AACnE,SAASC,QAAQ,EAAEC,SAAS,EAAEC,YAAY,QAAQ,oBAAoB;AACtE,SAASC,YAAY,QAAQ,uBAAuB;AACpD,SAASC,OAAO,QAAQ,oBAAoB;AAC5C,SAASC,UAAU,EAAEC,SAAS,QAAQ,oBAAoB;AAC1D,OAAOC,MAAM,MAAM,SAAS;AAC5B,SAASC,SAAS,QAAQ,sBAAsB;AAChD,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,OAAO,QAAQ,qBAAqB;AAC7C,SAASC,cAAc,IAAIC,SAAS,QAAQ,wBAAwB;AACpE,SAASC,kBAAkB,QAAQ,sBAAsB;AACzD,OAAOC,WAAW,MAAM,mCAAmC;AAC3D,SAASC,KAAK,EAAEC,OAAO,QAAQ,sBAAsB;AACrD,SAASC,mBAAmB,QAAQ,wCAAwC;AAC5E,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,mBAAmB,QAAQ,wBAAwB;;AAE5D;AACA;AACA,IAAMC,sBAAsB,GAAG,CAAC,CAAC;AAEjC,SAASC,gBAAgBA,CAACC,IAAI,EAAEC,IAAI,EAAsB;EAAA,IAAAC,mBAAA;EAAA,IAApBC,aAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACtD,IAAMG,IAAI,MAAAC,MAAA,CAAOR,IAAI,SAAO;EAC5B,IAAMS,EAAE,MAAAD,MAAA,CAAOR,IAAI,OAAK;EAExB,QAAAE,mBAAA,GAAOC,aAAa,CAACO,IAAI,CAAC,UAACC,CAAC;IAAA,OAAKA,CAAC,CAACJ,IAAI,CAAC,KAAKN,IAAI;EAAA,EAAC,cAAAC,mBAAA,uBAA3CA,mBAAA,CAA8CO,EAAE,CAAC;AAC1D;AAAC,IAEoBG,WAAW,0BAAAC,YAAA;EAAA,SAAAD,YAAA;IAAAE,eAAA,OAAAF,WAAA;IAAA,OAAAG,UAAA,OAAAH,WAAA,EAAAR,SAAA;EAAA;EAAAY,SAAA,CAAAJ,WAAA,EAAAC,YAAA;EAAA,OAAAI,YAAA,CAAAL,WAAA;IAAAM,GAAA;IAAAC,GAAA,EAC9B,SAAAA,IAAA,EAAc;MACZ,IAAMC,GAAG,GAAG,CACV;QACEC,KAAK,EAAI,aAAa;QACtBC,OAAO,EAAE,IAAI,CAACC;MAChB,CAAC,EACD;QACEF,KAAK,EAAI,kBAAkB;QAC3BC,OAAO,EAAE,IAAI,CAACE;MAChB,CAAC,EACD;QACEH,KAAK,EAAI,oBAAoB;QAC7BC,OAAO,EAAE,IAAI,CAACG;MAChB,CAAC,CACF;MAED,OAAOL,GAAG;IACZ;EAAC;IAAAF,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAwB;MACtB,IAAMC,GAAG,GAAAM,IAAA,CAAAC,eAAA,CAAAf,WAAA,CAAAgB,SAAA,6BAA0B;MAEnClD,QAAQ,CAAC0C,GAAG,EAAE,CAAC,EAAE;QACfS,MAAM,EAAG,WAAW;QACpBR,KAAK,EAAI,IAAI,CAACS,CAAC,CAAC,WAAW,CAAC;QAC5BC,IAAI,EAAK,oBAAoB;QAC7BC,OAAO,EAAE,CAAC,CAAC,IAAI,CAACC,KAAK,CAACC;MACxB,CAAC,CAAC;MAEFxD,QAAQ,CAAC0C,GAAG,EAAE,CAAC,EAAE;QACfS,MAAM,EAAM,oBAAoB;QAChCM,UAAU,EAAE,wBAAwB;QACpCd,KAAK,EAAO,IAAI,CAACS,CAAC,CAAC,yBAAyB,CAAC;QAC7CC,IAAI,EAAQ,oBAAoB;QAChCK,QAAQ,EAAI,IAAI;QAChBJ,OAAO,EAAK,IAAI,CAACK,YAAY,CAAC,WAAW,CAAC,IAAI,IAAI,CAACC,SAAS,CAAC,oBAAoB;MACnF,CAAC,CAAC;MAEF5D,QAAQ,CAAC0C,GAAG,EAAE,CAAC,EAAE;QACfS,MAAM,EAAI,gBAAgB;QAC1BR,KAAK,EAAK,IAAI,CAACS,CAAC,CAAC,oBAAoB,CAAC;QACtCM,QAAQ,EAAE,KAAK;QACfJ,OAAO,EAAG,IAAI,CAACK,YAAY,CAAC,WAAW,CAAC,IAAI,IAAI,CAACC,SAAS,CAAC,oBAAoB,CAAC;QAChFP,IAAI,EAAM;MACZ,CAAC,CAAC;MAEF,OAAOX,GAAG;IACZ;EAAC;IAAAF,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAgB;MAAA,IAAAoB,UAAA;MACd,OAAO,IAAI,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAC,IAAI,aAAJ,IAAI,gBAAAD,UAAA,GAAJ,IAAI,CAAEE,IAAI,cAAAF,UAAA,eAAVA,UAAA,CAAYG,QAAQ;IACxD;EAAC;IAAAxB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAmB;MAAA,IAAAwB,KAAA;MACjB,IAAMC,KAAK,GAAG,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,CAACrE,UAAU,CAACsE,SAAS,CAAC;MAExD,OAAOF,KAAK,CAACG,MAAM,CAAC,UAACC,CAAC;QAAA,IAAAC,OAAA;QAAA,OAAK,EAAAA,OAAA,GAAAD,CAAC,CAACP,IAAI,cAAAQ,OAAA,uBAANA,OAAA,CAAQC,WAAW,MAAKP,KAAI,CAAClC,EAAE;MAAA,EAAC;IAC7D;EAAC;IAAAS,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAkB;MAAA,IAAAgC,YAAA,EAAAC,aAAA;MAChB,KAAAD,YAAA,GAAI,IAAI,CAACE,MAAM,cAAAF,YAAA,eAAXA,YAAA,CAAaG,QAAQ,EAAG;QAC1B,OAAO,IAAI,CAACD,MAAM,CAACC,QAAQ;MAC7B;;MAEA;MACA,OAAO,CAAAF,aAAA,OAAI,CAACC,MAAM,cAAAD,aAAA,eAAXA,aAAA,CAAaG,MAAM,GAAG,IAAI,CAACF,MAAM,CAACE,MAAM,GAAG,UAAU;IAC9D;EAAC;IAAArC,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAsB;MAAA,IAAAqC,kBAAA,EAAAC,WAAA;MACpB,IAAMC,IAAI,IAAAF,kBAAA,GAAG,IAAI,CAACG,YAAY,cAAAH,kBAAA,gBAAAA,kBAAA,GAAjBA,kBAAA,CAAoB,CAAC,CAAC,cAAAA,kBAAA,uBAAtBA,kBAAA,CAAwBF,QAAQ;MAE7C,IAAKI,IAAI,EAAG;QACV,OAAOA,IAAI,CAACE,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAACC,WAAW,CAAC,CAAC;MACnD,CAAC,MAAM,KAAAJ,WAAA,GAAK,IAAI,CAAChB,IAAI,cAAAgB,WAAA,eAATA,WAAA,CAAWf,QAAQ,EAAG;QAChC,OAAO,OAAO;MAChB;MAEA,OAAO,IAAI;IACb;EAAC;IAAAxB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAyB;MAAA,IAAA2C,WAAA;MACvB,QAAAA,WAAA,GAAO,IAAI,CAACrB,IAAI,cAAAqB,WAAA,uBAATA,WAAA,CAAWC,2BAA2B;IAC/C;EAAC;IAAA7C,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAA4B;MAC1B;MACA,IAAImC,QAAQ;MACZ;MACA,IAAMU,WAAW,GAAGrE,mBAAmB,CAAC,CAAC,IAAI,CAACqE,WAAW,IAAI,EAAE,EAAEH,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI,CAACG,WAAW;MAEnG,IAAKA,WAAW,KAAK,yBAAyB,EAAG;QAAA,IAAAC,mBAAA;QAC/C;QACA,KAAAA,mBAAA,GAAK,IAAI,CAACN,YAAY,cAAAM,mBAAA,eAAjBA,mBAAA,CAAoB,CAAC,CAAC,EAAG;UAAA,IAAAC,mBAAA;UAC5BZ,QAAQ,GAAG,EAAAY,mBAAA,OAAI,CAACP,YAAY,CAAC,CAAC,CAAC,cAAAO,mBAAA,gBAAAA,mBAAA,GAApBA,mBAAA,CAAsBC,YAAY,cAAAD,mBAAA,gBAAAA,mBAAA,GAAlCA,mBAAA,CAAoCzB,IAAI,cAAAyB,mBAAA,uBAAxCA,mBAAA,CAA0CX,MAAM,KAAI,IAAI;QACrE,CAAC,MAAM;UACLD,QAAQ,GAAG,QAAQ;QACrB;MACF,CAAC,MAAM,IAAK,IAAI,CAACC,MAAM,EAAG;QACxBD,QAAQ,GAAG,IAAI,CAACC,MAAM;MACxB,CAAC,MAAM,IAAKS,WAAW,IAAIA,WAAW,CAACI,QAAQ,CAAC,IAAI,CAAC,EAAG;QACtDd,QAAQ,GAAGU,WAAW;MACxB,CAAC,MAAM;QACLV,QAAQ,GAAG,QAAQ;MACrB;MAEA,OAAOA,QAAQ;IACjB;EAAC;IAAApC,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAoB;MAClB,IAAIkD,uBAAuB;;MAE3B;MACA;MACA;MACA,IAAI,IAAI,CAACC,kBAAkB,EAAE;QAC3BD,uBAAuB,GAAG,IAAI,CAACC,kBAAkB;MACnD;MACA,IAAMhB,QAAQ,GAAG,IAAI,CAACiB,qBAAqB;;MAE3C;MACA,IAAMC,EAAE,GAAG,CAAE,CAAC;MAEd,IAAIlB,QAAQ,EAAE;QACZkB,EAAE,CAAC,UAAU,CAAC,GAAGlB,QAAQ;MAC3B;MAEA,IAAIe,uBAAuB,EAAE;QAC3BG,EAAE,CAAC,yBAAyB,CAAC,GAAGH,uBAAuB;MACzD;;MAEA;MACA,IAAKf,QAAQ,KAAK,QAAQ,IAAIlE,OAAO,CAAC,IAAI,CAACqF,SAAS,CAAC,IAAIrF,OAAO,CAAC,IAAI,CAACsF,SAAS,CAAC,EAAG;QACjFF,EAAE,CAACG,cAAc,GAAG,OAAO;MAC7B,CAAC,MAAM,IACJrB,QAAQ,KAAK,WAAW,IAAI,CAAClE,OAAO,CAAC,IAAI,CAACqF,SAAS,CAAC,IACnDnB,QAAQ,KAAK,KAAK,IAAI,CAAClE,OAAO,CAAC,IAAI,CAACsF,SAAS;MAC9C;MAAA,EACD;QACAF,EAAE,CAACG,cAAc,GAAGhF,mBAAmB,CAAC2D,QAAQ,CAAC;MACnD;MAEA,IAAK,IAAI,CAACsB,yBAAyB,EAAG;QACpCJ,EAAE,CAACH,uBAAuB,GAAG,IAAI,CAACO,yBAAyB;MAC7D;MAEA,IAAMC,IAAI,GAAG1F,SAAS,OAAAqB,MAAA,CAAQsE,MAAM,CAAC,IAAI,CAACrE,EAAE,CAAC,YAAU+D,EAAE,CAAC;MAE1D,OAAOK,IAAI;IACb;EAAC;IAAA3D,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAmB;MACjB,OAAO,IAAI,CAACkB,YAAY,CAAC,QAAQ,CAAC,CAAC,0CAA0C,CAAC;IAChF;EAAC;IAAAnB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAc;MACZ;MACA,IAAK,IAAI,CAAC4D,YAAY,CAAC,WAAW,CAAC,EAAG;QACpC,OAAO,IAAI,CAACC,WAAW,CAAC,WAAW,CAAC;MACtC;;MAEA;MACA,OAAO,IAAI,CAACA,WAAW,CAAC,OAAO,CAAC;IAClC;EAAC;IAAA9D,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAA2B;MAAA,IAAA8D,aAAA,EAAAC,WAAA;MACzB,IAAMC,UAAU,IAAAF,aAAA,GAAG,IAAI,CAAC5B,MAAM,cAAA4B,aAAA,gBAAAA,aAAA,GAAXA,aAAA,CAAaG,OAAO,cAAAH,aAAA,uBAApBA,aAAA,CAAsBI,UAAU;MACnD,IAAMC,QAAQ,IAAAJ,WAAA,GAAG,IAAI,CAACzC,IAAI,cAAAyC,WAAA,gBAAAA,WAAA,GAATA,WAAA,IAAA1E,MAAA,CAAgB,IAAI,CAACwD,WAAW,YAAU,cAAAkB,WAAA,uBAA1CA,WAAA,CAA4CzD,iBAAiB;MAE9E,OAAO0D,UAAU,IAAIG,QAAQ;IAC/B;EAAC;IAAApE,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAwB;MACtB,OAAO,IAAI,CAACoE,oBAAoB,IAAI,IAAI,CAAClD,YAAY,CAAC,QAAQ,CAAC,CAAC,sBAAsB,CAAC;IACzF;EAAC;IAAAnB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAA4B;MAC1B,OAAO,IAAI,CAACM,iBAAiB,CAACmC,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;IACtD;EAAC;IAAA1C,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAiC;MAC/B,IAAK,IAAI,CAACM,iBAAiB,CAAC+D,KAAK,CAAC,MAAM,CAAC,EAAG;QAC1C,OAAO,IAAI,CAAC/D,iBAAiB,CAACmC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC;MAC1D;MAEA,OAAO,EAAE;IACX;EAAC;IAAA1C,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAiB;MAAA,IAAAsE,aAAA;MACf,KAAAA,aAAA,GAAK,IAAI,CAACpC,MAAM,cAAAoC,aAAA,eAAXA,aAAA,CAAanC,QAAQ,CAACc,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC/C,OAAO,SAAS;MAClB;MAEA,OAAO,OAAO;IAChB;EAAC;IAAAlD,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAqB;MACnB,OAAOuE,OAAO,gCAAAlF,MAAA,CAAiC,IAAI,CAACmF,UAAU,SAAO,CAAC;IACxE;EAAC;IAAAzE,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAgB;MAAA,IAAAyE,aAAA,EAAAC,aAAA;MACd;MACA;MACA,IAAMC,kBAAkB,IAAAF,aAAA,GAAG,IAAI,CAACvC,MAAM,cAAAuC,aAAA,uBAAXA,aAAA,CAAaG,kBAAkB;MAC1D,IAAMC,gBAAgB,IAAAH,aAAA,GAAG,IAAI,CAACxC,MAAM,cAAAwC,aAAA,uBAAXA,aAAA,CAAaI,gBAAgB;MAEtD,IAAIH,kBAAkB,IAAIE,gBAAgB,EAAG;QAC3C,IAAM5E,GAAG,GAAG,EAAE;QAEd,IAAI0E,kBAAkB,EAAE;UACtB1E,GAAG,CAAC8E,IAAI,CAACxG,OAAO,CAAC;QACnB;QACA,IAAIsG,gBAAgB,EAAE;UACpB5E,GAAG,CAAC8E,IAAI,CAACzG,KAAK,CAAC;QACjB;QAEA,OAAO2B,GAAG;MACZ,CAAC,MAAM,IAAI,IAAI,CAACuE,UAAU,KAAKjG,OAAO,EAAE;QACtC,OAAO,CAACA,OAAO,CAAC;MAClB;MAEA,OAAO,CAACD,KAAK,CAAC;IAChB;EAAC;IAAAyB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAc;MAAA,IAAAgF,WAAA;MACZ,OAAO,EAAAA,WAAA,OAAI,CAAC1D,IAAI,cAAA0D,WAAA,uBAATA,WAAA,CAAWzD,QAAQ,MAAK,IAAI;IACrC;EAAC;IAAAxB,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAkB;MAChB,OAAO5B,kBAAkB,CAAC,IAAI,CAAC;IACjC;EAAC;IAAA2B,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAiC;MAC/B,IAAMiF,SAAS,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;MAEvC,OAAOA,SAAS,CAACC,QAAQ,CAAC,IAAI,CAACrC,WAAW,CAAC;IAC7C;EAAC;IAAA9C,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAmB;MAAA,IAAAmF,aAAA;MACjB,IAAIhD,QAAQ,GAAG,EAAAgD,aAAA,OAAI,CAACjD,MAAM,cAAAiD,aAAA,uBAAXA,aAAA,CAAahD,QAAQ,KAAI,YAAY;MAEpD,IAAI,IAAI,CAACiD,WAAW,EAAE;QACpBjD,QAAQ,GAAGhE,SAAS;MACtB;MACA;MACA,IAAMkH,GAAG,GAAGlD,QAAQ,CAACmD,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAClC;MACA,IAAMC,IAAI,GAAG5G,sBAAsB,CAAC0G,GAAG,CAAC,IAAIA,GAAG;MAE/C,IAAIzE,IAAI;MAER,IAAI;QACFA,IAAI,GAAG2D,OAAO,mCAAAlF,MAAA,CAAoCgG,GAAG,SAAO,CAAC;MAC/D,CAAC,CAAC,OAAOG,CAAC,EAAE;QACVC,OAAO,CAACC,IAAI,4CAAArG,MAAA,CAA6CkG,IAAI,CAAG,CAAC,CAAC,CAAC;QACnE;QACA3E,IAAI,GAAG2D,OAAO,gDAAgD,CAAC;MACjE;MAEA,OAAO3D,IAAI;IACb;EAAC;IAAAb,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAuB;MACrB,OAAO,IAAI,CAAC2F,YAAY;IAC1B;EAAC;IAAA5F,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAsB;MACpB,OAAO,IAAI,CAAC2F,YAAY;IAC1B;;IAEA;EAAA;IAAA5F,GAAA;IAAAC,GAAA,EACA,SAAAA,IAAA,EAAY;MAAA,IAAA4F,cAAA,EAAAC,eAAA,EAAAC,eAAA;MACV,IAAMC,IAAI,IAAAH,cAAA,GAAG,IAAI,CAACI,QAAQ,cAAAJ,cAAA,gBAAAA,cAAA,GAAbA,cAAA,CAAeK,WAAW,cAAAL,cAAA,uBAA1BA,cAAA,CAA6B1I,aAAa,CAACgJ,IAAI,CAAC;MAE7D,IAAI,CAACH,IAAI,EAAE;QACT,OAAO5G,SAAS;MAClB;MAEA,IAAMgH,KAAK,GAAG,EAAAN,eAAA,OAAI,CAACG,QAAQ,cAAAH,eAAA,uBAAbA,eAAA,CAAeI,WAAW,CAAC/I,aAAa,CAACkJ,KAAK,CAAC,KAAI,SAAS;MAC1E,IAAMC,QAAQ,GAAG,EAAAP,eAAA,OAAI,CAACE,QAAQ,cAAAF,eAAA,uBAAbA,eAAA,CAAeG,WAAW,CAAC/I,aAAa,CAACoJ,SAAS,CAAC,KAAI,EAAE;MAE1E,OAAO;QACLP,IAAI,EAAJA,IAAI;QACJI,KAAK,EAALA,KAAK;QACLtI,SAAS,EAAEA,SAAS,CAACD,UAAU,CAACuI,KAAK,CAAC,CAAC;QACvCE,QAAQ,EAAGA,QAAQ,CAACE,MAAM,CAAC,CAAC,EAAE,CAAC;MACjC,CAAC;IACH;EAAC;IAAAxG,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAY;MACV,OAAO,IAAI,CAACwG,OAAO,GAAGvJ,OAAO,CAACwJ,WAAW,GAAGxJ,OAAO,CAACyJ,WAAW;IACjE;EAAC;IAAA3G,GAAA;IAAA4G,KAAA,EAED,SAAAC,oBAAoBC,OAAO,EAAE;MAAA,IAAAC,qBAAA,EAAAC,eAAA;MAC3B,IAAK,CAAAD,qBAAA,OAAI,CAACE,eAAe,cAAAF,qBAAA,eAApBA,qBAAA,CAAsB5H,MAAM,IAAI,EAAA6H,eAAA,OAAI,CAACf,QAAQ,cAAAe,eAAA,gBAAAA,eAAA,GAAbA,eAAA,CAAeE,MAAM,cAAAF,eAAA,uBAArBA,eAAA,CAAwB3J,KAAK,CAAC8J,YAAY,CAAC,MAAK,IAAI,CAAC5H,EAAE,EAAG;QAC7F;MACF;MAEA,IAAI,CAAC0G,QAAQ,GAAG,IAAI,CAACA,QAAQ,IAAI,CAAC,CAAC;MACnC,IAAI,CAACA,QAAQ,CAACiB,MAAM,GAAG,IAAI,CAACjB,QAAQ,CAACiB,MAAM,IAAI,CAAC,CAAC;MACjD,IAAI,CAACjB,QAAQ,CAACiB,MAAM,CAAC7J,KAAK,CAAC8J,YAAY,CAAC,GAAG,IAAI,CAAC5H,EAAE;MAElD,IAAKuH,OAAO,EAAG;QACb,OAAO,IAAI,CAACM,IAAI,CAAC,CAAC;MACpB;IACF;EAAC;IAAApH,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAmB;MAAA,IAAAoH,qBAAA,EAAAC,qBAAA;MACjB,IAAMC,QAAQ,GAAG3J,OAAO,EAAAyJ,qBAAA,GAAC,IAAI,CAAClF,MAAM,CAACqF,SAAS,cAAAH,qBAAA,uBAArBA,qBAAA,CAAuBI,GAAG,CAAC;MACpD,IAAMC,WAAW,GAAG9J,OAAO,EAAA0J,qBAAA,GAAC,IAAI,CAACnF,MAAM,CAACuF,WAAW,cAAAJ,qBAAA,uBAAvBA,qBAAA,CAAyBG,GAAG,CAAC;MAEzD,IAAKC,WAAW,GAAG,CAAC,IAAIH,QAAQ,IAAI,CAAC,EAAG;QACtC,OAAOI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,WAAW,GAAGH,QAAQ,CAAC;MAC5C,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF;EAAC;IAAAvH,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAsB;MAAA,IAAA4H,sBAAA,EAAAC,sBAAA;MACpB,IAAMP,QAAQ,GAAG3J,OAAO,EAAAiK,sBAAA,GAAC,IAAI,CAAC1F,MAAM,CAACqF,SAAS,cAAAK,sBAAA,uBAArBA,sBAAA,CAAuBE,MAAM,CAAC;MACvD,IAAML,WAAW,GAAG9J,OAAO,EAAAkK,sBAAA,GAAC,IAAI,CAAC3F,MAAM,CAACuF,WAAW,cAAAI,sBAAA,uBAAvBA,sBAAA,CAAyBC,MAAM,CAAC;MAE5D,IAAKL,WAAW,GAAG,CAAC,IAAIH,QAAQ,IAAI,CAAC,EAAG;QACtC,OAAOI,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEF,WAAW,GAAGH,QAAQ,CAAC;MAC5C,CAAC,MAAM;QACL,OAAO,IAAI;MACb;IACF;EAAC;IAAAvH,GAAA;IAAA4G,KAAA,EAED,SAAAoB,UAAA,EAAY;MACV,IAAI,CAACC,SAAS,CAAC,SAAS,EAAE;QACxB1I,EAAE,aAAAD,MAAA,CAAqB,IAAI,CAACC,EAAE,CAAG;QACjCY,KAAK,EAAM,IAAI,CAACgB,YAAY,CAAC,QAAQ,CAAC,CAAC,uBAAuB,EAAE;UAAE+G,IAAI,EAAE,IAAI,CAACC;QAAY,CAAC,CAAC;QAC3FtH,IAAI,EAAO,UAAU;QACrBuH,SAAS,EAAE,cAAc;QACzBC,KAAK,EAAM;UACTC,OAAO,EAAE,IAAI;UACbC,GAAG,EAAM,CAAC;QACZ;MACF,CAAC,EAAE;QAAEC,IAAI,EAAE;MAAK,CAAC,CAAC;IACpB;EAAC;IAAAxI,GAAA;IAAA4G,KAAA;MAAA,IAAA6B,mBAAA,GAAAC,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAED,SAAAC,QAAA;QAAA,IAAAC,GAAA;QAAA,OAAAH,mBAAA,CAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cAAAF,QAAA,CAAAE,IAAA;cAAA,OACoB,IAAI,CAACC,QAAQ,CAAC,oBAAoB,CAAC;YAAA;cAA/CN,GAAG,GAAAG,QAAA,CAAAI,IAAA;cAAA,OAAAJ,QAAA,CAAAK,MAAA,WAEFR,GAAG,CAACS,MAAM;YAAA;YAAA;cAAA,OAAAN,QAAA,CAAAO,IAAA;UAAA;QAAA,GAAAX,OAAA;MAAA,CAClB;MAAA,SAAAY,mBAAA;QAAA,OAAAhB,mBAAA,CAAAiB,KAAA,OAAAxK,SAAA;MAAA;MAAA,OAAAuK,kBAAA;IAAA;EAAA;IAAAzJ,GAAA;IAAA4G,KAAA;MAAA,IAAA+C,mBAAA,GAAAjB,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAED,SAAAgB,SAAA;QAAA,IAAAL,MAAA;QAAA,OAAAZ,mBAAA,CAAAI,IAAA,UAAAc,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAZ,IAAA,GAAAY,SAAA,CAAAX,IAAA;YAAA;cAAAW,SAAA,CAAAX,IAAA;cAAA,OACuB,IAAI,CAACM,kBAAkB,CAAC,CAAC;YAAA;cAAxCF,MAAM,GAAAO,SAAA,CAAAT,IAAA;cAEZ1L,YAAY,IAAA2B,MAAA,CAAK,IAAI,CAAC6I,WAAW,YAAUoB,MAAM,EAAE,kBAAkB,CAAC;YAAC;YAAA;cAAA,OAAAO,SAAA,CAAAN,IAAA;UAAA;QAAA,GAAAI,QAAA;MAAA,CACxE;MAAA,SAAAG,mBAAA;QAAA,OAAAJ,mBAAA,CAAAD,KAAA,OAAAxK,SAAA;MAAA;MAAA,OAAA6K,kBAAA;IAAA;EAAA;IAAA/J,GAAA;IAAA4G,KAAA;MAAA,IAAAoD,uBAAA,GAAAtB,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAED,SAAAqB,SAA6BC,KAAK;QAAA,IAAAC,GAAA,EAAAC,KAAA,EAAAlK,GAAA;QAAA,OAAAyI,mBAAA,CAAAI,IAAA,UAAAsB,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAApB,IAAA,GAAAoB,SAAA,CAAAnB,IAAA;YAAA;cAC5BgB,GAAG,GAAG,CAAC,CAAC;cACRC,KAAK,GAAG,IAAI;cAAAE,SAAA,CAAAnB,IAAA;cAAA,OAEVnL,SAAS,CAACkM,KAAK,EAAE,EAAE,EAAE,UAACK,IAAI,EAAEC,GAAG,EAAK;gBACxC,OAAOD,IAAI,CAACd,kBAAkB,CAAC,CAAC,CAACgB,IAAI,CAAC,UAAClB,MAAM,EAAK;kBAChD,IAAMmB,KAAK,GAAG3M,MAAM,CAAC4M,IAAI,CAACpB,MAAM,CAAC;kBAEjC,IAAKa,KAAK,EAAG;oBACXD,GAAG,GAAGO,KAAK;oBACXN,KAAK,GAAG,KAAK;kBACf,CAAC,MAAM;oBAAA,IAAAQ,aAAA,EAAAC,UAAA,EAAAC,aAAA;oBACL,CAAAF,aAAA,GAAAT,GAAG,CAACY,QAAQ,EAAC/F,IAAI,CAAA0E,KAAA,CAAAkB,aAAA,EAAAI,kBAAA,CAAIN,KAAK,CAACK,QAAQ,EAAC;oBACpC,CAAAF,UAAA,GAAAV,GAAG,CAACc,KAAK,EAACjG,IAAI,CAAA0E,KAAA,CAAAmB,UAAA,EAAAG,kBAAA,CAAIN,KAAK,CAACO,KAAK,EAAC;oBAC9B,CAAAH,aAAA,GAAAX,GAAG,CAACe,QAAQ,EAAClG,IAAI,CAAA0E,KAAA,CAAAoB,aAAA,EAAAE,kBAAA,CAAIN,KAAK,CAACQ,QAAQ,EAAC;kBACtC;gBACF,CAAC,CAAC;cACJ,CAAC,CAAC;YAAA;cAEF,OAAOf,GAAG,CAAC,iBAAiB,CAAC;cAEvBjK,GAAG,GAAGnC,MAAM,CAACoN,IAAI,CAAChB,GAAG,CAAC;cAE5BxM,YAAY,CAAC,iBAAiB,EAAEuC,GAAG,EAAE,kBAAkB,CAAC;YAAC;YAAA;cAAA,OAAAoK,SAAA,CAAAd,IAAA;UAAA;QAAA,GAAAS,QAAA;MAAA,CAC1D;MAAA,SAAAmB,uBAAAC,EAAA;QAAA,OAAArB,uBAAA,CAAAN,KAAA,OAAAxK,SAAA;MAAA;MAAA,OAAAkM,sBAAA;IAAA;EAAA;IAAApL,GAAA;IAAA4G,KAAA;MAAA,IAAA0E,eAAA,GAAA5C,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAED,SAAA2C,SAAA;QAAA,IAAAhC,MAAA;QAAA,OAAAZ,mBAAA,CAAAI,IAAA,UAAAyC,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAvC,IAAA,GAAAuC,SAAA,CAAAtC,IAAA;YAAA;cAAAsC,SAAA,CAAAvC,IAAA;cAAAuC,SAAA,CAAAtC,IAAA;cAAA,OAEyB,IAAI,CAACM,kBAAkB,CAAC,CAAC;YAAA;cAAxCF,MAAM,GAAAkC,SAAA,CAAApC,IAAA;cAAA,KAERE,MAAM;gBAAAkC,SAAA,CAAAtC,IAAA;gBAAA;cAAA;cAAAsC,SAAA,CAAAtC,IAAA;cAAA,OACFxK,mBAAmB,CAAC4K,MAAM,CAAC;YAAA;cAAAkC,SAAA,CAAAtC,IAAA;cAAA;YAAA;cAAAsC,SAAA,CAAAvC,IAAA;cAAAuC,SAAA,CAAAC,EAAA,GAAAD,SAAA;YAAA;YAAA;cAAA,OAAAA,SAAA,CAAAjC,IAAA;UAAA;QAAA,GAAA+B,QAAA;MAAA,CAGtC;MAAA,SAAAI,eAAA;QAAA,OAAAL,eAAA,CAAA5B,KAAA,OAAAxK,SAAA;MAAA;MAAA,OAAAyM,cAAA;IAAA;EAAA;IAAA3L,GAAA;IAAA4G,KAAA;MAAA,IAAAgF,iBAAA,GAAAlD,iBAAA,eAAAC,mBAAA,CAAAC,IAAA,CAED,SAAAiD,SAAA;QAAA,IAAAC,KAAA,EAAAC,WAAA,EAAAC,kBAAA,EAAAC,OAAA,EAAAC,kBAAA;QAAA,OAAAvD,mBAAA,CAAAI,IAAA,UAAAoD,UAAAC,SAAA;UAAA,kBAAAA,SAAA,CAAAlD,IAAA,GAAAkD,SAAA,CAAAjD,IAAA;YAAA;cAAAiD,SAAA,CAAAjD,IAAA;cAAA,OACsB,IAAI,CAAClB,SAAS,CAAC,iBAAiB,EAAE;gBAAElJ,IAAI,EAAE3B;cAAK,CAAC,EAAE;gBAAEoL,IAAI,EAAE;cAAK,CAAC,CAAC;YAAA;cAA/EsD,KAAK,GAAAM,SAAA,CAAA/C,IAAA;cAAA+C,SAAA,CAAAjD,IAAA;cAAA,OACe,IAAI,CAAClB,SAAS,CAAC,iBAAiB,EAAE;gBAAElJ,IAAI,EAAE3B;cAAK,CAAC,EAAE;gBAAEoL,IAAI,EAAE;cAAK,CAAC,CAAC;YAAA;cAArFuD,WAAW,GAAAK,SAAA,CAAA/C,IAAA;cAEX2C,kBAAkB,GAAGF,KAAK,CAACO,IAAI,CAAC,UAACC,IAAI;gBAAA,OAAKA,IAAI,CAACC,QAAQ,IAAI,CAACD,IAAI,CAACE,QAAQ;cAAA,EAAC;cAE1EP,OAAO,GAAGF,WAAW,CAAClK,MAAM,CAAC,UAAC4K,MAAM,EAAK;gBAC7C,IAAMH,IAAI,GAAGR,KAAK,CAACtM,IAAI,CAAC,UAACkN,EAAE;kBAAA,OAAKA,EAAE,CAACnN,EAAE,KAAKkN,MAAM,CAAClN,EAAE;gBAAA,EAAC;gBAEpD,OAAO+M,IAAI,KAAK,CAACN,kBAAkB,IAAIM,IAAI,CAACE,QAAQ,CAAC;cACvD,CAAC,CAAC;cACIN,kBAAkB,GAAG;gBACzBzE,GAAG,EAAK,CAAC;gBACTM,MAAM,EAAE;cACV,CAAC;cAAA,KAEG7J,OAAO,CAAC+N,OAAO,CAAC;gBAAAG,SAAA,CAAAjD,IAAA;gBAAA;cAAA;cAAA,OAAAiD,SAAA,CAAA9C,MAAA,WACX,IAAI;YAAA;cAAA,OAAA8C,SAAA,CAAA9C,MAAA,WAGN2C,OAAO,CAACU,MAAM,CAAC,UAACC,GAAG,EAAEH,MAAM,EAAK;gBAAA,IAAAI,aAAA,EAAAC,cAAA;gBACrCF,GAAG,CAACnF,GAAG,IAAI7J,OAAO,CAAC6O,MAAM,aAANA,MAAM,gBAAAI,aAAA,GAANJ,MAAM,CAAEM,KAAK,cAAAF,aAAA,uBAAbA,aAAA,CAAepF,GAAG,CAAC;gBACtCmF,GAAG,CAAC7E,MAAM,IAAInK,OAAO,CAAC6O,MAAM,aAANA,MAAM,gBAAAK,cAAA,GAANL,MAAM,CAAEM,KAAK,cAAAD,cAAA,uBAAbA,cAAA,CAAe/E,MAAM,CAAC;gBAE5C,OAAO6E,GAAG;cACZ,CAAC,EAAEV,kBAAkB,CAAC;YAAA;YAAA;cAAA,OAAAE,SAAA,CAAA5C,IAAA;UAAA;QAAA,GAAAqC,QAAA;MAAA,CACvB;MAAA,SAAAmB,iBAAA;QAAA,OAAApB,iBAAA,CAAAlC,KAAA,OAAAxK,SAAA;MAAA;MAAA,OAAA8N,gBAAA;IAAA;EAAA;IAAAhN,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAY;MAAA,IAAAgN,MAAA;MACV,OAAO,IAAI,CAACtL,QAAQ,CAAC,KAAK,CAAC,CAACrE,UAAU,CAACF,IAAI,CAAC,CAACyE,MAAM,CAAC,UAACyK,IAAI;QAAA,OAAKA,IAAI,CAAC/M,EAAE,CAAC2N,UAAU,CAACD,MAAI,CAAC1N,EAAE,CAAC;MAAA,EAAC;IAC5F;EAAC;IAAAS,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAoB;MAAA,IAAAkN,WAAA,EAAAC,eAAA,EAAAC,eAAA;MAClB,IAAMC,MAAM,GAAG,CAAC,GAAAH,WAAA,GAAC,IAAI,CAAC5L,IAAI,cAAA4L,WAAA,eAATA,WAAA,CAAWI,6BAA6B;MACzD;MACA;MACA;;MAEA,IAAMzO,IAAI,GAAG,IAAI,CAAC2H,OAAO,IAAI6G,MAAM,IAAI,IAAI,CAACE,0BAA0B,GAAG,IAAI,GAAG,MAAM;MACtF,IAAM1E,GAAG,GAAGjK,gBAAgB,CAACC,IAAI,EAAEvB,IAAI,CAACkQ,eAAe,GAAAL,eAAA,GAAE,IAAI,CAACnH,QAAQ,cAAAmH,eAAA,uBAAbA,eAAA,CAAenO,aAAa,CAAC;MAEtF,IAAI6J,GAAG,EAAE;QACP,OAAOA,GAAG;MACZ;MAEA,OAAOjK,gBAAgB,CAACC,IAAI,KAAK,IAAI,GAAG,MAAM,GAAG,IAAI,EAAEvB,IAAI,CAACkQ,eAAe,GAAAJ,eAAA,GAAE,IAAI,CAACpH,QAAQ,cAAAoH,eAAA,uBAAbA,eAAA,CAAepO,aAAa,CAAC;IAC5G;EAAC;IAAAe,GAAA;IAAAC,GAAA,EAED,SAAAA,IAAA,EAAa;MACX,OAAO,IAAI,CAACkB,YAAY,CAAC,WAAW,CAAC,CAACzC,eAAe,CAAC,CAACyG,QAAQ,CAAC,IAAI,CAAC5F,EAAE,CAAC;IAC1E;EAAC;IAAAS,GAAA;IAAA4G,KAAA,EAED,SAAA8G,IAAA,EAAM;MACJ,IAAMC,KAAK,GAAG,IAAI,CAACxM,YAAY,CAAC,WAAW,CAAC,CAACzC,eAAe,CAAC,IAAI,EAAE;MAEnEjB,SAAS,CAACkQ,KAAK,EAAE,IAAI,CAACpO,EAAE,CAAC;MAEzB,IAAI,CAAC0I,SAAS,CAAC,WAAW,EAAE;QAAEjI,GAAG,EAAEtB,eAAe;QAAEkI,KAAK,EAAE+G;MAAM,CAAC,EAAE;QAAEnF,IAAI,EAAE;MAAK,CAAC,CAAC;IACrF;EAAC;IAAAxI,GAAA;IAAA4G,KAAA,EAED,SAAAgH,MAAA,EAAQ;MACN,IAAMD,KAAK,GAAG,IAAI,CAACxM,YAAY,CAAC,WAAW,CAAC,CAACzC,eAAe,CAAC,IAAI,EAAE;MAEnEhB,YAAY,CAACiQ,KAAK,EAAE,IAAI,CAACpO,EAAE,CAAC;MAE5B,IAAI,CAAC0I,SAAS,CAAC,WAAW,EAAE;QAAEjI,GAAG,EAAEtB,eAAe;QAAEkI,KAAK,EAAE+G;MAAM,CAAC,EAAE;QAAEnF,IAAI,EAAE;MAAK,CAAC,CAAC;IACrF;EAAC;AAAA,EAxcsClK,WAAW;AAAA,SAA/BoB,WAAW,IAAAmO,OAAA","ignoreList":[]}]}