{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/models/management.cattle.io.cluster.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/management.cattle.io.cluster.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CATALOG","CLUSTER_BADGE","NODE","FLEET","MANAGEMENT","CAPI","insertAt","addObject","removeObject","downloadFile","parseSi","parseColor","textColor","jsyaml","eachLimit","addParams","isEmpty","HARVESTER_NAME","HARVESTER","isHarvesterCluster","HybridModel","LINUX","WINDOWS","KONTAINER_TO_DRIVER","PINNED_CLUSTERS","copyTextToClipboard","PROVIDER_LOGO_OVERRIDE","findRelationship","verb","type","_relationships$find","relationships","arguments","length","undefined","from","concat","id","find","r","MgmtCluster","_HybridModel","_classCallCheck","_callSuper","_inherits","_createClass","key","get","out","label","content","provisionerDisplay","machineProviderDisplay","kubernetesVersion","_superPropGet","action","t","icon","enabled","links","shell","bulkAction","bulkable","$rootGetters","hasAction","_this$spec","hasLink","spec","internal","_this","pools","$getters","NODE_POOL","filter","x","_x$spec","clusterName","_this$status","_this$status2","status","provider","driver","_this$machinePools","_this$spec2","kind","machinePools","replace","toLowerCase","_this$spec3","clusterTemplateRevisionName","provisioner","_this$machinePools2","_this$machinePools$","nodeTemplate","endsWith","clusterTemplateRevision","rkeTemplateVersion","providerForEmberParam","qp","eksConfig","gkeConfig","importProvider","clusterTemplateRevisionId","path","escape","hasCondition","isCondition","_this$status3","_this$spec4","fromStatus","version","gitVersion","fromSpec","kubernetesVersionRaw","match","_this$status4","require","providerOs","_this$status5","_this$status6","rke2WindowsWorkers","windowsWorkerCount","rke2LinuxWorkers","linuxWorkerCount","push","_this$spec5","providers","includes","_this$status7","isHarvester","prv","split","logo","e","console","warn","providerLogo","_this$metadata","_this$metadata2","_this$metadata3","_this$metadata4","metadata","annotations","ICON_TEXT","comment","TEXT","color","COLOR","iconText","text","substr","isLocal","_MANAGEMENT","_DOWNSTREAM","value","setClusterNameLabel","andSave","_this$ownerReferences","_this$metadata5","ownerReferences","labels","CLUSTER_NAME","save","_this$status$requeste","_this$status$allocata","reserved","requested","cpu","allocatable","Math","max","_this$status$requeste2","_this$status$allocata2","memory","openShell","$dispatch","name","nameDisplay","component","attrs","cluster","pod","root","_generateKubeConfig","_asyncToGenerator","_regeneratorRuntime","mark","_callee","res","wrap","_callee$","_context","prev","next","doAction","sent","abrupt","config","stop","generateKubeConfig","apply","_downloadKubeConfig","_callee2","_callee2$","_context2","downloadKubeConfig","_downloadKubeConfigBulk","_callee3","items","obj","first","_callee3$","_context3","item","idx","then","entry","load","_obj$clusters","_obj$users","_obj$contexts","clusters","_toConsumableArray","users","contexts","dump","downloadKubeConfigBulk","_x","_copyKubeConfig","_callee4","_callee4$","_context4","t0","copyKubeConfig","_fetchNodeMetrics","_callee5","nodes","nodeMetrics","someNonWorkerRoles","metrics","initialAggregation","_callee5$","_context5","some","node","hasARole","isWorker","metric","nd","reduce","agg","_metric$usage","_metric$usage2","usage","fetchNodeMetrics","_this2","startsWith","_this$spec6","_this$metadata6","_this$metadata7","isRKE1","rancherKubernetesEngineConfig","isHostedKubernetesProvider","RANCHER_CLUSTER","pin","types","unpin","default"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/models/management.cattle.io.cluster.js"],"sourcesContent":["import { CATALOG, CLUSTER_BADGE } from '@shell/config/labels-annotations';\nimport { NODE, FLEET, MANAGEMENT, CAPI } from '@shell/config/types';\nimport { insertAt, addObject, removeObject } from '@shell/utils/array';\nimport { downloadFile } from '@shell/utils/download';\nimport { parseSi } from '@shell/utils/units';\nimport { parseColor, textColor } from '@shell/utils/color';\nimport jsyaml from 'js-yaml';\nimport { eachLimit } from '@shell/utils/promise';\nimport { addParams } from '@shell/utils/url';\nimport { isEmpty } from '@shell/utils/object';\nimport { HARVESTER_NAME as HARVESTER } from '@shell/config/features';\nimport { isHarvesterCluster } from '@shell/utils/cluster';\nimport HybridModel from '@shell/plugins/steve/hybrid-class';\nimport { LINUX, WINDOWS } from '@shell/store/catalog';\nimport { KONTAINER_TO_DRIVER } from './management.cattle.io.kontainerdriver';\nimport { PINNED_CLUSTERS } from '@shell/store/prefs';\nimport { copyTextToClipboard } from '@shell/utils/clipboard';\n\n// See translation file cluster.providers for list of providers\n// If the logo is not named with the provider name, add an override here\nconst PROVIDER_LOGO_OVERRIDE = {};\n\nfunction findRelationship(verb, type, relationships = []) {\n  const from = `${ verb }Type`;\n  const id = `${ verb }Id`;\n\n  return relationships.find((r) => r[from] === type)?.[id];\n}\n\nexport default class MgmtCluster extends HybridModel {\n  get details() {\n    const out = [\n      {\n        label:   'Provisioner',\n        content: this.provisionerDisplay\n      },\n      {\n        label:   'Machine Provider',\n        content: this.machineProviderDisplay\n      },\n      {\n        label:   'Kubernetes Version',\n        content: this.kubernetesVersion,\n      },\n    ];\n\n    return out;\n  }\n\n  get _availableActions() {\n    const out = super._availableActions;\n\n    insertAt(out, 0, {\n      action:  'openShell',\n      label:   this.t('nav.shell'),\n      icon:    'icon icon-terminal',\n      enabled: !!this.links.shell,\n    });\n\n    insertAt(out, 1, {\n      action:     'downloadKubeConfig',\n      bulkAction: 'downloadKubeConfigBulk',\n      label:      this.t('nav.kubeconfig.download'),\n      icon:       'icon icon-download',\n      bulkable:   true,\n      enabled:    this.$rootGetters['isRancher'] && this.hasAction('generateKubeconfig'),\n    });\n\n    insertAt(out, 2, {\n      action:   'copyKubeConfig',\n      label:    this.t('cluster.copyConfig'),\n      bulkable: false,\n      enabled:  this.$rootGetters['isRancher'] && this.hasAction('generateKubeconfig'),\n      icon:     'icon icon-copy',\n    });\n\n    return out;\n  }\n\n  get canDelete() {\n    return this.hasLink('remove') && !this?.spec?.internal;\n  }\n\n  get machinePools() {\n    const pools = this.$getters['all'](MANAGEMENT.NODE_POOL);\n\n    return pools.filter((x) => x.spec?.clusterName === this.id);\n  }\n\n  get provisioner() {\n    if (this.status?.provider ) {\n      return this.status.provider;\n    }\n\n    // For imported K3s clusters, this.status.driver is 'k3s.'\n    return this.status?.driver ? this.status.driver : 'imported';\n  }\n\n  get machineProvider() {\n    const kind = this.machinePools?.[0]?.provider;\n\n    if ( kind ) {\n      return kind.replace(/config$/i, '').toLowerCase();\n    } else if ( this.spec?.internal ) {\n      return 'local';\n    }\n\n    return null;\n  }\n\n  get rkeTemplateVersion() {\n    return this.spec?.clusterTemplateRevisionName;\n  }\n\n  get providerForEmberParam() {\n    // Ember wants one word called provider to tell what component to show, but has much indirect mapping to figure out what it is.\n    let provider;\n    // Provisioner is the \"<something>Config\" in the model\n    const provisioner = KONTAINER_TO_DRIVER[(this.provisioner || '').toLowerCase()] || this.provisioner;\n\n    if ( provisioner === 'rancherKubernetesEngine' ) {\n      // Look for a cloud provider in one of the node templates\n      if ( this.machinePools?.[0] ) {\n        provider = this.machinePools[0]?.nodeTemplate?.spec?.driver || null;\n      } else {\n        provider = 'custom';\n      }\n    } else if ( this.driver ) {\n      provider = this.driver;\n    } else if ( provisioner && provisioner.endsWith('v2') ) {\n      provider = provisioner;\n    } else {\n      provider = 'import';\n    }\n\n    return provider;\n  }\n\n  get emberEditPath() {\n    let clusterTemplateRevision;\n\n    // If the RKE1 cluster is created from an RKE template, we need\n    // to get the template version to pass into the Ember UI for\n    // the iFramed edit cluster form\n    if (this.rkeTemplateVersion) {\n      clusterTemplateRevision = this.rkeTemplateVersion;\n    }\n    const provider = this.providerForEmberParam;\n\n    // Avoid passing falsy values as query parameters\n    const qp = { };\n\n    if (provider) {\n      qp['provider'] = provider;\n    }\n\n    if (clusterTemplateRevision) {\n      qp['clusterTemplateRevision'] = clusterTemplateRevision;\n    }\n\n    // Copied out of https://github.com/rancher/ui/blob/20f56dc54c4fc09b5f911e533cb751c13609adaf/app/models/cluster.js#L844\n    if ( provider === 'import' && isEmpty(this.eksConfig) && isEmpty(this.gkeConfig) ) {\n      qp.importProvider = 'other';\n    } else if (\n      (provider === 'amazoneks' && !isEmpty(this.eksConfig) ) ||\n       (provider === 'gke' && !isEmpty(this.gkeConfig) )\n       // || something for aks v2\n    ) {\n      qp.importProvider = KONTAINER_TO_DRIVER[provider];\n    }\n\n    if ( this.clusterTemplateRevisionId ) {\n      qp.clusterTemplateRevision = this.clusterTemplateRevisionId;\n    }\n\n    const path = addParams(`/c/${ escape(this.id) }/edit`, qp);\n\n    return path;\n  }\n\n  get groupByLabel() {\n    return this.$rootGetters['i18n/t']('resourceTable.groupLabel.notInAWorkspace');\n  }\n\n  get isReady() {\n    // If the Connected condition exists, use that (2.6+)\n    if ( this.hasCondition('Connected') ) {\n      return this.isCondition('Connected');\n    }\n\n    // Otherwise use Ready (older)\n    return this.isCondition('Ready');\n  }\n\n  get kubernetesVersionRaw() {\n    const fromStatus = this.status?.version?.gitVersion;\n    const fromSpec = this.spec?.[`${ this.provisioner }Config`]?.kubernetesVersion;\n\n    return fromStatus || fromSpec;\n  }\n\n  get kubernetesVersion() {\n    return this.kubernetesVersionRaw || this.$rootGetters['i18n/t']('generic.provisioning');\n  }\n\n  get kubernetesVersionBase() {\n    return this.kubernetesVersion.replace(/[+-].*$/, '');\n  }\n\n  get kubernetesVersionExtension() {\n    if ( this.kubernetesVersion.match(/[+-]/) ) {\n      return this.kubernetesVersion.replace(/^.*([+-])/, '$1');\n    }\n\n    return '';\n  }\n\n  get providerOs() {\n    if ( this.status?.provider.endsWith('.windows')) {\n      return 'windows';\n    }\n\n    return 'linux';\n  }\n\n  get providerOsLogo() {\n    return require(`~shell/assets/images/vendor/${ this.providerOs }.svg`);\n  }\n\n  get workerOSs() {\n    // rke1 clusters have windows support defined on create\n    // rke2 clusters report linux workers in mgmt cluster status\n    const rke2WindowsWorkers = this.status?.windowsWorkerCount;\n    const rke2LinuxWorkers = this.status?.linuxWorkerCount;\n\n    if (rke2WindowsWorkers || rke2LinuxWorkers ) {\n      const out = [];\n\n      if (rke2WindowsWorkers) {\n        out.push(WINDOWS);\n      }\n      if (rke2LinuxWorkers) {\n        out.push(LINUX);\n      }\n\n      return out;\n    } else if (this.providerOs === WINDOWS) {\n      return [WINDOWS];\n    }\n\n    return [LINUX];\n  }\n\n  get isLocal() {\n    return this.spec?.internal === true;\n  }\n\n  get isHarvester() {\n    return isHarvesterCluster(this);\n  }\n\n  get isHostedKubernetesProvider() {\n    const providers = ['AKS', 'EKS', 'GKE'];\n\n    return providers.includes(this.provisioner);\n  }\n\n  get providerLogo() {\n    let provider = this.status?.provider || 'kubernetes';\n\n    if (this.isHarvester) {\n      provider = HARVESTER;\n    }\n    // Only interested in the part before the period\n    const prv = provider.split('.')[0];\n    // Allow overrides if needed\n    const logo = PROVIDER_LOGO_OVERRIDE[prv] || prv;\n\n    let icon;\n\n    try {\n      icon = require(`~shell/assets/images/providers/${ prv }.svg`);\n    } catch (e) {\n      console.warn(`Can not find provider logo for provider ${ logo }`); // eslint-disable-line no-console\n      // Use fallback generic Kubernetes icon\n      icon = require(`~shell/assets/images/providers/kubernetes.svg`);\n    }\n\n    return icon;\n  }\n\n  get providerMenuLogo() {\n    return this.providerLogo;\n  }\n\n  get providerNavLogo() {\n    return this.providerLogo;\n  }\n\n  // Custom badge to show for the Cluster (if the appropriate annotations are set)\n  get badge() {\n    const icon = this.metadata?.annotations?.[CLUSTER_BADGE.ICON_TEXT];\n    const comment = this.metadata?.annotations?.[CLUSTER_BADGE.TEXT];\n\n    if (!icon && !comment) {\n      return undefined;\n    }\n\n    const color = this.metadata?.annotations[CLUSTER_BADGE.COLOR] || '#7f7f7f';\n    const iconText = this.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || '';\n\n    return {\n      text:      comment || undefined,\n      color,\n      textColor: textColor(parseColor(color)),\n      iconText:  iconText.substr(0, 3)\n    };\n  }\n\n  get scope() {\n    return this.isLocal ? CATALOG._MANAGEMENT : CATALOG._DOWNSTREAM;\n  }\n\n  setClusterNameLabel(andSave) {\n    if ( this.ownerReferences?.length || this.metadata?.labels?.[FLEET.CLUSTER_NAME] === this.id ) {\n      return;\n    }\n\n    this.metadata = this.metadata || {};\n    this.metadata.labels = this.metadata.labels || {};\n    this.metadata.labels[FLEET.CLUSTER_NAME] = this.id;\n\n    if ( andSave ) {\n      return this.save();\n    }\n  }\n\n  get availableCpu() {\n    const reserved = parseSi(this.status.requested?.cpu);\n    const allocatable = parseSi(this.status.allocatable?.cpu);\n\n    if ( allocatable > 0 && reserved >= 0 ) {\n      return Math.max(0, allocatable - reserved);\n    } else {\n      return null;\n    }\n  }\n\n  get availableMemory() {\n    const reserved = parseSi(this.status.requested?.memory);\n    const allocatable = parseSi(this.status.allocatable?.memory);\n\n    if ( allocatable > 0 && reserved >= 0 ) {\n      return Math.max(0, allocatable - reserved);\n    } else {\n      return null;\n    }\n  }\n\n  openShell() {\n    this.$dispatch('wm/open', {\n      id:        `kubectl-${ this.id }`,\n      label:     this.$rootGetters['i18n/t']('wm.kubectlShell.title', { name: this.nameDisplay }),\n      icon:      'terminal',\n      component: 'KubectlShell',\n      attrs:     {\n        cluster: this,\n        pod:     {}\n      }\n    }, { root: true });\n  }\n\n  async generateKubeConfig() {\n    const res = await this.doAction('generateKubeconfig');\n\n    return res.config;\n  }\n\n  async downloadKubeConfig() {\n    const config = await this.generateKubeConfig();\n\n    downloadFile(`${ this.nameDisplay }.yaml`, config, 'application/yaml');\n  }\n\n  async downloadKubeConfigBulk(items) {\n    let obj = {};\n    let first = true;\n\n    await eachLimit(items, 10, (item, idx) => {\n      return item.generateKubeConfig().then((config) => {\n        const entry = jsyaml.load(config);\n\n        if ( first ) {\n          obj = entry;\n          first = false;\n        } else {\n          obj.clusters.push(...entry.clusters);\n          obj.users.push(...entry.users);\n          obj.contexts.push(...entry.contexts);\n        }\n      });\n    });\n\n    delete obj['current-context'];\n\n    const out = jsyaml.dump(obj);\n\n    downloadFile('kubeconfig.yaml', out, 'application/yaml');\n  }\n\n  async copyKubeConfig() {\n    try {\n      const config = await this.generateKubeConfig();\n\n      if (config) {\n        await copyTextToClipboard(config);\n      }\n    } catch {}\n  }\n\n  async fetchNodeMetrics() {\n    const nodes = await this.$dispatch('cluster/findAll', { type: NODE }, { root: true });\n    const nodeMetrics = await this.$dispatch('cluster/findAll', { type: NODE }, { root: true });\n\n    const someNonWorkerRoles = nodes.some((node) => node.hasARole && !node.isWorker);\n\n    const metrics = nodeMetrics.filter((metric) => {\n      const node = nodes.find((nd) => nd.id === metric.id);\n\n      return node && (!someNonWorkerRoles || node.isWorker);\n    });\n    const initialAggregation = {\n      cpu:    0,\n      memory: 0\n    };\n\n    if (isEmpty(metrics)) {\n      return null;\n    }\n\n    return metrics.reduce((agg, metric) => {\n      agg.cpu += parseSi(metric?.usage?.cpu);\n      agg.memory += parseSi(metric?.usage?.memory);\n\n      return agg;\n    }, initialAggregation);\n  }\n\n  get nodes() {\n    return this.$getters['all'](MANAGEMENT.NODE).filter((node) => node.id.startsWith(this.id));\n  }\n\n  get provClusterId() {\n    const isRKE1 = !!this.spec?.rancherKubernetesEngineConfig;\n    // Note: RKE1 provisioning cluster IDs are in a different format. For example,\n    // RKE2 cluster IDs include the name - fleet-default/cluster-name - whereas an RKE1\n    // cluster has the less human readable management cluster ID in it: fleet-default/c-khk48\n\n    const verb = this.isLocal || isRKE1 || this.isHostedKubernetesProvider ? 'to' : 'from';\n    const res = findRelationship(verb, CAPI.RANCHER_CLUSTER, this.metadata?.relationships);\n\n    if (res) {\n      return res;\n    }\n\n    return findRelationship(verb === 'to' ? 'from' : 'to', CAPI.RANCHER_CLUSTER, this.metadata?.relationships);\n  }\n\n  get pinned() {\n    return this.$rootGetters['prefs/get'](PINNED_CLUSTERS).includes(this.id);\n  }\n\n  pin() {\n    const types = this.$rootGetters['prefs/get'](PINNED_CLUSTERS) || [];\n\n    addObject(types, this.id);\n\n    this.$dispatch('prefs/set', { key: PINNED_CLUSTERS, value: types }, { root: true });\n  }\n\n  unpin() {\n    const types = this.$rootGetters['prefs/get'](PINNED_CLUSTERS) || [];\n\n    removeObject(types, this.id);\n\n    this.$dispatch('prefs/set', { key: PINNED_CLUSTERS, value: types }, { root: true });\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}