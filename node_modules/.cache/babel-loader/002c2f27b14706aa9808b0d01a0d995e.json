{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/CatalogLoadDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/CatalogLoadDialog.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapGetters","isEmpty","CATALOG","SECRET","SERVICE","WORKLOAD_TYPES","UI_PLUGIN_LABELS","UI_PLUGIN_NAMESPACE","TYPES","SECRET_TYPES","allHash","ResourceManager","AsyncButton","AppModal","LabeledSelect","Loading","Banner","LabeledInput","DEFAULT_DEPLOYMENT","type","DEPLOYMENT","metadata","name","namespace","labels","spec","replicas","selector","matchLabels","template","containers","image","imagePullPolicy","imagePullSecrets","restartPolicy","DEFAULT_SERVICE","_defineProperty","CATALOG_IMAGE","ports","port","protocol","targetPort","DEFAULT_REPO","CLUSTER_REPO","url","initialState","deploymentValues","structuredClone","serviceValues","repoValues","canModifyName","canModifyImage","imagePullNamespacedSecrets","extensionUrl","extensionDeployment","extensionSvc","extensionRepo","extensionCrd","components","mixins","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hash","wrap","_callee$","_context","prev","next","$store","getters","deployments","dispatch","services","secondaryResourceData","secondaryResourceDataConfig","resourceManagerFetchSecondaryResources","stop","data","_objectSpread","showModal","computed","allRepos","namespacedDeployments","filter","dep","namespacedServices","svc","methods","applyTo","var","parsingFunc","secret","_type","DOCKER","DOCKER_JSON","showDialog","closeDialog","result","$emit","Object","assign","$data","loadImage","btnCb","_this2","_callee2","_callee2$","_context2","extractImageName","loadDeployment","loadService","loadRepo","title","t","message","timeout","root","Error","t0","handleGrowlError","_this3","_callee3","exists","error","_callee3$","_context3","find","parseDeploymentValues","sent","save","_statusText","_this4","_callee4","serviceName","serviceResource","_callee4$","_context4","concat","abrupt","parseServiceValues","id","clusterIP","t1","_this5","_callee5","chartName","_callee5$","_context5","repo","clean","parseRepoValues","out","$set","addLabel","addTo","assignLabels","length","map","source","args","i","path","split","currentObj","j","extractImageVersion","regex","matches","exec","remove","e","arguments","undefined"],"sources":["node_modules/@rancher/shell/pages/c/_cluster/uiplugins/CatalogList/CatalogLoadDialog.vue"],"sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport isEmpty from 'lodash/isEmpty';\n\nimport { CATALOG, SECRET, SERVICE, WORKLOAD_TYPES } from '@shell/config/types';\nimport { UI_PLUGIN_LABELS, UI_PLUGIN_NAMESPACE } from '@shell/config/uiplugins';\nimport { TYPES as SECRET_TYPES } from '@shell/models/secret';\nimport { allHash } from '@shell/utils/promise';\n\nimport ResourceManager from '@shell/mixins/resource-manager';\n\nimport AsyncButton from '@shell/components/AsyncButton';\nimport AppModal from '@shell/components/AppModal';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport Loading from '@shell/components/Loading.vue';\nimport { Banner } from '@components/Banner';\nimport { LabeledInput } from '@components/Form/LabeledInput';\n\nconst DEFAULT_DEPLOYMENT = {\n  type:     WORKLOAD_TYPES.DEPLOYMENT,\n  metadata: {\n    name:      '',\n    namespace: UI_PLUGIN_NAMESPACE,\n    labels:    {}\n  },\n  spec: {\n    replicas: 1,\n    selector: { matchLabels: {} },\n    template: {\n      metadata: {\n        namespace: UI_PLUGIN_NAMESPACE,\n        labels:    {}\n      },\n      spec: {\n        containers: [\n          {\n            image:           '',\n            imagePullPolicy: 'Always',\n            name:            'container-0'\n          }\n        ],\n        imagePullSecrets: [],\n        restartPolicy:    'Always'\n      }\n    }\n  }\n};\n\nconst DEFAULT_SERVICE = {\n  type:     SERVICE,\n  metadata: {\n    name:      '',\n    namespace: UI_PLUGIN_NAMESPACE,\n    labels:    { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: '' }\n  },\n  spec: {\n    ports: [\n      {\n        name:       '',\n        port:       8080,\n        protocol:   'TCP',\n        targetPort: 8080\n      }\n    ],\n    selector: { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: '' },\n    type:     'ClusterIP'\n  }\n};\n\nconst DEFAULT_REPO = {\n  type:     CATALOG.CLUSTER_REPO,\n  metadata: {\n    name:   '',\n    labels: { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: '' }\n  },\n  spec: { url: null }\n};\n\nconst initialState = () => {\n  const deploymentValues = structuredClone(DEFAULT_DEPLOYMENT);\n  const serviceValues = structuredClone(DEFAULT_SERVICE);\n  const repoValues = structuredClone(DEFAULT_REPO);\n\n  return {\n    deploymentValues,\n    serviceValues,\n    repoValues,\n    canModifyName:              true,\n    canModifyImage:             true,\n    imagePullSecrets:           [],\n    imagePullNamespacedSecrets: [],\n    extensionUrl:               null,\n    extensionDeployment:        null,\n    extensionSvc:               null,\n    extensionRepo:              null,\n    extensionCrd:               null\n  };\n};\n\nexport default {\n  components: {\n    AsyncButton, Banner, LabeledInput, Loading, LabeledSelect, AppModal,\n  },\n\n  mixins: [ResourceManager],\n\n  async fetch() {\n    const hash = {};\n\n    if ( this.$store.getters['management/canList'](WORKLOAD_TYPES.DEPLOYMENT) ) {\n      hash.deployments = this.$store.dispatch('management/findAll', { type: WORKLOAD_TYPES.DEPLOYMENT });\n    }\n\n    if ( this.$store.getters['management/canList'](SERVICE) ) {\n      hash.services = this.$store.dispatch('management/findAll', { type: SERVICE });\n    }\n\n    await allHash(hash);\n\n    this.secondaryResourceData = this.secondaryResourceDataConfig();\n    this.resourceManagerFetchSecondaryResources(this.secondaryResourceData);\n  },\n\n  data() {\n    return {\n      ...initialState(),\n      secondaryResourceData: null,\n      showModal:             false,\n    };\n  },\n\n  computed: {\n    ...mapGetters({ allRepos: 'catalog/repos' }),\n\n    namespacedDeployments() {\n      return this.$store.getters['management/all'](WORKLOAD_TYPES.DEPLOYMENT).filter((dep) => dep.metadata.namespace === UI_PLUGIN_NAMESPACE);\n    },\n\n    namespacedServices() {\n      return this.$store.getters['management/all'](SERVICE).filter((svc) => svc.metadata.namespace === UI_PLUGIN_NAMESPACE);\n    }\n  },\n\n  methods: {\n    secondaryResourceDataConfig() {\n      return {\n        namespace: UI_PLUGIN_NAMESPACE,\n        data:      {\n          [SECRET]: {\n            applyTo: [\n              {\n                var:         'imagePullNamespacedSecrets',\n                parsingFunc: (data) => {\n                  return data.filter((secret) => (secret._type === SECRET_TYPES.DOCKER || secret._type === SECRET_TYPES.DOCKER_JSON));\n                }\n              }\n            ]\n          }\n        }\n      };\n    },\n\n    showDialog() {\n      this.showModal = true;\n    },\n\n    closeDialog(result) {\n      this.showModal = false;\n      this.$emit('closed', result);\n\n      // Reset state\n      Object.assign(this.$data, initialState());\n      this.secondaryResourceData = this.secondaryResourceDataConfig();\n      this.resourceManagerFetchSecondaryResources(this.secondaryResourceData);\n    },\n\n    async loadImage(btnCb) {\n      try {\n        if (!isEmpty(this.deploymentValues.spec.template.spec.containers[0].image)) {\n          const image = this.deploymentValues.spec.template.spec.containers[0].image;\n          const name = this.extractImageName(image);\n\n          if (name) {\n            // Create deployment\n            await this.loadDeployment(image, name, btnCb);\n\n            if (this.extensionDeployment) {\n              // Create service\n              await this.loadService(name, btnCb);\n            }\n\n            if (this.extensionSvc) {\n              // Create helm repo\n              await this.loadRepo(name, btnCb);\n            }\n\n            if (this.extensionRepo) {\n              btnCb(true);\n              this.closeDialog();\n              this.$store.dispatch('growl/success', {\n                title:   this.t('plugins.manageCatalog.imageLoad.success.title', { name }),\n                message: this.t('plugins.manageCatalog.imageLoad.success.message'),\n                timeout: 4000,\n              }, { root: true });\n              this.$emit('refresh');\n            }\n          } else {\n            throw new Error('Unable to determine image name');\n          }\n        }\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n      }\n    },\n\n    async loadDeployment(image, name, btnCb) {\n      const exists = this.namespacedDeployments.find((dep) => dep.spec.template.spec.containers[0].image === image);\n\n      if (!exists) {\n        // Sets deploymentValues with name, labels, and imagePullSecrets\n        const deploymentValues = this.parseDeploymentValues(name);\n\n        this.extensionDeployment = await this.$store.dispatch('management/create', deploymentValues);\n\n        try {\n          await this.extensionDeployment.save();\n        } catch (e) {\n          this.handleGrowlError(e, true);\n          btnCb(false);\n        }\n      } else {\n        const error = {\n          _statusText: this.t('plugins.manageCatalog.imageLoad.error.exists.deployment.title'),\n          message:     this.t('plugins.manageCatalog.imageLoad.error.exists.deployment.message', { image })\n        };\n\n        this.handleGrowlError(error);\n        btnCb(false);\n      }\n    },\n\n    async loadService(name, btnCb) {\n      const serviceName = `${ name }-svc`;\n      const exists = this.namespacedServices.find((svc) => svc.metadata.name === serviceName);\n\n      if (exists) {\n        const error = {\n          _statusText: this.t('plugins.manageCatalog.imageLoad.error.exists.service.title'),\n          message:     this.t('plugins.manageCatalog.imageLoad.error.exists.service.message', { svc: serviceName })\n        };\n\n        this.handleGrowlError(error, true);\n        btnCb(false);\n\n        return;\n      }\n\n      // Sets serviceValues with name, label, and selector\n      const serviceValues = this.parseServiceValues(name, serviceName);\n      const serviceResource = await this.$store.dispatch('management/create', serviceValues);\n\n      try {\n        await serviceResource.save();\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n\n        return;\n      }\n\n      try {\n        this.extensionSvc = await this.$store.dispatch('management/find', {\n          type:      SERVICE,\n          id:        `${ UI_PLUGIN_NAMESPACE }/${ serviceResource.metadata.name }`,\n          namespace: UI_PLUGIN_NAMESPACE\n        });\n\n        if (this.extensionSvc) {\n          this.extensionUrl = `http://${ this.extensionSvc.spec.clusterIP }:${ this.extensionSvc.spec.ports[0].port }`;\n        } else {\n          throw new Error('Error fetching extension service');\n        }\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n      }\n    },\n\n    async loadRepo(name, btnCb) {\n      const chartName = `${ name }-charts`;\n      const exists = this.allRepos.find((repo) => repo.metadata.name === chartName);\n\n      if (exists) {\n        const error = {\n          _statusText: this.t('plugins.manageCatalog.imageLoad.error.exists.repo.title'),\n          message:     this.t('plugins.manageCatalog.imageLoad.error.exists.repo.message', { repo: chartName })\n        };\n\n        this.handleGrowlError(error);\n        btnCb(false);\n        this.clean();\n\n        return;\n      }\n\n      // Set repoValues with name, label, and url\n      const repoValues = this.parseRepoValues(chartName);\n\n      this.extensionRepo = await this.$store.dispatch('management/create', repoValues);\n\n      try {\n        await this.extensionRepo.save();\n      } catch (e) {\n        this.handleGrowlError(e, true);\n        btnCb(false);\n      }\n    },\n\n    parseDeploymentValues(name) {\n      let out = {};\n\n      this.$set(this.deploymentValues.metadata, 'name', name);\n\n      const addLabel = { [UI_PLUGIN_LABELS.CATALOG_IMAGE]: name };\n      const addTo = ['metadata.labels', 'spec.selector.matchLabels', 'spec.template.metadata.labels'];\n\n      // Populates workloadselector labels\n      out = this.assignLabels(this.deploymentValues, addLabel, addTo);\n\n      if (this.imagePullSecrets.length) {\n        out.spec.template.spec.imagePullSecrets = this.imagePullSecrets.map((secret) => {\n          return { name: secret };\n        });\n      }\n\n      return out;\n    },\n\n    parseServiceValues(name, serviceName) {\n      const out = this.serviceValues;\n\n      out.metadata.name = serviceName;\n      out.metadata.labels[UI_PLUGIN_LABELS.CATALOG_IMAGE] = name;\n      out.spec.selector[UI_PLUGIN_LABELS.CATALOG_IMAGE] = name;\n\n      return out;\n    },\n\n    parseRepoValues(chartName) {\n      const out = this.repoValues;\n\n      out.metadata.name = chartName;\n      out.metadata.labels[UI_PLUGIN_LABELS.CATALOG_IMAGE] = this.deploymentValues.metadata.name;\n      out.spec.url = this.extensionUrl;\n\n      return out;\n    },\n\n    assignLabels(source, labels, args) {\n      for (let i = 0; i < args.length; i++) {\n        const path = args[i].split('.');\n        let currentObj = source;\n\n        for (let j = 0; j < path.length - 1; j++) {\n          currentObj = currentObj[path[j]];\n        }\n\n        currentObj[path[path.length - 1]] = labels;\n      }\n\n      return source;\n    },\n\n    extractImageVersion(image) {\n      // Returns the version number with optional pre-release identifiers\n      const regex = /:(\\d+\\.\\d+\\.\\d+([-\\w\\d]+)*)$/;\n      const matches = regex.exec(image);\n\n      if (matches) {\n        return matches[1];\n      }\n\n      return null;\n    },\n\n    extractImageName(image) {\n      // Returns the name within the image that prefixes the version number\n      const regex = /\\/([^/:]+)(?::\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9]+)?|$)/;\n      const matches = regex.exec(image);\n\n      if (matches) {\n        return matches[1];\n      }\n\n      return null;\n    },\n\n    clean() {\n      // Remove failed resources\n      if (this.extensionDeployment) {\n        this.extensionDeployment.remove();\n      }\n      if (this.extensionSvc) {\n        this.extensionSvc.remove();\n      }\n      if (this.extensionRepo) {\n        this.extensionRepo.remove();\n      }\n    },\n\n    handleGrowlError(e, clean = false) {\n      const error = e?.data || e;\n\n      this.$store.dispatch('growl/error', {\n        title:   error._statusText,\n        message: error.message,\n        timeout: 5000,\n      }, { root: true });\n\n      if (clean) {\n        this.clean();\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <app-modal\n    v-if=\"showModal\"\n    name=\"catalogLoadDialog\"\n    height=\"auto\"\n    :scrollable=\"true\"\n    @close=\"closeDialog()\"\n  >\n    <Loading\n      v-if=\"$fetchState.loading\"\n      mode=\"relative\"\n    />\n    <div\n      v-else\n      class=\"plugin-install-dialog\"\n    >\n      <template>\n        <div>\n          <h4>\n            {{ t('plugins.manageCatalog.imageLoad.load') }}\n          </h4>\n          <p>\n            {{ t('plugins.manageCatalog.imageLoad.prompt') }}\n          </p>\n\n          <div class=\"custom mt-10\">\n            <Banner\n              color=\"info\"\n              :label=\"t('plugins.manageCatalog.imageLoad.banner')\"\n              class=\"mt-10\"\n            />\n          </div>\n\n          <div class=\"custom mt-10\">\n            <div class=\"fields\">\n              <LabeledInput\n                v-model.trim=\"deploymentValues.spec.template.spec.containers[0].image\"\n                label-key=\"plugins.manageCatalog.imageLoad.fields.image.label\"\n                placeholder-key=\"plugins.manageCatalog.imageLoad.fields.image.placeholder\"\n              />\n            </div>\n          </div>\n          <div class=\"custom mt-10\">\n            <div class=\"fields\">\n              <LabeledSelect\n                v-model=\"imagePullSecrets\"\n                :label=\"t('plugins.manageCatalog.imageLoad.fields.imagePullSecrets.label')\"\n                :tooltip=\"t('plugins.manageCatalog.imageLoad.fields.imagePullSecrets.tooltip')\"\n                :multiple=\"true\"\n                :taggable=\"true\"\n                :options=\"imagePullNamespacedSecrets\"\n                option-label=\"metadata.name\"\n                :reduce=\"service => service.metadata.name\"\n              />\n              <Banner\n                color=\"warning\"\n                class=\"mt-10\"\n              >\n                <span v-clean-html=\"t('plugins.manageCatalog.imageLoad.fields.secrets.banner', {}, true)\" />\n              </Banner>\n            </div>\n          </div>\n        </div>\n      </template>\n\n      <div class=\"custom mt-10\">\n        <div class=\"fields\">\n          <div class=\"dialog-buttons mt-20\">\n            <button\n              class=\"btn role-secondary\"\n              data-testid=\"image-load-ext-modal-cancel-btn\"\n              @click=\"closeDialog()\"\n            >\n              {{ t('generic.cancel') }}\n            </button>\n            <AsyncButton\n              mode=\"load\"\n              data-testid=\"image-load-ext-modal-install-btn\"\n              @click=\"loadImage\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </app-modal>\n</template>\n\n<style lang=\"scss\" scoped>\n  .plugin-install-dialog {\n    padding: 10px;\n\n    h4 {\n      font-weight: bold;\n    }\n\n    .dialog-panel {\n      display: flex;\n      flex-direction: column;\n      min-height: 100px;\n\n      p {\n        margin-bottom: 5px;\n      }\n\n      .dialog-info {\n        flex: 1;\n      }\n    }\n\n    .dialog-buttons {\n      display: flex;\n      justify-content: flex-end;\n      margin-top: 10px;\n\n      > *:not(:last-child) {\n        margin-right: 10px;\n      }\n    }\n  }\n</style>\n"],"mappings":"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","ignoreList":[]}]}