{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--17-0!/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["ResourceTable","Tag","Banner","PODS","metricPoller","CAPI","CAPI_ANNOTATIONS","defineComponent","FilterArgs","PaginationFilterField","PaginationParamFilter","MANAGEMENT","METRIC","NODE","NORMAN","POD","allHash","GROUP_RESOURCES","mapPref","COLUMN_BREAKPOINTS","ResourceFetch","mapGetters","name","components","mixins","props","resource","type","String","required","schema","Object","useQueryParamsForSimpleFiltering","Boolean","default","listComponent","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","$initializeFetchData","_objectSpread","kubeNodes","$fetchType","fetchSecondaryResources","stop","data","canViewPods","$store","getters","canViewNormanNodes","canViewMgmtNodes","canViewMachines","MACHINE","canViewNodeMetrics","beforeDestroy","dispatch","computed","hasWindowsNodes","rows","some","node","status","nodeInfo","operatingSystem","tableGroup","headers","canPaginate","paginationHeaders","_toConsumableArray","splice","length","breakpoint","DESKTOP","sort","search","getValue","row","podConsumedUsage","console","warn","methods","loadMetrics","_this2","_callee2","opt","_callee2$","_context2","abrupt","force","pagination","filters","fields","map","r","field","value","id","$forceUpdate","toggleLabels","$set","displayLabels","hash","mgmtNodes","normanNodes","machines","fetchPageSecondaryResources","_arguments","arguments","_this3","_callee3","_a","_b","namespace","_opt","_opt2","_callee3$","_context3","undefined","createMultipleFields","then","currentCluster","provClusterId","split","namespaced","reduce","res","metadata","annotations","MACHINE_NAME","push"],"sources":["/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue?vue&type=script&lang=ts"],"sourcesContent":["\nimport ResourceTable from '@shell/components/ResourceTable.vue';\nimport Tag from '@shell/components/Tag.vue';\nimport { Banner } from '@components/Banner';\nimport { PODS } from '@shell/config/table-headers';\nimport metricPoller from '@shell/mixins/metric-poller';\n\nimport { CAPI as CAPI_ANNOTATIONS } from '@shell/config/labels-annotations.js';\n\nimport { defineComponent } from 'vue';\nimport { ActionFindPageArgs } from '@shell/types/store/dashboard-store.types';\nimport { FilterArgs, PaginationFilterField, PaginationParamFilter } from '@shell/types/store/pagination.types';\n\nimport {\n  CAPI,\n  MANAGEMENT, METRIC, NODE, NORMAN, POD\n} from '@shell/config/types';\nimport { allHash } from '@shell/utils/promise';\nimport { GROUP_RESOURCES, mapPref } from '@shell/store/prefs';\nimport { COLUMN_BREAKPOINTS } from '@shell/types/store/type-map';\n\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport { mapGetters } from 'vuex';\n\nexport default defineComponent({\n  name:       'ListNode',\n  components: {\n    ResourceTable,\n    Tag,\n    Banner\n  },\n  mixins: [metricPoller, ResourceFetch],\n\n  props: {\n    resource: {\n      type:     String,\n      required: true,\n    },\n    schema: {\n      type:     Object,\n      required: true,\n    },\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    },\n\n    listComponent: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    this.$initializeFetchData(this.resource);\n\n    await allHash({\n      kubeNodes: this.$fetchType(this.resource),\n      ...this.fetchSecondaryResources(),\n    });\n  },\n\n  data() {\n    return {\n      // Pods required for `Pods` column's running pods metrics\n      // podConsumedUsage = podConsumed / podConsumedUsage. podConsumed --> pods. allPods.filter((pod) => pod.spec.nodeName === this.name)\n      canViewPods:        !!this.$store.getters[`cluster/schemaFor`](POD),\n      // Norman node required for Drain/Cordon/Uncordon action\n      canViewNormanNodes: !!this.$store.getters[`rancher/schemaFor`](NORMAN.NODE),\n      // Mgmt Node required to find Norman node\n      canViewMgmtNodes:   !!this.$store.getters[`management/schemaFor`](MANAGEMENT.NODE),\n      // Required for ssh / download key actions\n      canViewMachines:    !!this.$store.getters[`management/schemaFor`](CAPI.MACHINE),\n      // Required for CPU and RAM columns\n      canViewNodeMetrics: !!this.$store.getters['cluster/schemaFor'](METRIC.NODE),\n    };\n  },\n\n  beforeDestroy() {\n    // Stop watching pods, nodes and node metrics\n    if (this.canViewPods) {\n      this.$store.dispatch('cluster/forgetType', POD);\n    }\n\n    this.$store.dispatch('cluster/forgetType', NODE);\n    this.$store.dispatch('cluster/forgetType', METRIC.NODE);\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    hasWindowsNodes() {\n      // Note if server side pagination is used this is only applicable to the current page\n      return (this.rows || []).some((node: any) => node.status.nodeInfo.operatingSystem === 'windows');\n    },\n\n    tableGroup: mapPref(GROUP_RESOURCES),\n\n    headers() {\n      // This is all about adding the pods column... if the user can see pods\n\n      if (this.canPaginate) {\n        const paginationHeaders = [...this.$store.getters['type-map/headersFor'](this.schema, true)];\n\n        if (paginationHeaders) {\n          if (this.canViewPods) {\n            paginationHeaders.splice(paginationHeaders.length - 1, 0, {\n              ...PODS,\n              breakpoint: COLUMN_BREAKPOINTS.DESKTOP,\n              sort:       false,\n              search:     false,\n              getValue:   (row: any) => row.podConsumedUsage\n            });\n          }\n\n          return paginationHeaders;\n        } else {\n          console.warn('Nodes list expects pagination headers but none found'); // eslint-disable-line no-console\n\n          return [];\n        }\n      }\n\n      const headers = [...this.$store.getters['type-map/headersFor'](this.schema, false)];\n\n      if (this.canViewPods) {\n        headers.splice(headers.length - 1, 0, {\n          ...PODS,\n          breakpoint: COLUMN_BREAKPOINTS.DESKTOP,\n          getValue:   (row: any) => row.podConsumedUsage\n        });\n      }\n\n      return headers;\n    },\n  },\n\n  methods: {\n    async loadMetrics() {\n      if (!this.canViewNodeMetrics) {\n        return;\n      }\n\n      if (this.canPaginate) {\n        if (!this.rows.length) {\n          return;\n        }\n\n        const opt: ActionFindPageArgs = {\n          force:      true,\n          pagination: new FilterArgs({\n            filters: new PaginationParamFilter({\n              fields: this.rows.map((r: any) => new PaginationFilterField({\n                field: 'metadata.name',\n                value: r.id\n              }))\n            })\n          })\n        };\n\n        await this.$store.dispatch('cluster/findPage', {\n          type: METRIC.NODE,\n          opt\n        });\n      } else {\n        await this.$store.dispatch('cluster/findAll', {\n          type: METRIC.NODE,\n          opt:  { force: true }\n        });\n      }\n\n      this.$forceUpdate();\n    },\n\n    toggleLabels(row: any) {\n      this.$set(row, 'displayLabels', !row.displayLabels);\n    },\n\n    fetchSecondaryResources(): { [key: string]: Promise<any>} {\n      if (this.canPaginate) {\n        return {};\n      }\n\n      const hash: { [key: string]: Promise<any>} = {};\n\n      if (this.canViewMgmtNodes) {\n        hash.mgmtNodes = this.$fetchType(MANAGEMENT.NODE, [], 'management');\n      }\n\n      if (this.canViewNormanNodes) {\n        hash.normanNodes = this.$fetchType(NORMAN.NODE, [], 'rancher');\n      }\n\n      if (this.canViewMachines) {\n        hash.machines = this.$fetchType(CAPI.MACHINE, [], 'management');\n      }\n\n      if (this.canViewPods) {\n        // No need to block on this\n        this.$fetchType(POD);\n      }\n\n      return hash;\n    },\n\n    /**\n     * Nodes columns need other resources in order to show data in some columns\n     *\n     * In the paginated world we want to resrict the fetch of those resources to only the one's we need\n     *\n     * So when we have a page.... use those entries as filters when fetching the other resources\n     */\n    async fetchPageSecondaryResources(force = false) {\n      if (!this.rows?.length) {\n        return;\n      }\n\n      if (this.canViewMgmtNodes && this.canViewNormanNodes) {\n        // We only fetch mgmt node to get norman node. We only fetch node to get node actions\n        // See https://github.com/rancher/dashboard/issues/10743\n        const opt: ActionFindPageArgs = {\n          force,\n          pagination: new FilterArgs({\n            filters: PaginationParamFilter.createMultipleFields(this.rows.map((r: any) => new PaginationFilterField({\n              field: 'status.nodeName',\n              value: r.id\n            }))),\n          })\n        };\n\n        this.$store.dispatch(`management/findPage`, { type: MANAGEMENT.NODE, opt })\n          .then(() => {\n            this.$store.dispatch(`rancher/findAll`, { type: NORMAN.NODE, opt: { force } });\n          });\n      }\n\n      if (this.canViewMachines) {\n        const namespace = this.currentCluster.provClusterId?.split('/')[0];\n\n        if (namespace) {\n          const opt: ActionFindPageArgs = {\n            force,\n            namespaced: namespace,\n            pagination: new FilterArgs({\n              filters: PaginationParamFilter.createMultipleFields(\n                this.rows.reduce((res: PaginationFilterField[], r: any ) => {\n                  const name = r.metadata?.annotations?.[CAPI_ANNOTATIONS.MACHINE_NAME];\n\n                  if (name) {\n                    res.push(new PaginationFilterField({\n                      field: 'metadata.name',\n                      value: name,\n                    }));\n                  }\n\n                  return res;\n                }, [])\n              )\n            })\n          };\n\n          this.$store.dispatch(`management/findPage`, { type: CAPI.MACHINE, opt });\n        }\n      }\n\n      if (this.canViewPods) {\n        // Note - fetching pods for current page could be a LOT still (probably max of 3k - 300 pods per node x 100 nodes in a page)\n        const opt: ActionFindPageArgs = {\n          force,\n          pagination: new FilterArgs({\n            filters: PaginationParamFilter.createMultipleFields(\n              this.rows.map((r: any) => new PaginationFilterField({\n                field: 'spec.nodeName',\n                value: r.id,\n              }))\n            )\n          })\n        };\n\n        this.$store.dispatch(`cluster/findPage`, { type: POD, opt });\n      }\n\n      // Fetch metrics given the current page\n      this.loadMetrics();\n    },\n  },\n});\n"],"mappings":"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","ignoreList":[]}]}