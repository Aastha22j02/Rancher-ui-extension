{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/mixins/resource-manager.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/mixins/resource-manager.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mapGetters","allHashSettled","computed","_objectSpread","data","isLoadingSecondaryResources","methods","resourceManagerFetchSecondaryResources","resourceData","_arguments","arguments","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","onlyNamespaced","requests","namespace","hash","types","i","_resourceData$data$ty","type","status","requestData","y","apply","resources","wrap","_callee$","_context","prev","next","length","undefined","Object","keys","forEach","schema","$store","getters","_schema$attributes","url","links","collection","attributes","namespaced","concat","dispatch","sent","value","items","applyTo","classify","parsingFunc","var","console","error","stop","resourceManagerClearSecondaryResources","_this2","_schema$attributes2"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/mixins/resource-manager.js"],"sourcesContent":["import { mapGetters } from 'vuex';\nimport { allHashSettled } from '@shell/utils/promise';\n\nexport default {\n  computed: { ...mapGetters(['currentCluster']) },\n  data() {\n    return { isLoadingSecondaryResources: false };\n  },\n  methods: {\n    /**\n    *\n    * Function resourceManagerFetchSecondaryResources\n    * This method is used to fetch what is called \"secondary resources\", which can be defined as resources that are needed to populate\n    * the page/component itself (ex: used as options on a Select) but don't need to be put into Vuex store or watched to get constant updates.\n    * This method allows to fetch resources for a given namespace to reduce the amount of results instead of needing to fetch all and filtering afterwards.\n    *\n    *\n    * @param {String} resourceData.namespace - Namespace identifier\n    * @param {Object} resourceData.data - Object containing info about the data needed to be fetched and how it should be parsed. Note: The KEY NEEDS to be the resource TYPE!\n    * @param {Array} resourceData.data[TYPE].applyTo - The array of operations needed to be performed for the specific data TYPE\n    * @param {String} resourceData.data[TYPE].applyTo[x].var - The 'this' property name that should be populated with the data fetched\n    * @param {Boolean} resourceData.data[TYPE].applyTo[x].classify - Whether the data fetched should have a model applied to it\n    * @param {Function} resourceData.data[TYPE].applyTo[x].parsingFunc - Optional parsing function if the fetched data needs to be parsed\n    * @param {Boolean} onlyNamespaced - Only fetch namespaced resources\n    */\n    async resourceManagerFetchSecondaryResources(resourceData, onlyNamespaced = false) {\n      const requests = {};\n      const namespace = resourceData.namespace;\n\n      // Only fetch types if the user is allowed to...\n      Object.keys(resourceData.data).forEach((type) => {\n        const schema = this.$store.getters['cluster/schemaFor'](type);\n\n        if (schema) {\n          let url = schema.links.collection;\n\n          if (schema?.attributes?.namespaced && namespace) {\n            url = `${ url }/${ namespace }`;\n          } else if (onlyNamespaced) {\n            // Type isn't namespaced and we've been requested to only fetch namespaced types\n            return;\n          }\n\n          requests[type] = this.$store.dispatch('cluster/request', { url });\n        }\n      });\n\n      if (Object.keys(requests).length) {\n        // this is the flag/variable that we need to apply to all places that rely on this data. Ex: LabeledSelect\n        this.isLoadingSecondaryResources = true;\n        const hash = await allHashSettled(requests);\n        const types = Object.keys(hash);\n\n        for (let i = 0; i < types.length; i++) {\n          const type = types[i];\n          const status = hash[type].status;\n          // if it's namespaced, we get the data on 'items' prop, for non-namespaced it's  'data' prop...\n          const requestData = hash[type].value.items || hash[type].value.data || hash[type].value;\n\n          if (status === 'fulfilled' && resourceData.data[type] && resourceData.data[type].applyTo?.length) {\n            for (let y = 0; y < resourceData.data[type].applyTo.length; y++) {\n              const apply = resourceData.data[type].applyTo[y];\n              let resources = requestData;\n\n              if (apply.classify) {\n                resources = await this.$store.dispatch('cluster/createMany', requestData);\n              }\n\n              if (apply.parsingFunc) {\n                this[apply.var] = apply.parsingFunc(resources);\n              } else {\n                this[apply.var] = resources;\n              }\n            }\n          } else if (status === 'rejected') {\n            console.error(`Resource Manager - secondary data request for type ${ type } has failed`, status.error); // eslint-disable-line no-console\n          }\n        }\n\n        this.isLoadingSecondaryResources = false;\n      }\n    },\n\n    /**\n     * Clear the cached secondary resources\n     *\n     * @param {*} resourceData See resourceManagerFetchSecondaryResources\n     * @param {*} onlyNamespaced Clear only namespaced resources\n     */\n    resourceManagerClearSecondaryResources(resourceData, onlyNamespaced = false) {\n      Object.keys(resourceData.data).forEach((type) => {\n        const schema = this.$store.getters['cluster/schemaFor'](type);\n\n        if (schema) {\n          if (!schema?.attributes?.namespaced && onlyNamespaced) {\n            // resource isn't namespaced and we're only interested in namespaced resources\n            return;\n          }\n\n          for (let y = 0; y < resourceData.data[type].applyTo.length; y++) {\n            const apply = resourceData.data[type].applyTo[y];\n\n            this[apply.var] = [];\n          }\n        }\n      });\n    }\n  },\n};\n"],"mappings":"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","ignoreList":[]}]}