{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/create-yaml.js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/create-yaml.js","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["indent","_indent","addObject","findBy","removeObject","removeObjects","jsyaml","cleanUp","isEmpty","parseType","SIMPLE_TYPES","ALWAYS_ADD","NEVER_ADD","ACTIVELY_REMOVE","INDENT","createYamlWithOptions","schemas","type","data","options","createYaml","processAlwaysAdd","arguments","length","undefined","depth","path","rootType","dataOptions","schema","rootSchema","schemaDefinitions","schemaResourceFields","concat","resourceFields","attr","attributes","apiVersion","group","version","kind","requiresResourceFields","_schemaDefinitions$ty","regularFields","always","slice","i","entry","split","join","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","parts","key","prefix","err","e","f","commentFields","Object","keys","forEach","_iterator2","_step2","_iterator3","_step3","regular","map","k","stringifyField","comments","_rootSchema$attribute","namespaced","comment","out","_toConsumableArray","filter","x","trim","_schemaResourceFields","_schemaDefinitions","field","cleaned","parsedData","dump","_typeof","Array","isArray","console","error","typeMunge","mapOf","typeRef","arrayOf","referenceTo","dumpBlock","includes","chunk","indented","replace","serializeSimpleValue","subDef","parsed","lines","getBlockDescriptor","header","getBlockHeader","indentation","getBlockIndentation","blockKey","card","re","RegExp","found","match","blockHeader","blockScalars","substr","indexOf","str","_parseType","_parseType2","_slicedToArray","foundType","foundSubType","saferDump","obj","lineWidth","blockFields","_iterator4","_step4","_options$key$scalarSt","_options$key","_options$key$chomping","_options$key2","_getBlockDescriptor","scalarStyle","chomping"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/create-yaml.js"],"sourcesContent":["import { indent as _indent } from '@shell/utils/string';\nimport { addObject, findBy, removeObject, removeObjects } from '@shell/utils/array';\nimport jsyaml from 'js-yaml';\nimport { cleanUp, isEmpty } from '@shell/utils/object';\nimport { parseType } from '@shell/models/schema';\n\nexport const SIMPLE_TYPES = [\n  'string',\n  'multiline',\n  'masked',\n  'password',\n  'float',\n  'int',\n  'date',\n  'blob',\n  'boolean',\n  'version'\n];\n\nconst ALWAYS_ADD = [\n  'apiVersion',\n  'kind',\n  'metadata',\n  'metadata.name',\n  'spec',\n  'spec.selector',\n  'spec.selector.matchLabels',\n  'spec.template',\n  'spec.template.metadata',\n  'spec.template.metadata.labels',\n  'spec.template.spec.containers.name',\n  'spec.template.spec.containers.image',\n];\n\nexport const NEVER_ADD = [\n  'metadata.clusterName',\n  'metadata.creationTimestamp',\n  'metadata.deletionGracePeriodSeconds',\n  'metadata.deletionTimestamp',\n  'metadata.finalizers',\n  'metadata.generateName',\n  'metadata.generation',\n  'metadata.initializers',\n  'metadata.managedFields',\n  'metadata.ownerReferences',\n  'metadata.resourceVersion',\n  'metadata.relationships',\n  'metadata.selfLink',\n  'metadata.state',\n  'metadata.uid',\n  // CRD -> Schema describes the schema used for validation, pruning, and defaulting of this version of the custom resource. If we allow processing we fall into inf loop on openAPIV3Schema.allOf which contains a cyclical ref of allOf props.\n  'spec.versions.schema',\n  'status',\n  'stringData',\n  'links',\n  '_name',\n  '_labels',\n  '_annotations',\n];\n\nexport const ACTIVELY_REMOVE = [\n  'metadata.managedFields',\n  'metadata.relationships',\n  'metadata.state',\n  'status',\n  'links',\n  'type',\n  'id'\n];\n\nconst INDENT = 2;\n\nexport function createYamlWithOptions(schemas, type, data, options) {\n  return createYaml(\n    schemas,\n    type,\n    data,\n    true, 0, '', null,\n    options\n  );\n}\n\nexport function createYaml(\n  schemas,\n  type,\n  data,\n  processAlwaysAdd = true,\n  depth = 0,\n  path = '',\n  rootType = null,\n  dataOptions = {},\n) {\n  data = data || {};\n\n  let schema, rootSchema, schemaDefinitions, schemaResourceFields;\n\n  if (depth === 0) {\n    // `type` is a schema id\n    schema = findBy(schemas, 'id', type);\n\n    if ( !schema ) { // schema is only needed at the root level.\n      return `Error loading schema for ${ type }`;\n    }\n\n    rootSchema = schema;\n\n    schemaDefinitions = rootSchema.schemaDefinitions;\n    schemaResourceFields = rootSchema.resourceFields;\n\n    const attr = schema.attributes || {};\n\n    // Default to data.apiVersion/kind to accommodate spoofed types that aggregate multiple types\n    data.apiVersion = (attr.group ? `${ attr.group }/${ attr.version }` : attr.version) || data.apiVersion;\n    data.kind = attr.kind || data.kind;\n  } else {\n    rootSchema = findBy(schemas, 'id', rootType);\n\n    if (rootSchema.requiresResourceFields) { // See `requiresResourceFields` definition\n      schemaDefinitions = rootSchema.schemaDefinitions;\n      schemaResourceFields = schemaDefinitions[type]?.resourceFields;\n    } else {\n      schema = findBy(schemas, 'id', type);\n      if ( !schema ) { // schema is only needed at the root level.\n        return `Error loading schema for ${ type }`;\n      }\n      schemaResourceFields = schema.resourceFields;\n    }\n  }\n\n  if ( !rootType ) {\n    rootType = type;\n  }\n\n  const regularFields = [];\n\n  if (processAlwaysAdd) {\n    // Add all the parents of each key so that spec.template.foo.blah\n    // causes 'spec', 'template' and 'foo' keys to be created\n    const always = ALWAYS_ADD.slice();\n\n    for ( let i = always.length - 1 ; i >= 0 ; i-- ) {\n      let entry = always[i].split(/\\./);\n\n      while ( entry.length ) {\n        addObject(always, entry.join('.'));\n        entry = entry.slice(0, -1);\n      }\n    }\n\n    // Mark always fields as regular so they're not commented out\n    for ( const entry of always ) {\n      const parts = entry.split(/\\./);\n      const key = parts[parts.length - 1];\n      const prefix = parts.slice(0, -1).join('.');\n\n      if ( prefix === path && schemaResourceFields && schemaResourceFields[key] ) {\n        addObject(regularFields, key);\n      }\n    }\n  }\n\n  // Include all fields in schema's resourceFields as comments\n  const commentFields = Object.keys(schemaResourceFields || {});\n\n  commentFields.forEach((key) => {\n    if ( typeof data[key] !== 'undefined' || (depth === 0 && key === '_type') ) {\n      addObject(regularFields, key);\n    }\n  });\n\n  // add any fields defined in data as uncommented fields in yaml\n  for ( const key in data ) {\n    if ( typeof data[key] !== 'undefined' ) {\n      addObject(regularFields, key);\n    }\n  }\n\n  // ACTIVELY_REMOVE are fields that should be removed even if they are defined in data\n  for ( const entry of ACTIVELY_REMOVE ) {\n    const parts = entry.split(/\\./);\n    const key = parts[parts.length - 1];\n    const prefix = parts.slice(0, -1).join('.');\n\n    if ( prefix === path) {\n      removeObject(regularFields, key);\n    }\n  }\n\n  // NEVER_ADD are fields that should not be added as comments, but may added as regular fields if already defined in data\n  for ( const entry of NEVER_ADD ) {\n    const parts = entry.split(/\\./);\n    const key = parts[parts.length - 1];\n    const prefix = parts.slice(0, -1).join('.');\n\n    if ( prefix === path && schemaResourceFields && schemaResourceFields[key] ) {\n      removeObject(commentFields, key);\n    }\n  }\n\n  // do not include commented fields if already defined in data\n  removeObjects(commentFields, regularFields);\n\n  const regular = regularFields.map((k) => stringifyField(k));\n  const comments = commentFields.map((k) => {\n    // Don't add a namespace comment for types that aren't namespaced.\n    if ( path === 'metadata' && k === 'namespace' ) {\n      if ( rootSchema && !rootSchema.attributes?.namespaced ) {\n        return null;\n      }\n    }\n\n    return comment(stringifyField(k));\n  });\n\n  const out = [...regular, ...comments]\n    .filter((x) => x !== null)\n    .join('\\n')\n    .trim();\n\n  return out;\n\n  // ---------------\n\n  function stringifyField(key) {\n    const field = schemaResourceFields?.[key];\n    let out = `${ key }:`;\n\n    // '_type' in steve maps to kubernetes 'type' field; show 'type' field in yaml\n    if (key === '_type') {\n      out = 'type:';\n    }\n\n    // if a key on data is not listed in the schema's resourceFields, just convert it to yaml, add indents where needed, and return\n    if ( !field ) {\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n          const parsedData = jsyaml.dump(cleaned[key]);\n\n          if ( typeof data[key] === 'object' || Array.isArray(data[key]) ) {\n            out += `\\n${ indent(parsedData.trim()) }`;\n          } else {\n            out += ` ${ parsedData.trim() }`;\n          }\n\n          return out;\n        } catch (e) {\n          console.error(`Error: Unable to parse map data for yaml key: ${ key }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      return null;\n    }\n\n    const type = typeMunge(field.type);\n    const mapOf = typeRef('map', type, field);\n    const arrayOf = typeRef('array', type, field);\n    const referenceTo = typeRef('reference', type);\n\n    // type == map[mapOf]\n    if ( mapOf ) {\n      // if key is defined in data, convert the value to yaml, add newline+indent and add to output yaml string\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n          const parsedData = dumpBlock(cleaned[key], dataOptions[key]);\n\n          out += `\\n${ indent(parsedData) }`;\n        } catch (e) {\n          console.error(`Error: Unable to parse map data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      if ( SIMPLE_TYPES.includes(mapOf) ) {\n        out += `#  key: ${ mapOf }`;\n      } else {\n        // If not a simple type ie some sort of object/array, recursively build out commented fields (note data = null here) per the type's (mapOf's) schema\n        const chunk = createYaml(schemas, mapOf, null, processAlwaysAdd, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n        let indented = indent(chunk);\n\n        // convert \"#    foo\" to \"#foo\"\n        indented = indented.replace(/^(#)?\\s\\s\\s\\s/, '$1');\n\n        out += `${ indented }`;\n      }\n\n      return out;\n    }\n\n    // type == array[arrayOf]\n    if ( arrayOf ) {\n      if (data[key]) {\n        try {\n          const cleaned = cleanUp(data);\n\n          if ( cleaned?.[key] ) {\n            const parsedData = jsyaml.dump(cleaned[key]);\n\n            out += `\\n${ indent(parsedData.trim()) }`;\n          }\n        } catch (e) {\n          console.error(`Error: Unable to parse array data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      if ( SIMPLE_TYPES.includes(arrayOf) ) {\n        out += `\\n#  - ${ arrayOf }`;\n      } else {\n        const chunk = createYaml(schemas, arrayOf, null, false, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n        let indented = indent(chunk, 2);\n\n        // turn \"#        foo\" into \"#  - foo\"\n        indented = indented.replace(/^(#)?\\s*\\s\\s([^\\s])/, '$1  - $2');\n\n        out += `\\n${ indented }`;\n      }\n\n      return out;\n    }\n\n    if ( referenceTo ) {\n      out += ` #${ referenceTo }`;\n\n      return out;\n    }\n\n    if ( SIMPLE_TYPES.includes(type) ) {\n      if (key === '_type' && typeof data[key] === 'undefined' && typeof data['type'] !== 'undefined') {\n        out += ` ${ serializeSimpleValue(data['type']) }`;\n      } else if ( typeof data[key] === 'undefined' ) {\n        out += ` #${ serializeSimpleValue(type) }`;\n      } else {\n        out += ` ${ serializeSimpleValue(data[key]) }`;\n      }\n\n      return out;\n    }\n\n    /**\n     * .spec is the type used for the Logging chart Output and ClusterOutput resource spec.\n     * Without this Output and ClusterOutput specs are empty.\n     */\n    if ( type === 'json' || type === '.spec') {\n      try {\n        const parsedData = jsyaml.dump(data[key]);\n\n        if (parsedData) {\n          out += `\\n${ indent(parsedData.trim()) }`;\n        } else {\n          out += ` #${ type }`;\n        }\n\n        return out;\n      } catch (e) {\n      }\n    }\n\n    const subDef = schemaDefinitions?.[type] || findBy(schemas, 'id', type);\n\n    if ( subDef) {\n      let chunk;\n\n      if (subDef?.resourceFields && !isEmpty(subDef?.resourceFields)) {\n        chunk = createYaml(schemas, type, data[key], processAlwaysAdd, depth + 1, (path ? `${ path }.${ key }` : key), rootType, dataOptions);\n      } else if (data[key]) {\n        // if there are no fields defined on the schema but there are in the data, just format data as yaml and add to output yaml\n        try {\n          const parsed = jsyaml.dump(data[key]);\n\n          chunk = parsed.trim();\n        } catch (e) {\n          console.error(`Error: Unale to parse data for yaml of type: ${ type }`, e); // eslint-disable-line no-console\n        }\n      }\n\n      out += `\\n${ indent(chunk) }`;\n    } else {\n      out += ` #${ type }`;\n    }\n\n    return out;\n  }\n}\n\nfunction comment(lines) {\n  return (lines || '').split('\\n').map((x) => `#${ x.replace(/#/g, '') }`).join('\\n');\n}\n\nfunction indent(lines, depth = 1) {\n  return _indent(lines, depth * INDENT, ' ', /^#/);\n}\n\nfunction serializeSimpleValue(data) {\n  return jsyaml.dump(data).trim();\n}\n\nexport function getBlockDescriptor(value, key) {\n  const header = getBlockHeader(value, key);\n\n  return {\n    header,\n    indentation: getBlockIndentation(header),\n  };\n}\n\n/**\n *\n * @param {string} value the block of text to be parsed\n * @param {*} blockKey the key of the block\n * @returns the key + the block scalar indicators, see https://yaml-multiline.info - Block Scalars\n */\nfunction getBlockHeader(value, blockKey) {\n  const card = `(${ blockKey })[\\\\:][\\\\s|\\\\t]+[\\\\|\\\\>][\\\\d]*[\\\\-\\\\+]?`;\n  const re = new RegExp(card, 'gi');\n\n  const found = value.match(re);\n\n  return found?.[0] || '';\n}\n\n/**\n *\n * @param {string} blockHeader the key + the block scalar indicators\n * @returns the indentation indicator from the block header, see https://yaml-multiline.info - Indentation\n */\nfunction getBlockIndentation(blockHeader) {\n  const blockScalars = blockHeader.substr(blockHeader.indexOf(':') + 1);\n\n  const indentation = blockScalars.match(/\\d+/);\n\n  return indentation?.[0] || '';\n}\n\n/**\n * Check for a specific type and if valid return it's sub type or self\n * @param {string} type required type\n * @param {string} str actual type\n * @param {ResourceField} field resourceField entry to the actual type\n *\n * @returns the sub type, or if not found the type\n */\nexport function typeRef(type, str, field = null) {\n  const [foundType, foundSubType] = parseType(str, field);\n\n  if (type === foundType) {\n    return typeMunge(foundSubType || foundType);\n  }\n}\n\nexport function typeMunge(type) {\n  if ( type === 'integer' ) {\n    return 'int';\n  }\n\n  if ( type === 'io.k8s.apimachinery.pkg.api.resource.Quantity' ) {\n    return 'string';\n  }\n\n  return type;\n}\n\nexport function saferDump(obj) {\n  const out = jsyaml.dump(obj || {});\n\n  if ( out === '{}\\n' ) {\n    return '';\n  }\n\n  return out;\n}\n\n/**\n * Handles newlines indicators in the multiline blocks.\n *\n * this is required since jsyaml.dump doesn't support chomping and scalar style at the moment.\n * see: https://github.com/nodeca/js-yaml/issues/171\n\n * @typedef {Object} DumpBlockOptions\n * @property {('>' | '|')} [scalarStyle] - The scalar style.\n * @property {('-' | '+' | '' | null)} [chomping] - The chomping style.\n *\n * @param {*} data the multiline block\n * @param {Object} options - Serialization options for jsyaml.dump.\n * @param {number} options.lineWidth - Set max line width. Set -1 for unlimited width.\n * @param {DumpBlockOptions} [options.dynamicProperties] - Options for dynamic properties.\n *   Developers can provide their own property names under `options`.\n *\n * @returns the result of jsyaml.dump with the addition of multiline indicators\n */\nexport function dumpBlock(data, options = { lineWidth: -1 }) {\n  const parsed = jsyaml.dump(data, options);\n\n  let out = parsed;\n\n  const blockFields = Object.keys(data).filter((k) => {\n    if (typeof data[k] === 'string') {\n      return data[k].includes('\\n');\n    }\n  });\n\n  if (blockFields.length) {\n    for (const key of blockFields) {\n      const { header, indentation } = getBlockDescriptor(out, key);\n\n      const scalarStyle = options[key]?.scalarStyle ?? '|';\n      const chomping = options[key]?.chomping ?? '';\n\n      /**\n       * Replace the original block indicators with the ones provided in the options param\n       */\n      if (header) {\n        out = out.replace(header, `${ key }: ${ scalarStyle }${ chomping }${ indentation }`);\n      }\n    }\n  }\n\n  return out;\n}\n"],"mappings":"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","ignoreList":[]}]}