{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/detail/workload/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/detail/workload/index.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CreateEditView","NAMESPACE","NAMESPACE_COL","POD","WORKLOAD_TYPES","SCALABLE_WORKLOAD_TYPES","SERVICE","INGRESS","NODE","ResourceTable","Tab","Loading","ResourceTabs","CountGauge","allHash","DashboardMetrics","mapGetters","allDashboardsExist","PlusMinus","matches","PROJECT","SCALABLE_TYPES","Object","values","WORKLOAD_METRICS_DETAIL_URL","WORKLOAD_METRICS_SUMMARY_URL","WORKLOAD_TYPE_TO_KIND_MAPPING","_defineProperty","DEPLOYMENT","CRON_JOB","DAEMON_SET","JOB","STATEFUL_SET","REPLICA_SET","REPLICATION_CONTROLLER","METRICS_SUPPORTED_KINDS","components","mixins","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hasNodes","inStore","schema","hash","res","k","isMetricsSupportedKind","_namespace$metadata","namespace","projectId","wrap","_callee$","_context","prev","next","$store","getters","concat","_unused","allPods","dispatch","type","allServices","allIngresses","allNodes","value","allJobs","sent","includes","t0","currentCluster","id","showMetrics","metadata","labels","WORKLOAD_PROJECT_METRICS_DETAIL_URL","WORKLOAD_PROJECT_METRICS_SUMMARY_URL","showProjectMetrics","findMatchingServices","findMatchingIngresses","stop","data","matchingServices","matchingIngresses","POD_PROJECT_METRICS_DETAIL_URL","POD_PROJECT_METRICS_SUMMARY_URL","computed","_objectSpread","isScalable","_this$value","canUpdate","isJob","isCronJob","isPod","podSchema","ingressSchema","serviceSchema","podTemplateSpec","_this$value$spec","spec","jobTemplate","template","container","_this$podTemplateSpec","containers","jobSchema","jobHeaders","ingressHeaders","serviceHeaders","totalRuns","jobs","reduce","total","job","_job$status","status","active","succeeded","failed","podRestarts","pods","pod","_pod$status$container","containerStatuses","length","tot","restartCount","podHeaders","filter","h","graphVarsWorkload","replicaSetId","shortId","graphVars","kind","workload","showPodGaugeCircles","podGauges","find","pg","count","showJobGaugeCircles","jobGauges","jg","canScale","methods","scale","isUp","_this2","_callee2","_callee2$","_context2","scaleUp","scaleDown","title","t","direction","workloadName","name","err","root","_this3","_callee3","_callee3$","_context3","_this4","_callee4","_callee4$","_context4","_this5","matchingPods","service","selector","i","_service$metadata","_this5$value$metadata","_this6","ingress","rules","rule","paths","http","j","pathData","targetServiceName","backend","_service$metadata2","_ingress$metadata","_this6$value$metadata","matchingServiceName"],"sources":["node_modules/@rancher/shell/detail/workload/index.vue"],"sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport { NAMESPACE as NAMESPACE_COL } from '@shell/config/table-headers';\nimport {\n  POD, WORKLOAD_TYPES, SCALABLE_WORKLOAD_TYPES, SERVICE, INGRESS, NODE, NAMESPACE,\n} from '@shell/config/types';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport Loading from '@shell/components/Loading';\nimport ResourceTabs from '@shell/components/form/ResourceTabs';\nimport CountGauge from '@shell/components/CountGauge';\nimport { allHash } from '@shell/utils/promise';\nimport DashboardMetrics from '@shell/components/DashboardMetrics';\nimport { mapGetters } from 'vuex';\nimport { allDashboardsExist } from '@shell/utils/grafana';\nimport PlusMinus from '@shell/components/form/PlusMinus';\nimport { matches } from '@shell/utils/selector';\nimport { PROJECT } from '@shell/config/labels-annotations';\n\nconst SCALABLE_TYPES = Object.values(SCALABLE_WORKLOAD_TYPES);\nconst WORKLOAD_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-workload-pods-1/rancher-workload-pods?orgId=1';\nconst WORKLOAD_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-workload-1/rancher-workload?orgId=1';\n\nexport const WORKLOAD_TYPE_TO_KIND_MAPPING = {\n  // Each deployment creates a replicaset and the metrics are published for a replicaset.\n  [WORKLOAD_TYPES.DEPLOYMENT]:             'ReplicaSet',\n  [WORKLOAD_TYPES.CRON_JOB]:               'CronJob',\n  [WORKLOAD_TYPES.DAEMON_SET]:             'DaemonSet',\n  [WORKLOAD_TYPES.JOB]:                    'Job',\n  [WORKLOAD_TYPES.STATEFUL_SET]:           'StatefulSet',\n  [WORKLOAD_TYPES.REPLICA_SET]:            'ReplicaSet',\n  [WORKLOAD_TYPES.REPLICATION_CONTROLLER]: 'ReplicationController',\n};\n\nconst METRICS_SUPPORTED_KINDS = [\n  WORKLOAD_TYPES.DAEMON_SET,\n  WORKLOAD_TYPES.REPLICA_SET,\n  WORKLOAD_TYPES.STATEFUL_SET,\n  WORKLOAD_TYPES.DEPLOYMENT\n];\n\nexport default {\n  components: {\n    DashboardMetrics,\n    Tab,\n    Loading,\n    ResourceTabs,\n    CountGauge,\n    ResourceTable,\n    PlusMinus\n  },\n\n  mixins: [CreateEditView],\n\n  async fetch() {\n    let hasNodes = false;\n\n    try {\n      const inStore = this.$store.getters['currentStore']();\n      const schema = this.$store.getters[`${ inStore }/schemaFor`](NODE);\n\n      if (schema) {\n        hasNodes = true;\n      }\n    } catch {}\n\n    const hash = {\n      // See https://github.com/rancher/dashboard/issues/10417, all pods bad, come from a locally applied selector in the workload model\n      allPods:      this.$store.dispatch('cluster/findAll', { type: POD }),\n      allServices:  this.$store.dispatch('cluster/findAll', { type: SERVICE }),\n      allIngresses: this.$store.dispatch('cluster/findAll', { type: INGRESS }),\n      // Nodes should be fetched because they may be referenced in the target\n      // column of a service list item.\n      allNodes:     hasNodes ? this.$store.dispatch('cluster/findAll', { type: NODE }) : []\n    };\n\n    if (this.value.type === WORKLOAD_TYPES.CRON_JOB) {\n      hash.allJobs = this.$store.dispatch('cluster/findAll', { type: WORKLOAD_TYPES.JOB });\n    }\n    const res = await allHash(hash);\n\n    for ( const k in res ) {\n      this[k] = res[k];\n    }\n\n    const isMetricsSupportedKind = METRICS_SUPPORTED_KINDS.includes(this.value.type);\n\n    this.showMetrics = isMetricsSupportedKind && await allDashboardsExist(this.$store, this.currentCluster.id, [WORKLOAD_METRICS_DETAIL_URL, WORKLOAD_METRICS_SUMMARY_URL]);\n    if (!this.showMetrics) {\n      const namespace = await this.$store.dispatch('cluster/find', { type: NAMESPACE, id: this.value.metadata.namespace });\n\n      const projectId = namespace?.metadata?.labels[PROJECT];\n\n      if (projectId) {\n        this.WORKLOAD_PROJECT_METRICS_DETAIL_URL = `/api/v1/namespaces/cattle-project-${ projectId }-monitoring/services/http:cattle-project-${ projectId }-monitoring-grafana:80/proxy/d/rancher-pod-containers-1/rancher-workload-pods?orgId=1'`;\n        this.WORKLOAD_PROJECT_METRICS_SUMMARY_URL = `/api/v1/namespaces/cattle-project-${ projectId }-monitoring/services/http:cattle-project-${ projectId }-monitoring-grafana:80/proxy/d/rancher-pod-1/rancher-workload?orgId=1`;\n\n        this.showProjectMetrics = await allDashboardsExist(this.$store, this.currentCluster.id, [this.WORKLOAD_PROJECT_METRICS_DETAIL_URL, this.WORKLOAD_PROJECT_METRICS_SUMMARY_URL], 'cluster', projectId);\n      }\n    }\n    this.findMatchingServices();\n    this.findMatchingIngresses();\n  },\n\n  data() {\n    return {\n      allPods:                         [],\n      allServices:                     [],\n      allIngresses:                    [],\n      matchingServices:                [],\n      matchingIngresses:               [],\n      allJobs:                         [],\n      allNodes:                        [],\n      WORKLOAD_METRICS_DETAIL_URL,\n      WORKLOAD_METRICS_SUMMARY_URL,\n      POD_PROJECT_METRICS_DETAIL_URL:  '',\n      POD_PROJECT_METRICS_SUMMARY_URL: '',\n      showMetrics:                     false,\n      showProjectMetrics:              false,\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n\n    isScalable() {\n      return this.value?.canUpdate;\n    },\n\n    isJob() {\n      return this.value.type === WORKLOAD_TYPES.JOB;\n    },\n\n    isCronJob() {\n      return this.value.type === WORKLOAD_TYPES.CRON_JOB;\n    },\n\n    isPod() {\n      return this.value.type === POD;\n    },\n\n    podSchema() {\n      return this.$store.getters['cluster/schemaFor'](POD);\n    },\n\n    ingressSchema() {\n      return this.$store.getters['cluster/schemaFor'](INGRESS);\n    },\n\n    serviceSchema() {\n      return this.$store.getters['cluster/schemaFor'](SERVICE);\n    },\n\n    podTemplateSpec() {\n      if ( this.value.type === WORKLOAD_TYPES.CRON_JOB ) {\n        return this.value.spec.jobTemplate.spec.template.spec;\n      }\n\n      // This is for viewing\n      if ( this.value.type === POD ) {\n        return this.value;\n      }\n\n      return this.value.spec?.template?.spec;\n    },\n\n    container() {\n      return this.podTemplateSpec?.containers[0];\n    },\n\n    jobSchema() {\n      return this.$store.getters['cluster/schemaFor'](WORKLOAD_TYPES.JOB);\n    },\n\n    jobHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.jobSchema);\n    },\n    ingressHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.ingressSchema);\n    },\n    serviceHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.serviceSchema);\n    },\n\n    totalRuns() {\n      if (!this.value.jobs) {\n        return;\n      }\n\n      return this.value.jobs.reduce((total, job) => {\n        const { status = {} } = job;\n\n        total += (status.active || 0);\n        total += (status.succeeded || 0);\n        total += (status.failed || 0);\n\n        return total;\n      }, 0);\n    },\n\n    podRestarts() {\n      return this.value.pods.reduce((total, pod) => {\n        const { status:{ containerStatuses = [] } } = pod;\n\n        if (containerStatuses.length) {\n          total += containerStatuses.reduce((tot, container) => {\n            tot += container.restartCount;\n\n            return tot;\n          }, 0);\n        }\n\n        return total;\n      }, 0);\n    },\n\n    podHeaders() {\n      return this.$store.getters['type-map/headersFor'](this.podSchema).filter((h) => h !== NAMESPACE_COL);\n    },\n\n    graphVarsWorkload() {\n      return this.value.type === WORKLOAD_TYPES.DEPLOYMENT ? this.value.replicaSetId : this.value.shortId;\n    },\n\n    graphVars() {\n      return {\n        namespace: this.value.namespace,\n        kind:      WORKLOAD_TYPE_TO_KIND_MAPPING[this.value.type],\n        workload:  this.graphVarsWorkload\n      };\n    },\n\n    showPodGaugeCircles() {\n      const podGauges = Object.values(this.value.podGauges);\n      const total = this.value.pods.length;\n\n      return !podGauges.find((pg) => pg.count === total);\n    },\n\n    showJobGaugeCircles() {\n      const jobGauges = Object.values(this.value.jobGauges);\n      const total = this.isCronJob ? this.totalRuns : this.value.pods.length;\n\n      return !jobGauges.find((jg) => jg.count === total);\n    },\n\n    canScale() {\n      return !!SCALABLE_TYPES.includes(this.value.type) && this.value.canUpdate;\n    },\n  },\n  methods: {\n    async scale(isUp) {\n      try {\n        if (isUp) {\n          await this.value.scaleUp();\n        } else {\n          await this.value.scaleDown();\n        }\n      } catch (err) {\n        this.$store.dispatch('growl/fromError', {\n          title: this.t('workload.list.errorCannotScale', { direction: isUp ? 'up' : 'down', workloadName: this.value.name }),\n          err\n        },\n        { root: true });\n      }\n    },\n    async scaleDown() {\n      await this.scale(false);\n    },\n    async scaleUp() {\n      await this.scale(true);\n    },\n    findMatchingServices() {\n      if (!this.serviceSchema) {\n        return [];\n      }\n      const matchingPods = this.value.pods;\n\n      // Find Services that have selectors that match this\n      // workload's Pod(s).\n      const matchingServices = this.allServices.filter((service) => {\n        const selector = service.spec.selector;\n\n        for (let i = 0; i < matchingPods.length; i++) {\n          const pod = matchingPods[i];\n\n          if (service.metadata?.namespace === this.value.metadata?.namespace && matches(pod, selector)) {\n            return true;\n          }\n        }\n\n        return false;\n      });\n\n      this.matchingServices = matchingServices;\n    },\n    findMatchingIngresses() {\n      if (!this.ingressSchema) {\n        return [];\n      }\n\n      // Find Ingresses that forward traffic to Services\n      // that select this workload.\n      const matchingIngresses = this.allIngresses.filter((ingress) => {\n        const rules = ingress.spec.rules;\n\n        if (rules) {\n          for (let i = 0; i < rules.length; i++) {\n            const rule = rules[i];\n\n            const paths = rule.http.paths;\n\n            if (paths) {\n              // For each Ingress, check if any Services that match\n              // this workload are also target backends for the Ingress.\n              for (let j = 0; j < paths.length; j++) {\n                const pathData = paths[j];\n                const targetServiceName = pathData.backend.service.name;\n\n                for (let k = 0; k < this.matchingServices.length; k++) {\n                  const service = this.matchingServices[k];\n                  const matchingServiceName = service.metadata?.name;\n\n                  if (ingress.metadata?.namespace === this.value.metadata?.namespace && matchingServiceName === targetServiceName) {\n                    return true;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return false;\n      });\n\n      this.matchingIngresses = matchingIngresses;\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <div\n      v-if=\"canScale\"\n      class=\"right-align flex\"\n    >\n      <PlusMinus\n        class=\"text-right\"\n        :label=\"t('tableHeaders.scale')\"\n        :value=\"value.spec.replicas\"\n        :disabled=\"!isScalable\"\n        @minus=\"scaleDown\"\n        @plus=\"scaleUp\"\n      />\n    </div>\n    <h3>\n      {{ isJob || isCronJob ? t('workload.detailTop.runs') :t('workload.detailTop.pods') }}\n    </h3>\n    <div\n      v-if=\"value.pods || value.jobGauges\"\n      class=\"gauges mb-20\"\n      :class=\"{'gauges__pods': !!value.pods}\"\n    >\n      <template v-if=\"value.jobGauges\">\n        <CountGauge\n          v-for=\"(group, key) in value.jobGauges\"\n          :key=\"key\"\n          :total=\"isCronJob? totalRuns : value.pods.length\"\n          :useful=\"group.count || 0\"\n          :graphical=\"showJobGaugeCircles\"\n          :primary-color-var=\"`--sizzle-${group.color}`\"\n          :name=\"t(`workload.gaugeStates.${key}`)\"\n        />\n      </template>\n      <template v-else>\n        <CountGauge\n          v-for=\"(group, key) in value.podGauges\"\n          :key=\"key\"\n          :total=\"value.pods.length\"\n          :useful=\"group.count || 0\"\n          :graphical=\"showPodGaugeCircles\"\n          :primary-color-var=\"`--sizzle-${group.color}`\"\n          :name=\"key\"\n        />\n      </template>\n    </div>\n    <ResourceTabs\n      :value=\"value\"\n    >\n      <Tab\n        v-if=\"isCronJob\"\n        name=\"jobs\"\n        :label=\"t('tableHeaders.jobs')\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          :rows=\"value.jobs\"\n          :headers=\"jobHeaders\"\n          key-field=\"id\"\n          :schema=\"jobSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-else\n        name=\"pods\"\n        :label=\"t('tableHeaders.pods')\"\n        :weight=\"4\"\n      >\n        <ResourceTable\n          v-if=\"value.pods\"\n          :rows=\"value.pods\"\n          :headers=\"podHeaders\"\n          key-field=\"id\"\n          :schema=\"podSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"showMetrics\"\n        :label=\"t('workload.container.titles.metrics')\"\n        name=\"workload-metrics\"\n        :weight=\"3\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"WORKLOAD_METRICS_DETAIL_URL\"\n            :summary-url=\"WORKLOAD_METRICS_SUMMARY_URL\"\n            :vars=\"graphVars\"\n            graph-height=\"550px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        v-if=\"showProjectMetrics\"\n        :label=\"t('workload.container.titles.metrics')\"\n        name=\"workload-metrics\"\n        :weight=\"3\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"WORKLOAD_PROJECT_METRICS_DETAIL_URL\"\n            :summary-url=\"WORKLOAD_PROJECT_METRICS_SUMMARY_URL\"\n            :vars=\"graphVars\"\n            graph-height=\"550px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        v-if=\"!isJob && !isCronJob\"\n        name=\"services\"\n        :label=\"t('workload.detail.services')\"\n        :weight=\"3\"\n      >\n        <p\n          v-if=\"!serviceSchema\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotViewServices') }}\n        </p>\n        <p\n          v-else-if=\"matchingServices.length === 0\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotFindServices') }}\n        </p>\n        <p\n          v-else\n          class=\"caption\"\n        >\n          {{ t('workload.detail.serviceListCaption') }}\n        </p>\n        <ResourceTable\n          v-if=\"serviceSchema && matchingServices.length > 0\"\n          :rows=\"matchingServices\"\n          :headers=\"serviceHeaders\"\n          key-field=\"id\"\n          :schema=\"serviceSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n          :table-actions=\"false\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isJob && !isCronJob\"\n        name=\"ingresses\"\n        :label=\"t('workload.detail.ingresses')\"\n        :weight=\"2\"\n      >\n        <p\n          v-if=\"!serviceSchema\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotViewIngressesBecauseCannotViewServices') }}\n        </p>\n        <p\n          v-else-if=\"!ingressSchema\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotViewIngresses') }}\n        </p>\n        <p\n          v-else-if=\"matchingIngresses.length === 0\"\n          class=\"caption\"\n        >\n          {{ t('workload.detail.cannotFindIngresses') }}\n        </p>\n        <p\n          v-else\n          class=\"caption\"\n        >\n          {{ t('workload.detail.ingressListCaption') }}\n        </p>\n        <ResourceTable\n          v-if=\"ingressSchema && matchingIngresses.length > 0\"\n          :rows=\"matchingIngresses\"\n          :headers=\"ingressHeaders\"\n          key-field=\"id\"\n          :schema=\"ingressSchema\"\n          :groupable=\"false\"\n          :search=\"false\"\n          :table-actions=\"false\"\n        />\n      </Tab>\n    </ResourceTabs>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.right-align {\n  float: right;\n}\n.gauges {\n  display: flex;\n  justify-content: space-around;\n  &>*{\n    flex: 1;\n    margin-right: $column-gutter;\n  }\n  &__pods {\n    flex-wrap: wrap;\n    justify-content: left;\n    .count-gauge {\n      width: 23%;\n      margin-bottom: 10px;\n      flex: initial;\n    }\n  }\n}\n.caption {\n  margin-bottom: .5em;\n}\n</style>\n"],"mappings":"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","ignoreList":[]}]}