{"remainingRequest":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--17-0!/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/rke2.test.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/rke2.test.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/babel.config.js","mtime":1725343995893},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["mount","shallowMount","SECRET","_CREATE","rke2","defaultStubs","CruResource","template","Banner","LabeledSelect","ACE","AgentEnv","AgentConfiguration","ArrayList","ArrayListGrouped","BadgeState","Checkbox","ClusterMembershipEditor","DrainOptions","LabeledInput","Labels","Loading","MachinePool","MatchExpressions","NameNsDescription","Questions","RadioGroup","RegistryConfigs","RegistryMirrors","S3Config","SelectCredential","SelectOrCreateAuthSecret","Tab","Tabbed","UnitInput","YamlEditor","MemberRoles","Basics","Etcd","Networking","Upgrade","Registries","AddOnConfig","Advanced","mockAgentArgs","options","profile","anything","defaultComputed","showForm","versionOptions","id","value","serverArgs","agentArgs","charts","defaultGetters","currentStore","jest","fn","defaultMocks","$fetchState","pending","$route","name","query","AS","defaultSpec","rkeConfig","etcd","disableSnapshots","chartValues","describe","beforeEach","spyOn","console","mockImplementation","it","each","provider","result","k8s","wrapper","propsData","mode","spec","_objectSpread","kubernetesVersion","agentConfig","selectedVersion","computed","mocks","$store","dispatch","getters","stubs","expect","vm","validationPassed","toBe","data","credentialId","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","initSpecs","machinePools","forEach","p","drainBeforeDelete","stop","_callee2","HARVESTER","HARVESTER_CLOUD_PROVIDER","newSpec","_callee2$","_context2","Object","assign","dataDirectories","k8sDistro","metadata","credential","decodedData","clusterId","action","opts","type","save","_doSaveOverride","cloudConfigPath","toStrictEqual","skip","_callee3","defaultAgentConfig","_callee3$","_context3","management_findAll","clusterAgentDeploymentCustomization","overrideAffinity","appendTolerations","overrideResourceRequirements","fleetAgentDeploymentCustomization","setData","rke2Versions","props","toContain","_callee4","agent","_callee4$","_context4","find","fetch","call","element","toBeDefined"],"sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/rke2.test.ts"],"sourcesContent":["import { mount, shallowMount } from '@vue/test-utils';\nimport { SECRET } from '@shell/config/types';\nimport { _CREATE } from '@shell/config/query-params';\nimport rke2 from '@shell/edit/provisioning.cattle.io.cluster/rke2.vue';\n\n/**\n * DISCLAIMER ***************************************************************************************\n * Declarations should not be done outside the tests!!\n * This component is overwhelming for test and requires too much initialization.\n * In this way the tests are more readable and we can avoid annoying repetitions.\n ****************************************************************************************************\n */\nconst defaultStubs = {\n  CruResource:              { template: '<div><slot></slot></div>' }, // Required to render the slot content\n  Banner:                   true,\n  LabeledSelect:            true,\n  ACE:                      true,\n  AgentEnv:                 true,\n  AgentConfiguration:       true,\n  ArrayList:                true,\n  ArrayListGrouped:         true,\n  BadgeState:               true,\n  Checkbox:                 true,\n  ClusterMembershipEditor:  true,\n  DrainOptions:             true,\n  LabeledInput:             true,\n  Labels:                   true,\n  Loading:                  true,\n  MachinePool:              true,\n  MatchExpressions:         true,\n  NameNsDescription:        true,\n  Questions:                true,\n  RadioGroup:               true,\n  RegistryConfigs:          true,\n  RegistryMirrors:          true,\n  S3Config:                 true,\n  SelectCredential:         true,\n  SelectOrCreateAuthSecret: true,\n  Tab:                      true,\n  Tabbed:                   true,\n  UnitInput:                true,\n  YamlEditor:               true,\n  MemberRoles:              true,\n  Basics:                   true,\n  Etcd:                     true,\n  Networking:               true,\n  Upgrade:                  true,\n  Registries:               true,\n  AddOnConfig:              true,\n  Advanced:                 true\n};\n\nconst mockAgentArgs = { 'cloud-provider-name': { options: [], profile: { options: [{ anything: 'yes' }] } } };\n\nconst defaultComputed = {\n  showForm() {\n    return true;\n  },\n  versionOptions() {\n    return [\n      {\n        id: 'v1.25.0+rke2r1', value: 'v1.25.0+rke2r1', serverArgs: {}, agentArgs: mockAgentArgs, charts: {}\n      },\n      {\n        id: 'v1.24.0+rke2r1', value: 'v1.24.0+rke2r1', serverArgs: {}, agentArgs: mockAgentArgs, charts: {}\n      },\n      {\n        id: 'v1.23.0+rke2r1', value: 'v1.23.0+rke2r1', serverArgs: {}, agentArgs: mockAgentArgs, charts: {}\n      },\n      {\n        id: 'v1.25.0+k3s1', value: 'v1.25.0+k3s1', serverArgs: {}, agentArgs: mockAgentArgs, charts: {}\n      },\n      {\n        id: 'v1.24.0+k3s1', value: 'v1.24.0+k3s1', serverArgs: {}, agentArgs: mockAgentArgs, charts: {}\n      }\n    ];\n  }\n};\n\nconst defaultGetters = {\n  currentStore:                      () => 'current_store',\n  'management/schemaFor':            jest.fn(),\n  'current_store/all':               jest.fn(),\n  'i18n/t':                          jest.fn(),\n  'i18n/withFallback':               jest.fn(),\n  'plugins/cloudProviderForDriver':  jest.fn(),\n  'customization/getPreviewCluster': jest.fn(),\n};\n\nconst defaultMocks = {\n  $fetchState: { pending: false },\n  $route:      {\n    name:  'anything',\n    query: { AS: 'yaml' },\n  },\n};\n\nconst defaultSpec = {\n  rkeConfig:   { etcd: { disableSnapshots: false } },\n  chartValues: {},\n};\n\ndescribe('component: rke2', () => {\n  /**\n   * DISCLAIMER ***************************************************************************************\n   * Logs are prevented to avoid polluting the test output.\n   ****************************************************************************************************\n  */\n  // eslint-disable-next-line jest/no-hooks\n  beforeEach(() => {\n    jest.spyOn(console, 'log').mockImplementation(() => { });\n  });\n\n  it.each([\n    ['custom', true],\n    ['anything else', false] // without proper data, machine pool is always not present\n  ])('should allow creation of RKE2 cluster with provider %p if pool machines are missing (%p)', (provider, result) => {\n    const k8s = 'v1.25.0+rke2r1';\n    const wrapper = mount(rke2, {\n      propsData: {\n        mode:  _CREATE,\n        value: {\n          spec: {\n            ...defaultSpec,\n            kubernetesVersion: k8s,\n\n          },\n          agentConfig: { 'cloud-provider-name': 'any' }\n        },\n        selectedVersion: { agentArgs: mockAgentArgs },\n        provider,\n      },\n      computed: defaultComputed,\n      mocks:    {\n        ...defaultMocks,\n        $store: { dispatch: () => jest.fn(), getters: defaultGetters },\n      },\n      stubs: defaultStubs\n    });\n\n    expect((wrapper.vm as any).validationPassed).toBe(result);\n  });\n\n  it('should allow creation of K3 clusters if pool machines are missing', () => {\n    const k8s = 'v1.25.0+k3s1';\n    const wrapper = mount(rke2, {\n      propsData: {\n        mode:  _CREATE,\n        value: {\n          spec: {\n            ...defaultSpec,\n            kubernetesVersion: k8s\n          },\n          agentConfig: { 'cloud-provider-name': 'any' }\n        },\n        provider: 'custom'\n      },\n      data:     () => ({ credentialId: 'I am authenticated' }),\n      computed: defaultComputed,\n      mocks:    {\n        ...defaultMocks,\n        $store: { dispatch: () => jest.fn(), getters: defaultGetters },\n      },\n      stubs: defaultStubs\n    });\n\n    expect((wrapper.vm as any).validationPassed).toBe(true);\n  });\n\n  it('should initialize machine pools with drain before delete true', async() => {\n    const k8s = 'v1.25.0+k3s1';\n    const wrapper = mount(rke2, {\n      propsData: {\n        mode:  _CREATE,\n        value: {\n          spec: {\n            ...defaultSpec,\n            kubernetesVersion: k8s\n          },\n          agentConfig: { 'cloud-provider-name': 'any' }\n        },\n        provider: 'custom'\n      },\n      data:     () => ({ credentialId: 'I am authenticated' }),\n      computed: defaultComputed,\n      mocks:    {\n        ...defaultMocks,\n        $store: { dispatch: () => jest.fn(), getters: defaultGetters },\n      },\n      stubs: defaultStubs\n    });\n\n    await wrapper.vm.initSpecs();\n\n    wrapper.vm.machinePools.forEach((p: any) => expect(p.drainBeforeDelete).toBe(true));\n  });\n\n  it('should set distro root directory from k8sDistro on a Harvester cluster creation on save override (_doSaveOverride)', async() => {\n    const k8s = 'v1.25.0+k3s1';\n\n    const HARVESTER = 'harvester';\n    const HARVESTER_CLOUD_PROVIDER = 'harvester-cloud-provider';\n\n    const newSpec = Object.assign({}, defaultSpec);\n\n    newSpec.rkeConfig.dataDirectories = { k8sDistro: 'my-k8s-distro-path' };\n\n    const wrapper = mount(rke2, {\n      propsData: {\n        mode:  _CREATE,\n        value: {\n          spec: {\n            ...newSpec,\n            kubernetesVersion: k8s\n          },\n          metadata:    { name: 'cluster-name' },\n          agentConfig: { 'cloud-provider-name': HARVESTER }\n        },\n        provider: 'custom'\n      },\n      data: () => ({\n        credentialId: 'I am authenticated',\n        credential:   { decodedData: { clusterId: 'some-cluster-id' } },\n        machinePools: [],\n      }),\n      computed: defaultComputed,\n      mocks:    {\n        ...defaultMocks,\n        $store: {\n          // mock secret creation on \"createKubeconfigSecret\"\n          dispatch: (action: any, opts: any) => {\n            if (action === 'management/create' && opts.type === SECRET) {\n              return { save: () => jest.fn };\n            } else {\n              return jest.fn();\n            }\n          },\n          getters: defaultGetters\n        },\n      },\n      stubs: defaultStubs\n    });\n\n    // we need to mock the \"save\" method from the create-edit-view-mixin\n    // otherwise we get console errors\n    jest.spyOn(wrapper.vm, 'save').mockImplementation();\n\n    await wrapper.vm._doSaveOverride(jest.fn());\n\n    expect(wrapper.vm.chartValues[HARVESTER_CLOUD_PROVIDER].cloudConfigPath).toStrictEqual('my-k8s-distro-path/etc/config-files/cloud-provider-config');\n  });\n\n  // TODO: Complete test after implementing fetch https://github.com/rancher/dashboard/issues/9322\n  // eslint-disable-next-line jest/no-disabled-tests\n  describe.skip('should initialize agent configuration values', () => {\n    it('adding default values if none', async() => {\n      const wrapper = shallowMount(rke2, {\n        propsData: {\n          mode:  'create',\n          value: {\n            spec:        { ...defaultSpec },\n            agentConfig: { 'cloud-provider-name': 'any' }\n          },\n          provider: 'custom'\n        },\n        computed: defaultComputed,\n        mocks:    {\n          ...defaultMocks,\n          $store: {\n            getters:  defaultGetters,\n            dispatch: {\n              'management/request': jest.fn(),\n              'management/find':    jest.fn(),\n              'management/findAll': () => ([]),\n            }\n          },\n        },\n        stubs: defaultStubs\n      });\n      const defaultAgentConfig = {\n        clusterAgentDeploymentCustomization: {\n          overrideAffinity:             {},\n          appendTolerations:            [],\n          overrideResourceRequirements: {}\n        },\n        fleetAgentDeploymentCustomization: {\n          overrideAffinity:             {},\n          appendTolerations:            [],\n          overrideResourceRequirements: {}\n        }\n      };\n\n      // Setting RKE to avoid calls\n      wrapper.setData({ rke2Versions: [] });\n\n      // await rke2.fetch.call(wrapper.vm);\n\n      expect(wrapper.props().value.spec).toContain(defaultAgentConfig);\n    });\n\n    it('should display agent configuration tab', async() => {\n      const wrapper = shallowMount(rke2, {\n        propsData: {\n          mode:  'create',\n          value: {\n            spec:        { ...defaultSpec },\n            agentConfig: { 'cloud-provider-name': 'any' }\n          },\n          provider: 'custom'\n        },\n        computed: defaultComputed,\n        mocks:    {\n          ...defaultMocks,\n          $store: {\n            getters:  defaultGetters,\n            dispatch: {\n              'management/request': jest.fn(),\n              'management/find':    jest.fn(),\n              'management/findAll': () => ([]),\n            }\n          },\n        },\n        stubs: defaultStubs\n      });\n      const agent = wrapper.find('[data-testid=\"rke2-cluster-agent-config\"]');\n\n      // Setting RKE to avoid calls\n      wrapper.setData({ rke2Versions: [] });\n\n      await rke2.fetch.call(wrapper.vm);\n\n      expect(agent.element).toBeDefined();\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]}]}