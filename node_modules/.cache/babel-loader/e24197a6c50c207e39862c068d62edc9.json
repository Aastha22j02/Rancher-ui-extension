{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/index.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["CreateEditView","Loading","CruResource","SelectIconGrid","EmberPage","ToggleSwitch","CHART","FROM_CLUSTER","SUB_TYPE","RKE_TYPE","_EDIT","_IMPORT","_CONFIG","_VIEW","mapGetters","sortBy","set","PROVISIONER","_RKE1","_RKE2","filterAndArrangeCharts","CATALOG","CAPI","MANAGEMENT","DEFAULT_WORKSPACE","mapFeature","RKE2","RKE2_FEATURE","RKE1_UI","allHash","BLANK_CLUSTER","ELEMENTAL_PRODUCT_NAME","ELEMENTAL_CLUSTER_PROVIDER","Rke2Config","Import","SORT_GROUPS","template","kontainer","rke1","rke2","register","custom","custom1","custom2","PROXY_ENDPOINT","name","components","mixins","props","realMode","type","String","required","mode","value","Object","default","componentTestid","fetch","_this","_asyncToGenerator","_regeneratorRuntime","mark","_callee","hash","res","extensionClasses","wrap","_callee$","_context","prev","next","mgmtClusters","$store","dispatch","CLUSTER","provClusters","RANCHER_CLUSTER","catalog","getters","NODE_DRIVER","nodeDrivers","KONTAINER_DRIVER","kontainerDrivers","id","isRke2","NODE_POOL","rke1NodePools","NODE_TEMPLATE","rke1NodeTemplates","sent","spec","metadata","forEach","driver","_driver$spec","_driver$spec2","_driver$spec3","builtin","uiUrl","active","_driver$spec4","displayName","cssUrl","replace","startsWith","concat","loadStylesheet","iconClasses","$plugin","listDynamic","map","getDynamic","extensions","c","axios","$axios","app","t","_len","arguments","length","args","Array","_key","apply","isCreate","isEdit","isView","e","console","error","stop","data","subType","$route","query","rkeType","chart","isImport","providerCluster","computed","_objectSpread","allCharts","preferredProvisioner","get","key","emberLink","_this2","_this$value$mgmt","provisioner","matchingSubtype","subTypes","find","st","toLowerCase","selectType","isCustom","as","machineProvider","_this$selectedSubType","selectedSubType","component","mgmt","emberEditPath","rke2Enabled","rke1UiEnabled","_this3","s","neu","isRke1","templateOptions","out","showTypes","_CLUSTER_TPL","_this4","isElementalActive","activeProducts","item","templates","vueKontainerTypes","machineTypes","filter","x","state","showImport","showCreate","obj","includes","driverName","addType","emberImportPath","emberCreatePath","push","label","chartNameDisplay","description","chartDescription","icon","require","group","tag","undefined","ext","addExtensionType","iconClass","subtype","disabled","link","providerConfig","groupedSubTypes","_iterator","_createForOfIteratorHelper","_step","n","done","row","entry","types","sort","err","f","k","values","firstNodeDriverItem","findIndex","firstCustomClusterItem","methods","showRkeToggle","i","url","$","document","createElement","onerror","remove","rel","src","href","getElementsByTagName","appendChild","cancel","$router","params","cluster","product","resource","colorFor","clickedType","parts","split","_localCluster","localCluster","isLocal","goToInstall","applyQuery","_defineProperty","$emit","$fetch"],"sources":["node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/index.vue"],"sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport Loading from '@shell/components/Loading';\nimport CruResource from '@shell/components/CruResource';\nimport SelectIconGrid from '@shell/components/SelectIconGrid';\nimport EmberPage from '@shell/components/EmberPage';\nimport { ToggleSwitch } from '@components/Form/ToggleSwitch';\nimport {\n  CHART, FROM_CLUSTER, SUB_TYPE, RKE_TYPE, _EDIT, _IMPORT, _CONFIG, _VIEW\n} from '@shell/config/query-params';\nimport { mapGetters } from 'vuex';\nimport { sortBy } from '@shell/utils/sort';\nimport { set } from '@shell/utils/object';\nimport { PROVISIONER, _RKE1, _RKE2 } from '@shell/store/prefs';\nimport { filterAndArrangeCharts } from '@shell/store/catalog';\nimport { CATALOG } from '@shell/config/labels-annotations';\nimport { CAPI, MANAGEMENT, DEFAULT_WORKSPACE } from '@shell/config/types';\nimport { mapFeature, RKE2 as RKE2_FEATURE, RKE1_UI } from '@shell/store/features';\nimport { allHash } from '@shell/utils/promise';\nimport { BLANK_CLUSTER } from '@shell/store/store-types.js';\nimport { ELEMENTAL_PRODUCT_NAME, ELEMENTAL_CLUSTER_PROVIDER } from '../../config/elemental-types';\nimport Rke2Config from './rke2';\nimport Import from './import';\n\nconst SORT_GROUPS = {\n  template:  1,\n  kontainer: 2,\n  rke1:      3,\n  rke2:      3,\n  register:  4,\n  custom:    5,\n  custom1:   5,\n  custom2:   5,\n};\n\n// uSed to proxy stylesheets for custom drivers that provide custom UI (RKE1)\nconst PROXY_ENDPOINT = '/meta/proxy';\n\nexport default {\n  name: 'CruCluster',\n\n  components: {\n    CruResource,\n    EmberPage,\n    Import,\n    Loading,\n    Rke2Config,\n    SelectIconGrid,\n    ToggleSwitch\n  },\n\n  mixins: [CreateEditView],\n\n  props: {\n    realMode: {\n      type:     String,\n      required: true,\n    },\n\n    mode: {\n      type:     String,\n      required: true,\n    },\n\n    value: {\n      type:    Object,\n      default: null,\n    },\n\n    /**\n     * Inherited global identifier prefix for tests\n     * Define a term based on the parent component to avoid conflicts on multiple components\n     */\n    componentTestid: {\n      type:    String,\n      default: 'cluster-manager-create'\n    }\n  },\n\n  async fetch() {\n    const hash = {\n      // These aren't explicitly used, but need to be listening for change events\n      mgmtClusters: this.$store.dispatch('management/findAll', { type: MANAGEMENT.CLUSTER }),\n      provClusters: this.$store.dispatch('management/findAll', { type: CAPI.RANCHER_CLUSTER }),\n\n      catalog: this.$store.dispatch('catalog/load'),\n    };\n\n    if (this.$store.getters[`management/canList`](MANAGEMENT.NODE_DRIVER)) {\n      hash.nodeDrivers = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_DRIVER });\n    }\n\n    if (this.$store.getters[`management/canList`](MANAGEMENT.KONTAINER_DRIVER)) {\n      hash.kontainerDrivers = this.$store.dispatch('management/findAll', { type: MANAGEMENT.KONTAINER_DRIVER });\n    }\n\n    if ( this.value.id && !this.value.isRke2 ) {\n      // These are needed to resolve references in the mgmt cluster -> node pool -> node template to figure out what provider the cluster is using\n      // so that the edit iframe for ember pages can go to the right place.\n      if (this.$store.getters[`management/canList`](MANAGEMENT.NODE_POOL)) {\n        hash.rke1NodePools = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL });\n      }\n\n      if (this.$store.getters[`management/canList`](MANAGEMENT.NODE_TEMPLATE)) {\n        hash.rke1NodeTemplates = this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_TEMPLATE });\n      }\n    }\n\n    const res = await allHash(hash);\n\n    this.nodeDrivers = res.nodeDrivers || [];\n    this.kontainerDrivers = res.kontainerDrivers || [];\n\n    if ( !this.value.spec ) {\n      set(this.value, 'spec', {});\n    }\n\n    if ( !this.value.id ) {\n      if ( !this.value.metadata ) {\n        set(this.value, 'metadata', {});\n      }\n\n      set(this.value.metadata, 'namespace', DEFAULT_WORKSPACE);\n    }\n\n    // For the node drivers, look for custom UI that we can use to show an icon (if not built-in)\n    this.nodeDrivers.forEach((driver) => {\n      if (!driver.spec?.builtin && driver.spec?.uiUrl && driver.spec?.active) {\n        const name = driver.spec?.displayName || driver.id;\n        let cssUrl = driver.spec.uiUrl.replace(/\\.js$/, '.css');\n\n        if (cssUrl.startsWith('http://') || cssUrl.startsWith('https://')) {\n          cssUrl = `${ PROXY_ENDPOINT }/${ cssUrl }`;\n        }\n\n        this.loadStylesheet(cssUrl, `driver-ui-css-${ driver.id }`);\n\n        this.iconClasses[name] = `machine-driver ${ name }`;\n      }\n    });\n\n    // Custom Providers from extensions - initialize each with the store and the i18n service\n    // Wrap in try ... catch, to prevent errors in an extension breaking the page\n    try {\n      const extensionClasses = this.$plugin.listDynamic('provisioner').map((name) => this.$plugin.getDynamic('provisioner', name));\n\n      // We can't pass in this.$store as this leads to a circular-reference that causes Vue to freeze,\n      // so pass in specific services that the provisioner extension may need\n      this.extensions = extensionClasses.map((c) => new c({\n        dispatch: this.$store.dispatch,\n        getters:  this.$store.getters,\n        axios:    this.$store.$axios,\n        $plugin:  this.$store.app.$plugin,\n        t:        (...args) => this.t.apply(this, args),\n        isCreate: this.isCreate,\n        isEdit:   this.isEdit,\n        isView:   this.isView,\n      }));\n    } catch (e) {\n      console.error('Error loading provisioner(s) from extensions', e); // eslint-disable-line no-console\n    }\n  },\n\n  data() {\n    const subType = this.$route.query[SUB_TYPE] || null;\n    const rkeType = this.$route.query[RKE_TYPE] || null;\n    const chart = this.$route.query[CHART] || null;\n    const isImport = this.realMode === _IMPORT;\n\n    return {\n      nodeDrivers:      [],\n      kontainerDrivers: [],\n      extensions:       [],\n      subType,\n      rkeType,\n      chart,\n      isImport,\n      providerCluster:  null,\n      iconClasses:      {},\n    };\n  },\n\n  computed: {\n    ...mapGetters({ allCharts: 'catalog/charts' }),\n    ...mapGetters('type-map', ['activeProducts']),\n    // needed to recreate logic on mapPref in order to incorporate the logic around the rkeType query param\n    // https://github.com/rancher/dashboard/issues/6299\n    preferredProvisioner: {\n      get() {\n        if (this.rkeType) {\n          return this.rkeType;\n        }\n\n        return this.$store.getters['prefs/get'](PROVISIONER);\n      },\n      set(value) {\n        this.$store.dispatch('prefs/set', { key: PROVISIONER, value });\n      }\n    },\n    _RKE1: () => _RKE1,\n    _RKE2: () => _RKE2,\n\n    emberLink() {\n      if (this.value) {\n        if (this.value.provisioner) {\n          const matchingSubtype = this.subTypes.find((st) => st.id.toLowerCase() === this.value.provisioner.toLowerCase());\n\n          if (matchingSubtype) {\n            this.selectType(matchingSubtype.id, false);\n          }\n        }\n        // For custom RKE2 clusters, don't load an Ember page.\n        // It should be the dashboard.\n        if ( this.value.isRke2 && ((this.value.isCustom && this.mode === _EDIT) || (this.value.isCustom && this.as === _CONFIG && this.mode === _VIEW) || (this.subType || '').toLowerCase() === 'custom')) {\n          // For admins, this.value.isCustom is used to check if it is a custom cluster.\n          // For cluster owners, this.subtype is used.\n          this.selectType('custom', false);\n\n          return '';\n        }\n        // For RKE2/K3s clusters provisioned in Rancher with node pools,\n        // do not use an iFramed Ember page.\n        if ( this.value.isRke2 && this.value.machineProvider ) {\n          // Edit existing RKE2\n          this.selectType(this.value.machineProvider, false);\n\n          return '';\n        }\n        if ( this.subType ) {\n          // if driver type has a custom form component, don't load an ember page\n          if (this.selectedSubType.component) {\n            return '';\n          }\n          // For RKE1 and hosted Kubernetes Clusters, set the ember link\n          // so that we load the page rather than using RKE2 create\n          if (this.selectedSubType?.emberLink) {\n            return this.selectedSubType.emberLink;\n          }\n\n          this.selectType(this.subType, false);\n\n          return '';\n        }\n\n        if ( this.value.mgmt?.emberEditPath ) {\n          // Iframe an old page\n          return this.value.mgmt.emberEditPath;\n        }\n      }\n\n      return '';\n    },\n\n    rke2Enabled:   mapFeature(RKE2_FEATURE),\n    rke1UiEnabled: mapFeature(RKE1_UI),\n\n    // todo nb is this info stored anywhere else..?\n    selectedSubType() {\n      return this.subType ? this.subTypes.find((s) => s.id === this.subType) : null;\n    },\n\n    provisioner: {\n      get() {\n        // This can incorrectly return rke1 instead\n        // of rke2 for cluster owners.\n        if ( !this.rke2Enabled ) {\n          return _RKE1;\n        }\n\n        if ( !this.rke1UiEnabled ) {\n          return _RKE2;\n        }\n\n        return this.preferredProvisioner;\n      },\n\n      set(neu) {\n        this.preferredProvisioner = neu;\n      },\n    },\n\n    isRke1() {\n      return this.provisioner === _RKE1;\n    },\n\n    isRke2() {\n      return this.value.isRke2 || !this.isRke1;\n    },\n\n    templateOptions() {\n      if ( !this.rke2Enabled ) {\n        return [];\n      }\n\n      const out = filterAndArrangeCharts(this.allCharts, { showTypes: CATALOG._CLUSTER_TPL });\n\n      return out;\n    },\n\n    subTypes() {\n      const getters = this.$store.getters;\n      const isImport = this.isImport;\n      const isElementalActive = !!this.activeProducts.find((item) => item.name === ELEMENTAL_PRODUCT_NAME);\n      let out = [];\n\n      const templates = this.templateOptions;\n      const vueKontainerTypes = getters['plugins/clusterDrivers'];\n      const machineTypes = this.nodeDrivers.filter((x) => x.spec.active && x.state === 'active');\n\n      this.kontainerDrivers.filter((x) => (isImport ? x.showImport : x.showCreate)).forEach((obj) => {\n        if ( vueKontainerTypes.includes(obj.driverName) ) {\n          addType(obj.driverName, 'kontainer', false);\n        } else {\n          addType(obj.driverName, 'kontainer', false, (isImport ? obj.emberImportPath : obj.emberCreatePath));\n        }\n      });\n\n      if ( isImport ) {\n        addType('import', 'custom', false);\n      } else {\n        templates.forEach((chart) => {\n          out.push({\n            id:          `chart:${ chart.id }`,\n            label:       chart.chartNameDisplay,\n            description: chart.chartDescription,\n            icon:        chart.icon || require('~shell/assets/images/generic-catalog.svg'),\n            group:       'template',\n            tag:         getters['i18n/t']('generic.techPreview')\n          });\n        });\n\n        if (this.isRke1 ) {\n          machineTypes.forEach((type) => {\n            const id = type.spec.displayName || type.id;\n\n            addType(id, _RKE1, false, `/g/clusters/add/launch/${ id }`, this.iconClasses[id], type);\n          });\n\n          addType('custom', 'custom1', false, '/g/clusters/add/launch/custom');\n        } else {\n          machineTypes.forEach((type) => {\n            const id = type.spec.displayName || type.id;\n\n            addType(id, _RKE2, false, null, undefined, type);\n          });\n\n          addType('custom', 'custom2', false);\n\n          if (isElementalActive) {\n            addType(ELEMENTAL_CLUSTER_PROVIDER, 'custom2', false);\n          }\n        }\n\n        // Add from extensions\n        this.extensions.forEach((ext) => {\n          // if the rke toggle is set to rke1, don't add extensions that specify rke2 group\n          // default group is rke2\n          if (!this.isRke2 && (ext.group === _RKE2 || !ext.group)) {\n            return;\n          }\n          // Do not show the extension provisioner on the import cluster page unless its explicitly set to do so\n          if (isImport && !ext.showImport) {\n            return;\n          }\n          // Allow extensions to overwrite provisioners with the same id\n          out = out.filter((type) => type.id !== ext.id);\n          addExtensionType(ext, getters);\n        });\n      }\n\n      return out;\n\n      function addExtensionType(ext, getters) {\n        let iconClass = ext.iconClass;\n        let icon = ext.icon;\n\n        if (icon) {\n          iconClass = undefined;\n        } else if (!iconClass) {\n          icon = require('~shell/assets/images/generic-driver.svg');\n        }\n\n        const subtype = {\n          id:          ext.id,\n          label:       ext.label || getters['i18n/t'](`cluster.provider.${ ext.id }`),\n          description: ext.description,\n          icon,\n          iconClass,\n          group:       ext.group || _RKE2,\n          disabled:    ext.disabled || false,\n          link:        ext.link,\n          tag:         ext.tag,\n          component:   ext.component\n        };\n\n        out.push(subtype);\n      }\n\n      function addType(id, group, disabled = false, emberLink = null, iconClass = undefined, providerConfig = undefined) {\n        const label = getters['i18n/withFallback'](`cluster.provider.\"${ id }\"`, null, id);\n        const description = getters['i18n/withFallback'](`cluster.providerDescription.\"${ id }\"`, null, '');\n        const tag = '';\n\n        let icon;\n\n        try {\n          icon = require(`~shell/assets/images/providers/${ id }.svg`);\n        } catch (e) {}\n\n        if (icon) {\n          iconClass = undefined;\n        } else if (!iconClass) {\n          icon = require('~shell/assets/images/generic-driver.svg');\n        }\n\n        const subtype = {\n          id,\n          label,\n          description,\n          icon,\n          iconClass,\n          group,\n          disabled,\n          emberLink,\n          tag,\n          providerConfig\n        };\n\n        out.push(subtype);\n      }\n    },\n\n    groupedSubTypes() {\n      const out = {};\n\n      for ( const row of this.subTypes ) {\n        const name = row.group;\n        let entry = out[name];\n\n        if ( !entry ) {\n          entry = {\n            name,\n            label: this.$store.getters['i18n/withFallback'](`cluster.providerGroup.\"${ this.isImport ? 'register-' : 'create-' }${ name }\"`, null, name),\n            types: [],\n            sort:  SORT_GROUPS[name],\n          };\n\n          out[name] = entry;\n        }\n\n        entry.types.push(row);\n      }\n\n      for ( const k in out ) {\n        out[k].types = sortBy(out[k].types, 'label');\n      }\n\n      return sortBy(Object.values(out), 'sort');\n    },\n\n    firstNodeDriverItem() {\n      return this.groupedSubTypes.findIndex((obj) => [_RKE1, _RKE2].includes(obj.name));\n    },\n\n    firstCustomClusterItem() {\n      return this.groupedSubTypes.findIndex((obj) => ['custom', 'custom1', 'custom2'].includes(obj.name));\n    },\n  },\n\n  methods: {\n    showRkeToggle(i) {\n      if (this.isImport || !this.rke2Enabled) {\n        return false;\n      }\n\n      if (this.firstNodeDriverItem >= 0) {\n        return i === this.firstNodeDriverItem;\n      }\n\n      return i === this.firstCustomClusterItem;\n    },\n\n    loadStylesheet(url, id) {\n      if ( !id ) {\n        console.error('loadStylesheet called without an id'); // eslint-disable-line no-console\n\n        return;\n      }\n\n      // Check if the stylesheet has already been loaded\n      if ( $(`#${id}`).length > 0 ) { // eslint-disable-line\n        return;\n      }\n\n      const link = document.createElement('link');\n\n      link.onerror = () => {\n        link.remove();\n      };\n      link.rel = 'stylesheet';\n      link.src = url;\n      link.href = url;\n      link.id = id;\n      document.getElementsByTagName('HEAD')[0].appendChild(link);\n    },\n\n    cancel() {\n      this.$router.push({\n        name:   'c-cluster-product-resource',\n        params: {\n          cluster:  this.$route.params.cluster,\n          product:  this.$store.getters['productId'],\n          resource: CAPI.RANCHER_CLUSTER,\n        },\n      });\n    },\n\n    colorFor(obj) {\n      return `color${ SORT_GROUPS[obj.group] || 1 }`;\n    },\n\n    clickedType(obj) {\n      const id = obj.id;\n      const parts = id.split(':', 2);\n\n      if ( parts[0] === 'chart' ) {\n        const chart = this.$store.getters['catalog/chart']({ key: parts[1] });\n        let localCluster;\n\n        if (this.$store.getters[`management/canList`](MANAGEMENT.CLUSTER)) {\n          localCluster = this.$store.getters['management/all'](MANAGEMENT.CLUSTER).find((x) => x.isLocal);\n        }\n\n        chart.goToInstall(FROM_CLUSTER, localCluster?.id || BLANK_CLUSTER, true);\n\n        return;\n      }\n      if (obj.link) {\n        this.$router.push(obj.link);\n\n        return;\n      }\n\n      this.$router.applyQuery({ [SUB_TYPE]: id, [RKE_TYPE]: this.preferredProvisioner });\n      this.selectType(id);\n    },\n\n    selectType(type, fetch = true) {\n      const parts = type.split(':', 2);\n\n      if ( parts[0] === 'chart' ) {\n        this.subType = 'chart';\n        this.$emit('set-subtype', this.$store.getters['i18n/withFallback'](`cluster.provider.chart`));\n      } else {\n        this.subType = type;\n        this.$emit('set-subtype', this.$store.getters['i18n/withFallback'](`cluster.provider.\"${ type }\"`, null, type));\n      }\n\n      if ( fetch ) {\n        this.$fetch();\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div\n    v-else-if=\"emberLink\"\n    class=\"embed\"\n  >\n    <EmberPage\n      :force-new=\"true\"\n      :src=\"emberLink\"\n    />\n  </div>\n  <CruResource\n    v-else\n    :mode=\"mode\"\n    :validation-passed=\"true\"\n    :selected-subtype=\"subType\"\n    :resource=\"value\"\n    :errors=\"errors\"\n    :subtypes=\"subTypes\"\n    :cancel-event=\"true\"\n    :prevent-enter-submit=\"true\"\n    class=\"create-cluster\"\n    @finish=\"save\"\n    @cancel=\"cancel\"\n    @select-type=\"selectType\"\n    @error=\"e=>errors = e\"\n  >\n    <template #subtypes>\n      <div\n        v-for=\"(obj, i) in groupedSubTypes\"\n        :key=\"obj.id\"\n        class=\"mb-20\"\n        style=\"width: 100%;\"\n      >\n        <h4>\n          <div\n            v-if=\"showRkeToggle(i) && rke1UiEnabled\"\n            class=\"grouped-type\"\n          >\n            <ToggleSwitch\n              v-model=\"provisioner\"\n              data-testid=\"cluster-manager-create-rke-switch\"\n              class=\"rke-switch\"\n              :off-value=\"_RKE1\"\n              :off-label=\"t('cluster.toggle.v1')\"\n              :on-value=\"_RKE2\"\n              :on-label=\"t('cluster.toggle.v2')\"\n            />\n          </div>\n          {{ obj.label }}\n        </h4>\n        <SelectIconGrid\n          :rows=\"obj.types\"\n          key-field=\"id\"\n          name-field=\"label\"\n          side-label-field=\"tag\"\n          :color-for=\"colorFor\"\n          :component-testid=\"'cluster-manager-create-grid-' + i\"\n          @clicked=\"clickedType\"\n        />\n      </div>\n    </template>\n\n    <Import\n      v-if=\"isImport\"\n      v-model=\"value\"\n      :mode=\"mode\"\n      :provider=\"subType\"\n    />\n    <template v-else-if=\"subType\">\n      <!-- allow extensions to provide their own cluster provisioning form -->\n      <component\n        :is=\"selectedSubType.component\"\n        v-if=\"selectedSubType && selectedSubType.component\"\n        v-model=\"value\"\n        :initial-value=\"initialValue\"\n        :live-value=\"liveValue\"\n        :mode=\"mode\"\n        :provider=\"subType\"\n        :provider-config=\"selectedSubType.providerConfig\"\n      />\n      <Rke2Config\n        v-else\n        v-model=\"value\"\n        :initial-value=\"initialValue\"\n        :live-value=\"liveValue\"\n        :mode=\"mode\"\n        :provider=\"subType\"\n        :provider-config=\"selectedSubType.providerConfig\"\n      />\n    </template>\n\n    <template\n      v-if=\"subType\"\n      #form-footer\n    >\n      <div><!-- Hide the outer footer --></div>\n    </template>\n  </CruResource>\n</template>\n\n<style lang='scss'>\n  .grouped-type {\n    position: relative;\n  }\n\n  .rke-switch {\n    margin-top: -10px;\n    position: absolute;\n    right: 0;\n  }\n</style>\n"],"mappings":"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","ignoreList":[]}]}