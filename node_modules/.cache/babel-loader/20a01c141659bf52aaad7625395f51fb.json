{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/steve/resourceWatcher.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/steve/resourceWatcher.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["Socket","NO_WATCH","NO_SCHEMA","EVENT_CONNECTED","REVISION_TOO_OLD","WATCH_STATUSES","WATCH_PENDING","WATCH_REQUESTED","WATCHING","STOPPED","REMOVE_PENDING","REMOVE_REQUESTED","keyForSubscribe","_ref","arguments","length","undefined","resourceType","type","namespace","id","selector","filter","param","join","watchKeyFromMessage","msg","watchObject","REQUESTED_REMOVE","ResourceWatcher","_Socket","url","_this","autoReconnect","frameTimeout","protocol","maxTries","csrf","_classCallCheck","_callSuper","watches","status","debugWatcher","baseUrl","self","location","origin","replace","addEventListener","e","trace","Object","values","forEach","watch","error","watchKey","includes","unwatch","_inherits","_createClass","key","value","_console","_len","args","Array","_key","console","info","apply","concat","setDebug","on","watchExists","_this$watches","providedResourceVersion","providedResourceVersionTime","_this$watches2","_this$watches3","_this$watches5","_this$watches6","_this$watches7","_this$watches8","_this$watches9","_this$watches10","_this$watches11","providedKeyParts","providedSkipResourceVersion","providedResourceType","providedId","providedNamespace","providedSelector","providedForce","force","_this$watches4","reason","skipResourceVersion","resourceVersionTime","resourceVersion","success","send","JSON","stringify","_objectSpread","_this$watches12","stop","_onmessage","event","_this$watches13","_this$watches14","_JSON$parse","parse","data","eventName","name","_this$watches$watchKe","_data$error","err","toLowerCase","dispatchEvent","CustomEvent","detail","_get","_getPrototypeOf","prototype","call","default"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/steve/resourceWatcher.js"],"sourcesContent":["/**\n * Imports in a worker cannot include exports from the file invoking the worker or from files importing the invoking file.\n */\n\nimport Socket, {\n  NO_WATCH,\n  NO_SCHEMA,\n  EVENT_CONNECTED,\n  REVISION_TOO_OLD\n} from '@shell/utils/socket';\n\nexport const WATCH_STATUSES = {\n  /**\n   * watch has been asked for this resource but not request has not successfully been sent\n   */\n  WATCH_PENDING:    'pending',\n  /**\n   * requested but not confirmed by the socket yet\n   */\n  WATCH_REQUESTED:  'requested',\n  /**\n   * confirmed as active by the socket\n   */\n  WATCHING:         'watching',\n  /**\n   * temporarily stopped via message from the socket, a watch should immediately be triggered but the maintenance cycle will pick it up if that doesn't happen.\n   */\n  STOPPED:          'stopped',\n  /**\n   * stop has been asked for this resource, but request has not successfully been sent\n   */\n  REMOVE_PENDING:   'removed_pending',\n  /**\n   * stop request has been sent to the socket or it's been stopped by the socket itself and is now awaiting a resource.stop message\n   */\n  REMOVE_REQUESTED: 'removed_requested'\n};\n\nexport const keyForSubscribe = ({\n  resourceType, type, namespace, id, selector\n} = {}) => {\n  return [(resourceType || type), namespace, id, selector] // each watch param in an array\n    .filter((param) => !!param) // filter out all the empty ones // the filter makes these keys neater\n    .join('/'); // join into a string so we can use it as an object key\n};\n\nexport const watchKeyFromMessage = (msg) => {\n  const {\n    resourceType,\n    namespace,\n    id,\n    selector\n  } = msg;\n\n  const watchObject = {\n    resourceType,\n    id,\n    namespace,\n    selector\n  };\n\n  return keyForSubscribe(watchObject);\n};\n\nconst {\n  WATCH_PENDING, WATCH_REQUESTED, WATCHING, REMOVE_PENDING, REQUESTED_REMOVE\n} = WATCH_STATUSES;\n\nexport default class ResourceWatcher extends Socket {\n  watches = {};\n  status = '';\n  debugWatcher = false;\n  csrf;\n\n  constructor(url, autoReconnect = true, frameTimeout = null, protocol = null, maxTries = null, csrf) {\n    super(url, autoReconnect, frameTimeout, protocol, maxTries, true);\n    this.baseUrl = self.location.origin + url.replace('subscribe', '');\n    this.csrf = csrf;\n\n    this.addEventListener(EVENT_CONNECTED, (e) => {\n      this.trace(EVENT_CONNECTED, ': processing previously requested or watched resources');\n\n      Object.values(this.watches).forEach((watch) => {\n        const { status, error } = watch;\n        const watchKey = keyForSubscribe(watch);\n\n        if ([WATCH_PENDING, WATCH_REQUESTED, WATCHING].includes(status) && !error) {\n          this.trace(EVENT_CONNECTED, ': re-watching previously required resource', watchKey, status);\n          this.watches[watchKey].status = WATCH_PENDING;\n          this.watch(watchKey);\n        } else if ([REMOVE_PENDING].includes(status)) {\n          this.trace(EVENT_CONNECTED, ': un-watching previously watched resource', watchKey, status);\n          this.watches[watchKey].status = REMOVE_PENDING;\n          this.unwatch(watchKey);\n        }\n      });\n    });\n  }\n\n  trace(...args) {\n    this.debugWatcher && console.info('Resource Watcher:', ...args); // eslint-disable-line no-console\n  }\n\n  setDebug(on) {\n    this.debugWatcher = !!on;\n  }\n\n  watchExists(watchKey) {\n    return !!this.watches?.[watchKey];\n  }\n\n  watch(watchKey, providedResourceVersion, providedResourceVersionTime, providedKeyParts = {}, providedSkipResourceVersion) {\n    const {\n      resourceType: providedResourceType,\n      id: providedId,\n      namespace: providedNamespace,\n      selector: providedSelector,\n      force: providedForce,\n    } = providedKeyParts;\n\n    this.trace('watch:', 'requested', watchKey);\n\n    if ([WATCH_REQUESTED, WATCHING].includes(this.watches?.[watchKey]?.status)) {\n      this.trace('watch:', 'already requested or watching, aborting', watchKey);\n\n      return;\n    }\n\n    if (!providedForce && this.watches?.[watchKey]?.error) {\n      if (this.watches?.[watchKey]?.error.reason !== REVISION_TOO_OLD) {\n        this.trace('watch:', 'in error, aborting', watchKey);\n      }\n\n      return;\n    }\n\n    const resourceType = providedResourceType || this.watches?.[watchKey]?.resourceType;\n    const id = providedId || this.watches?.[watchKey]?.id;\n    const namespace = providedNamespace || this.watches?.[watchKey]?.namespace;\n    const selector = providedSelector || this.watches?.[watchKey]?.selector;\n    const skipResourceVersion = this.watches?.[watchKey]?.skipResourceVersion || providedSkipResourceVersion;\n\n    const watchObject = {\n      resourceType,\n      id,\n      namespace,\n      selector\n    };\n\n    const resourceVersionTime = providedResourceVersionTime || this.watches?.[watchKey]?.resourceVersionTime;\n    const resourceVersion = providedResourceVersion || this.watches?.[watchKey]?.resourceVersion;\n\n    const success = this.send(JSON.stringify({\n      ...watchObject,\n      resourceVersion: !skipResourceVersion ? resourceVersion : undefined\n    }));\n\n    this.watches[watchKey] = {\n      ...watchObject,\n      status: success ? WATCH_STATUSES.WATCH_REQUESTED : WATCH_STATUSES.WATCH_PENDING,\n      resourceVersion,\n      resourceVersionTime,\n      skipResourceVersion\n    };\n  }\n\n  unwatch(watchKey) {\n    const watch = this.watches?.[watchKey] || {};\n    const {\n      resourceType, id, namespace, selector\n    } = watch;\n    const watchObject = {\n      resourceType,\n      id,\n      namespace,\n      selector\n    };\n\n    if (resourceType && this.watches[watchKey].status !== REQUESTED_REMOVE) {\n      const success = this.send(JSON.stringify({\n        ...watchObject,\n        stop: true\n      }));\n\n      this.watches[watchKey].status = success ? REQUESTED_REMOVE : REMOVE_PENDING;\n    }\n  }\n\n  /**\n   * Handles message from Backend to UI\n   */\n  _onmessage(event) {\n    const {\n      name: eventName, resourceType, data: { type }, id, namespace, selector, data\n    } = JSON.parse(event.data);\n    const watchKey = keyForSubscribe({\n      resourceType,\n      type,\n      id,\n      namespace,\n      selector\n    });\n\n    if (eventName === 'resource.start' && this.watches?.[watchKey]?.status === WATCH_REQUESTED) {\n      this.watches[watchKey].status = WATCHING;\n      delete this.watches[watchKey].error;\n    } else if (eventName === 'resource.stop' && this.watches?.[watchKey]) {\n      // Find some way to resolve the correct resourceVersion from within the resourceWatcher until then:\n      // reset the watch in the resourceWatcher, we'll handle recovery up the chain. For now\n      // dispatch the event to the host process which should have a handler for resource.stop\n\n      // if (this.watches?.[watchKey]?.status === REQUESTED_REMOVE) {\n      this.watches[watchKey] = { error: this.watches[watchKey]?.error };\n      // } else {\n      //   this.watches[watchKey].status = STOPPED;\n      //   delete this.watches[watchKey].resourceVersion;\n      //   delete this.watches[watchKey].resourceVersionTime;\n      //   this.watch(watchKey);\n      //   this.dispatchEvent(new CustomEvent(EVENT_MESSAGE, { detail: event }));\n      // }\n    } else if (eventName === 'resource.error') {\n      const err = data?.error?.toLowerCase();\n\n      if ( this.watches[watchKey] && err.includes('watch not allowed') ) {\n        this.watches[watchKey].error = { type: resourceType, reason: NO_WATCH };\n      } else if ( this.watches[watchKey] && err.includes('failed to find schema') ) {\n        // This can happen when the cattle-cluster-agent goes down (redeploy deployment, kill pod, etc)\n        // The previous method was just to track the error and block any further attempts to watch (canWatch)\n        // This method means we can retry on the next findX (should be safe, unless there are other use cases...)\n\n        this.watches[watchKey].error = { type: resourceType, reason: NO_SCHEMA };\n      } else if ( err.includes('too old') ) {\n        delete this.watches[watchKey].resourceVersion;\n        delete this.watches[watchKey].resourceVersionTime;\n        delete this.watches[watchKey].skipResourceVersion;\n        this.watches[watchKey].error = { type: resourceType, reason: REVISION_TOO_OLD };\n        // Needs to match sub resyncWatch params\n        this.dispatchEvent(new CustomEvent('resync', {\n          detail: {\n            data: {\n              resourceType, id, namespace, selector\n            }\n          }\n        }));\n      }\n      this.trace('_onmessage:', 'new error', this.watches[watchKey].error);\n    }\n\n    super._onmessage(event);\n  }\n}\n"],"mappings":"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","ignoreList":[]}]}