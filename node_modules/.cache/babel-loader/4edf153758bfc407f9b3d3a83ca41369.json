{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/store/auth.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/store/auth.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["GITHUB_NONCE","GITHUB_REDIRECT","GITHUB_SCOPE","NORMAN","_MULTI","addObjects","findBy","openAuthPopup","returnTo","base64Encode","removeEmberPage","randomStr","addParams","parse","parseUrl","removeParam","BASE_SCOPES","github","googleoauth","azuread","keycloakoidc","KEY","ERR_NONCE","LOGIN_ERRORS","CLIENT","CLIENT_UNAUTHORIZED","SERVER","state","fromHeader","hasAuth","loggedIn","principalId","v3User","initialPass","getters","enabled","isGithub","startsWith","mutations","gotHeader","gotUser","_objectSpread","loggedInAs","$cookies","remove","loggedOut","pass","actions","_ref","commit","getUser","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","dispatch","user","wrap","_callee$","_context","prev","next","abrupt","type","USER","opt","url","filter","me","load","root","sent","t0","stop","_ref3","setInitialPass","_ref4","getAuthProviders","_ref5","watch","getAuthConfigs","_ref6","getAuthProvider","_ref7","id","_callee2","authProviders","_callee2$","_context2","getAuthConfig","_ref8","_callee3","authConfigs","_callee3$","_context3","createNonce","ctx","out","nonce","to","test","provider","saveNonce","strung","JSON","stringify","set","path","sameSite","secure","encodeNonce","redirectTo","_ref9","_arguments","arguments","_callee4","_parseUrl$query","redirectUrl","driver","returnToUrl","_params","baseNonce","encodedNonce","fromQuery","scopes","params","_callee4$","_context4","length","undefined","concat","window","location","origin","response_type","response_mode","persistNonce","unescape","query","split","x","_defineProperty","join","scopesJoinChar","includes","redirect","href","verifyOAuth","_ref10","_ref11","code","expectJSON","get","parseJSON","parsed","_unused2","expect","body","pkceCodeVerifier","code_verifier","_ref12","_ref13","_this","_callee5","_driver$actions","finalRedirectUrl","res","idpRedirectUrl","_res","_callee5$","_context5","testAndEnable","config","doAction","Promise","reject","login","_ref14","_ref15","_callee6","_callee6$","_context6","description","responseType","redirectUnauthorized","_status","message","logout","_ref16","_this2","_callee7","_callee7$","_context7","$plugin","method","data","headers"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/store/auth.js"],"sourcesContent":["import { GITHUB_NONCE, GITHUB_REDIRECT, GITHUB_SCOPE } from '@shell/config/query-params';\nimport { NORMAN } from '@shell/config/types';\nimport { _MULTI } from '@shell/plugins/dashboard-store/actions';\nimport { addObjects, findBy } from '@shell/utils/array';\nimport { openAuthPopup, returnTo } from '@shell/utils/auth';\nimport { base64Encode } from '@shell/utils/crypto';\nimport { removeEmberPage } from '@shell/utils/ember-page';\nimport { randomStr } from '@shell/utils/string';\nimport { addParams, parse as parseUrl, removeParam } from '@shell/utils/url';\n\nexport const BASE_SCOPES = {\n  github:       ['read:org'],\n  googleoauth:  ['openid profile email'],\n  azuread:      [],\n  keycloakoidc: ['openid profile email']\n};\n\nconst KEY = 'rc_nonce';\n\nconst ERR_NONCE = 'nonce';\n\nexport const LOGIN_ERRORS = {\n  CLIENT:              'client',\n  CLIENT_UNAUTHORIZED: 'client_unauthorized',\n  SERVER:              'server'\n};\n\nexport const state = function() {\n  return {\n    fromHeader:  null,\n    hasAuth:     null,\n    loggedIn:    false,\n    principalId: null,\n    v3User:      null,\n    initialPass: null,\n  };\n};\n\nexport const getters = {\n  fromHeader() {\n    return state.fromHeader;\n  },\n\n  enabled(state) {\n    return state.hasAuth;\n  },\n\n  loggedIn(state) {\n    return state.loggedIn;\n  },\n\n  principalId(state) {\n    return state.principalId;\n  },\n\n  v3User(state) {\n    return state.v3User;\n  },\n\n  initialPass(state) {\n    return state.initialPass;\n  },\n\n  isGithub(state) {\n    return state.principalId && state.principalId.startsWith('github_user://');\n  }\n};\n\nexport const mutations = {\n  gotHeader(state, fromHeader) {\n    state.fromHeader = fromHeader;\n  },\n\n  gotUser(state, v3User) {\n    // Always deference to avoid race condition when setting `mustChangePassword`\n    state.v3User = { ...v3User };\n  },\n\n  hasAuth(state, hasAuth) {\n    state.hasAuth = !!hasAuth;\n  },\n\n  loggedInAs(state, principalId) {\n    state.loggedIn = true;\n    state.principalId = principalId;\n\n    this.$cookies.remove(KEY);\n  },\n\n  loggedOut(state) {\n    // Note: plugin/norman/index watches for this mutation\n    // to automatically disconnect subscribe sockets.\n\n    state.loggedIn = false;\n    state.principalId = null;\n    state.v3User = null;\n    state.initialPass = null;\n  },\n\n  initialPass(state, pass) {\n    state.initialPass = pass;\n  }\n};\n\nexport const actions = {\n  gotHeader({ commit }, fromHeader) {\n    commit('gotHeader', fromHeader);\n  },\n\n  async getUser({ dispatch, commit, getters }) {\n    if (getters.v3User) {\n      return;\n    }\n\n    try {\n      const user = await dispatch('rancher/findAll', {\n        type: NORMAN.USER,\n        opt:  {\n          url:    '/v3/users',\n          filter: { me: true },\n          load:   _MULTI\n        }\n      }, { root: true });\n\n      commit('gotUser', user?.[0]);\n    } catch { }\n  },\n\n  gotUser({ commit }, user) {\n    commit('gotUser', user);\n  },\n\n  setInitialPass({ commit }, pass) {\n    commit('initialPass', pass);\n  },\n\n  getAuthProviders({ dispatch }) {\n    return dispatch('rancher/findAll', {\n      type: 'authProvider',\n      opt:  { url: `/v3-public/authProviders`, watch: false }\n    }, { root: true });\n  },\n\n  getAuthConfigs({ dispatch }) {\n    return dispatch('rancher/findAll', {\n      type: 'authConfig',\n      opt:  { url: `/v3/authConfigs` }\n    }, { root: true });\n  },\n\n  async getAuthProvider({ dispatch }, id) {\n    const authProviders = await dispatch('getAuthProviders');\n\n    return findBy(authProviders, 'id', id);\n  },\n\n  async getAuthConfig({ dispatch }, id) {\n    const authConfigs = await dispatch('getAuthConfigs');\n\n    return findBy(authConfigs, 'id', id);\n  },\n\n  /**\n   * Create the basic json object used for the nonce (this includes the random nonce/state)\n   */\n  createNonce(ctx, opt) {\n    const out = { nonce: randomStr(16), to: 'vue' };\n\n    if ( opt.test ) {\n      out.test = true;\n    }\n\n    if (opt.provider) {\n      out.provider = opt.provider;\n    }\n\n    return out;\n  },\n\n  /**\n   * Save nonce details. Information it contains will be used to validate auth requests/responses\n   * Note - this may be structurally different than the nonce we encode and send\n   */\n  saveNonce(ctx, opt) {\n    const strung = JSON.stringify(opt);\n\n    this.$cookies.set(KEY, strung, {\n      path:     '/',\n      sameSite: true,\n      secure:   true,\n    });\n\n    return strung;\n  },\n\n  /**\n   * Convert the nonce into something we can send\n   */\n  encodeNonce(ctx, nonce) {\n    const stringify = JSON.stringify(nonce);\n\n    return base64Encode(stringify, 'url');\n  },\n\n  async redirectTo({ state, commit, dispatch }, opt = {}) {\n    const provider = opt.provider;\n    let redirectUrl = opt.redirectUrl;\n\n    if ( !redirectUrl ) {\n      const driver = await dispatch('getAuthProvider', provider);\n\n      redirectUrl = driver.redirectUrl;\n    }\n    let returnToUrl = `${ window.location.origin }/verify-auth`;\n\n    if (provider === 'azuread') {\n      const params = { response_type: 'code', response_mode: 'query' };\n\n      redirectUrl = addParams(redirectUrl, params );\n      returnToUrl = `${ window.location.origin }/verify-auth-azure`;\n    }\n\n    // The base nonce that will be sent server way\n    const baseNonce = opt.nonce || await dispatch('createNonce', opt);\n\n    // Save a possibly expanded nonce\n    await dispatch('saveNonce', opt.persistNonce || baseNonce);\n    // Convert the base nonce in to something we can transmit\n    const encodedNonce = await dispatch('encodeNonce', baseNonce);\n\n    const fromQuery = unescape(parseUrl(redirectUrl).query?.[GITHUB_SCOPE] || '');\n    const scopes = fromQuery.split(/[, ]+/).filter((x) => !!x);\n\n    if (BASE_SCOPES[provider]) {\n      addObjects(scopes, BASE_SCOPES[provider]);\n    }\n\n    if ( opt.scopes ) {\n      addObjects(scopes, opt.scopes);\n    }\n\n    let url = removeParam(redirectUrl, GITHUB_SCOPE);\n\n    const params = {\n      [GITHUB_SCOPE]: scopes.join(opt.scopesJoinChar || ','), // Some providers won't accept comma separated scopes\n      [GITHUB_NONCE]: encodedNonce\n    };\n\n    if (!url.includes(GITHUB_REDIRECT)) {\n      params[GITHUB_REDIRECT] = returnToUrl;\n    }\n\n    url = addParams(url, params);\n\n    if ( opt.redirect === false ) {\n      return url;\n    } else {\n      window.location.href = url;\n    }\n  },\n\n  verifyOAuth({ dispatch }, { nonce, code, provider }) {\n    const expectJSON = this.$cookies.get(KEY, { parseJSON: false });\n    let parsed;\n\n    try {\n      parsed = JSON.parse(expectJSON);\n    } catch {\n      return ERR_NONCE;\n    }\n\n    const expect = parsed.nonce;\n\n    if ( !expect || expect !== nonce ) {\n      return ERR_NONCE;\n    }\n\n    const body = { code };\n\n    // If the request came with a pkce code ensure we also sent that in the verify\n    if (parsed.pkceCodeVerifier) {\n      body.code_verifier = parsed.pkceCodeVerifier;\n    }\n\n    return dispatch('login', {\n      provider,\n      body\n    });\n  },\n\n  async test({ dispatch }, { provider, body }) {\n    const driver = await dispatch('getAuthConfig', provider);\n\n    try {\n      // saml providers\n      if (!!driver?.actions?.testAndEnable) {\n        const finalRedirectUrl = returnTo({ config: provider }, this);\n\n        const res = await driver.doAction('testAndEnable', { finalRedirectUrl });\n\n        const { idpRedirectUrl } = res;\n\n        return openAuthPopup(idpRedirectUrl, provider);\n      } else {\n      // github, google, azuread, oidc\n        const res = await driver.doAction('configureTest', body);\n        const { redirectUrl } = res;\n\n        const url = await dispatch('redirectTo', {\n          provider,\n          redirectUrl,\n          test:     true,\n          redirect: false\n        });\n\n        return openAuthPopup(url, provider);\n      }\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  },\n\n  async login({ dispatch }, { provider, body }) {\n    const driver = await dispatch('getAuthProvider', provider);\n\n    try {\n      const res = await driver.doAction('login', {\n        description:  'UI session',\n        responseType: 'cookie',\n        ...body\n      }, { redirectUnauthorized: false });\n\n      return res;\n    } catch (err) {\n      if (err._status === 401) {\n        return Promise.reject(LOGIN_ERRORS.CLIENT_UNAUTHORIZED);\n      } else if (err.message) {\n        return Promise.reject(err.message);\n      } else if ( err._status >= 400 && err._status <= 499 ) {\n        return Promise.reject(LOGIN_ERRORS.CLIENT);\n      }\n\n      return Promise.reject(LOGIN_ERRORS.SERVER);\n    }\n  },\n\n  async logout({ dispatch, commit }) {\n    // Unload plugins - we will load again on login\n    await this.$plugin.logout();\n\n    try {\n      await dispatch('rancher/request', {\n        url:                  '/v3/tokens?action=logout',\n        method:               'post',\n        data:                 {},\n        headers:              { 'Content-Type': 'application/json' },\n        redirectUnauthorized: false,\n      }, { root: true });\n    } catch (e) {\n    }\n\n    removeEmberPage();\n\n    commit('loggedOut');\n    dispatch('onLogout', null, { root: true });\n  }\n};\n"],"mappings":"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","ignoreList":[]}]}