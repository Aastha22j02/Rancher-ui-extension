{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js??ref--16-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/dashboard-store/getters.js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/dashboard-store/getters.js","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/babel.config.js","mtime":1725268750245},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"names":["SCHEMA","COUNT","matches","typeMunge","typeRef","SIMPLE_TYPES","splitObjectPath","parseType","Resource","mutations","keyFieldFor","normalizeType","lookup","garbageCollect","urlFor","state","getters","type","id","opt","url","schema","schemaFor","Error","concat","links","collection","startsWith","baseUrl","config","replace","urlOptions","matchingCounts","typeObj","namespaces","namespaced","byNamespace","count","out","_iterator","_createForOfIteratorHelper","_step","s","n","done","_typeObj$byNamespace$","namespace","value","err","e","f","all","rootState","typeRegistered","console","warn","registerType","gcUpdateLastAccessed","types","list","matching","selector","arguments","length","undefined","skipSelector","filter","obj","byId","entry","map","get","pathExistsInSchema","path","parts","_schema$resourceField","key","shift","resourceFields","pop","schemas","keyField","keyFieldForType","find","x","thisOne","endsWith","schemaName","res","arrayRes","Array","isArray","entries","sort","a","b","fuzzy","allowThrow","close","defaultFor","field","mapOf","arrayOf","referenceTo","includes","canList","hasLink","typeEntry","haveAll","haveAllNamespace","haveNamespace","_state$types$type","haveSelector","storeName","defaultModel","classify","_obj$metadata","metadata","name","cleanResource","existing","data","isClusterStore","loadCounter","gcIgnoreTypes","rootGetters","_typeObj","_typeObj2","JSON","stringify","_getters$all","_schema$attributes","counts","summary","revision","attributes","Object","keys","activeNamespaceCache"],"sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/plugins/dashboard-store/getters.js"],"sourcesContent":["\nimport { SCHEMA, COUNT } from '@shell/config/types';\n\nimport { matches } from '@shell/utils/selector';\nimport { typeMunge, typeRef, SIMPLE_TYPES } from '@shell/utils/create-yaml';\nimport { splitObjectPath } from '@shell/utils/string';\nimport { parseType } from '@shell/models/schema';\nimport Resource from '@shell/plugins/dashboard-store/resource-class';\nimport mutations from './mutations';\nimport { keyFieldFor, normalizeType } from './normalize';\nimport { lookup } from './model-loader';\nimport garbageCollect from '@shell/utils/gc/gc';\n\nexport const urlFor = (state, getters) => (type, id, opt) => {\n  opt = opt || {};\n  type = getters.normalizeType(type);\n  let url = opt.url;\n\n  if ( !url ) {\n    const schema = getters.schemaFor(type);\n\n    if ( !schema ) {\n      throw new Error(`Unknown schema for type: ${ type }`);\n    }\n\n    url = schema.links.collection;\n\n    if ( !url ) {\n      throw new Error(`You don't have permission to list this type: ${ type }`);\n    }\n\n    if ( id ) {\n      url += `/${ id }`;\n    }\n  }\n\n  if ( !url.startsWith('/') && !url.startsWith('http') ) {\n    const baseUrl = state.config.baseUrl.replace(/\\/$/, '');\n\n    url = `${ baseUrl }/${ url }`;\n  }\n\n  url = getters.urlOptions(url, opt);\n\n  return url;\n};\n\n/**\n * Find the number of resources given\n * - if the type is namespaced\n * - if there are any counts per namespace\n * - if there are no namespaces\n * - if there is no total count\n */\nfunction matchingCounts(typeObj, namespaces) {\n  // That was easy\n  if ( !typeObj.namespaced || !typeObj.byNamespace || namespaces === null || typeObj.count === null) {\n    return typeObj.count;\n  }\n\n  let out = 0;\n\n  // Otherwise start with 0 and count up\n  for ( const namespace of namespaces ) {\n    out += typeObj.byNamespace[namespace]?.count || 0;\n  }\n\n  return out;\n}\n\nexport default {\n\n  all: (state, getters, rootState) => (type) => {\n    type = getters.normalizeType(type);\n\n    if ( !getters.typeRegistered(type) ) {\n      // Yes this is mutating state in a getter... it's not the end of the world..\n      // throw new Error(`All of ${ type } is not loaded`);\n      console.warn(`All of ${ type } is not loaded yet`); // eslint-disable-line no-console\n      mutations.registerType(state, type);\n    }\n\n    garbageCollect.gcUpdateLastAccessed({\n      state, getters, rootState\n    }, type);\n\n    return state.types[type].list;\n  },\n\n  matching: (state, getters, rootState) => (type, selector, namespace, config = { skipSelector: false }) => {\n    let matching = getters['all'](type);\n\n    // Filter first by namespace if one is provided, since this is efficient\n    if (namespace && typeof namespace === 'string') {\n      matching = matching.filter((obj) => obj.namespace === namespace);\n    }\n\n    garbageCollect.gcUpdateLastAccessed({\n      state, getters, rootState\n    }, type);\n\n    // Looks like a falsy selector is a thing, so if we're not interested in filtering by the selector... explicitly avoid it\n    if (config.skipSelector) {\n      return matching;\n    }\n\n    return matching.filter((obj) => {\n      return matches(obj, selector);\n    });\n  },\n\n  byId: (state, getters, rootState) => (type, id) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      garbageCollect.gcUpdateLastAccessed({\n        state, getters, rootState\n      }, type);\n\n      return entry.map.get(id);\n    }\n  },\n\n  pathExistsInSchema: (state, getters) => (type, path) => {\n    let schema = getters.schemaFor(type);\n    const parts = splitObjectPath(path);\n\n    while ( parts.length ) {\n      const key = parts.shift();\n\n      type = schema.resourceFields?.[key]?.type;\n\n      if ( !type ) {\n        return false;\n      }\n\n      if ( parts.length ) {\n        type = parseType(type).pop(); // Get the main part of array[map[something]] => something\n        schema = getters.schemaFor(type);\n\n        if ( !schema ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  },\n\n  // @TODO resolve difference between this and schemaFor and have only one of them.\n  schema: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const schemas = state.types[SCHEMA];\n    const keyField = getters.keyFieldForType(SCHEMA);\n\n    return schemas.list.find((x) => {\n      const thisOne = getters.normalizeType(x[keyField]);\n\n      return thisOne === type || thisOne.endsWith(`.${ type }`);\n    });\n  },\n\n  // Fuzzy search to find a matching schema name for plugins/lookup\n  schemaName: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const schemas = state.types[SCHEMA];\n    const keyField = getters.keyFieldForType(SCHEMA);\n    const res = schemas.list.find((x) => {\n      const thisOne = getters.normalizeType(x[keyField]);\n\n      return thisOne === type || thisOne.endsWith(`.${ type }`);\n    });\n\n    if (!res) {\n      return;\n    }\n    const arrayRes = Array.isArray(res) ? res : [res];\n    const entries = arrayRes.map((x) => {\n      return x[keyField];\n    }).sort((a, b) => {\n      return a.length - b.length;\n    });\n\n    if ( entries[0] ) {\n      return entries[0];\n    }\n\n    return type;\n  },\n\n  // Fuzzy is only for plugins/lookup, do not use in real code\n  schemaFor: (state, getters) => (type, fuzzy = false, allowThrow = true) => {\n    const schemas = state.types[SCHEMA];\n\n    type = getters.normalizeType(type);\n\n    if ( !schemas ) {\n      if ( allowThrow ) {\n        throw new Error(\"Schemas aren't loaded yet\");\n      } else {\n        return null;\n      }\n    }\n\n    const out = schemas.map.get(type);\n\n    if ( !out && fuzzy ) {\n      const close = getters.schemaName(type);\n\n      if ( close ) {\n        return getters.schemaFor(close);\n      }\n    }\n\n    return out;\n  },\n\n  defaultFor: (state, getters) => (type) => {\n    const schema = getters['schemaFor'](type);\n\n    if ( !schema ) {\n      return null;\n    }\n\n    const out = {};\n\n    for ( const key in schema.resourceFields ) {\n      const field = schema.resourceFields[key];\n\n      if ( !field ) {\n        // Not much to do here...\n        continue;\n      }\n\n      const type = typeMunge(field.type);\n      const mapOf = typeRef('map', type);\n      const arrayOf = typeRef('array', type);\n      const referenceTo = typeRef('reference', type);\n\n      if ( mapOf || type === 'map' || type === 'json' ) {\n        out[key] = getters.defaultFor(type);\n      } else if ( arrayOf || type === 'array' ) {\n        out[key] = [];\n      } else if ( referenceTo ) {\n        out[key] = undefined;\n      } else if ( SIMPLE_TYPES.includes(type) ) {\n        if ( typeof field['default'] === 'undefined' ) {\n          out[key] = undefined;\n        } else {\n          out[key] = field['default'];\n        }\n      } else {\n        out[key] = getters.defaultFor(type);\n      }\n    }\n\n    return out;\n  },\n\n  canList: (state, getters) => (type) => {\n    const schema = getters.schemaFor(type);\n\n    return schema && schema.hasLink('collection');\n  },\n\n  typeRegistered: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return !!state.types[type];\n  },\n\n  typeEntry: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type];\n  },\n\n  haveAll: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveAll || false;\n    }\n\n    return false;\n  },\n\n  haveAllNamespace: (state, getters) => (type, namespace) => {\n    if (!namespace) {\n      return false;\n    }\n\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveNamespace === namespace;\n    }\n\n    return false;\n  },\n\n  haveNamespace: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    return state.types[type]?.haveNamespace || null;\n  },\n\n  haveSelector: (state, getters) => (type, selector) => {\n    type = getters.normalizeType(type);\n    const entry = state.types[type];\n\n    if ( entry ) {\n      return entry.haveSelector[selector] || false;\n    }\n\n    return false;\n  },\n\n  normalizeType: () => (type) => {\n    return normalizeType(type);\n  },\n\n  keyFieldForType: () => (type) => {\n    return keyFieldFor(type);\n  },\n\n  urlFor,\n\n  urlOptions: () => (url, opt) => {\n    return url;\n  },\n\n  storeName: (state) => {\n    return state.config.namespace;\n  },\n\n  defaultModel: () => () => {\n    return undefined;\n  },\n\n  classify: (state, getters, rootState) => (obj) => {\n    return lookup(state.config.namespace, obj?.type, obj?.metadata?.name, rootState) || Resource;\n  },\n\n  cleanResource: () => (existing, data) => {\n    return data;\n  },\n\n  isClusterStore: (state) => {\n    return state.config.isClusterStore;\n  },\n\n  // Increment the load counter for a resource type\n  // This is used for incremental loading do detect when a page changes occur of the a reload happend\n  // While a previous incremental loading operation is still in progress\n  loadCounter: (state, getters) => (type) => {\n    type = getters.normalizeType(type);\n\n    if (!!state.types[type]) {\n      return state.types[type].loadCounter;\n    }\n\n    return 0;\n  },\n\n  gcIgnoreTypes: () => {\n    return {};\n  },\n\n  /**\n   * For the given type, and it's settings, find the number of resources associated with it\n   *\n   * This takes into account if the type is namespaced.\n   *\n   * @param typeObj see inners for properties. must have at least `name` (resource type)\n   *\n   */\n  count: (state, getters, rootState, rootGetters) => (typeObj) => {\n    let _typeObj = typeObj;\n    const { name: type, count } = _typeObj;\n\n    if (!type) {\n      throw new Error(`Resource type required to calc count: ${ JSON.stringify(typeObj) }`);\n    }\n\n    if (!count) {\n      const schema = getters.schemaFor(type);\n      const counts = getters.all(COUNT)?.[0]?.counts || {};\n      const count = counts[type];\n\n      _typeObj = {\n        count:       count ? count.summary.count || 0 : null,\n        byNamespace: count ? count.namespaces : {},\n        revision:    count ? count.revision : null,\n        namespaced:  schema?.attributes?.namespaced\n      };\n    }\n\n    const namespaces = Object.keys(rootGetters.activeNamespaceCache || {});\n\n    return matchingCounts(_typeObj, namespaces.length ? namespaces : null);\n  },\n\n};\n"],"mappings":"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","ignoreList":[]}]}