{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IENBUEkgYXMgQ0FQSV9MQUJFTFMgfSBmcm9tICdAc2hlbGwvY29uZmlnL2xhYmVscy1hbm5vdGF0aW9ucyc7CmltcG9ydCB7IE1BTkFHRU1FTlQsIENBUEkgfSBmcm9tICdAc2hlbGwvY29uZmlnL3R5cGVzJzsKaW1wb3J0IEdlbmVyaWNQcm9tcHQgZnJvbSAnLi9HZW5lcmljUHJvbXB0JzsKCmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7IEdlbmVyaWNQcm9tcHQgfSwKCiAgcHJvcHM6IHsKICAgIHJlc291cmNlczogewogICAgICB0eXBlOiAgICAgQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9CiAgfSwKCiAgYXN5bmMgZmV0Y2goKSB7CiAgICBpZiAodGhpcy5pc1JrZTIpIHsKICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoWwogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7IHR5cGU6IENBUEkuTUFDSElORV9ERVBMT1lNRU5UIH0pLAogICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7IHR5cGU6IENBUEkuTUFDSElORSB9KQogICAgICBdKTsKICAgIH0gZWxzZSB7CiAgICAgIGF3YWl0IFByb21pc2UuYWxsKFsKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kQWxsJywgeyB0eXBlOiBNQU5BR0VNRU5ULk5PREVfUE9PTCB9KSwKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnbWFuYWdlbWVudC9maW5kQWxsJywgeyB0eXBlOiBNQU5BR0VNRU5ULk5PREUgfSkKICAgICAgXSk7CiAgICB9CiAgfSwKCiAgZGF0YSgpIHsKICAgIGNvbnN0IGlzUmtlMiA9IHRoaXMucmVzb3VyY2VzWzBdLmNsdXN0ZXI/LmlzUmtlMjsKICAgIGNvbnN0IGNsdXN0ZXIgPSBpc1JrZTIgPyB0aGlzLnJlc291cmNlc1swXS5jbHVzdGVyIDogdGhpcy5yZXNvdXJjZXNbMF0ucHJvdmlzaW9uaW5nQ2x1c3RlcjsKCiAgICAvLyBOb3QgYWxsIG1hY2hpbmVzIGNhbiBiZSBkZWxldGVkLCB0aGVyZSBtdXN0IGFsd2F5cyBiZSBhdCBsZWFzdCBvbmUgbGVmdCBmb3Igcm9sZXMgY29udHJvbCBwbGFuZSBhbmQgZXRjZAogICAgLy8gRmlyc3QgZW5zdXJlIHRoYXQgYXQgbGVhc3Qgb25lIGNvbnRyb2wgcGxhbmUgZXhpc3RzLi4uIGFuZCB0aGVuIGNoZWNrIGZyb20gdGhlIHJlbWFpbmluZyBtYWNoaW5lcyB0aGF0IGF0IGxlYXN0IG9uZSBldGNkIGV4aXN0cwogICAgLy8gVGhpcyBpc24ndCBvcHRpbWlzaWVkLCB0aGVyZSBtYXkgYmUgY2FzZXMgdGhhdCByZXRhaW5pbmcgYSBzaW5nbGUgbWFjaGluZSB3aXRoIGJvdGggcm9sZXMgd291bGQgYmUgYmV0dGVyIHRoYW4gcmV0YWluaW5nIHR3byB3aXRoIHNpbmdsZSByb2xlcwogICAgY29uc3QgW2lnbm9yZWRDb250cm9sUGxhbmUsIHNhZmVDb250cm9sZVBsYW5lTWFjaGluZXNUb0RlbGV0ZV0gPSB0aGlzLmRlbGV0ZVR5cGUoJ2lzQ29udHJvbFBsYW5lJywgdGhpcy5yZXNvdXJjZXMsIGNsdXN0ZXIsIGlzUmtlMik7CiAgICBjb25zdCBbaWdub3JlZEV0Y2QsIHNhZmVNYWNoaW5lc1RvRGVsZXRlXSA9IHRoaXMuZGVsZXRlVHlwZSgnaXNFdGNkJywgc2FmZUNvbnRyb2xlUGxhbmVNYWNoaW5lc1RvRGVsZXRlLCBjbHVzdGVyLCBpc1JrZTIpOwogICAgY29uc3QgaWdub3JlZCA9IFtpZ25vcmVkQ29udHJvbFBsYW5lLCBpZ25vcmVkRXRjZF0uZmlsdGVyKChpKSA9PiAhIWkpOwoKICAgIHJldHVybiB7CiAgICAgIGNsdXN0ZXIsCiAgICAgIGlzUmtlMiwKICAgICAgYWxsVG9EZWxldGU6IHRoaXMucmVzb3VyY2VzLAogICAgICBzYWZlTWFjaGluZXNUb0RlbGV0ZSwKICAgICAgaWdub3JlZCwKICAgICAgdHlwZTogICAgICAgIHRoaXMuJHN0b3JlLmdldHRlcnNbJ3R5cGUtbWFwL2xhYmVsRm9yJ10odGhpcy5yZXNvdXJjZXNbMF0uc2NoZW1hLCB0aGlzLnJlc291cmNlcy5sZW5ndGgpLAogICAgICBjb25maWc6ICAgICAgewogICAgICAgIHRpdGxlOiAgICAgICB0aGlzLnQoJ3Byb21wdFJlbW92ZS50aXRsZScpLAogICAgICAgIGFwcGx5TW9kZTogICAnZGVsZXRlJywKICAgICAgICBhcHBseUFjdGlvbjogdGhpcy5yZW1vdmUsCiAgICAgIH0KICAgIH07CiAgfSwKCiAgbWV0aG9kczogewogICAgZGVsZXRlVHlwZSh0eXBlLCBhbGxUb0RlbGV0ZSwgY2x1c3RlciwgaXNSa2UyKSB7CiAgICAgIGNvbnN0IGFsbFRvRGVsZXRlQnlUeXBlID0gYWxsVG9EZWxldGUucmVkdWNlKChyZXMsIG0pID0+IHsKICAgICAgICBpZiAobVt0eXBlXSkgewogICAgICAgICAgcmVzLnR5cGVkLnB1c2gobSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJlcy5vdGhlcnMucHVzaChtKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByZXM7CiAgICAgIH0sIHsgdHlwZWQ6IFtdLCBvdGhlcnM6IFtdIH0pOwoKICAgICAgY29uc3QgbWFjaGluZXMgPSBpc1JrZTIgPyBjbHVzdGVyLm1hY2hpbmVzIDogY2x1c3Rlci5ub2RlczsKICAgICAgY29uc3QgdG90YWxUeXBlcyA9IG1hY2hpbmVzLmZpbHRlcigobSkgPT4gbVt0eXBlXSkubGVuZ3RoOwogICAgICBjb25zdCB0eXBlc1RvRGVsZXRlID0gYWxsVG9EZWxldGVCeVR5cGUudHlwZWQubGVuZ3RoOwogICAgICAvLyBJZiB3ZSdyZSBhdHRlbXB0aW5nIHRvIHJlbW92ZSBhbGwgY29udHJvbCBwbGFuIG1hY2hpbmVzLi4uLiBpZ25vcmUgb25lCiAgICAgIGNvbnN0IGlnbm9yZWRUeXBlID0gdG90YWxUeXBlcyAtIHR5cGVzVG9EZWxldGUgPT09IDAgPyBhbGxUb0RlbGV0ZUJ5VHlwZS50eXBlZC5wb3AoKSA6IHVuZGVmaW5lZDsKICAgICAgY29uc3Qgc2FmZU1hY2hpbmVzVG9EZWxldGUgPSBbLi4uYWxsVG9EZWxldGVCeVR5cGUudHlwZWQsIC4uLmFsbFRvRGVsZXRlQnlUeXBlLm90aGVyc107CgogICAgICByZXR1cm4gW2lnbm9yZWRUeXBlLCBzYWZlTWFjaGluZXNUb0RlbGV0ZV07CiAgICB9LAoKICAgIGFzeW5jIHJlbW92ZSgpIHsKICAgICAgaWYgKCF0aGlzLmlzUmtlMikgewogICAgICAgIGF3YWl0IFByb21pc2UuYWxsKHRoaXMuc2FmZU1hY2hpbmVzVG9EZWxldGUubWFwKChub2RlKSA9PiB7CiAgICAgICAgICByZXR1cm4gbm9kZS5ub3JtYW4/LmRvQWN0aW9uKCdzY2FsZWRvd24nKTsKICAgICAgICB9KSk7CgogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgLy8gR3JvdXAgbWFjaGluZXMgaW50byBwb29scwogICAgICBjb25zdCBwb29sSW5mbyA9IHRoaXMuc2FmZU1hY2hpbmVzVG9EZWxldGUucmVkdWNlKChyZXMsIG0pID0+IHsKICAgICAgICByZXMuc2V0KG0ucG9vbCwgcmVzLmdldChtLnBvb2wpIHx8IFtdKTsKICAgICAgICByZXMuZ2V0KG0ucG9vbCkucHVzaChtKTsKCiAgICAgICAgcmV0dXJuIHJlczsKICAgICAgfSwgbmV3IE1hcCgpKTsKCiAgICAgIC8vIE1hcmsgYWxsIG1hY2hpbmVzIGZvciBkZWxldGlvbiBhbmQgdGhlbiBzY2FsZSBkb3duIHRoZWlyIHBvb2wgdG8gdGhlIG5ldyBzaXplCiAgICAgIGNvbnN0IGZsYXRBcnJheSA9IEFycmF5LmZyb20ocG9vbEluZm8uZW50cmllcygpKTsKCiAgICAgIGF3YWl0IFByb21pc2UuYWxsKGZsYXRBcnJheS5tYXAoKFtwb29sLCBtYWNoaW5lc10pID0+IHsKICAgICAgICByZXR1cm4gUHJvbWlzZQogICAgICAgICAgLmFsbChtYWNoaW5lcy5tYXAoKG0pID0+IHsKICAgICAgICAgICAgbS5zZXRBbm5vdGF0aW9uKENBUElfTEFCRUxTLkRFTEVURV9NQUNISU5FLCAndHJ1ZScpOwoKICAgICAgICAgICAgcmV0dXJuIG0uc2F2ZSgpOwogICAgICAgICAgfSkpCiAgICAgICAgICAudGhlbigoKSA9PiBwb29sLnNjYWxlUG9vbCgtbWFjaGluZXMubGVuZ3RoLCBmYWxzZSkpOwogICAgICB9KSk7CgogICAgICAvLyBQb29sIHNjYWxlIGluZm8gaXMga2VwdCBpbiB0aGUgY2x1c3RlciBpdHNlbGYsIHNvIG5vdyB3ZSd2ZSBtYWRlIHRoZSBjaGFuZ2VzIHdlIGNhbiBzYXZlIHRoZW0KICAgICAgYXdhaXQgdGhpcy5jbHVzdGVyLnNhdmUoKTsKICAgIH0KICB9Cn07Cg=="},{"version":3,"sources":["ScaleMachineDownDialog.vue"],"names":[],"mappings":";AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ScaleMachineDownDialog.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport { CAPI as CAPI_LABELS } from '@shell/config/labels-annotations';\nimport { MANAGEMENT, CAPI } from '@shell/config/types';\nimport GenericPrompt from './GenericPrompt';\n\nexport default {\n  components: { GenericPrompt },\n\n  props: {\n    resources: {\n      type:     Array,\n      required: true\n    }\n  },\n\n  async fetch() {\n    if (this.isRke2) {\n      await Promise.all([\n        this.$store.dispatch('management/findAll', { type: CAPI.MACHINE_DEPLOYMENT }),\n        this.$store.dispatch('management/findAll', { type: CAPI.MACHINE })\n      ]);\n    } else {\n      await Promise.all([\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL }),\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE })\n      ]);\n    }\n  },\n\n  data() {\n    const isRke2 = this.resources[0].cluster?.isRke2;\n    const cluster = isRke2 ? this.resources[0].cluster : this.resources[0].provisioningCluster;\n\n    // Not all machines can be deleted, there must always be at least one left for roles control plane and etcd\n    // First ensure that at least one control plane exists... and then check from the remaining machines that at least one etcd exists\n    // This isn't optimisied, there may be cases that retaining a single machine with both roles would be better than retaining two with single roles\n    const [ignoredControlPlane, safeControlePlaneMachinesToDelete] = this.deleteType('isControlPlane', this.resources, cluster, isRke2);\n    const [ignoredEtcd, safeMachinesToDelete] = this.deleteType('isEtcd', safeControlePlaneMachinesToDelete, cluster, isRke2);\n    const ignored = [ignoredControlPlane, ignoredEtcd].filter((i) => !!i);\n\n    return {\n      cluster,\n      isRke2,\n      allToDelete: this.resources,\n      safeMachinesToDelete,\n      ignored,\n      type:        this.$store.getters['type-map/labelFor'](this.resources[0].schema, this.resources.length),\n      config:      {\n        title:       this.t('promptRemove.title'),\n        applyMode:   'delete',\n        applyAction: this.remove,\n      }\n    };\n  },\n\n  methods: {\n    deleteType(type, allToDelete, cluster, isRke2) {\n      const allToDeleteByType = allToDelete.reduce((res, m) => {\n        if (m[type]) {\n          res.typed.push(m);\n        } else {\n          res.others.push(m);\n        }\n\n        return res;\n      }, { typed: [], others: [] });\n\n      const machines = isRke2 ? cluster.machines : cluster.nodes;\n      const totalTypes = machines.filter((m) => m[type]).length;\n      const typesToDelete = allToDeleteByType.typed.length;\n      // If we're attempting to remove all control plan machines.... ignore one\n      const ignoredType = totalTypes - typesToDelete === 0 ? allToDeleteByType.typed.pop() : undefined;\n      const safeMachinesToDelete = [...allToDeleteByType.typed, ...allToDeleteByType.others];\n\n      return [ignoredType, safeMachinesToDelete];\n    },\n\n    async remove() {\n      if (!this.isRke2) {\n        await Promise.all(this.safeMachinesToDelete.map((node) => {\n          return node.norman?.doAction('scaledown');\n        }));\n\n        return;\n      }\n\n      // Group machines into pools\n      const poolInfo = this.safeMachinesToDelete.reduce((res, m) => {\n        res.set(m.pool, res.get(m.pool) || []);\n        res.get(m.pool).push(m);\n\n        return res;\n      }, new Map());\n\n      // Mark all machines for deletion and then scale down their pool to the new size\n      const flatArray = Array.from(poolInfo.entries());\n\n      await Promise.all(flatArray.map(([pool, machines]) => {\n        return Promise\n          .all(machines.map((m) => {\n            m.setAnnotation(CAPI_LABELS.DELETE_MACHINE, 'true');\n\n            return m.save();\n          }))\n          .then(() => pool.scalePool(-machines.length, false));\n      }));\n\n      // Pool scale info is kept in the cluster itself, so now we've made the changes we can save them\n      await this.cluster.save();\n    }\n  }\n};\n</script>\n\n<template>\n  <GenericPrompt\n    v-bind=\"config\"\n    @close=\"$emit('close')\"\n  >\n    <template slot=\"body\">\n      <div class=\"pl-10 pr-10 mt-20 mb-20 body\">\n        <div v-if=\"allToDelete.length === 1\">\n          {{ t('promptRemove.attemptingToRemove', { type }) }} <b>{{ safeMachinesToDelete[0].nameDisplay }}</b>\n        </div>\n        <div v-else>\n          {{ t('promptScaleMachineDown.attemptingToRemove', { type, count: allToDelete.length }, true) }}\n        </div>\n        <div\n          v-if=\"ignored.length\"\n          class=\"retained-machine\"\n        >\n          <span class=\"mb-20\">{{ t('promptScaleMachineDown.retainedMachine1') }}</span>\n          <span\n            v-for=\"i in ignored\"\n            :key=\"i.nameDisplay\"\n            v-clean-html=\"t('promptScaleMachineDown.retainedMachine2', { name: i.nameDisplay }, true)\"\n          />\n        </div>\n      </div>\n    </template>\n  </GenericPrompt>\n</template>\n\n<style lang='scss' scoped>\n  .body {\n    div:not(:last-of-type) {\n      padding-bottom: 15px;\n    }\n    .retained-machine {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n</style>\n"]}]}