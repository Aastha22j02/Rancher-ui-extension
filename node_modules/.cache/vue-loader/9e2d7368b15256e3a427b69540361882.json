{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/rke2.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/rke2.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["rke2.vue"],"names":[],"mappingsfile":"rke2.vue","sourceRoot":"node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster","sourcesContent":["<script>\nimport difference from 'lodash/difference';\nimport throttle from 'lodash/throttle';\nimport isArray from 'lodash/isArray';\nimport merge from 'lodash/merge';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport FormValidation from '@shell/mixins/form-validation';\nimport { normalizeName } from '@shell/utils/kube';\n\nimport {\n  CAPI,\n  MANAGEMENT,\n  NAMESPACE,\n  NORMAN,\n  SCHEMA,\n  DEFAULT_WORKSPACE,\n  SECRET,\n  HCI,\n} from '@shell/config/types';\nimport { _CREATE, _EDIT, _VIEW } from '@shell/config/query-params';\n\nimport { findBy, removeObject, clear } from '@shell/utils/array';\nimport { createYaml } from '@shell/utils/create-yaml';\nimport {\n  clone, diff, set, get, isEmpty\n} from '@shell/utils/object';\nimport { allHash } from '@shell/utils/promise';\nimport { sortBy } from '@shell/utils/sort';\nimport { vspherePoolConfigMerge } from '@shell/machine-config/vmwarevsphere-pool-config-merge';\n\nimport { compare, sortable } from '@shell/utils/version';\nimport { isHarvesterSatisfiesVersion } from '@shell/utils/cluster';\n\nimport { BadgeState } from '@components/BadgeState';\nimport { Banner } from '@components/Banner';\nimport CruResource, { CONTEXT_HOOK_EDIT_YAML } from '@shell/components/CruResource';\nimport Loading from '@shell/components/Loading';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport Tabbed from '@shell/components/Tabbed';\n\nimport { canViewClusterMembershipEditor } from '@shell/components/form/Members/ClusterMembershipEditor';\nimport semver from 'semver';\n\nimport { SETTING } from '@shell/config/settings';\nimport { base64Encode } from '@shell/utils/crypto';\nimport { CAPI as CAPI_ANNOTATIONS, CLUSTER_BADGE } from '@shell/config/labels-annotations';\nimport AgentEnv from '@shell/edit/provisioning.cattle.io.cluster/AgentEnv';\nimport Labels from '@shell/edit/provisioning.cattle.io.cluster/Labels';\nimport MachinePool from '@shell/edit/provisioning.cattle.io.cluster/tabs/MachinePool';\nimport SelectCredential from './SelectCredential';\nimport { ELEMENTAL_SCHEMA_IDS, KIND, ELEMENTAL_CLUSTER_PROVIDER } from '../../config/elemental-types';\nimport AgentConfiguration from '@shell/edit/provisioning.cattle.io.cluster/tabs/AgentConfiguration';\nimport { getApplicableExtensionEnhancements } from '@shell/core/plugin-helpers';\nimport { ExtensionPoint, TabLocation } from '@shell/core/types';\nimport MemberRoles from '@shell/edit/provisioning.cattle.io.cluster/tabs/MemberRoles';\nimport Basics from '@shell/edit/provisioning.cattle.io.cluster/tabs/Basics';\nimport Etcd from '@shell/edit/provisioning.cattle.io.cluster/tabs/etcd';\nimport Networking from '@shell/edit/provisioning.cattle.io.cluster/tabs/networking';\nimport Upgrade from '@shell/edit/provisioning.cattle.io.cluster/tabs/upgrade';\nimport Registries from '@shell/edit/provisioning.cattle.io.cluster/tabs/registries';\nimport AddOnConfig from '@shell/edit/provisioning.cattle.io.cluster/tabs/AddOnConfig';\nimport Advanced from '@shell/edit/provisioning.cattle.io.cluster/tabs/Advanced';\nimport ClusterAppearance from '@shell/components/form/ClusterAppearance';\n\nconst HARVESTER = 'harvester';\nconst HARVESTER_CLOUD_PROVIDER = 'harvester-cloud-provider';\nconst NETBIOS_TRUNCATION_LENGTH = 15;\n\nconst VMWARE_VSPHERE = 'vmwarevsphere';\n\n/**\n * Classes to be adopted by the node badges in Machine pools\n */\nconst NODE_TOTAL = {\n  error: {\n    color: 'bg-error',\n    icon:  'icon-x',\n  },\n  warning: {\n    color: 'bg-warning',\n    icon:  'icon-warning',\n  },\n  success: {\n    color: 'bg-success',\n    icon:  'icon-checkmark'\n  }\n};\nconst CLUSTER_AGENT_CUSTOMIZATION = 'clusterAgentDeploymentCustomization';\nconst FLEET_AGENT_CUSTOMIZATION = 'fleetAgentDeploymentCustomization';\n\nexport default {\n  components: {\n    AgentEnv,\n    BadgeState,\n    Banner,\n    AgentConfiguration,\n    CruResource,\n    Labels,\n    Loading,\n    MachinePool,\n    NameNsDescription,\n    SelectCredential,\n    Tab,\n    Tabbed,\n    MemberRoles,\n    Basics,\n    Etcd,\n    Networking,\n    Upgrade,\n    Registries,\n    AddOnConfig,\n    Advanced,\n    ClusterAppearance\n  },\n\n  mixins: [CreateEditView, FormValidation],\n\n  props: {\n    mode: {\n      type:     String,\n      required: true,\n    },\n\n    value: {\n      type:     Object,\n      required: true,\n    },\n\n    provider: {\n      type:     String,\n      required: true,\n    },\n\n    providerConfig: {\n      type:    Object,\n      default: () => null\n    }\n  },\n\n  async fetch() {\n    await this.fetchRke2Versions();\n    await this.initSpecs();\n    await this.initAddons();\n    await this.initRegistry();\n\n    Object.entries(this.chartValues).forEach(([name, value]) => {\n      const key = this.chartVersionKey(name);\n\n      this.userChartValues[key] = value;\n    });\n\n    this.setAgentConfiguration();\n  },\n\n  data() {\n    if (!this.value.spec.rkeConfig) {\n      set(this.value.spec, 'rkeConfig', {});\n    }\n\n    if (!this.value.spec.rkeConfig.chartValues) {\n      set(this.value.spec.rkeConfig, 'chartValues', {});\n    }\n\n    if (!this.value.spec.rkeConfig.upgradeStrategy) {\n      set(this.value.spec.rkeConfig, 'upgradeStrategy', {\n        controlPlaneConcurrency:  '1',\n        controlPlaneDrainOptions: {},\n        workerConcurrency:        '1',\n        workerDrainOptions:       {},\n      });\n    }\n\n    if (!this.value.spec.rkeConfig.dataDirectories) {\n      set(this.value.spec.rkeConfig, 'dataDirectories', {\n        systemAgent:  '',\n        provisioning: '',\n        k8sDistro:    '',\n      });\n    }\n\n    if (!this.value.spec.rkeConfig.machineGlobalConfig) {\n      set(this.value.spec, 'rkeConfig.machineGlobalConfig', {});\n    }\n\n    if (!this.value.spec.rkeConfig.machineSelectorConfig?.length) {\n      set(this.value.spec, 'rkeConfig.machineSelectorConfig', [{ config: {} }]);\n    }\n\n    const truncateLimit = this.value.defaultHostnameLengthLimit || 0;\n\n    return {\n      loadedOnce:                      false,\n      lastIdx:                         0,\n      allPSAs:                         [],\n      credentialId:                    '',\n      credential:                      null,\n      machinePools:                    null,\n      rke2Versions:                    null,\n      k3sVersions:                     null,\n      defaultRke2:                     '',\n      defaultK3s:                      '',\n      s3Backup:                        false,\n      /**\n       * All info related to a specific version of the chart\n       *\n       * This includes chart itself, README and values\n       *\n       * { [chartName:string]: { chart: json, readme: string, values: json } }\n       */\n      versionInfo:                     {},\n      membershipUpdate:                {},\n      showDeprecatedPatchVersions:     false,\n      systemRegistry:                  null,\n      registryHost:                    null,\n      showCustomRegistryInput:         false,\n      showCustomRegistryAdvancedInput: false,\n      registrySecret:                  null,\n      userChartValues:                 {},\n      userChartValuesTemp:             {},\n      addonsRev:                       0,\n      fvFormRuleSets:                  [{\n        path: 'metadata.name', rules: ['subDomain'], translationKey: 'nameNsDescription.name.label'\n      }],\n      harvesterVersionRange: {},\n      cisOverride:           false,\n      truncateLimit,\n      busy:                  false,\n      machinePoolValidation: {}, // map of validation states for each machine pool\n      machinePoolErrors:     {},\n      allNamespaces:         [],\n      extensionTabs:         getApplicableExtensionEnhancements(this, ExtensionPoint.TAB, TabLocation.CLUSTER_CREATE_RKE2, this.$route, this),\n    };\n  },\n\n  computed: {\n    clusterName() {\n      return this.value.metadata?.name || '';\n    },\n    showClusterAppearance() {\n      return this.mode === _CREATE;\n    },\n    clusterBadgeAbbreviation() {\n      return this.$store.getters['customisation/getPreviewCluster'];\n    },\n    rkeConfig() {\n      return this.value.spec.rkeConfig;\n    },\n\n    isElementalCluster() {\n      return this.provider === ELEMENTAL_CLUSTER_PROVIDER || this.value?.machineProvider?.toLowerCase() === KIND.MACHINE_INV_SELECTOR_TEMPLATES.toLowerCase();\n    },\n\n    chartValues() {\n      return this.value.spec.rkeConfig.chartValues;\n    },\n\n    serverConfig() {\n      return this.value.spec.rkeConfig.machineGlobalConfig;\n    },\n\n    agentConfig() {\n      return this.value.agentConfig;\n    },\n\n    unsupportedSelectorConfig() {\n      let global = 0;\n      let kubeletOnly = 0;\n      let other = 0;\n\n      // The form supports one config that has no selector for all the main parts\n      // And one or more configs that have a selector and exactly only kubelet-args.\n      // If there are any other properties set, or multiple configs with no selector\n      // show a warning that you're editing only part of the config in the UI.\n\n      for (const conf of this.value.spec?.rkeConfig?.machineSelectorConfig) {\n        if (conf.machineLabelSelector) {\n          const keys = Object.keys(conf.config || {});\n\n          if (keys.length === 0 || (keys.length === 1 && keys[0] === 'kubelet-arg')) {\n            kubeletOnly++;\n          } else {\n            other++;\n          }\n        } else {\n          global++;\n        }\n      }\n\n      // eslint-disable-next-line no-console\n      console.log(`Global: ${ global }, Kubelet Only: ${ kubeletOnly }, Other: ${ other }`);\n\n      return (global > 1 || other > 0);\n    },\n\n    versionOptions() {\n      const cur = this.liveValue?.spec?.kubernetesVersion || '';\n      const existingRke2 = this.mode === _EDIT && cur.includes('rke2');\n      const existingK3s = this.mode === _EDIT && cur.includes('k3s');\n\n      let allValidRke2Versions = this.getAllOptionsAfterCurrentVersion(this.rke2Versions, (existingRke2 ? cur : null), this.defaultRke2);\n      let allValidK3sVersions = this.getAllOptionsAfterCurrentVersion(this.k3sVersions, (existingK3s ? cur : null), this.defaultK3s);\n\n      if (!this.showDeprecatedPatchVersions) {\n        // Normally, we only want to show the most recent patch version\n        // for each Kubernetes minor version. However, if the user\n        // opts in to showing deprecated versions, we don't filter them.\n        allValidRke2Versions = this.filterOutDeprecatedPatchVersions(allValidRke2Versions, cur);\n        allValidK3sVersions = this.filterOutDeprecatedPatchVersions(allValidK3sVersions, cur);\n      }\n\n      const showRke2 = allValidRke2Versions.length && !existingK3s;\n      const showK3s = allValidK3sVersions.length && !existingRke2;\n      const out = [];\n\n      if (showRke2) {\n        if (showK3s) {\n          out.push({ kind: 'group', label: this.t('cluster.provider.rke2') });\n        }\n\n        out.push(...allValidRke2Versions);\n      }\n\n      if (showK3s) {\n        if (showRke2) {\n          out.push({ kind: 'group', label: this.t('cluster.provider.k3s') });\n        }\n\n        out.push(...allValidK3sVersions);\n      }\n\n      if (cur) {\n        const existing = out.find((x) => x.value === cur);\n\n        if (existing) {\n          existing.disabled = false;\n        }\n      }\n\n      return out;\n    },\n\n    /**\n     * Kube Version\n     */\n    selectedVersion() {\n      const str = this.value.spec.kubernetesVersion;\n\n      if (!str) {\n        return;\n      }\n\n      const out = findBy(this.versionOptions, 'value', str);\n\n      // Adding the option 'none' to Container Network select (used in Basics component)\n      // https://github.com/rancher/dashboard/issues/10338\n      // there's an update loop on refresh that might include 'none'\n      // multiple times... Prevent that\n      if (out.serverArgs?.cni?.options && !out.serverArgs?.cni?.options.includes('none')) {\n        out.serverArgs.cni.options.push('none');\n      }\n\n      return out;\n    },\n\n    haveArgInfo() {\n      return Boolean(this.selectedVersion?.serverArgs && this.selectedVersion?.agentArgs);\n    },\n\n    serverArgs() {\n      return this.selectedVersion?.serverArgs || {};\n    },\n\n    agentArgs() {\n      return this.selectedVersion?.agentArgs || {};\n    },\n\n    /**\n     * The addons (kube charts) applicable for the selected kube version\n     *\n     * { [chartName:string]: { repo: string, version: string } }\n     */\n    chartVersions() {\n      return this.selectedVersion?.charts || {};\n    },\n\n    needCredential() {\n      if (this.provider === 'custom' || this.provider === 'import' || this.isElementalCluster || this.mode === _VIEW || (this.providerConfig?.spec?.builtin === false && this.providerConfig?.spec?.addCloudCredential === false)) {\n        return false;\n      }\n\n      if (this.customCredentialComponentRequired === false) {\n        return false;\n      }\n\n      return true;\n    },\n\n    /**\n     * Only for extensions - extension can register a 'false' cloud credential to indicate that a cloud credential is not needed\n     */\n    customCredentialComponentRequired() {\n      return this.$plugin.getDynamic('cloud-credential', this.provider);\n    },\n\n    hasMachinePools() {\n      if (this.provider === 'custom' || this.provider === 'import') {\n        return false;\n      }\n\n      return true;\n    },\n\n    unremovedMachinePools() {\n      return (this.machinePools || []).filter((x) => !x.remove);\n    },\n\n    /**\n     * Extension provider where being provisioned by an extension\n     */\n    extensionProvider() {\n      const extClass = this.$plugin.getDynamic('provisioner', this.provider);\n\n      if (extClass) {\n        return new extClass({\n          dispatch: this.$store.dispatch,\n          getters:  this.$store.getters,\n          axios:    this.$store.$axios,\n          $plugin:  this.$store.app.$plugin,\n          $t:       this.t,\n          isCreate: this.isCreate\n        });\n      }\n\n      return undefined;\n    },\n\n    /**\n     * Is a namespace needed? Only supported for providers from extensions, otherwise default is no\n     */\n    needsNamespace() {\n      return this.extensionProvider ? !!this.extensionProvider.namespaced : false;\n    },\n\n    machineConfigSchema() {\n      let schema;\n\n      if (!this.hasMachinePools) {\n        return null;\n      } else if (this.isElementalCluster) {\n        schema = ELEMENTAL_SCHEMA_IDS.MACHINE_INV_SELECTOR_TEMPLATES;\n      } else {\n        schema = `${ CAPI.MACHINE_CONFIG_GROUP }.${ this.provider }config`;\n      }\n\n      // If this is an extension provider then the extension can provide the schema\n      const extensionSchema = this.extensionProvider?.machineConfigSchema;\n\n      if (extensionSchema) {\n        // machineConfigSchema can either be the schema name (string) or the schema itself (object)\n        if (typeof extensionSchema === 'object') {\n          return extensionSchema;\n        }\n\n        // Name of schema to use\n        schema = extensionSchema;\n      }\n\n      return this.$store.getters['management/schemaFor'](schema);\n    },\n\n    nodeTotals() {\n      const roles = ['etcd', 'controlPlane', 'worker'];\n      const counts = {};\n      const out = {\n        color:   {},\n        label:   {},\n        icon:    {},\n        tooltip: {},\n      };\n\n      for (const role of roles) {\n        counts[role] = 0;\n        out.color[role] = NODE_TOTAL.success.color;\n        out.icon[role] = NODE_TOTAL.success.icon;\n      }\n\n      for (const row of this.machinePools || []) {\n        if (row.remove) {\n          continue;\n        }\n\n        const qty = parseInt(row.pool.quantity, 10);\n\n        if (isNaN(qty)) {\n          continue;\n        }\n\n        for (const role of roles) {\n          counts[role] = counts[role] + (row.pool[`${ role }Role`] ? qty : 0);\n        }\n      }\n\n      for (const role of roles) {\n        out.label[role] = this.t(`cluster.machinePool.nodeTotals.label.${ role }`, { count: counts[role] });\n        out.tooltip[role] = this.t(`cluster.machinePool.nodeTotals.tooltip.${ role }`, { count: counts[role] });\n      }\n\n      if (counts.etcd === 0) {\n        out.color.etcd = NODE_TOTAL.error.color;\n        out.icon.etcd = NODE_TOTAL.error.icon;\n      } else if (counts.etcd === 1 || counts.etcd % 2 === 0 || counts.etcd > 7) {\n        out.color.etcd = NODE_TOTAL.warning.color;\n        out.icon.etcd = NODE_TOTAL.warning.icon;\n      }\n\n      if (counts.controlPlane === 0) {\n        out.color.controlPlane = NODE_TOTAL.error.color;\n        out.icon.controlPlane = NODE_TOTAL.error.icon;\n      } else if (counts.controlPlane === 1) {\n        out.color.controlPlane = NODE_TOTAL.warning.color;\n        out.icon.controlPlane = NODE_TOTAL.warning.icon;\n      }\n\n      if (counts.worker === 0) {\n        out.color.worker = NODE_TOTAL.error.color;\n        out.icon.worker = NODE_TOTAL.error.icon;\n      } else if (counts.worker === 1) {\n        out.color.worker = NODE_TOTAL.warning.color;\n        out.icon.worker = NODE_TOTAL.warning.icon;\n      }\n\n      return out;\n    },\n\n    showCni() {\n      return !!this.serverArgs.cni;\n    },\n\n    showCloudProvider() {\n      return !!this.agentArgs['cloud-provider-name'];\n    },\n\n    /**\n     * The chart names of the addons applicable to the current kube version and selected cloud provider\n     */\n    addonNames() {\n      const names = [];\n      const cni = this.serverConfig.cni;\n\n      if (typeof cni === 'string') {\n        names.push(...cni.split(',').map((x) => `rke2-${ x }`));\n      } else if (Array.isArray(cni)) {\n        names.push(...cni.map((x) => `rke2-${ x }`));\n      }\n\n      if (this.showCloudProvider) { // Shouldn't be removed such that changes to it will re-trigger this watch\n        if (this.agentConfig?.['cloud-provider-name'] === 'rancher-vsphere') {\n          names.push('rancher-vsphere-cpi', 'rancher-vsphere-csi');\n        }\n\n        if (this.agentConfig?.['cloud-provider-name'] === HARVESTER) {\n          names.push(HARVESTER_CLOUD_PROVIDER);\n        }\n      }\n\n      return names;\n    },\n\n    /**\n     * The charts of the addons applicable to the current kube version and selected cloud provider\n     *\n     * These are the charts themselves and do not include chart readme or values\n     */\n    addonVersions() {\n      const versions = this.addonNames.map((name) => this.versionInfo[name]?.chart);\n\n      return versions.filter((x) => !!x);\n    },\n\n    cloudProviderOptions() {\n      const out = [{\n        label: this.$store.getters['i18n/t']('cluster.rke2.cloudProvider.defaultValue.label'),\n        value: '',\n      }];\n\n      if (!!this.agentArgs['cloud-provider-name']?.options) {\n        const preferred = this.$store.getters['plugins/cloudProviderForDriver'](this.provider);\n\n        for (const opt of this.agentArgs['cloud-provider-name']?.options) {\n          // If we don't have a preferred provider... show all options\n          const showAllOptions = preferred === undefined;\n          // If we have a preferred provider... only show default, preferred and external\n          const isPreferred = opt === preferred;\n          const isExternal = opt === 'external';\n          let disabled = false;\n\n          if ((this.isHarvesterExternalCredential || this.isHarvesterIncompatible) && isPreferred) {\n            disabled = true;\n          }\n\n          if (showAllOptions || isPreferred || isExternal) {\n            out.push({\n              label: this.$store.getters['i18n/withFallback'](`cluster.cloudProvider.\"${ opt }\".label`, null, opt),\n              value: opt,\n              disabled,\n            });\n          }\n        }\n      }\n\n      const cur = this.agentConfig?.['cloud-provider-name'];\n\n      if (cur && !out.find((x) => x.value === cur)) {\n        out.unshift({ label: `${ cur } (Current)`, value: cur });\n      }\n\n      return out;\n    },\n\n    canManageMembers() {\n      return canViewClusterMembershipEditor(this.$store);\n    },\n\n    isHarvesterDriver() {\n      return this.$route.query.type === HARVESTER;\n    },\n\n    defaultVersion() {\n      const all = this.versionOptions.filter((x) => !!x.value);\n      const first = all[0]?.value;\n      const preferred = all.find((x) => x.value === this.defaultRke2)?.value;\n\n      const rke2 = this.getAllOptionsAfterCurrentVersion(this.rke2Versions, null);\n      const showRke2 = rke2.length;\n      let out;\n\n      if (this.isHarvesterDriver && showRke2) {\n        const satisfiesVersion = rke2.filter((v) => {\n          return isHarvesterSatisfiesVersion(v.value);\n        }) || [];\n\n        if (satisfiesVersion.length > 0) {\n          out = satisfiesVersion[0]?.value;\n        }\n      }\n\n      if (!out) {\n        out = preferred || first;\n      }\n\n      return out;\n    },\n\n    appsOSWarning() {\n      if (this.mode !== _EDIT) {\n        return null;\n      }\n      const { linuxWorkerCount, windowsWorkerCount } = this.value?.mgmt?.status || {};\n\n      if (!windowsWorkerCount) {\n        if (!!this.machinePools.find((pool) => {\n          return pool?.config?.os === 'windows';\n        })) {\n          return this.t('cluster.banner.os', { newOS: 'Windows', existingOS: 'Linux' });\n        }\n      } else if (!linuxWorkerCount) {\n        if (this.machinePools.find((pool) => {\n          return pool?.config?.os === 'linux';\n        })) {\n          return this.t('cluster.banner.os', { newOS: 'Linux', existingOS: 'Windows' });\n        }\n      }\n\n      return null;\n    },\n\n    showForm() {\n      return !!this.credentialId || !this.needCredential;\n    },\n\n    isHarvesterExternalCredential() {\n      return this.credential?.harvestercredentialConfig?.clusterType === 'external';\n    },\n\n    isHarvesterIncompatible() {\n      let ccmRke2Version = (this.chartVersions['harvester-cloud-provider'] || {})['version'];\n      let csiRke2Version = (this.chartVersions['harvester-csi-driver'] || {})['version'];\n\n      const ccmVersion = this.harvesterVersionRange?.['harvester-cloud-provider'];\n      const csiVersion = this.harvesterVersionRange?.['harvester-csi-provider'];\n\n      if ((ccmRke2Version || '').endsWith('00')) {\n        ccmRke2Version = ccmRke2Version.slice(0, -2);\n      }\n\n      if ((csiRke2Version || '').endsWith('00')) {\n        csiRke2Version = csiRke2Version.slice(0, -2);\n      }\n\n      if (ccmVersion && csiVersion) {\n        if (semver.satisfies(ccmRke2Version, ccmVersion) &&\n          semver.satisfies(csiRke2Version, csiVersion)) {\n          return false;\n        } else {\n          return true;\n        }\n      } else {\n        return false;\n      }\n    },\n\n    validationPassed() {\n      const validRequiredPools = this.hasMachinePools ? this.hasRequiredNodes() : true;\n\n      let base = (this.provider === 'custom' || this.isElementalCluster || !!this.credentialId || !this.needCredential);\n\n      // and in all of the validation statuses for each machine pool\n      Object.values(this.machinePoolValidation).forEach((v) => (base = base && v));\n\n      return validRequiredPools && base;\n    },\n    currentCluster() {\n      if (this.mode === _EDIT) {\n        return { ...this.value };\n      } else {\n        return this.$store.getters['customisation/getPreviewCluster'];\n      }\n    }\n  },\n\n  watch: {\n    clusterBadgeAbbreviation: {\n      immediate: true,\n      handler(neu) {\n        if (!neu) {\n          return;\n        }\n\n        if (Object.keys(neu.badge).length <= 0) {\n          return { ...this.value };\n        }\n\n        const obj = {\n          [CLUSTER_BADGE.ICON_TEXT]: neu.badge.iconText, [CLUSTER_BADGE.COLOR]: neu.badge.color, [CLUSTER_BADGE.TEXT]: neu.badge.text\n        };\n\n        this.value.metadata.annotations = {\n          ...this.value.metadata.annotations,\n          ...obj\n        };\n      }\n    },\n\n    credentialId(val) {\n      if (val) {\n        this.credential = this.$store.getters['rancher/byId'](NORMAN.CLOUD_CREDENTIAL, this.credentialId);\n\n        if (this.isHarvesterDriver) {\n          this.setHarvesterVersionRange();\n        }\n      } else {\n        this.credential = null;\n      }\n\n      this.value.spec.cloudCredentialSecretName = val;\n    },\n\n    addonNames(neu, old) {\n      // To catch the 'some addons' --> 'no addons' case also check array length (`difference([], [1,2,3]) === []`)\n      const diff = old.length !== neu.length || difference(neu, old).length;\n\n      if (diff) {\n        // Allow time for addonNames to update... then fetch any missing addons\n        this.$nextTick(() => this.initAddons());\n      }\n    },\n\n    selectedVersion() {\n      this.versionInfo = {}; // Invalidate cache such that version info relevent to selected kube version is updated\n\n      // Allow time for addonNames to update... then fetch any missing addons\n      this.$nextTick(() => this.initAddons());\n      if (this.mode === _CREATE) {\n        this.initServerAgentArgs();\n      }\n    },\n\n    showCni(neu) {\n      // Update `serverConfig.cni to recalculate addonNames...\n      // ... which will eventually update `value.spec.rkeConfig.chartValues`\n      if (neu) {\n        // Type supports CNI, assign default if we can\n        if (!this.serverConfig.cni) {\n          const def = this.serverArgs.cni.default;\n\n          set(this.serverConfig, 'cni', def);\n        }\n      } else {\n        // Type doesn't support cni, clear `cni`\n        set(this.serverConfig, 'cni', undefined);\n      }\n    },\n\n    showCloudProvider(neu) {\n      if (!neu) {\n        // No cloud provider available? Then clear cloud provider setting. This will recalculate addonNames...\n        // ... which will eventually update `value.spec.rkeConfig.chartValues`\n        set(this.agentConfig, 'cloud-provider-name', undefined);\n      }\n    },\n  },\n\n  created() {\n    this.registerBeforeHook(this.saveMachinePools, 'save-machine-pools', 1);\n    this.registerBeforeHook(this.setRegistryConfig, 'set-registry-config');\n    this.registerAfterHook(this.cleanupMachinePools, 'cleanup-machine-pools');\n    this.registerAfterHook(this.saveRoleBindings, 'save-role-bindings');\n\n    // Register any hooks for this extension provider\n    if (this.extensionProvider?.registerSaveHooks) {\n      this.extensionProvider.registerSaveHooks(this.registerBeforeHook, this.registerAfterHook, this.value);\n    }\n  },\n\n  methods: {\n    set,\n\n    /**\n     * Initialize all the cluster specs\n     */\n    async initSpecs() {\n      if (!this.value.spec) {\n        set(this.value, 'spec', {});\n      }\n\n      if (!this.value.spec.machineSelectorConfig) {\n        set(this.value.spec, 'machineSelectorConfig', []);\n      }\n\n      if (!this.value.spec.machineSelectorConfig.find((x) => !x.machineLabelSelector)) {\n        this.value.spec.machineSelectorConfig.unshift({ config: {} });\n      }\n\n      if (this.value.spec.cloudCredentialSecretName) {\n        await this.$store.dispatch('rancher/findAll', { type: NORMAN.CLOUD_CREDENTIAL });\n        this.credentialId = `${ this.value.spec.cloudCredentialSecretName }`;\n      }\n\n      if (!this.value.spec.kubernetesVersion) {\n        set(this.value.spec, 'kubernetesVersion', this.defaultVersion);\n      }\n\n      if (this.rkeConfig.etcd?.s3?.bucket) {\n        this.s3Backup = true;\n      }\n\n      if (!this.rkeConfig.etcd) {\n        set(this.rkeConfig, 'etcd', {\n          disableSnapshots:     false,\n          s3:                   null,\n          snapshotRetention:    5,\n          snapshotScheduleCron: '0 */5 * * *',\n        });\n      } else if (typeof this.rkeConfig.etcd.disableSnapshots === 'undefined') {\n        const disableSnapshots = !this.rkeConfig.etcd.snapshotRetention && !this.rkeConfig.etcd.snapshotScheduleCron;\n\n        set(this.rkeConfig.etcd, 'disableSnapshots', disableSnapshots);\n      }\n\n      // Namespaces if required - this is mainly for custom provisioners via extensions that want\n      // to allow creating their resources in a different namespace\n      if (this.needsNamespace) {\n        this.allNamespaces = await this.$store.dispatch('management/findAll', { type: NAMESPACE });\n      }\n\n      if (!this.machinePools) {\n        await this.initMachinePools(this.value.spec.rkeConfig.machinePools);\n        if (this.mode === _CREATE && !this.machinePools.length) {\n          await this.addMachinePool();\n        }\n      }\n\n      if (this.value.spec.defaultPodSecurityAdmissionConfigurationTemplateName === undefined) {\n        set(this.value.spec, 'defaultPodSecurityAdmissionConfigurationTemplateName', '');\n      }\n    },\n\n    /**\n     * Fetch RKE versions and their configurations to be mapped to the form\n     */\n    async fetchRke2Versions() {\n      if (!this.rke2Versions) {\n        const hash = {\n          rke2Versions: this.$store.dispatch('management/request', { url: '/v1-rke2-release/releases' }),\n          k3sVersions:  this.$store.dispatch('management/request', { url: '/v1-k3s-release/releases' }),\n        };\n\n        if (this.$store.getters['management/canList'](MANAGEMENT.PSA)) {\n          hash.allPSAs = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.PSA });\n        }\n\n        // Get the latest versions from the global settings if possible\n        const globalSettings = await this.$store.getters['management/all'](MANAGEMENT.SETTING) || [];\n        const defaultRke2Setting = globalSettings.find((setting) => setting.id === 'rke2-default-version') || {};\n        const defaultK3sSetting = globalSettings.find((setting) => setting.id === 'k3s-default-version') || {};\n\n        let defaultRke2 = defaultRke2Setting?.value || defaultRke2Setting?.default;\n        let defaultK3s = defaultK3sSetting?.value || defaultK3sSetting?.default;\n\n        // RKE2: Use the channel if we can not get the version from the settings\n        if (!defaultRke2) {\n          hash.rke2Channels = this.$store.dispatch('management/request', { url: '/v1-rke2-release/channels' });\n        }\n\n        // K3S: Use the channel if we can not get the version from the settings\n        if (!defaultK3s) {\n          hash.k3sChannels = this.$store.dispatch('management/request', { url: '/v1-k3s-release/channels' });\n        }\n\n        const res = await allHash(hash);\n\n        this.allPSAs = res.allPSAs || [];\n        this.rke2Versions = res.rke2Versions.data || [];\n        this.k3sVersions = res.k3sVersions.data || [];\n\n        if (!defaultRke2) {\n          const rke2Channels = res.rke2Channels.data || [];\n\n          defaultRke2 = rke2Channels.find((x) => x.id === 'default')?.latest;\n        }\n\n        if (!defaultK3s) {\n          const k3sChannels = res.k3sChannels.data || [];\n\n          defaultK3s = k3sChannels.find((x) => x.id === 'default')?.latest;\n        }\n\n        if (!this.rke2Versions.length && !this.k3sVersions.length) {\n          throw new Error('No version info found in KDM');\n        }\n\n        // Store default versions\n        this.defaultRke2 = defaultRke2;\n        this.defaultK3s = defaultK3s;\n      }\n    },\n\n    cleanAgentConfiguration(model, key) {\n      if (!model || !model[key]) {\n        return;\n      }\n\n      const v = model[key];\n\n      if (Array.isArray(v) && v.length === 0) {\n        delete model[key];\n      } else if (v && typeof v === 'object') {\n        Object.keys(v).forEach((k) => {\n          // delete these auxiliary props used in podAffinity and nodeAffinity that shouldn't be sent to the server\n          if (k === '_namespaceOption' || k === '_namespaces' || k === '_anti' || k === '_id') {\n            delete v[k];\n          }\n\n          // prevent cleanup of \"namespaceSelector\" when an empty object because it represents all namespaces in pod/node affinity\n          // https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.25/#podaffinityterm-v1-core\n          if (k !== 'namespaceSelector') {\n            this.cleanAgentConfiguration(v, k);\n          }\n        });\n\n        if (Object.keys(v).length === 0) {\n          delete model[key];\n        }\n      }\n    },\n\n    /**\n     * Clean agent configuration objects, so we only send values when the user has configured something\n     */\n    agentConfigurationCleanup() {\n      this.cleanAgentConfiguration(this.value.spec, CLUSTER_AGENT_CUSTOMIZATION);\n      this.cleanAgentConfiguration(this.value.spec, FLEET_AGENT_CUSTOMIZATION);\n    },\n\n    /**\n     * Ensure we have empty models for the two agent configurations\n     */\n    setAgentConfiguration() {\n      // Cluster Agent Configuration\n      if (!this.value.spec[CLUSTER_AGENT_CUSTOMIZATION]) {\n        set(this.value.spec, CLUSTER_AGENT_CUSTOMIZATION, {});\n      }\n\n      // Fleet Agent Configuration\n      if (!this.value.spec[FLEET_AGENT_CUSTOMIZATION]) {\n        set(this.value.spec, FLEET_AGENT_CUSTOMIZATION, {});\n      }\n    },\n\n    /**\n     * set instanceNameLimit to 15 to all pool machine if truncateHostnames checkbox is clicked\n     */\n    truncateHostname(neu) {\n      if (neu) {\n        this.value.defaultHostnameLengthLimit = NETBIOS_TRUNCATION_LENGTH;\n        this.truncateLimit = NETBIOS_TRUNCATION_LENGTH;\n      } else {\n        this.truncateLimit = 0;\n        this.value.removeDefaultHostnameLengthLimit();\n      }\n    },\n\n    /**\n     * Get machine pools from the cluster configuration\n     * this.value.spec.rkeConfig.machinePools\n     */\n    async initMachinePools(existing) {\n      const out = [];\n\n      if (existing?.length) {\n        for (const pool of existing) {\n          let type;\n\n          if (this.isElementalCluster) {\n            type = ELEMENTAL_SCHEMA_IDS.MACHINE_INV_SELECTOR_TEMPLATES;\n          } else {\n            type = `${ CAPI.MACHINE_CONFIG_GROUP }.${ pool.machineConfigRef.kind.toLowerCase() }`;\n          }\n\n          let config;\n          let configMissing = false;\n\n          if (this.$store.getters['management/canList'](type)) {\n            try {\n              config = await this.$store.dispatch('management/find', {\n                type,\n                id: `${ this.value.metadata.namespace }/${ pool.machineConfigRef.name }`,\n              });\n            } catch (e) {\n              // Some users can't see the config, that's ok.\n              // we will display a banner for a 404 only for elemental\n              if (e?.status === 404) {\n                if (this.isElementalCluster) {\n                  configMissing = true;\n                }\n              }\n            }\n          }\n\n          // @TODO what if the pool is missing?\n          const id = `pool${ ++this.lastIdx }`;\n\n          out.push({\n            id,\n            remove: false,\n            create: false,\n            update: true,\n            pool:   clone(pool),\n            config: config ? await this.$store.dispatch('management/clone', { resource: config }) : null,\n            configMissing\n          });\n        }\n      }\n\n      this.machinePools = out;\n    },\n\n    async addMachinePool(idx) {\n      // this.machineConfigSchema is the schema for the Machine Pool's machine configuration for the given provider\n      if (!this.machineConfigSchema) {\n        return;\n      }\n\n      const numCurrentPools = this.machinePools.length || 0;\n\n      let config;\n\n      if (this.extensionProvider?.createMachinePoolMachineConfig) {\n        config = await this.extensionProvider.createMachinePoolMachineConfig(idx, this.machinePools, this.value);\n      } else {\n        // Default - use the schema\n        config = await this.$store.dispatch('management/createPopulated', {\n          type:     this.machineConfigSchema.id,\n          metadata: { namespace: DEFAULT_WORKSPACE }\n        });\n\n        // If there is no specific model, the applyDefaults does nothing by default\n        config.applyDefaults(idx, this.machinePools);\n      }\n\n      const name = `pool${ ++this.lastIdx }`;\n\n      const pool = {\n        id:     name,\n        config,\n        remove: false,\n        create: true,\n        update: false,\n        uid:    name,\n        pool:   {\n          name,\n          etcdRole:             numCurrentPools === 0,\n          controlPlaneRole:     numCurrentPools === 0,\n          workerRole:           true,\n          hostnamePrefix:       '',\n          labels:               {},\n          quantity:             1,\n          unhealthyNodeTimeout: '0m',\n          machineConfigRef:     {\n            kind: this.machineConfigSchema.attributes?.kind,\n            name: null,\n          },\n          drainBeforeDelete: true\n        },\n      };\n\n      if (this.provider === VMWARE_VSPHERE) {\n        pool.pool.machineOS = 'linux';\n      }\n\n      if (this.isElementalCluster) {\n        pool.pool.machineConfigRef.apiVersion = `${ this.machineConfigSchema.attributes.group }/${ this.machineConfigSchema.attributes.version }`;\n      }\n\n      this.machinePools.push(pool);\n\n      this.$nextTick(() => {\n        if (this.$refs.pools?.select) {\n          this.$refs.pools.select(name);\n        }\n      });\n    },\n\n    removeMachinePool(idx) {\n      const entry = this.machinePools[idx];\n\n      if (!entry) {\n        return;\n      }\n\n      if (entry.create) {\n        // If this is a new pool that isn't saved yet, it can just be dropped\n        removeObject(this.machinePools, entry);\n      } else {\n        // Mark for removal on save\n        entry.remove = true;\n      }\n    },\n\n    async syncMachineConfigWithLatest(machinePool) {\n      if (machinePool?.config?.id) {\n        // Use management/request instead of management/find to avoid overwriting the current machine pool in the store\n        const _latestConfig = await this.$store.dispatch('management/request', { url: `/v1/${ machinePool.config.type }s/${ machinePool.config.id }` });\n        const latestConfig = await this.$store.dispatch('management/create', _latestConfig);\n\n        const clonedCurrentConfig = await this.$store.dispatch('management/clone', { resource: machinePool.config });\n        const clonedLatestConfig = await this.$store.dispatch('management/clone', { resource: latestConfig });\n\n        // We don't allow the user to edit any of the fields in metadata from the UI so it's safe to override it with the\n        // metadata defined by the latest backend value. This is primarily used to ensure the resourceVersion is up to date.\n        delete clonedCurrentConfig.metadata;\n\n        if (this.provider === VMWARE_VSPHERE) {\n          machinePool.config = vspherePoolConfigMerge(clonedLatestConfig, clonedCurrentConfig);\n        } else {\n          machinePool.config = merge(clonedLatestConfig, clonedCurrentConfig);\n        }\n      }\n    },\n\n    async saveMachinePools(hookContext) {\n      if (hookContext === CONTEXT_HOOK_EDIT_YAML) {\n        await new Promise((resolve, reject) => {\n          this.$store.dispatch('cluster/promptModal', {\n            component:      'GenericPrompt',\n            componentProps: {\n              title:     this.t('cluster.rke2.modal.editYamlMachinePool.title'),\n              body:      this.t('cluster.rke2.modal.editYamlMachinePool.body'),\n              applyMode: 'editAndContinue',\n              confirm:   async(confirmed) => {\n                if (confirmed) {\n                  await this.validateMachinePool();\n\n                  if (this.errors.length) {\n                    reject(new Error('Machine Pool validation errors'));\n                  }\n\n                  resolve();\n                } else {\n                  reject(new Error('User Cancelled'));\n                }\n              }\n            },\n          });\n        });\n      }\n\n      const finalPools = [];\n\n      // If the extension provider wants to do this, let them\n      if (this.extensionProvider?.saveMachinePoolConfigs) {\n        return await this.extensionProvider.saveMachinePoolConfigs(this.machinePools, this.value);\n      }\n\n      for (const entry of this.machinePools) {\n        if (entry.remove) {\n          continue;\n        }\n\n        await this.syncMachineConfigWithLatest(entry);\n\n        // Capitals and such aren't allowed;\n        set(entry.pool, 'name', normalizeName(entry.pool.name) || 'pool');\n\n        const prefix = `${ this.value.metadata.name }-${ entry.pool.name }`.substr(0, 50).toLowerCase();\n\n        if (entry.create) {\n          if (!entry.config.metadata?.name) {\n            entry.config.metadata.generateName = `nc-${ prefix }-`;\n          }\n\n          const neu = await entry.config.save();\n\n          entry.config = neu;\n          entry.pool.machineConfigRef.name = neu.metadata.name;\n          entry.create = false;\n          entry.update = true;\n        } else if (entry.update) {\n          entry.config = await entry.config.save();\n        }\n\n        // Ensure Elemental clusters have a hostname prefix\n        if (this.isElementalCluster && !entry.pool.hostnamePrefix) {\n          entry.pool.hostnamePrefix = `${ prefix }-`;\n        }\n\n        finalPools.push(entry.pool);\n      }\n\n      this.value.spec.rkeConfig.machinePools = finalPools;\n    },\n\n    async cleanupMachinePools() {\n      for (const entry of this.machinePools) {\n        if (entry.remove && entry.config) {\n          try {\n            await entry.config.remove();\n          } catch (e) { }\n        }\n      }\n    },\n\n    async saveRoleBindings() {\n      await this.value.waitForMgmt();\n\n      if (this.membershipUpdate.save) {\n        await this.membershipUpdate.save(this.value.mgmt.id);\n      }\n    },\n\n    /**\n     * Ensure that all the existing node roles pool are at least 1 each\n     */\n    hasRequiredNodes() {\n      return this.nodeTotals?.color && Object.values(this.nodeTotals.color).every((color) => color !== NODE_TOTAL.error.color);\n    },\n\n    cancelCredential() {\n      if (this.$refs.cruresource) {\n        this.$refs.cruresource.emitOrRoute();\n      }\n    },\n\n    done() {\n      let routeName = 'c-cluster-product-resource';\n\n      if (this.mode === _CREATE && (this.provider === 'import' || this.provider === 'custom')) {\n        // Go show the registration command\n        routeName = 'c-cluster-product-resource-namespace-id';\n      }\n\n      this.$router.push({\n        name:   routeName,\n        params: {\n          cluster:   this.$route.params.cluster,\n          product:   this.$store.getters['productId'],\n          resource:  CAPI.RANCHER_CLUSTER,\n          namespace: this.value.metadata.namespace,\n          id:        this.value.metadata.name,\n        },\n      });\n    },\n\n    showAddonConfirmation() {\n      return new Promise((resolve, reject) => {\n        this.$store.dispatch('cluster/promptModal', {\n          component: 'AddonConfigConfirmationDialog',\n          resources: [(value) => resolve(value)]\n        });\n      });\n    },\n\n    // Set busy before save and clear after save\n    async saveOverride(btnCb) {\n      this.$set(this, 'busy', true);\n\n      // If the provider is from an extension, let it do the provision step\n      if (this.extensionProvider?.provision) {\n        const errors = await this.extensionProvider?.provision(this.value, this.machinePools);\n        const okay = (errors || []).length === 0;\n\n        this.errors = errors;\n        this.$set(this, 'busy', false);\n\n        btnCb(okay);\n\n        if (okay) {\n          // If saved okay, go to the done route\n          return this.done();\n        }\n      }\n\n      // Default save\n      return this._doSaveOverride((done) => {\n        this.$set(this, 'busy', false);\n\n        return btnCb(done);\n      });\n    },\n\n    async _doSaveOverride(btnCb) {\n      // We cannot use the hook, because it is triggered on YAML toggle without restore initialized data\n      this.agentConfigurationCleanup();\n\n      const isEditVersion = this.isEdit && this.liveValue?.spec?.kubernetesVersion !== this.value?.spec?.kubernetesVersion;\n\n      if (isEditVersion) {\n        const shouldContinue = await this.showAddonConfirmation();\n\n        if (!shouldContinue) {\n          return btnCb('cancelled');\n        }\n      }\n\n      this.validateClusterName();\n\n      await this.validateMachinePool();\n\n      if (this.errors.length) {\n        btnCb(false);\n\n        return;\n      }\n\n      try {\n        const clusterId = get(this.credential, 'decodedData.clusterId') || '';\n\n        this.applyChartValues(this.value.spec.rkeConfig);\n\n        const isUpgrade = this.isEdit && this.liveValue?.spec?.kubernetesVersion !== this.value?.spec?.kubernetesVersion;\n\n        if (this.agentConfig?.['cloud-provider-name'] === HARVESTER && clusterId && (this.isCreate || isUpgrade)) {\n          const namespace = this.machinePools?.[0]?.config?.vmNamespace;\n\n          const res = await this.$store.dispatch('management/request', {\n            url:    `/k8s/clusters/${ clusterId }/v1/harvester/kubeconfig`,\n            method: 'POST',\n            data:   {\n              csiClusterRoleName: 'harvesterhci.io:csi-driver',\n              clusterRoleName:    'harvesterhci.io:cloudprovider',\n              namespace,\n              serviceAccountName: this.value.metadata.name,\n            },\n          });\n\n          const kubeconfig = res.data;\n\n          const harvesterKubeconfigSecret = await this.createKubeconfigSecret(kubeconfig);\n\n          set(this.agentConfig, 'cloud-provider-config', `secret://fleet-default:${ harvesterKubeconfigSecret?.metadata?.name }`);\n\n          if (this.isCreate) {\n            set(this.chartValues, `${ HARVESTER_CLOUD_PROVIDER }.global.cattle.clusterName`, this.value.metadata.name);\n          }\n\n          const distroRoot = this.value?.spec?.rkeConfig?.dataDirectories?.k8sDistro?.length ? this.value?.spec?.rkeConfig?.dataDirectories?.k8sDistro : '/var/lib/rancher/rke2';\n\n          set(this.chartValues, `${ HARVESTER_CLOUD_PROVIDER }.cloudConfigPath`, `${ distroRoot }/etc/config-files/cloud-provider-config`);\n        }\n      } catch (err) {\n        this.errors.push(err);\n\n        btnCb(false);\n\n        return;\n      }\n\n      // Remove null profile on machineGlobalConfig - https://github.com/rancher/dashboard/issues/8480\n      if (this.value.spec?.rkeConfig?.machineGlobalConfig?.profile === null) {\n        delete this.value.spec.rkeConfig.machineGlobalConfig.profile;\n      }\n\n      // Store the current data for fleet and cluster agent so that we can re-apply it later if the save fails\n      // The cleanup occurs before save with agentConfigurationCleanup()\n      const clusterAgentDeploymentCustomization = this.value.spec[CLUSTER_AGENT_CUSTOMIZATION] ? JSON.parse(JSON.stringify(this.value.spec[CLUSTER_AGENT_CUSTOMIZATION])) : null;\n      const fleetAgentDeploymentCustomization = this.value.spec[FLEET_AGENT_CUSTOMIZATION] ? JSON.parse(JSON.stringify(this.value.spec[FLEET_AGENT_CUSTOMIZATION])) : null;\n\n      await this.save(btnCb);\n\n      // comes from createEditView mixin\n      // if there are any errors saving, restore the agent config data\n      if (this.errors?.length) {\n        // Ensure the agent configuration is set back to the values before we changed (cleaned) it\n        set(this.value.spec, CLUSTER_AGENT_CUSTOMIZATION, clusterAgentDeploymentCustomization);\n        set(this.value.spec, FLEET_AGENT_CUSTOMIZATION, fleetAgentDeploymentCustomization);\n      }\n    },\n\n    async actuallySave(url) {\n      if (this.extensionProvider?.saveCluster) {\n        return await this.extensionProvider?.saveCluster(this.value, this.schema);\n      }\n\n      if (this.isCreate) {\n        url = url || this.schema.linkFor('collection');\n        const res = await this.value.save({ url });\n\n        if (res) {\n          Object.assign(this.value, res);\n        }\n      } else {\n        await this.value.save();\n      }\n    },\n\n    // create a secret to reference the harvester cluster kubeconfig in rkeConfig\n    async createKubeconfigSecret(kubeconfig = '') {\n      const clusterName = this.value.metadata.name;\n      const secret = await this.$store.dispatch('management/create', {\n        type:     SECRET,\n        metadata: {\n          namespace: 'fleet-default', generateName: 'harvesterconfig', annotations: { [CAPI_ANNOTATIONS.SECRET_AUTH]: clusterName, [CAPI_ANNOTATIONS.SECRET_WILL_DELETE]: 'true' }\n        },\n        data: { credential: base64Encode(kubeconfig) }\n      });\n\n      return secret.save({ url: '/v1/secrets', method: 'POST' });\n    },\n\n    cancel() {\n      this.$router.push({\n        name:   'c-cluster-product-resource',\n        params: {\n          cluster:  this.$route.params.cluster,\n          product:  this.$store.getters['productId'],\n          resource: CAPI.RANCHER_CLUSTER,\n        },\n      });\n    },\n\n    /**\n     * Ensure all chart information required to show addons is available\n     *\n     * This basically means\n     * 1) That the full chart relating to the addon is fetched (which includes core chart, readme and values)\n     * 2) We're ready to cache any values the user provides for each addon\n     */\n    async initAddons() {\n      for (const chartName of this.addonNames) {\n        const entry = this.chartVersions[chartName];\n\n        // prevent fetching of addon config for 'none' CNI option\n        // https://github.com/rancher/dashboard/issues/10338\n        if (this.versionInfo[chartName] || chartName.includes('none')) {\n          continue;\n        }\n\n        try {\n          const res = await this.$store.dispatch('catalog/getVersionInfo', {\n            repoType:    'cluster',\n            repoName:    entry.repo,\n            chartName,\n            versionName: entry.version,\n          });\n\n          set(this.versionInfo, chartName, res);\n          const key = this.chartVersionKey(chartName);\n\n          if (!this.userChartValues[key]) {\n            this.userChartValues[key] = {};\n          }\n        } catch (e) {\n          console.error(`Failed to fetch or process chart info for ${ chartName }`); // eslint-disable-line no-console\n        }\n      }\n    },\n\n    showAddons(key) {\n      this.addonsRev++;\n      this.addonNames.forEach((name) => {\n        const chartValues = this.versionInfo[name]?.questions ? this.initYamlEditor(name) : {};\n\n        set(this.userChartValuesTemp, name, chartValues);\n      });\n      this.refreshComponentWithYamls(key);\n    },\n    refreshComponentWithYamls(key) {\n      const component = this.$refs[key];\n\n      if (component) {\n        this.refreshYamls(component.$refs);\n      }\n    },\n\n    refreshYamls(refs) {\n      const keys = Object.keys(refs).filter((x) => x.startsWith('yaml'));\n\n      for (const k of keys) {\n        const entry = refs[k];\n        const list = isArray(entry) ? entry : [entry];\n\n        for (const component of list) {\n          component?.refresh(); // `yaml` ref can be undefined on switching from Basic to Addon tab (Azure --> Amazon --> addon)\n        }\n      }\n    },\n\n    updateValues(name, values) {\n      set(this.userChartValuesTemp, name, values);\n      this.syncChartValues(name);\n    },\n\n    syncChartValues: throttle(function(name) {\n      const fromChart = this.versionInfo[name]?.values;\n      const fromUser = this.userChartValuesTemp[name];\n      const different = diff(fromChart, fromUser);\n\n      this.userChartValues[this.chartVersionKey(name)] = different;\n    }, 250, { leading: true }),\n\n    initYamlEditor(name) {\n      const defaultChartValue = this.versionInfo[name];\n      const key = this.chartVersionKey(name);\n\n      return merge({}, defaultChartValue?.values || {}, this.userChartValues[key] || {});\n    },\n\n    initServerAgentArgs() {\n      for (const k in this.serverArgs) {\n        if (this.serverConfig[k] === undefined) {\n          const def = this.serverArgs[k].default;\n\n          set(this.serverConfig, k, (def !== undefined ? def : undefined));\n        }\n      }\n\n      for (const k in this.agentArgs) {\n        if (this.agentConfig?.[k] === undefined) {\n          const def = this.agentArgs[k].default;\n\n          set(this.agentConfig, k, (def !== undefined ? def : undefined));\n        }\n      }\n\n      if (!this.serverConfig?.profile) {\n        set(this.serverConfig, 'profile', null);\n      }\n    },\n\n    chartVersionKey(name) {\n      const addonVersion = this.addonVersions.find((av) => av.name === name);\n\n      return addonVersion ? `${ name }-${ addonVersion.version }` : name;\n    },\n\n    onMembershipUpdate(update) {\n      this.$set(this, 'membershipUpdate', update);\n    },\n\n    async initRegistry() {\n      // Check for an existing cluster scoped registry\n      const clusterRegistry = this.agentConfig?.['system-default-registry'] || '';\n\n      // Check for the global registry\n      this.systemRegistry = (await this.$store.dispatch('management/find', { type: MANAGEMENT.SETTING, id: SETTING.SYSTEM_DEFAULT_REGISTRY })).value || '';\n\n      // The order of precedence is to use the cluster scoped registry\n      // if it exists, then use the global scoped registry as a fallback\n      if (clusterRegistry) {\n        this.registryHost = clusterRegistry;\n      } else {\n        this.registryHost = this.systemRegistry;\n      }\n\n      let registrySecret = null;\n      let regs = this.rkeConfig.registries;\n\n      if (!regs) {\n        regs = {};\n        set(this.rkeConfig, 'registries', regs);\n      }\n\n      if (!regs.configs) {\n        set(regs, 'configs', {});\n      }\n\n      if (!regs.mirrors) {\n        set(regs, 'mirrors', {});\n      }\n\n      const config = regs.configs[this.registryHost];\n\n      if (config) {\n        registrySecret = config.authConfigSecretName;\n      }\n\n      this.registrySecret = registrySecret;\n\n      const hasMirrorsOrAuthConfig = Object.keys(regs.configs).length > 0 || Object.keys(regs.mirrors).length > 0;\n\n      if (this.registryHost || registrySecret || hasMirrorsOrAuthConfig) {\n        this.showCustomRegistryInput = true;\n\n        if (hasMirrorsOrAuthConfig) {\n          this.showCustomRegistryAdvancedInput = true;\n        }\n      }\n    },\n\n    setRegistryConfig() {\n      const hostname = (this.registryHost || '').trim();\n\n      if (this.systemRegistry) {\n        // Empty string overrides the system default to nothing\n        set(this.agentConfig, 'system-default-registry', '');\n      } else {\n        // No need to set anything\n        set(this.agentConfig, 'system-default-registry', undefined);\n      }\n      if (!hostname || hostname === this.systemRegistry) {\n        // Undefined removes the key which uses the global setting without hardcoding it into the config\n        set(this.agentConfig, 'system-default-registry', undefined);\n      } else {\n        set(this.agentConfig, 'system-default-registry', hostname);\n      }\n\n      if (hostname && this.registrySecret) {\n        // For a registry with basic auth, but no mirrors,\n        // add a single registry config with the basic auth secret.\n        const basicAuthConfig = {\n          [hostname]: {\n            authConfigSecretName: this.registrySecret,\n            caBundle:             null,\n            insecureSkipVerify:   false,\n            tlsSecretName:        null,\n          }\n        };\n\n        const rkeConfig = this.value.spec.rkeConfig;\n\n        if (!rkeConfig) {\n          this.value.spec.rkeConfig = { registries: { configs: basicAuthConfig } };\n        } else if (rkeConfig.registries.configs && Object.keys(rkeConfig.registries.configs).length > 0) {\n          // If some existing authentication secrets are already configured\n          // for registry mirrors, the basic auth is added to the existing ones.\n          const existingConfigs = rkeConfig.registries.configs;\n\n          this.value.spec.rkeConfig.registries.configs = { ...basicAuthConfig, ...existingConfigs };\n        } else {\n          const existingMirrorAndAuthConfig = this.value.spec.rkeConfig.registries;\n\n          this.value.spec.rkeConfig.registries = {\n            ...existingMirrorAndAuthConfig,\n            configs: basicAuthConfig\n          };\n        }\n      }\n    },\n\n    updateConfigs(configs) {\n      // Update authentication configuration\n      // for each mirror\n      if (!this.value.spec?.rkeConfig) {\n        this.value.spec.rkeConfig = { registries: {} };\n      }\n      set(this.value.spec.rkeConfig.registries, 'configs', configs);\n    },\n\n    getAllOptionsAfterCurrentVersion(versions, currentVersion, defaultVersion) {\n      const out = (versions || []).filter((obj) => !!obj.serverArgs).map((obj) => {\n        let disabled = false;\n        let experimental = false;\n        let isCurrentVersion = false;\n        let label = obj.id;\n\n        if (currentVersion) {\n          disabled = compare(obj.id, currentVersion) < 0;\n          isCurrentVersion = compare(obj.id, currentVersion) === 0;\n        }\n\n        if (defaultVersion) {\n          experimental = compare(defaultVersion, obj.id) < 0;\n        }\n\n        if (isCurrentVersion) {\n          label = `${ label } ${ this.t('cluster.kubernetesVersion.current') }`;\n        }\n\n        if (experimental) {\n          label = `${ label } ${ this.t('cluster.kubernetesVersion.experimental') }`;\n        }\n\n        return {\n          label,\n          value:      obj.id,\n          sort:       sortable(obj.id),\n          serverArgs: obj.serverArgs,\n          agentArgs:  obj.agentArgs,\n          charts:     obj.charts,\n          disabled,\n        };\n      });\n\n      if (currentVersion && !out.find((obj) => obj.value === currentVersion)) {\n        out.push({\n          label: `${ currentVersion } ${ this.t('cluster.kubernetesVersion.current') }`,\n          value: currentVersion,\n          sort:  sortable(currentVersion),\n        });\n      }\n\n      const sorted = sortBy(out, 'sort:desc');\n\n      const mostRecentPatchVersions = this.getMostRecentPatchVersions(sorted);\n\n      const sortedWithDeprecatedLabel = sorted.map((optionData) => {\n        const majorMinor = `${ semver.major(optionData.value) }.${ semver.minor(optionData.value) }`;\n\n        if (mostRecentPatchVersions[majorMinor] === optionData.value) {\n          return optionData;\n        }\n\n        return {\n          ...optionData,\n          label: `${ optionData.label } ${ this.t('cluster.kubernetesVersion.deprecated') }`\n        };\n      });\n\n      return sortedWithDeprecatedLabel;\n    },\n\n    getMostRecentPatchVersions(sortedVersions) {\n      // Get the most recent patch version for each Kubernetes minor version.\n      const versionMap = {};\n\n      sortedVersions.forEach((version) => {\n        const majorMinor = `${ semver.major(version.value) }.${ semver.minor(version.value) }`;\n\n        if (!versionMap[majorMinor]) {\n          // Because we start with a sorted list of versions, we know the\n          // highest patch version is first in the list, so we only keep the\n          // first of each minor version in the list.\n          versionMap[majorMinor] = version.value;\n        }\n      });\n\n      return versionMap;\n    },\n\n    filterOutDeprecatedPatchVersions(allVersions, currentVersion) {\n      // Get the most recent patch version for each Kubernetes minor version.\n      const mostRecentPatchVersions = this.getMostRecentPatchVersions(allVersions);\n\n      const filteredVersions = allVersions.filter((version) => {\n        // Always show pre-releases\n        if (semver.prerelease(version.value)) {\n          return true;\n        }\n\n        const majorMinor = `${ semver.major(version.value) }.${ semver.minor(version.value) }`;\n\n        // Always show current version, else show if we haven't shown anything for this major.minor version yet\n        if (version.value === currentVersion || mostRecentPatchVersions[majorMinor] === version.value) {\n          return true;\n        }\n\n        return false;\n      });\n\n      return filteredVersions;\n    },\n\n    generateYaml() {\n      const resource = this.value;\n      const inStore = this.$store.getters['currentStore'](resource);\n      const schemas = this.$store.getters[`${ inStore }/all`](SCHEMA);\n      const clonedResource = clone(resource);\n\n      this.applyChartValues(clonedResource.spec.rkeConfig);\n\n      const out = createYaml(schemas, resource.type, clonedResource);\n\n      return out;\n    },\n\n    applyChartValues(rkeConfig) {\n      rkeConfig.chartValues = {};\n      this.addonNames.forEach((name) => {\n        const key = this.chartVersionKey(name);\n        const userValues = this.userChartValues[key];\n\n        if (userValues) {\n          set(rkeConfig.chartValues, name, userValues);\n        }\n      });\n    },\n    get,\n\n    setHarvesterDefaultCloudProvider() {\n      if (this.isHarvesterDriver &&\n        this.mode === _CREATE &&\n        this.agentConfig &&\n        !this.agentConfig['cloud-provider-name'] &&\n        !this.isHarvesterExternalCredential &&\n        !this.isHarvesterIncompatible\n      ) {\n        this.agentConfig['cloud-provider-name'] = HARVESTER;\n      } else {\n        this.agentConfig['cloud-provider-name'] = '';\n      }\n    },\n\n    async setHarvesterVersionRange() {\n      const clusterId = this.credential?.decodedData?.clusterId;\n      const clusterType = this.credential?.decodedData?.clusterType;\n\n      if (clusterId && clusterType === 'imported') {\n        const url = `/k8s/clusters/${ clusterId }/v1`;\n        const res = await this.$store.dispatch('cluster/request', { url: `${ url }/${ HCI.SETTING }s` });\n\n        const version = (res?.data || []).find((s) => s.id === 'harvester-csi-ccm-versions');\n\n        if (version) {\n          this.harvesterVersionRange = JSON.parse(version.value || version.default || '{}');\n        } else {\n          this.harvesterVersionRange = {};\n        }\n      }\n      this.setHarvesterDefaultCloudProvider();\n    },\n    toggleCustomRegistry(neu) {\n      this.showCustomRegistryInput = neu;\n      if (this.registryHost) {\n        this.registryHost = null;\n        this.registrySecret = null;\n      } else {\n        this.initRegistry();\n      }\n    },\n\n    /**\n     * Reset PSA on several input changes for given conditions\n     */\n    togglePsaDefault() {\n      // This option is created from the server and is guaranteed to exist #8032\n      const hardcodedTemplate = 'rancher-restricted';\n      const cisValue = this.agentConfig?.profile || this.serverConfig?.profile;\n\n      if (!this.cisOverride) {\n        if (cisValue) {\n          set(this.value.spec, 'defaultPodSecurityAdmissionConfigurationTemplateName', hardcodedTemplate);\n        }\n      }\n    },\n\n    handleCisChange() {\n      this.togglePsaDefault();\n      this.updateCisProfile();\n    },\n\n    updateCisProfile() {\n      // If the user selects any Worker CIS Profile,\n      // protect-kernel-defaults should be set to false\n      // in the RKE2 worker/agent config.\n      const selectedCisProfile = this.agentConfig?.profile;\n\n      if (selectedCisProfile) {\n        set(this.agentConfig, 'protect-kernel-defaults', true);\n      } else {\n        set(this.agentConfig, 'protect-kernel-defaults', false);\n      }\n    },\n    updateAdditionalManifest(neu) {\n      this.value.spec.rkeConfig.additionalManifest = neu;\n    },\n\n    /**\n     * Handle k8s changes side effects, like PSA resets\n     */\n    handleKubernetesChange(value, old) {\n      if (value) {\n        this.togglePsaDefault();\n\n        // If Harvester driver, reset cloud provider if not compatible\n        if (this.isHarvesterDriver && this.mode === _CREATE && this.isHarvesterIncompatible) {\n          this.setHarvesterDefaultCloudProvider();\n        }\n      }\n    },\n\n    handleShowDeprecatedPatchVersionsChanged(value) {\n      this.showDeprecatedPatchVersions = value;\n    },\n    /**\n     * Track Machine Pool validation status\n     */\n    machinePoolValidationChanged(id, value) {\n      if (value === undefined) {\n        this.$delete(this.machinePoolValidation, id);\n      } else {\n        this.$set(this.machinePoolValidation, id, value);\n      }\n    },\n    handleEnabledSystemServicesChanged(val) {\n      set(this.serverConfig, 'disable', val);\n    },\n\n    handleCiliumValuesChanged(neu) {\n      if (neu === undefined) {\n        return;\n      }\n\n      const name = this.chartVersionKey('rke2-cilium');\n\n      set(this, 'userChartValues', {\n        ...this.userChartValues,\n        [name]: { ...neu }\n      });\n    },\n\n    handleCisChanged() {\n      this.handleCisChange();\n    },\n    handlePsaDefaultChanged() {\n      this.togglePsaDefault();\n    },\n    handleMachinePoolError(error) {\n      this.machinePoolErrors = merge(this.machinePoolErrors, error);\n\n      const errors = Object.entries(this.machinePoolErrors)\n        .map((x) => {\n          if (!x[1].length) {\n            return;\n          }\n\n          const formattedFields = (() => {\n            switch (x[1].length) {\n            case 1:\n              return x[1][0];\n            case 2:\n              return `${ x[1][0] } and ${ x[1][1] }`;\n            default: {\n              const [head, ...rest] = x[1];\n\n              return `${ rest.join(', ') }, and ${ head }`;\n            }\n            }\n          })();\n\n          return this.t('cluster.banner.machinePoolError', {\n            count: x[1].length, pool_name: x[0], fields: formattedFields\n          }, true);\n        })\n        .filter((x) => x);\n\n      if (!errors) {\n        return;\n      }\n\n      this.errors = errors;\n    },\n    handleS3BackupChanged(neu) {\n      this.s3Backup = neu;\n      if (neu) {\n        // We need to make sure that s3 doesn't already have an existing value otherwise when editing a cluster with s3 defined this will clear s3.\n        if (isEmpty(this.rkeConfig.etcd?.s3)) {\n          set(this.rkeConfig.etcd, 's3', {});\n        }\n      } else {\n        set(this.rkeConfig.etcd, 's3', null);\n      }\n    },\n    handleConfigEtcdExposeMetricsChanged(neu) {\n      set(this.serverConfig, 'etcd-expose-metrics', neu);\n    },\n    handleRegistryHostChanged(neu) {\n      this.registryHost = neu;\n    },\n    handleRegistrySecretChanged(neu) {\n      this.registrySecret = neu;\n    },\n    validateClusterName() {\n      if (!this.value.metadata.name && this.agentConfig?.['cloud-provider-name'] === HARVESTER) {\n        this.errors.push(this.t('validation.required', { key: this.t('cluster.name.label') }, true));\n      }\n    },\n    async validateMachinePool() {\n      if (this.errors) {\n        clear(this.errors);\n      }\n      if (this.value.cloudProvider === 'aws') {\n        const missingProfileName = this.machinePools.some((mp) => !mp.config.iamInstanceProfile);\n\n        if (missingProfileName) {\n          this.errors.push(this.t('cluster.validation.iamInstanceProfileName', {}, true));\n        }\n      }\n\n      for (const [index] of this.machinePools.entries()) { // validator machine config\n        if (typeof this.$refs.pool[index]?.test === 'function') {\n          try {\n            const res = await this.$refs.pool[index].test();\n\n            if (Array.isArray(res) && res.length > 0) {\n              this.errors.push(...res);\n            }\n          } catch (e) {\n            this.errors.push(e);\n          }\n        }\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending && !loadedOnce\" />\n  <Banner\n    v-else-if=\"$fetchState.error\"\n    color=\"error\"\n    :label=\"$fetchState.error\"\n  />\n  <CruResource\n    v-else\n    ref=\"cruresource\"\n    :mode=\"mode\"\n    :validation-passed=\"validationPassed && fvFormIsValid\"\n    :resource=\"value\"\n    :errors=\"errors\"\n    :cancel-event=\"true\"\n    :done-route=\"doneRoute\"\n    :apply-hooks=\"applyHooks\"\n    :generate-yaml=\"generateYaml\"\n    class=\"rke2\"\n    component-testid=\"rke2-custom-create\"\n    @done=\"done\"\n    @finish=\"saveOverride\"\n    @cancel=\"cancel\"\n    @error=\"e => errors = e\"\n  >\n    <div class=\"header-warnings\">\n      <Banner\n        v-if=\"isEdit\"\n        color=\"warning\"\n        data-testid=\"edit-cluster-reprovisioning-documentation\"\n      >\n        <span v-clean-html=\"t('cluster.banner.rke2-k3-reprovisioning', {}, true)\" />\n      </Banner>\n    </div>\n    <SelectCredential\n      v-if=\"needCredential\"\n      v-model=\"credentialId\"\n      :mode=\"mode\"\n      :provider=\"provider\"\n      :cancel=\"cancelCredential\"\n      :showing-form=\"showForm\"\n      :default-on-cancel=\"true\"\n      data-testid=\"select-credential\"\n      class=\"mt-20\"\n    />\n\n    <div\n      v-if=\"showForm\"\n      data-testid=\"form\"\n      class=\"mt-20\"\n    >\n      <NameNsDescription\n        v-if=\"!isView\"\n        v-model=\"value\"\n        :mode=\"mode\"\n        :namespaced=\"needsNamespace\"\n        :namespace-options=\"allNamespaces\"\n        name-label=\"cluster.name.label\"\n        name-placeholder=\"cluster.name.placeholder\"\n        description-label=\"cluster.description.label\"\n        description-placeholder=\"cluster.description.placeholder\"\n        :rules=\"{ name: fvGetAndReportPathRules('metadata.name') }\"\n      >\n        <template\n          slot=\"customize\"\n        >\n          <ClusterAppearance\n            :name=\"clusterName\"\n            :currentCluster=\"currentCluster\"\n            :mode=\"mode\"\n          />\n        </template>\n      </NameNsDescription>\n\n      <Banner\n        v-if=\"appsOSWarning\"\n        color=\"error\"\n      >\n        {{ appsOSWarning }}\n      </Banner>\n\n      <!-- Pools Extras -->\n      <template v-if=\"hasMachinePools\">\n        <div class=\"clearfix\">\n          <h2\n            v-t=\"'cluster.tabs.machinePools'\"\n            class=\"pull-left\"\n          />\n          <div\n            v-if=\"!isView\"\n            class=\"pull-right\"\n          >\n            <BadgeState\n              v-clean-tooltip=\"nodeTotals.tooltip.etcd\"\n              :color=\"nodeTotals.color.etcd\"\n              :icon=\"nodeTotals.icon.etcd\"\n              :label=\"nodeTotals.label.etcd\"\n              class=\"mr-10\"\n            />\n            <BadgeState\n              v-clean-tooltip=\"nodeTotals.tooltip.controlPlane\"\n              :color=\"nodeTotals.color.controlPlane\"\n              :icon=\"nodeTotals.icon.controlPlane\"\n              :label=\"nodeTotals.label.controlPlane\"\n              class=\"mr-10\"\n            />\n            <BadgeState\n              v-clean-tooltip=\"nodeTotals.tooltip.worker\"\n              :color=\"nodeTotals.color.worker\"\n              :icon=\"nodeTotals.icon.worker\"\n              :label=\"nodeTotals.label.worker\"\n            />\n          </div>\n        </div>\n\n        <!-- Extra Tabs for Machine Pool -->\n        <Tabbed\n          ref=\"pools\"\n          :side-tabs=\"true\"\n          :show-tabs-add-remove=\"!isView\"\n          @addTab=\"addMachinePool($event)\"\n          @removeTab=\"removeMachinePool($event)\"\n        >\n          <template v-for=\"(obj, idx) in machinePools\">\n            <Tab\n              v-if=\"!obj.remove\"\n              :key=\"obj.id\"\n              :name=\"obj.id\"\n              :label=\"obj.pool.name || '(Not Named)'\"\n              :show-header=\"false\"\n              :error=\"!machinePoolValidation[obj.id]\"\n            >\n              <MachinePool\n                ref=\"pool\"\n                :value=\"obj\"\n                :cluster=\"value\"\n                :mode=\"mode\"\n                :provider=\"provider\"\n                :credential-id=\"credentialId\"\n                :idx=\"idx\"\n                :machine-pools=\"machinePools\"\n                :busy=\"busy\"\n                :pool-id=\"obj.id\"\n                :pool-create-mode=\"obj.create\"\n                @error=\"handleMachinePoolError\"\n                @validationChanged=\"v => machinePoolValidationChanged(obj.id, v)\"\n              />\n            </Tab>\n          </template>\n          <div v-if=\"!unremovedMachinePools.length\">\n            {{ t('cluster.machinePool.noPoolsDisclaimer') }}\n          </div>\n        </Tabbed>\n        <div class=\"spacer\" />\n      </template>\n\n      <!-- Cluster Tabs -->\n      <h2 v-t=\"'cluster.tabs.cluster'\" />\n      <Tabbed\n        :side-tabs=\"true\"\n        class=\"min-height\"\n      >\n        <Tab\n          name=\"basic\"\n          label-key=\"cluster.tabs.basic\"\n          :weight=\"11\"\n          @active=\"refreshComponentWithYamls('tab-Basics')\"\n        >\n          <!-- Basic -->\n          <Basics\n            ref=\"tab-Basics\"\n            v-model=\"value\"\n            :live-value=\"liveValue\"\n            :mode=\"mode\"\n            :provider=\"provider\"\n            :user-chart-values=\"userChartValues\"\n            :credential=\"credential\"\n            :cis-override=\"cisOverride\"\n            :all-psas=\"allPSAs\"\n            :addon-versions=\"addonVersions\"\n            :show-deprecated-patch-versions=\"showDeprecatedPatchVersions\"\n            :selected-version=\"selectedVersion\"\n            :is-harvester-driver=\"isHarvesterDriver\"\n            :is-harvester-incompatible=\"isHarvesterIncompatible\"\n            :version-options=\"versionOptions\"\n            :is-elemental-cluster=\"isElementalCluster\"\n            :have-arg-info=\"haveArgInfo\"\n            :show-cni=\"showCni\"\n            :show-cloud-provider=\"showCloudProvider\"\n            :cloud-provider-options=\"cloudProviderOptions\"\n            @cilium-values-changed=\"handleCiliumValuesChanged\"\n            @enabled-system-services-changed=\"handleEnabledSystemServicesChanged\"\n            @kubernetes-changed=\"handleKubernetesChange\"\n            @cis-changed=\"handleCisChanged\"\n            @psa-default-changed=\"handlePsaDefaultChanged\"\n            @show-deprecated-patch-versions-changed=\"handleShowDeprecatedPatchVersionsChanged\"\n          />\n        </Tab>\n\n        <!-- Member Roles -->\n        <Tab\n          v-if=\"canManageMembers\"\n          name=\"memberRoles\"\n          label-key=\"cluster.tabs.memberRoles\"\n          :weight=\"10\"\n        >\n          <MemberRoles\n            v-model=\"value\"\n            :mode=\"mode\"\n            :on-membership-update=\"onMembershipUpdate\"\n          />\n        </Tab>\n        <!-- etcd -->\n        <Tab\n          name=\"etcd\"\n          label-key=\"cluster.tabs.etcd\"\n        >\n          <Etcd\n            v-model=\"value\"\n            :mode=\"mode\"\n            :s3-backup=\"s3Backup\"\n            :register-before-hook=\"registerBeforeHook\"\n            :selected-version=\"selectedVersion\"\n            @s3-backup-changed=\"handleS3BackupChanged\"\n            @config-etcd-expose-metrics-changed=\"handleConfigEtcdExposeMetricsChanged\"\n          />\n        </Tab>\n\n        <!-- Networking -->\n        <Tab\n          v-if=\"haveArgInfo\"\n          name=\"networking\"\n          label-key=\"cluster.tabs.networking\"\n        >\n          <Networking\n            v-model=\"value\"\n            :mode=\"mode\"\n            :selected-version=\"selectedVersion\"\n            :truncate-limit=\"truncateLimit\"\n            @truncate-hostname=\"truncateHostname\"\n          />\n        </Tab>\n\n        <!-- Upgrade -->\n        <Tab\n          name=\"upgrade\"\n          label-key=\"cluster.tabs.upgrade\"\n        >\n          <Upgrade\n            v-model=\"value\"\n            :mode=\"mode\"\n          />\n        </Tab>\n\n        <!-- Registries -->\n        <Tab\n          name=\"registry\"\n          label-key=\"cluster.tabs.registry\"\n        >\n          <Registries\n            v-model=\"value\"\n            :mode=\"mode\"\n            :register-before-hook=\"registerBeforeHook\"\n            :show-custom-registry-input=\"showCustomRegistryInput\"\n            :registry-host=\"registryHost\"\n            :registry-secret=\"registrySecret\"\n            :show-custom-registry-advanced-input=\"showCustomRegistryAdvancedInput\"\n            @update-configs-changed=\"updateConfigs\"\n            @custom-registry-changed=\"toggleCustomRegistry\"\n            @registry-host-changed=\"handleRegistryHostChanged\"\n            @registry-secret-changed=\"handleRegistrySecretChanged\"\n          />\n        </Tab>\n\n        <!-- Add-on Config -->\n        <Tab\n          name=\"addons\"\n          label-key=\"cluster.tabs.addons\"\n          @active=\"showAddons('tab-addOnConfig')\"\n        >\n          <AddOnConfig\n            ref=\"tab-addOnConfig\"\n            v-model=\"value\"\n            :mode=\"mode\"\n            :version-info=\"versionInfo\"\n            :addon-versions=\"addonVersions\"\n            :addons-rev=\"addonsRev\"\n            :user-chart-values-temp=\"userChartValuesTemp\"\n            :init-yaml-editor=\"initYamlEditor\"\n            @update-questions=\"syncChartValues\"\n            @update-values=\"updateValues\"\n            @additional-manifest-changed=\"updateAdditionalManifest\"\n          />\n        </Tab>\n\n        <!-- Cluster Agent Configuration -->\n        <Tab\n          name=\"clusteragentconfig\"\n          label-key=\"cluster.agentConfig.tabs.cluster\"\n        >\n          <AgentConfiguration\n            v-if=\"value.spec.clusterAgentDeploymentCustomization\"\n            v-model=\"value.spec.clusterAgentDeploymentCustomization\"\n            data-testid=\"rke2-cluster-agent-config\"\n            type=\"cluster\"\n            :mode=\"mode\"\n          />\n        </Tab>\n\n        <!-- Fleet Agent Configuration -->\n        <Tab\n          name=\"fleetagentconfig\"\n          label-key=\"cluster.agentConfig.tabs.fleet\"\n        >\n          <AgentConfiguration\n            v-if=\"value.spec.fleetAgentDeploymentCustomization\"\n            v-model=\"value.spec.fleetAgentDeploymentCustomization\"\n            data-testid=\"rke2-fleet-agent-config\"\n            type=\"fleet\"\n            :mode=\"mode\"\n          />\n        </Tab>\n\n        <!-- Advanced -->\n        <Tab\n          v-if=\"haveArgInfo || agentArgs['protect-kernel-defaults']\"\n          name=\"advanced\"\n          label-key=\"cluster.tabs.advanced\"\n          :weight=\"-1\"\n        >\n          <Advanced\n            v-model=\"value\"\n            :mode=\"mode\"\n            :have-arg-info=\"haveArgInfo\"\n            :selected-version=\"selectedVersion\"\n          />\n        </Tab>\n\n        <AgentEnv\n          v-model=\"value\"\n          :mode=\"mode\"\n        />\n        <Labels\n          v-model=\"value\"\n          :mode=\"mode\"\n        />\n\n        <!-- Extension tabs -->\n        <Tab\n          v-for=\"tab, i in extensionTabs\"\n          :key=\"`${tab.name}${i}`\"\n          :name=\"tab.name\"\n          :label=\"tab.label\"\n          :label-key=\"tab.labelKey\"\n          :weight=\"tab.weight\"\n          :tooltip=\"tab.tooltip\"\n          :show-header=\"tab.showHeader\"\n          :display-alert-icon=\"tab.displayAlertIcon\"\n          :error=\"tab.error\"\n          :badge=\"tab.badge\"\n        >\n          <component\n            :is=\"tab.component\"\n            :resource=\"value\"\n          />\n        </Tab>\n      </Tabbed>\n    </div>\n\n    <Banner\n      v-if=\"unsupportedSelectorConfig\"\n      color=\"warning\"\n      :label=\"t('cluster.banner.warning')\"\n    />\n\n    <template\n      v-if=\"needCredential && !credentialId\"\n      #form-footer\n    >\n      <div><!-- Hide the outer footer --></div>\n    </template>\n  </CruResource>\n</template>\n\n<style lang=\"scss\" scoped>\n.min-height {\n  min-height: 40em;\n}\n\n.patch-version {\n  margin-top: 5px;\n}\n\n.header-warnings .banner {\n  margin-bottom: 0;\n}\n</style>\n"]}]}