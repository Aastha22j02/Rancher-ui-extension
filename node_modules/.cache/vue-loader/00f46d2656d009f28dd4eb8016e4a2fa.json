{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBSZXNvdXJjZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlVGFibGUudnVlJzsKaW1wb3J0IFRhZyBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9UYWcudnVlJzsKaW1wb3J0IHsgQmFubmVyIH0gZnJvbSAnQGNvbXBvbmVudHMvQmFubmVyJzsKaW1wb3J0IHsgUE9EUyB9IGZyb20gJ0BzaGVsbC9jb25maWcvdGFibGUtaGVhZGVycyc7CmltcG9ydCBtZXRyaWNQb2xsZXIgZnJvbSAnQHNoZWxsL21peGlucy9tZXRyaWMtcG9sbGVyJzsKCmltcG9ydCB7IENBUEkgYXMgQ0FQSV9BTk5PVEFUSU9OUyB9IGZyb20gJ0BzaGVsbC9jb25maWcvbGFiZWxzLWFubm90YXRpb25zLmpzJzsKCmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IEFjdGlvbkZpbmRQYWdlQXJncyB9IGZyb20gJ0BzaGVsbC90eXBlcy9zdG9yZS9kYXNoYm9hcmQtc3RvcmUudHlwZXMnOwppbXBvcnQgeyBGaWx0ZXJBcmdzLCBQYWdpbmF0aW9uRmlsdGVyRmllbGQsIFBhZ2luYXRpb25QYXJhbUZpbHRlciB9IGZyb20gJ0BzaGVsbC90eXBlcy9zdG9yZS9wYWdpbmF0aW9uLnR5cGVzJzsKCmltcG9ydCB7CiAgQ0FQSSwKICBNQU5BR0VNRU5ULCBNRVRSSUMsIE5PREUsIE5PUk1BTiwgUE9ECn0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCB7IGFsbEhhc2ggfSBmcm9tICdAc2hlbGwvdXRpbHMvcHJvbWlzZSc7CmltcG9ydCB7IEdST1VQX1JFU09VUkNFUywgbWFwUHJlZiB9IGZyb20gJ0BzaGVsbC9zdG9yZS9wcmVmcyc7CmltcG9ydCB7IENPTFVNTl9CUkVBS1BPSU5UUyB9IGZyb20gJ0BzaGVsbC90eXBlcy9zdG9yZS90eXBlLW1hcCc7CgppbXBvcnQgUmVzb3VyY2VGZXRjaCBmcm9tICdAc2hlbGwvbWl4aW5zL3Jlc291cmNlLWZldGNoJzsKaW1wb3J0IHsgbWFwR2V0dGVycyB9IGZyb20gJ3Z1ZXgnOwoKZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29tcG9uZW50KHsKICBuYW1lOiAgICAgICAnTGlzdE5vZGUnLAogIGNvbXBvbmVudHM6IHsKICAgIFJlc291cmNlVGFibGUsCiAgICBUYWcsCiAgICBCYW5uZXIKICB9LAogIG1peGluczogW21ldHJpY1BvbGxlciwgUmVzb3VyY2VGZXRjaF0sCgogIHByb3BzOiB7CiAgICByZXNvdXJjZTogewogICAgICB0eXBlOiAgICAgU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZSwKICAgIH0sCiAgICBzY2hlbWE6IHsKICAgICAgdHlwZTogICAgIE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICB9LAogICAgdXNlUXVlcnlQYXJhbXNGb3JTaW1wbGVGaWx0ZXJpbmc6IHsKICAgICAgdHlwZTogICAgQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCgogICAgbGlzdENvbXBvbmVudDogewogICAgICB0eXBlOiAgICBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfQogIH0sCgogIGFzeW5jIGZldGNoKCkgewogICAgdGhpcy4kaW5pdGlhbGl6ZUZldGNoRGF0YSh0aGlzLnJlc291cmNlKTsKCiAgICBhd2FpdCBhbGxIYXNoKHsKICAgICAga3ViZU5vZGVzOiB0aGlzLiRmZXRjaFR5cGUodGhpcy5yZXNvdXJjZSksCiAgICAgIC4uLnRoaXMuZmV0Y2hTZWNvbmRhcnlSZXNvdXJjZXMoKSwKICAgIH0pOwogIH0sCgogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAvLyBQb2RzIHJlcXVpcmVkIGZvciBgUG9kc2AgY29sdW1uJ3MgcnVubmluZyBwb2RzIG1ldHJpY3MKICAgICAgLy8gcG9kQ29uc3VtZWRVc2FnZSA9IHBvZENvbnN1bWVkIC8gcG9kQ29uc3VtZWRVc2FnZS4gcG9kQ29uc3VtZWQgLS0+IHBvZHMuIGFsbFBvZHMuZmlsdGVyKChwb2QpID0+IHBvZC5zcGVjLm5vZGVOYW1lID09PSB0aGlzLm5hbWUpCiAgICAgIGNhblZpZXdQb2RzOiAgICAgICAgISF0aGlzLiRzdG9yZS5nZXR0ZXJzW2BjbHVzdGVyL3NjaGVtYUZvcmBdKFBPRCksCiAgICAgIC8vIE5vcm1hbiBub2RlIHJlcXVpcmVkIGZvciBEcmFpbi9Db3Jkb24vVW5jb3Jkb24gYWN0aW9uCiAgICAgIGNhblZpZXdOb3JtYW5Ob2RlczogISF0aGlzLiRzdG9yZS5nZXR0ZXJzW2ByYW5jaGVyL3NjaGVtYUZvcmBdKE5PUk1BTi5OT0RFKSwKICAgICAgLy8gTWdtdCBOb2RlIHJlcXVpcmVkIHRvIGZpbmQgTm9ybWFuIG5vZGUKICAgICAgY2FuVmlld01nbXROb2RlczogICAhIXRoaXMuJHN0b3JlLmdldHRlcnNbYG1hbmFnZW1lbnQvc2NoZW1hRm9yYF0oTUFOQUdFTUVOVC5OT0RFKSwKICAgICAgLy8gUmVxdWlyZWQgZm9yIHNzaCAvIGRvd25sb2FkIGtleSBhY3Rpb25zCiAgICAgIGNhblZpZXdNYWNoaW5lczogICAgISF0aGlzLiRzdG9yZS5nZXR0ZXJzW2BtYW5hZ2VtZW50L3NjaGVtYUZvcmBdKENBUEkuTUFDSElORSksCiAgICAgIC8vIFJlcXVpcmVkIGZvciBDUFUgYW5kIFJBTSBjb2x1bW5zCiAgICAgIGNhblZpZXdOb2RlTWV0cmljczogISF0aGlzLiRzdG9yZS5nZXR0ZXJzWydjbHVzdGVyL3NjaGVtYUZvciddKE1FVFJJQy5OT0RFKSwKICAgIH07CiAgfSwKCiAgYmVmb3JlRGVzdHJveSgpIHsKICAgIC8vIFN0b3Agd2F0Y2hpbmcgcG9kcywgbm9kZXMgYW5kIG5vZGUgbWV0cmljcwogICAgaWYgKHRoaXMuY2FuVmlld1BvZHMpIHsKICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvZm9yZ2V0VHlwZScsIFBPRCk7CiAgICB9CgogICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvZm9yZ2V0VHlwZScsIE5PREUpOwogICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvZm9yZ2V0VHlwZScsIE1FVFJJQy5OT0RFKTsKICB9LAoKICBjb21wdXRlZDogewogICAgLi4ubWFwR2V0dGVycyhbJ2N1cnJlbnRDbHVzdGVyJ10pLAogICAgaGFzV2luZG93c05vZGVzKCkgewogICAgICAvLyBOb3RlIGlmIHNlcnZlciBzaWRlIHBhZ2luYXRpb24gaXMgdXNlZCB0aGlzIGlzIG9ubHkgYXBwbGljYWJsZSB0byB0aGUgY3VycmVudCBwYWdlCiAgICAgIHJldHVybiAodGhpcy5yb3dzIHx8IFtdKS5zb21lKChub2RlOiBhbnkpID0+IG5vZGUuc3RhdHVzLm5vZGVJbmZvLm9wZXJhdGluZ1N5c3RlbSA9PT0gJ3dpbmRvd3MnKTsKICAgIH0sCgogICAgdGFibGVHcm91cDogbWFwUHJlZihHUk9VUF9SRVNPVVJDRVMpLAoKICAgIGhlYWRlcnMoKSB7CiAgICAgIC8vIFRoaXMgaXMgYWxsIGFib3V0IGFkZGluZyB0aGUgcG9kcyBjb2x1bW4uLi4gaWYgdGhlIHVzZXIgY2FuIHNlZSBwb2RzCgogICAgICBpZiAodGhpcy5jYW5QYWdpbmF0ZSkgewogICAgICAgIGNvbnN0IHBhZ2luYXRpb25IZWFkZXJzID0gWy4uLnRoaXMuJHN0b3JlLmdldHRlcnNbJ3R5cGUtbWFwL2hlYWRlcnNGb3InXSh0aGlzLnNjaGVtYSwgdHJ1ZSldOwoKICAgICAgICBpZiAocGFnaW5hdGlvbkhlYWRlcnMpIHsKICAgICAgICAgIGlmICh0aGlzLmNhblZpZXdQb2RzKSB7CiAgICAgICAgICAgIHBhZ2luYXRpb25IZWFkZXJzLnNwbGljZShwYWdpbmF0aW9uSGVhZGVycy5sZW5ndGggLSAxLCAwLCB7CiAgICAgICAgICAgICAgLi4uUE9EUywKICAgICAgICAgICAgICBicmVha3BvaW50OiBDT0xVTU5fQlJFQUtQT0lOVFMuREVTS1RPUCwKICAgICAgICAgICAgICBzb3J0OiAgICAgICBmYWxzZSwKICAgICAgICAgICAgICBzZWFyY2g6ICAgICBmYWxzZSwKICAgICAgICAgICAgICBnZXRWYWx1ZTogICAocm93OiBhbnkpID0+IHJvdy5wb2RDb25zdW1lZFVzYWdlCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQoKICAgICAgICAgIHJldHVybiBwYWdpbmF0aW9uSGVhZGVyczsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgY29uc29sZS53YXJuKCdOb2RlcyBsaXN0IGV4cGVjdHMgcGFnaW5hdGlvbiBoZWFkZXJzIGJ1dCBub25lIGZvdW5kJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZQoKICAgICAgICAgIHJldHVybiBbXTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGNvbnN0IGhlYWRlcnMgPSBbLi4udGhpcy4kc3RvcmUuZ2V0dGVyc1sndHlwZS1tYXAvaGVhZGVyc0ZvciddKHRoaXMuc2NoZW1hLCBmYWxzZSldOwoKICAgICAgaWYgKHRoaXMuY2FuVmlld1BvZHMpIHsKICAgICAgICBoZWFkZXJzLnNwbGljZShoZWFkZXJzLmxlbmd0aCAtIDEsIDAsIHsKICAgICAgICAgIC4uLlBPRFMsCiAgICAgICAgICBicmVha3BvaW50OiBDT0xVTU5fQlJFQUtQT0lOVFMuREVTS1RPUCwKICAgICAgICAgIGdldFZhbHVlOiAgIChyb3c6IGFueSkgPT4gcm93LnBvZENvbnN1bWVkVXNhZ2UKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIGhlYWRlcnM7CiAgICB9LAogIH0sCgogIG1ldGhvZHM6IHsKICAgIGFzeW5jIGxvYWRNZXRyaWNzKCkgewogICAgICBpZiAoIXRoaXMuY2FuVmlld05vZGVNZXRyaWNzKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CgogICAgICBpZiAodGhpcy5jYW5QYWdpbmF0ZSkgewogICAgICAgIGlmICghdGhpcy5yb3dzLmxlbmd0aCkgewogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgY29uc3Qgb3B0OiBBY3Rpb25GaW5kUGFnZUFyZ3MgPSB7CiAgICAgICAgICBmb3JjZTogICAgICB0cnVlLAogICAgICAgICAgcGFnaW5hdGlvbjogbmV3IEZpbHRlckFyZ3MoewogICAgICAgICAgICBmaWx0ZXJzOiBuZXcgUGFnaW5hdGlvblBhcmFtRmlsdGVyKHsKICAgICAgICAgICAgICBmaWVsZHM6IHRoaXMucm93cy5tYXAoKHI6IGFueSkgPT4gbmV3IFBhZ2luYXRpb25GaWx0ZXJGaWVsZCh7CiAgICAgICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWUnLAogICAgICAgICAgICAgICAgdmFsdWU6IHIuaWQKICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgfSkKICAgICAgICAgIH0pCiAgICAgICAgfTsKCiAgICAgICAgYXdhaXQgdGhpcy4kc3RvcmUuZGlzcGF0Y2goJ2NsdXN0ZXIvZmluZFBhZ2UnLCB7CiAgICAgICAgICB0eXBlOiBNRVRSSUMuTk9ERSwKICAgICAgICAgIG9wdAogICAgICAgIH0pOwogICAgICB9IGVsc2UgewogICAgICAgIGF3YWl0IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7CiAgICAgICAgICB0eXBlOiBNRVRSSUMuTk9ERSwKICAgICAgICAgIG9wdDogIHsgZm9yY2U6IHRydWUgfQogICAgICAgIH0pOwogICAgICB9CgogICAgICB0aGlzLiRmb3JjZVVwZGF0ZSgpOwogICAgfSwKCiAgICB0b2dnbGVMYWJlbHMocm93OiBhbnkpIHsKICAgICAgdGhpcy4kc2V0KHJvdywgJ2Rpc3BsYXlMYWJlbHMnLCAhcm93LmRpc3BsYXlMYWJlbHMpOwogICAgfSwKCiAgICBmZXRjaFNlY29uZGFyeVJlc291cmNlcygpOiB7IFtrZXk6IHN0cmluZ106IFByb21pc2U8YW55Pn0gewogICAgICBpZiAodGhpcy5jYW5QYWdpbmF0ZSkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQoKICAgICAgY29uc3QgaGFzaDogeyBba2V5OiBzdHJpbmddOiBQcm9taXNlPGFueT59ID0ge307CgogICAgICBpZiAodGhpcy5jYW5WaWV3TWdtdE5vZGVzKSB7CiAgICAgICAgaGFzaC5tZ210Tm9kZXMgPSB0aGlzLiRmZXRjaFR5cGUoTUFOQUdFTUVOVC5OT0RFLCBbXSwgJ21hbmFnZW1lbnQnKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuY2FuVmlld05vcm1hbk5vZGVzKSB7CiAgICAgICAgaGFzaC5ub3JtYW5Ob2RlcyA9IHRoaXMuJGZldGNoVHlwZShOT1JNQU4uTk9ERSwgW10sICdyYW5jaGVyJyk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmNhblZpZXdNYWNoaW5lcykgewogICAgICAgIGhhc2gubWFjaGluZXMgPSB0aGlzLiRmZXRjaFR5cGUoQ0FQSS5NQUNISU5FLCBbXSwgJ21hbmFnZW1lbnQnKTsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuY2FuVmlld1BvZHMpIHsKICAgICAgICAvLyBObyBuZWVkIHRvIGJsb2NrIG9uIHRoaXMKICAgICAgICB0aGlzLiRmZXRjaFR5cGUoUE9EKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGhhc2g7CiAgICB9LAoKICAgIC8qKgogICAgICogTm9kZXMgY29sdW1ucyBuZWVkIG90aGVyIHJlc291cmNlcyBpbiBvcmRlciB0byBzaG93IGRhdGEgaW4gc29tZSBjb2x1bW5zCiAgICAgKgogICAgICogSW4gdGhlIHBhZ2luYXRlZCB3b3JsZCB3ZSB3YW50IHRvIHJlc3JpY3QgdGhlIGZldGNoIG9mIHRob3NlIHJlc291cmNlcyB0byBvbmx5IHRoZSBvbmUncyB3ZSBuZWVkCiAgICAgKgogICAgICogU28gd2hlbiB3ZSBoYXZlIGEgcGFnZS4uLi4gdXNlIHRob3NlIGVudHJpZXMgYXMgZmlsdGVycyB3aGVuIGZldGNoaW5nIHRoZSBvdGhlciByZXNvdXJjZXMKICAgICAqLwogICAgYXN5bmMgZmV0Y2hQYWdlU2Vjb25kYXJ5UmVzb3VyY2VzKGZvcmNlID0gZmFsc2UpIHsKICAgICAgaWYgKCF0aGlzLnJvd3M/Lmxlbmd0aCkgewogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHRoaXMuY2FuVmlld01nbXROb2RlcyAmJiB0aGlzLmNhblZpZXdOb3JtYW5Ob2RlcykgewogICAgICAgIC8vIFdlIG9ubHkgZmV0Y2ggbWdtdCBub2RlIHRvIGdldCBub3JtYW4gbm9kZS4gV2Ugb25seSBmZXRjaCBub2RlIHRvIGdldCBub2RlIGFjdGlvbnMKICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3JhbmNoZXIvZGFzaGJvYXJkL2lzc3Vlcy8xMDc0MwogICAgICAgIGNvbnN0IG9wdDogQWN0aW9uRmluZFBhZ2VBcmdzID0gewogICAgICAgICAgZm9yY2UsCiAgICAgICAgICBwYWdpbmF0aW9uOiBuZXcgRmlsdGVyQXJncyh7CiAgICAgICAgICAgIGZpbHRlcnM6IFBhZ2luYXRpb25QYXJhbUZpbHRlci5jcmVhdGVNdWx0aXBsZUZpZWxkcyh0aGlzLnJvd3MubWFwKChyOiBhbnkpID0+IG5ldyBQYWdpbmF0aW9uRmlsdGVyRmllbGQoewogICAgICAgICAgICAgIGZpZWxkOiAnc3RhdHVzLm5vZGVOYW1lJywKICAgICAgICAgICAgICB2YWx1ZTogci5pZAogICAgICAgICAgICB9KSkpLAogICAgICAgICAgfSkKICAgICAgICB9OwoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaChgbWFuYWdlbWVudC9maW5kUGFnZWAsIHsgdHlwZTogTUFOQUdFTUVOVC5OT0RFLCBvcHQgfSkKICAgICAgICAgIC50aGVuKCgpID0+IHsKICAgICAgICAgICAgdGhpcy4kc3RvcmUuZGlzcGF0Y2goYHJhbmNoZXIvZmluZEFsbGAsIHsgdHlwZTogTk9STUFOLk5PREUsIG9wdDogeyBmb3JjZSB9IH0pOwogICAgICAgICAgfSk7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmNhblZpZXdNYWNoaW5lcykgewogICAgICAgIGNvbnN0IG5hbWVzcGFjZSA9IHRoaXMuY3VycmVudENsdXN0ZXIucHJvdkNsdXN0ZXJJZD8uc3BsaXQoJy8nKVswXTsKCiAgICAgICAgaWYgKG5hbWVzcGFjZSkgewogICAgICAgICAgY29uc3Qgb3B0OiBBY3Rpb25GaW5kUGFnZUFyZ3MgPSB7CiAgICAgICAgICAgIGZvcmNlLAogICAgICAgICAgICBuYW1lc3BhY2VkOiBuYW1lc3BhY2UsCiAgICAgICAgICAgIHBhZ2luYXRpb246IG5ldyBGaWx0ZXJBcmdzKHsKICAgICAgICAgICAgICBmaWx0ZXJzOiBQYWdpbmF0aW9uUGFyYW1GaWx0ZXIuY3JlYXRlTXVsdGlwbGVGaWVsZHMoCiAgICAgICAgICAgICAgICB0aGlzLnJvd3MucmVkdWNlKChyZXM6IFBhZ2luYXRpb25GaWx0ZXJGaWVsZFtdLCByOiBhbnkgKSA9PiB7CiAgICAgICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSByLm1ldGFkYXRhPy5hbm5vdGF0aW9ucz8uW0NBUElfQU5OT1RBVElPTlMuTUFDSElORV9OQU1FXTsKCiAgICAgICAgICAgICAgICAgIGlmIChuYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2gobmV3IFBhZ2luYXRpb25GaWx0ZXJGaWVsZCh7CiAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ21ldGFkYXRhLm5hbWUnLAogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IG5hbWUsCiAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICByZXR1cm4gcmVzOwogICAgICAgICAgICAgICAgfSwgW10pCiAgICAgICAgICAgICAgKQogICAgICAgICAgICB9KQogICAgICAgICAgfTsKCiAgICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaChgbWFuYWdlbWVudC9maW5kUGFnZWAsIHsgdHlwZTogQ0FQSS5NQUNISU5FLCBvcHQgfSk7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAodGhpcy5jYW5WaWV3UG9kcykgewogICAgICAgIC8vIE5vdGUgLSBmZXRjaGluZyBwb2RzIGZvciBjdXJyZW50IHBhZ2UgY291bGQgYmUgYSBMT1Qgc3RpbGwgKHByb2JhYmx5IG1heCBvZiAzayAtIDMwMCBwb2RzIHBlciBub2RlIHggMTAwIG5vZGVzIGluIGEgcGFnZSkKICAgICAgICBjb25zdCBvcHQ6IEFjdGlvbkZpbmRQYWdlQXJncyA9IHsKICAgICAgICAgIGZvcmNlLAogICAgICAgICAgcGFnaW5hdGlvbjogbmV3IEZpbHRlckFyZ3MoewogICAgICAgICAgICBmaWx0ZXJzOiBQYWdpbmF0aW9uUGFyYW1GaWx0ZXIuY3JlYXRlTXVsdGlwbGVGaWVsZHMoCiAgICAgICAgICAgICAgdGhpcy5yb3dzLm1hcCgocjogYW55KSA9PiBuZXcgUGFnaW5hdGlvbkZpbHRlckZpZWxkKHsKICAgICAgICAgICAgICAgIGZpZWxkOiAnc3BlYy5ub2RlTmFtZScsCiAgICAgICAgICAgICAgICB2YWx1ZTogci5pZCwKICAgICAgICAgICAgICB9KSkKICAgICAgICAgICAgKQogICAgICAgICAgfSkKICAgICAgICB9OwoKICAgICAgICB0aGlzLiRzdG9yZS5kaXNwYXRjaChgY2x1c3Rlci9maW5kUGFnZWAsIHsgdHlwZTogUE9ELCBvcHQgfSk7CiAgICAgIH0KCiAgICAgIC8vIEZldGNoIG1ldHJpY3MgZ2l2ZW4gdGhlIGN1cnJlbnQgcGFnZQogICAgICB0aGlzLmxvYWRNZXRyaWNzKCk7CiAgICB9LAogIH0sCn0pOwo="},{"version":3,"sources":["node.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"node.vue","sourceRoot":"node_modules/@rancher/shell/list","sourcesContent":["<script lang=\"ts\">\nimport ResourceTable from '@shell/components/ResourceTable.vue';\nimport Tag from '@shell/components/Tag.vue';\nimport { Banner } from '@components/Banner';\nimport { PODS } from '@shell/config/table-headers';\nimport metricPoller from '@shell/mixins/metric-poller';\n\nimport { CAPI as CAPI_ANNOTATIONS } from '@shell/config/labels-annotations.js';\n\nimport { defineComponent } from 'vue';\nimport { ActionFindPageArgs } from '@shell/types/store/dashboard-store.types';\nimport { FilterArgs, PaginationFilterField, PaginationParamFilter } from '@shell/types/store/pagination.types';\n\nimport {\n  CAPI,\n  MANAGEMENT, METRIC, NODE, NORMAN, POD\n} from '@shell/config/types';\nimport { allHash } from '@shell/utils/promise';\nimport { GROUP_RESOURCES, mapPref } from '@shell/store/prefs';\nimport { COLUMN_BREAKPOINTS } from '@shell/types/store/type-map';\n\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport { mapGetters } from 'vuex';\n\nexport default defineComponent({\n  name:       'ListNode',\n  components: {\n    ResourceTable,\n    Tag,\n    Banner\n  },\n  mixins: [metricPoller, ResourceFetch],\n\n  props: {\n    resource: {\n      type:     String,\n      required: true,\n    },\n    schema: {\n      type:     Object,\n      required: true,\n    },\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    },\n\n    listComponent: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    this.$initializeFetchData(this.resource);\n\n    await allHash({\n      kubeNodes: this.$fetchType(this.resource),\n      ...this.fetchSecondaryResources(),\n    });\n  },\n\n  data() {\n    return {\n      // Pods required for `Pods` column's running pods metrics\n      // podConsumedUsage = podConsumed / podConsumedUsage. podConsumed --> pods. allPods.filter((pod) => pod.spec.nodeName === this.name)\n      canViewPods:        !!this.$store.getters[`cluster/schemaFor`](POD),\n      // Norman node required for Drain/Cordon/Uncordon action\n      canViewNormanNodes: !!this.$store.getters[`rancher/schemaFor`](NORMAN.NODE),\n      // Mgmt Node required to find Norman node\n      canViewMgmtNodes:   !!this.$store.getters[`management/schemaFor`](MANAGEMENT.NODE),\n      // Required for ssh / download key actions\n      canViewMachines:    !!this.$store.getters[`management/schemaFor`](CAPI.MACHINE),\n      // Required for CPU and RAM columns\n      canViewNodeMetrics: !!this.$store.getters['cluster/schemaFor'](METRIC.NODE),\n    };\n  },\n\n  beforeDestroy() {\n    // Stop watching pods, nodes and node metrics\n    if (this.canViewPods) {\n      this.$store.dispatch('cluster/forgetType', POD);\n    }\n\n    this.$store.dispatch('cluster/forgetType', NODE);\n    this.$store.dispatch('cluster/forgetType', METRIC.NODE);\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    hasWindowsNodes() {\n      // Note if server side pagination is used this is only applicable to the current page\n      return (this.rows || []).some((node: any) => node.status.nodeInfo.operatingSystem === 'windows');\n    },\n\n    tableGroup: mapPref(GROUP_RESOURCES),\n\n    headers() {\n      // This is all about adding the pods column... if the user can see pods\n\n      if (this.canPaginate) {\n        const paginationHeaders = [...this.$store.getters['type-map/headersFor'](this.schema, true)];\n\n        if (paginationHeaders) {\n          if (this.canViewPods) {\n            paginationHeaders.splice(paginationHeaders.length - 1, 0, {\n              ...PODS,\n              breakpoint: COLUMN_BREAKPOINTS.DESKTOP,\n              sort:       false,\n              search:     false,\n              getValue:   (row: any) => row.podConsumedUsage\n            });\n          }\n\n          return paginationHeaders;\n        } else {\n          console.warn('Nodes list expects pagination headers but none found'); // eslint-disable-line no-console\n\n          return [];\n        }\n      }\n\n      const headers = [...this.$store.getters['type-map/headersFor'](this.schema, false)];\n\n      if (this.canViewPods) {\n        headers.splice(headers.length - 1, 0, {\n          ...PODS,\n          breakpoint: COLUMN_BREAKPOINTS.DESKTOP,\n          getValue:   (row: any) => row.podConsumedUsage\n        });\n      }\n\n      return headers;\n    },\n  },\n\n  methods: {\n    async loadMetrics() {\n      if (!this.canViewNodeMetrics) {\n        return;\n      }\n\n      if (this.canPaginate) {\n        if (!this.rows.length) {\n          return;\n        }\n\n        const opt: ActionFindPageArgs = {\n          force:      true,\n          pagination: new FilterArgs({\n            filters: new PaginationParamFilter({\n              fields: this.rows.map((r: any) => new PaginationFilterField({\n                field: 'metadata.name',\n                value: r.id\n              }))\n            })\n          })\n        };\n\n        await this.$store.dispatch('cluster/findPage', {\n          type: METRIC.NODE,\n          opt\n        });\n      } else {\n        await this.$store.dispatch('cluster/findAll', {\n          type: METRIC.NODE,\n          opt:  { force: true }\n        });\n      }\n\n      this.$forceUpdate();\n    },\n\n    toggleLabels(row: any) {\n      this.$set(row, 'displayLabels', !row.displayLabels);\n    },\n\n    fetchSecondaryResources(): { [key: string]: Promise<any>} {\n      if (this.canPaginate) {\n        return {};\n      }\n\n      const hash: { [key: string]: Promise<any>} = {};\n\n      if (this.canViewMgmtNodes) {\n        hash.mgmtNodes = this.$fetchType(MANAGEMENT.NODE, [], 'management');\n      }\n\n      if (this.canViewNormanNodes) {\n        hash.normanNodes = this.$fetchType(NORMAN.NODE, [], 'rancher');\n      }\n\n      if (this.canViewMachines) {\n        hash.machines = this.$fetchType(CAPI.MACHINE, [], 'management');\n      }\n\n      if (this.canViewPods) {\n        // No need to block on this\n        this.$fetchType(POD);\n      }\n\n      return hash;\n    },\n\n    /**\n     * Nodes columns need other resources in order to show data in some columns\n     *\n     * In the paginated world we want to resrict the fetch of those resources to only the one's we need\n     *\n     * So when we have a page.... use those entries as filters when fetching the other resources\n     */\n    async fetchPageSecondaryResources(force = false) {\n      if (!this.rows?.length) {\n        return;\n      }\n\n      if (this.canViewMgmtNodes && this.canViewNormanNodes) {\n        // We only fetch mgmt node to get norman node. We only fetch node to get node actions\n        // See https://github.com/rancher/dashboard/issues/10743\n        const opt: ActionFindPageArgs = {\n          force,\n          pagination: new FilterArgs({\n            filters: PaginationParamFilter.createMultipleFields(this.rows.map((r: any) => new PaginationFilterField({\n              field: 'status.nodeName',\n              value: r.id\n            }))),\n          })\n        };\n\n        this.$store.dispatch(`management/findPage`, { type: MANAGEMENT.NODE, opt })\n          .then(() => {\n            this.$store.dispatch(`rancher/findAll`, { type: NORMAN.NODE, opt: { force } });\n          });\n      }\n\n      if (this.canViewMachines) {\n        const namespace = this.currentCluster.provClusterId?.split('/')[0];\n\n        if (namespace) {\n          const opt: ActionFindPageArgs = {\n            force,\n            namespaced: namespace,\n            pagination: new FilterArgs({\n              filters: PaginationParamFilter.createMultipleFields(\n                this.rows.reduce((res: PaginationFilterField[], r: any ) => {\n                  const name = r.metadata?.annotations?.[CAPI_ANNOTATIONS.MACHINE_NAME];\n\n                  if (name) {\n                    res.push(new PaginationFilterField({\n                      field: 'metadata.name',\n                      value: name,\n                    }));\n                  }\n\n                  return res;\n                }, [])\n              )\n            })\n          };\n\n          this.$store.dispatch(`management/findPage`, { type: CAPI.MACHINE, opt });\n        }\n      }\n\n      if (this.canViewPods) {\n        // Note - fetching pods for current page could be a LOT still (probably max of 3k - 300 pods per node x 100 nodes in a page)\n        const opt: ActionFindPageArgs = {\n          force,\n          pagination: new FilterArgs({\n            filters: PaginationParamFilter.createMultipleFields(\n              this.rows.map((r: any) => new PaginationFilterField({\n                field: 'spec.nodeName',\n                value: r.id,\n              }))\n            )\n          })\n        };\n\n        this.$store.dispatch(`cluster/findPage`, { type: POD, opt });\n      }\n\n      // Fetch metrics given the current page\n      this.loadMetrics();\n    },\n  },\n});\n</script>\n\n<template>\n  <div>\n    <Banner\n      v-if=\"hasWindowsNodes\"\n      color=\"info\"\n      :label=\"t('cluster.custom.registrationCommand.windowsWarning')\"\n    />\n    <ResourceTable\n      v-bind=\"$attrs\"\n      :schema=\"schema\"\n      :headers=\"headers\"\n      :rows=\"rows\"\n      :sub-rows=\"true\"\n      :loading=\"loading\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n      data-testid=\"cluster-node-list\"\n      :external-pagination-enabled=\"canPaginate\"\n      :external-pagination-result=\"paginationResult\"\n      @pagination-changed=\"paginationChanged\"\n      v-on=\"$listeners\"\n    >\n      <template #sub-row=\"{fullColspan, row, onRowMouseEnter, onRowMouseLeave}\">\n        <tr\n          class=\"taints sub-row\"\n          :class=\"{'empty-taints': ! row.displayTaintsAndLabels}\"\n          @mouseenter=\"onRowMouseEnter\"\n          @mouseleave=\"onRowMouseLeave\"\n        >\n          <template v-if=\"row.displayTaintsAndLabels\">\n            <td>&nbsp;</td>\n            <td>&nbsp;</td>\n            <td :colspan=\"fullColspan-2\">\n              <span v-if=\"row.spec.taints && row.spec.taints.length\">\n                {{ t('node.list.nodeTaint') }}:\n                <Tag\n                  v-for=\"taint in row.spec.taints\"\n                  :key=\"taint.key + taint.value + taint.effect\"\n                  class=\"mr-5 mt-2\"\n                >\n                  {{ taint.key }}={{ taint.value }}:{{ taint.effect }}\n                </Tag>\n              </span>\n              <span\n                v-if=\"!!row.customLabelCount\"\n                class=\"mt-5\"\n              > {{ t('node.list.nodeLabels') }}:\n                <span\n                  v-for=\"(label, i) in row.customLabels\"\n                  :key=\"i\"\n                  class=\"mt-5 labels\"\n                >\n                  <Tag\n                    v-if=\"i < 7\"\n                    class=\"mr-2 label\"\n                  >\n                    {{ label }}\n                  </Tag>\n                  <Tag\n                    v-else-if=\"i > 6 && row.displayLabels\"\n                    class=\"mr-2 label\"\n                  >\n                    {{ label }}\n                  </Tag>\n                </span>\n                <a\n                  v-if=\"row.customLabelCount > 7\"\n                  href=\"#\"\n                  @click.prevent=\"toggleLabels(row)\"\n                >\n                  {{ t(`node.list.${row.displayLabels? 'hideLabels' : 'showLabels'}`) }}\n                </a>\n              </span>\n            </td>\n          </template>\n          <td\n            v-else\n            :colspan=\"fullColspan\"\n          >\n&nbsp;\n          </td>\n        </tr>\n      </template>\n    </ResourceTable>\n  </div>\n</template>\n\n<style lang='scss' scoped>\n\n.labels {\n    display: inline;\n    flex-wrap: wrap;\n\n    .label {\n      display: inline-block;\n      margin-top: 2px;\n    }\n\n}\n.taints {\n  td {\n    padding-top:0;\n    .tag {\n      margin-right: 5px;\n      display: inline-block;\n      margin-top: 2px;\n    }\n  }\n  &.empty-taints {\n    // No taints... so hide sub-row (but not bottom-border)\n    height: 0;\n    line-height: 0;\n    td {\n      padding: 0;\n    }\n  }\n}\n\n</style>\n"]}]}