{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/pages/c/_cluster/settings/brand.vue?vue&type=style&index=0&id=6e62d942&scoped=true&lang=scss","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/pages/c/_cluster/settings/brand.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/suseconf/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/suseconf/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5saW5rLWV4YW1wbGUgewogIGRpc3BsYXk6IGZsZXg7CiAgYWxpZ24tY29udGVudDogY2VudGVyOwoKICBhIHsKICAgIG1hcmdpbjogYXV0bzsKICB9Cn0KCjo6di1kZWVwLnByZXZpZXctY29udGFpbmVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47CgogIC5zaW1wbGUtYm94IHsKICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsKICAgIGZsZXg6IDE7CgogICAgLmNvbnRlbnQgewogICAgICBoZWlnaHQ6IDEwMCU7CiAgICAgIGRpc3BsYXk6IGZsZXg7CiAgICB9CgogICAgLmxvZ28tcHJldmlldyB7CiAgICAgIG1heC13aWR0aDogMTAwJTsKICAgIH0KICB9CgogICYubG9nbyB7CiAgICAuc2ltcGxlLWJveCB7CiAgICAgIG1heC1oZWlnaHQ6IDEyMHB4OwogICAgfQogIH0KCiAgJi5iYW5uZXIgewogICAgLnNpbXBsZS1ib3ggewogICAgICBtYXgtaGVpZ2h0OiAyMDBweDsKICAgIH0KICB9CgogICYubG9naW4tYmFja2dyb3VuZCB7CiAgICAuc2ltcGxlLWJveCB7CiAgICAgIG1heC1oZWlnaHQ6IDMwMHB4OwogICAgfQogIH0KCiAgJiBMQUJFTCB7CiAgICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgICB0b3A6IDEwcHg7CiAgICBsZWZ0OiAxMHB4OwogIH0KfQo="},{"version":3,"sources":["brand.vue"],"names":[],"mappings":";AA+kBA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"brand.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/settings","sourcesContent":["<script>\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport ColorInput from '@shell/components/form/ColorInput';\nimport TypeDescription from '@shell/components/TypeDescription';\n\nimport { Checkbox } from '@components/Form/Checkbox';\nimport FileImageSelector from '@shell/components/form/FileImageSelector';\nimport SimpleBox from '@shell/components/SimpleBox';\nimport Loading from '@shell/components/Loading';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { Banner } from '@components/Banner';\nimport { allHash } from '@shell/utils/promise';\nimport { MANAGEMENT } from '@shell/config/types';\nimport { getVendor, setVendor } from '@shell/config/private-label';\nimport { fetchOrCreateSetting } from '@shell/utils/settings';\nimport { SETTING } from '@shell/config/settings';\nimport { _EDIT, _VIEW } from '@shell/config/query-params';\nimport { setFavIcon } from '@shell/utils/favicon';\nimport TabTitle from '@shell/components/TabTitle';\n\nconst Color = require('color');\n\nexport default {\n  components: {\n    LabeledInput, Checkbox, FileImageSelector, Loading, SimpleBox, AsyncButton, Banner, ColorInput, TypeDescription, TabTitle\n  },\n\n  async fetch() {\n    const hash = await allHash({\n      uiPLSetting:                   this.$store.dispatch('management/find', { type: MANAGEMENT.SETTING, id: SETTING.PL }),\n      uiLogoDarkSetting:             fetchOrCreateSetting(this.$store, SETTING.LOGO_DARK, ''),\n      uiLogoLightSetting:            fetchOrCreateSetting(this.$store, SETTING.LOGO_LIGHT, ''),\n      uiBannerDarkSetting:           fetchOrCreateSetting(this.$store, SETTING.BANNER_DARK, ''),\n      uiBannerLightSetting:          fetchOrCreateSetting(this.$store, SETTING.BANNER_LIGHT, ''),\n      uiLoginBackgroundDarkSetting:  fetchOrCreateSetting(this.$store, SETTING.LOGIN_BACKGROUND_DARK, ''),\n      uiLoginBackgroundLightSetting: fetchOrCreateSetting(this.$store, SETTING.LOGIN_BACKGROUND_LIGHT, ''),\n      uiColorSetting:                fetchOrCreateSetting(this.$store, SETTING.PRIMARY_COLOR, ''),\n      uiLinkColorSetting:            fetchOrCreateSetting(this.$store, SETTING.LINK_COLOR, ''),\n      uiFaviconSetting:              fetchOrCreateSetting(this.$store, SETTING.FAVICON, ''),\n    });\n\n    Object.assign(this, hash);\n\n    if (hash.uiLogoDarkSetting.value) {\n      try {\n        this.uiLogoDark = hash.uiLogoDarkSetting.value;\n        this.customizeLogo = true;\n      } catch {}\n    }\n    if (hash.uiLogoLightSetting.value) {\n      try {\n        this.uiLogoLight = hash.uiLogoLightSetting.value;\n\n        this.customizeLogo = true;\n      } catch {}\n    }\n    if (hash.uiBannerDarkSetting.value) {\n      try {\n        this.uiBannerDark = hash.uiBannerDarkSetting.value;\n        this.customizeBanner = true;\n      } catch {}\n    }\n    if (hash.uiBannerLightSetting.value) {\n      try {\n        this.uiBannerLight = hash.uiBannerLightSetting.value;\n\n        this.customizeBanner = true;\n      } catch {}\n    }\n    if (hash.uiLoginBackgroundDarkSetting.value) {\n      try {\n        this.uiLoginBackgroundDark = hash.uiLoginBackgroundDarkSetting.value;\n        this.customizeLoginBackground = true;\n      } catch {}\n    }\n    if (hash.uiLoginBackgroundLightSetting.value) {\n      try {\n        this.uiLoginBackgroundLight = hash.uiLoginBackgroundLightSetting.value;\n\n        this.customizeLoginBackground = true;\n      } catch {}\n    }\n    if (hash.uiFaviconSetting.value) {\n      try {\n        this.uiFavicon = hash.uiFaviconSetting.value;\n\n        this.customizeFavicon = true;\n      } catch {}\n    }\n    if (hash.uiColorSetting.value) {\n      this.uiColor = Color(hash.uiColorSetting.value).hex();\n      this.customizeColor = true;\n    }\n    if (hash.uiLinkColorSetting.value) {\n      this.uiLinkColor = Color(hash.uiLinkColorSetting.value).hex();\n      this.customizeLinkColor = true;\n    }\n  },\n\n  data() {\n    return {\n      vendor:      getVendor(),\n      uiPLSetting: {},\n\n      uiLogoDarkSetting:  {},\n      uiLogoDark:         '',\n      uiLogoLightSetting: {},\n      uiLogoLight:        '',\n      customizeLogo:      false,\n\n      uiBannerDarkSetting:  {},\n      uiBannerDark:         '',\n      uiBannerLightSetting: {},\n      uiBannerLight:        '',\n      customizeBanner:      false,\n\n      uiLoginBackgroundDarkSetting:  {},\n      uiLoginBackgroundDark:         '',\n      uiLoginBackgroundLightSetting: {},\n      uiLoginBackgroundLight:        '',\n      customizeLoginBackground:      false,\n\n      uiFaviconSetting: {},\n      uiFavicon:        '',\n      customizeFavicon: false,\n\n      uiColorSetting:     {},\n      uiColor:            null,\n      customizeColor:     false,\n      uiLinkColorSetting: {},\n      uiLinkColor:        null,\n      customizeLinkColor: false,\n\n      errors: [],\n\n    };\n  },\n\n  computed: {\n    mode() {\n      const schema = this.$store.getters[`management/schemaFor`](MANAGEMENT.SETTING);\n\n      return schema?.resourceMethods?.includes('PUT') ? _EDIT : _VIEW;\n    }\n  },\n\n  mounted() {\n    let uiColor = getComputedStyle(document.body).getPropertyValue('--primary');\n    let uiLinkColor = getComputedStyle(document.body).getPropertyValue('--link');\n    const suse = document.querySelector('.suse');\n\n    if (suse) {\n      uiColor = getComputedStyle(suse).getPropertyValue('--primary');\n      uiLinkColor = getComputedStyle(suse).getPropertyValue('--link');\n    }\n\n    // Only set the color to the default if not already set from the custom color\n    this.uiColor = this.uiColor || uiColor.trim();\n    this.uiLinkColor = this.uiLinkColor || uiLinkColor.trim();\n  },\n\n  methods: {\n    updateBranding(img, key) {\n      this[key] = img;\n    },\n\n    setError(e) {\n      this.errors = [];\n      this.errors.push(e);\n    },\n\n    async save(btnCB) {\n      this.uiPLSetting.value = this.uiPLSetting.value.replaceAll(/[\\<>&=#()\"]/gm, '');\n\n      if (this.customizeLogo) {\n        this.uiLogoLightSetting.value = this.uiLogoLight;\n        this.uiLogoDarkSetting.value = this.uiLogoDark;\n      } else {\n        this.uiLogoLightSetting.value = '';\n        this.uiLogoDarkSetting.value = '';\n      }\n\n      if (this.customizeBanner) {\n        this.uiBannerLightSetting.value = this.uiBannerLight;\n        this.uiBannerDarkSetting.value = this.uiBannerDark;\n      } else {\n        this.uiBannerLightSetting.value = '';\n        this.uiBannerDarkSetting.value = '';\n      }\n\n      if (this.customizeLoginBackground) {\n        this.uiLoginBackgroundLightSetting.value = this.uiLoginBackgroundLight;\n        this.uiLoginBackgroundDarkSetting.value = this.uiLoginBackgroundDark;\n      } else {\n        this.uiLoginBackgroundLightSetting.value = '';\n        this.uiLoginBackgroundDarkSetting.value = '';\n      }\n\n      if (this.customizeFavicon) {\n        this.uiFaviconSetting.value = this.uiFavicon;\n      } else {\n        this.uiFaviconSetting.value = '';\n      }\n\n      if (this.customizeColor) {\n        this.uiColorSetting.value = Color(this.uiColor).rgb().string();\n      } else {\n        this.uiColorSetting.value = null;\n      }\n\n      if (this.customizeLinkColor) {\n        this.uiLinkColorSetting.value = Color(this.uiLinkColor).rgb().string();\n      } else {\n        this.uiLinkColorSetting.value = null;\n      }\n\n      this.errors = [];\n\n      try {\n        await Promise.all([\n          this.uiPLSetting.save(),\n          this.uiLogoDarkSetting.save(),\n          this.uiLogoLightSetting.save(),\n          this.uiBannerDarkSetting.save(),\n          this.uiBannerLightSetting.save(),\n          this.uiLoginBackgroundDarkSetting.save(),\n          this.uiLoginBackgroundLightSetting.save(),\n          this.uiColorSetting.save(),\n          this.uiLinkColorSetting.save(),\n          this.uiFaviconSetting.save()\n        ]);\n        if (this.uiPLSetting.value !== this.vendor) {\n          setVendor(this.uiPLSetting.value);\n        }\n\n        setFavIcon(this.$store);\n        btnCB(true);\n      } catch (err) {\n        this.errors.push(err);\n        btnCB(false);\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <div v-else>\n    <h1 class=\"mb-20\">\n      <TabTitle>{{ t('branding.label') }}</TabTitle>\n    </h1>\n    <TypeDescription resource=\"branding\" />\n    <div>\n      <div class=\"row mb-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"uiPLSetting.value\"\n            :label=\"t('branding.uiPL.label')\"\n            :mode=\"mode\"\n            :maxlength=\"100\"\n          />\n        </div>\n      </div>\n      <h3 class=\"mt-20 mb-5 pb-5\">\n        {{ t('branding.logos.label') }}\n      </h3>\n      <label class=\"text-label\">\n        {{ t('branding.logos.tip', {}, true) }}\n      </label>\n\n      <div class=\"row mt-10 mb-20\">\n        <Checkbox\n          v-model=\"customizeLogo\"\n          :label=\"t('branding.logos.useCustom')\"\n          :mode=\"mode\"\n        />\n      </div>\n\n      <div\n        v-if=\"customizeLogo\"\n        class=\"row mb-20\"\n      >\n        <div class=\"col preview-container logo span-6\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"20000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.logos.uploadLight')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiLogoLight')\"\n            />\n          </div>\n          <SimpleBox\n            v-if=\"uiLogoLight || uiLogoDark\"\n            class=\"theme-light  mb-10\"\n          >\n            <label class=\"text-muted\">{{ t('branding.logos.lightPreview') }}</label>\n            <img\n              class=\"img-preview\"\n              data-testid=\"branding-logo-light-preview\"\n              :src=\"uiLogoLight ? uiLogoLight : uiLogoDark\"\n            >\n          </SimpleBox>\n        </div>\n        <div class=\"col preview-container logo span-6\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"20000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.logos.uploadDark')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiLogoDark')\"\n            />\n          </div>\n          <SimpleBox\n            v-if=\"uiLogoDark || uiLogoLight\"\n            class=\"theme-dark  mb-10\"\n          >\n            <label class=\"text-muted\">{{ t('branding.logos.darkPreview') }}</label>\n            <img\n              class=\"img-preview\"\n              data-testid=\"branding-logo-dark-preview\"\n              :src=\"uiLogoDark ? uiLogoDark : uiLogoLight\"\n            >\n          </SimpleBox>\n        </div>\n      </div>\n\n      <h3 class=\"mt-20 mb-5 pb-5\">\n        {{ t('branding.banner.label') }}\n      </h3>\n      <label class=\"text-label\">\n        {{ t('branding.banner.tip', {}, true) }}\n      </label>\n\n      <div class=\"row mt-10 mb-20\">\n        <Checkbox\n          v-model=\"customizeBanner\"\n          :label=\"t('branding.banner.useCustom')\"\n          :mode=\"mode\"\n        />\n      </div>\n\n      <div\n        v-if=\"customizeBanner\"\n        class=\"row mb-20\"\n      >\n        <div class=\"col preview-container banner span-6\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"200000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.banner.uploadLight')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiBannerLight')\"\n            />\n          </div>\n          <SimpleBox\n            v-if=\"uiBannerLight || uiBannerDark\"\n            class=\"theme-light mb-10\"\n          >\n            <label class=\"text-muted\">{{ t('branding.banner.lightPreview') }}</label>\n            <img\n              class=\"img-preview\"\n              data-testid=\"branding-banner-light-preview\"\n              :src=\"uiBannerLight ? uiBannerLight : uiBannerDark\"\n            >\n          </SimpleBox>\n        </div>\n        <div class=\"col preview-container banner span-6\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"200000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.banner.uploadDark')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiBannerDark')\"\n            />\n          </div>\n          <SimpleBox\n            v-if=\"uiBannerDark || uiBannerLight\"\n            class=\"theme-dark  mb-10\"\n          >\n            <label class=\"text-muted\">{{ t('branding.banner.darkPreview') }}</label>\n            <img\n              class=\"img-preview\"\n              data-testid=\"branding-banner-dark-preview\"\n              :src=\"uiBannerDark ? uiBannerDark : uiBannerLight\"\n            >\n          </SimpleBox>\n        </div>\n      </div>\n\n      <h3 class=\"mt-20 mb-5 pb-5\">\n        {{ t('branding.loginBackground.label') }}\n      </h3>\n      <label class=\"text-label\">\n        {{ t('branding.loginBackground.tip', {}, true) }}\n      </label>\n\n      <div class=\"row mt-10 mb-20\">\n        <Checkbox\n          v-model=\"customizeLoginBackground\"\n          :label=\"t('branding.loginBackground.useCustom')\"\n          :mode=\"mode\"\n        />\n      </div>\n\n      <div\n        v-if=\"customizeLoginBackground\"\n        class=\"row mb-20\"\n      >\n        <div class=\"col preview-container login-background span-6\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"200000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.loginBackground.uploadLight')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiLoginBackgroundLight')\"\n            />\n          </div>\n          <SimpleBox\n            v-if=\"uiLoginBackgroundLight || uiLoginBackgroundDark\"\n            class=\"theme-light mb-10\"\n          >\n            <label class=\"text-muted\">{{ t('branding.loginBackground.lightPreview') }}</label>\n            <img\n              class=\"img-preview\"\n              data-testid=\"branding-login-background-light-preview\"\n              :src=\"uiLoginBackgroundLight ? uiLoginBackgroundLight : uiLoginBackgroundDark\"\n            >\n          </SimpleBox>\n        </div>\n        <div class=\"col preview-container login-background span-6\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"200000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.loginBackground.uploadDark')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiLoginBackgroundDark')\"\n            />\n          </div>\n          <SimpleBox\n            v-if=\"uiLoginBackgroundDark || uiLoginBackgroundLight\"\n            class=\"theme-dark  mb-10\"\n          >\n            <label class=\"text-muted\">{{ t('branding.loginBackground.darkPreview') }}</label>\n            <img\n              class=\"img-preview\"\n              data-testid=\"branding-login-background-dark-preview\"\n              :src=\"uiLoginBackgroundDark ? uiLoginBackgroundDark : uiLoginBackgroundLight\"\n            >\n          </SimpleBox>\n        </div>\n      </div>\n\n      <h3 class=\"mt-20 mb-5 pb-5\">\n        {{ t('branding.favicon.label') }}\n      </h3>\n      <label class=\"text-label\">\n        {{ t('branding.favicon.tip', {}, true) }}\n      </label>\n\n      <div class=\"row mt-10 mb-20\">\n        <Checkbox\n          v-model=\"customizeFavicon\"\n          :label=\"t('branding.favicon.useCustom')\"\n          :mode=\"mode\"\n        />\n      </div>\n\n      <div\n        v-if=\"customizeFavicon\"\n        class=\"row mb-20\"\n      >\n        <div class=\"col favicon-container span-12\">\n          <div class=\"mb-10\">\n            <FileImageSelector\n              :byte-limit=\"20000\"\n              :read-as-data-url=\"true\"\n              class=\"role-secondary\"\n              :label=\"t('branding.favicon.upload')\"\n              :mode=\"mode\"\n              accept=\"image/jpeg,image/png,image/svg+xml\"\n              @error=\"setError\"\n              @input=\"updateBranding($event, 'uiFavicon')\"\n            />\n          </div>\n          <SimpleBox v-if=\"uiFavicon\">\n            <label class=\"text-muted\">{{ t('branding.favicon.preview') }}</label>\n            <img\n              class=\"favicon-preview\"\n              data-testid=\"branding-favicon-preview\"\n              :src=\"uiFavicon\"\n            >\n          </SimpleBox>\n        </div>\n      </div>\n\n      <h3 class=\"mt-40 mb-5 pb-0\">\n        {{ t('branding.color.label') }}\n      </h3>\n      <label class=\"text-label\">\n        {{ t('branding.color.tip', {}, true) }}\n      </label>\n      <div class=\"row mt-20\">\n        <Checkbox\n          v-model=\"customizeColor\"\n          :label=\"t('branding.color.useCustom')\"\n          :mode=\"mode\"\n        />\n      </div>\n      <div\n        v-if=\"customizeColor\"\n        class=\"row mt-20 mb-20\"\n      >\n        <ColorInput\n          v-model=\"uiColor\"\n          component-testid=\"primary\"\n        />\n      </div>\n\n      <h3 class=\"mt-40 mb-5 pb-0\">\n        {{ t('branding.linkColor.label') }}\n      </h3>\n      <label class=\"text-label\">\n        {{ t('branding.linkColor.tip', {}, true) }}\n      </label>\n      <div class=\"row mt-20\">\n        <Checkbox\n          v-model=\"customizeLinkColor\"\n          :label=\"t('branding.linkColor.useCustom')\"\n          :mode=\"mode\"\n        />\n      </div>\n      <div\n        v-if=\"customizeLinkColor\"\n        class=\"row mt-20 mb-20\"\n      >\n        <ColorInput\n          v-model=\"uiLinkColor\"\n          class=\"col\"\n          component-testid=\"link\"\n        />\n        <span class=\"col link-example\">\n          <a>\n            {{ t('branding.linkColor.example') }}\n          </a>\n        </span>\n      </div>\n    </div>\n    <template v-for=\"err in errors\">\n      <Banner\n        :key=\"err\"\n        color=\"error\"\n        :label=\"err\"\n      />\n    </template>\n    <div v-if=\"mode === 'edit'\">\n      <AsyncButton\n        component-testid=\"branding-apply\"\n        class=\"pull-right mt-20\"\n        mode=\"apply\"\n        @click=\"save\"\n      />\n    </div>\n  </div>\n</template>\n\n<style scoped lang='scss'>\n.link-example {\n  display: flex;\n  align-content: center;\n\n  a {\n    margin: auto;\n  }\n}\n\n::v-deep.preview-container {\n  display: flex;\n  flex-direction: column;\n\n  .simple-box {\n    position: relative;\n    flex: 1;\n\n    .content {\n      height: 100%;\n      display: flex;\n    }\n\n    .logo-preview {\n      max-width: 100%;\n    }\n  }\n\n  &.logo {\n    .simple-box {\n      max-height: 120px;\n    }\n  }\n\n  &.banner {\n    .simple-box {\n      max-height: 200px;\n    }\n  }\n\n  &.login-background {\n    .simple-box {\n      max-height: 300px;\n    }\n  }\n\n  & LABEL {\n    position: absolute;\n    top: 10px;\n    left: 10px;\n  }\n}\n</style>\n"]}]}