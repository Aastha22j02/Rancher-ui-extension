{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/ResourceDetail/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/ResourceDetail/index.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/components/ResourceDetail","sourcesContent":["<script>\nimport CreateEditView from '@shell/mixins/create-edit-view/impl';\nimport Loading from '@shell/components/Loading';\nimport ResourceYaml from '@shell/components/ResourceYaml';\nimport {\n  _VIEW, _EDIT, _CLONE, _IMPORT, _STAGE, _CREATE,\n  AS, _YAML, _DETAIL, _CONFIG, _GRAPH, PREVIEW, MODE,\n} from '@shell/config/query-params';\nimport { FLEET, SCHEMA } from '@shell/config/types';\nimport { createYaml } from '@shell/utils/create-yaml';\nimport Masthead from '@shell/components/ResourceDetail/Masthead';\nimport DetailTop from '@shell/components/DetailTop';\nimport { clone, diff } from '@shell/utils/object';\nimport IconMessage from '@shell/components/IconMessage';\nimport ForceDirectedTreeChart from '@shell/components/fleet/ForceDirectedTreeChart';\nimport { checkSchemasForFindAllHash } from '@shell/utils/auth';\n\nfunction modeFor(route) {\n  if ( route.query?.mode === _IMPORT ) {\n    return _IMPORT;\n  }\n\n  if ( route.params?.id ) {\n    return route.query.mode || _VIEW;\n  } else {\n    return _CREATE;\n  }\n}\n\nasync function getYaml(store, model) {\n  let yaml;\n  const opt = { headers: { accept: 'application/yaml' } };\n\n  if ( model.hasLink('view') ) {\n    yaml = (await model.followLink('view', opt)).data;\n  }\n\n  return model.cleanForDownload(yaml);\n}\n\nexport default {\n  components: {\n    Loading,\n    DetailTop,\n    ForceDirectedTreeChart,\n    ResourceYaml,\n    Masthead,\n    IconMessage,\n  },\n\n  mixins: [CreateEditView],\n\n  props: {\n    storeOverride: {\n      type:    String,\n      default: null,\n    },\n\n    resourceOverride: {\n      type:    String,\n      default: null,\n    },\n\n    parentRouteOverride: {\n      type:    String,\n      default: null,\n    },\n\n    flexContent: {\n      type:    Boolean,\n      default: false,\n    },\n\n    /**\n     * Inherited global identifier prefix for tests\n     * Define a term based on the parent component to avoid conflicts on multiple components\n     */\n    componentTestid: {\n      type:    String,\n      default: 'resource-details'\n    }\n  },\n\n  async fetch() {\n    const store = this.$store;\n    const route = this.$route;\n    const params = route.params;\n    let resource = this.resourceOverride || params.resource;\n\n    const inStore = this.storeOverride || store.getters['currentStore'](resource);\n    const realMode = this.realMode;\n\n    // eslint-disable-next-line prefer-const\n    let { namespace, id } = params;\n\n    // There are 6 \"real\" modes that can be put into the query string\n    // These are mapped down to the 3 regular page \"mode\"s that create-edit-view components\n    // know about:  view, edit, create (stage, import and clone become \"create\")\n    const mode = ([_CLONE, _IMPORT, _STAGE].includes(realMode) ? _CREATE : realMode);\n\n    const getGraphConfig = store.getters['type-map/hasGraph'](resource);\n    const hasGraph = !!getGraphConfig;\n    const hasCustomDetail = store.getters['type-map/hasCustomDetail'](resource, id);\n    const hasCustomEdit = store.getters['type-map/hasCustomEdit'](resource, id);\n\n    const schemas = store.getters[`${ inStore }/all`](SCHEMA);\n\n    // As determines what component will be rendered\n    const requested = route.query[AS];\n    let as;\n    let notFound = false;\n\n    if ( mode === _VIEW && hasCustomDetail && (!requested || requested === _DETAIL) ) {\n      as = _DETAIL;\n    } else if ( mode === _VIEW && hasGraph && requested === _GRAPH) {\n      as = _GRAPH;\n    } else if ( hasCustomEdit && (!requested || requested === _CONFIG) ) {\n      as = _CONFIG;\n    } else {\n      as = _YAML;\n    }\n\n    this.as = as;\n\n    const options = store.getters[`type-map/optionsFor`](resource);\n\n    this.showMasthead = [_CREATE, _EDIT].includes(mode) ? options.resourceEditMasthead : true;\n    const canViewYaml = options.canYaml;\n\n    if ( options.resource ) {\n      resource = options.resource;\n    }\n\n    const schema = store.getters[`${ inStore }/schemaFor`](resource);\n    let model, initialModel, liveModel, yaml;\n\n    if ( realMode === _CREATE || realMode === _IMPORT ) {\n      if ( !namespace ) {\n        namespace = store.getters['defaultNamespace'];\n      }\n\n      const data = { type: resource };\n\n      if ( schema?.attributes?.namespaced ) {\n        data.metadata = { namespace };\n      }\n\n      liveModel = await store.dispatch(`${ inStore }/create`, data);\n      initialModel = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n      model = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n\n      if (model.forceYaml === true) {\n        as = _YAML;\n        this.as = as;\n      }\n\n      if ( as === _YAML ) {\n        yaml = createYaml(schemas, resource, data);\n      }\n    } else {\n      if ( as === _GRAPH ) {\n        const graphSchema = await checkSchemasForFindAllHash({\n          cluster: {\n            inStoreType: 'management',\n            type:        FLEET.CLUSTER\n          },\n          bundle: {\n            inStoreType: 'management',\n            type:        FLEET.BUNDLE\n          },\n\n          bundleDeployment: {\n            inStoreType: 'management',\n            type:        FLEET.BUNDLE_DEPLOYMENT\n          }\n\n        }, this.$store);\n\n        this.canViewChart = graphSchema.cluster && graphSchema.bundle && graphSchema.bundleDeployment;\n      }\n\n      let fqid = id;\n\n      if ( schema.attributes?.namespaced && namespace ) {\n        fqid = `${ namespace }/${ fqid }`;\n      }\n\n      try {\n        liveModel = await store.dispatch(`${ inStore }/find`, {\n          type: resource,\n          id:   fqid,\n          opt:  { watch: true }\n        });\n      } catch (e) {\n        if (e.status === 404 || e.status === 403) {\n          store.dispatch('loadingError', new Error(this.t('nav.failWhale.resourceIdNotFound', { resource, fqid }, true)));\n        }\n        liveModel = {};\n        notFound = fqid;\n      }\n\n      if (realMode === _VIEW) {\n        model = liveModel;\n      } else {\n        model = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n      }\n\n      initialModel = await store.dispatch(`${ inStore }/clone`, { resource: liveModel });\n\n      if ( as === _YAML ) {\n        yaml = await getYaml(this.$store, liveModel);\n      }\n\n      if ( as === _GRAPH ) {\n        this.chartData = liveModel;\n      }\n\n      if ( [_CLONE, _IMPORT, _STAGE].includes(realMode) ) {\n        model.cleanForNew();\n        yaml = model.cleanYaml(yaml, realMode);\n      }\n    }\n\n    // Ensure common properties exists\n    model = await store.dispatch(`${ inStore }/cleanForDetail`, model);\n\n    const out = {\n      hasGraph,\n      getGraphConfig,\n      hasCustomDetail,\n      hasCustomEdit,\n      canViewYaml,\n      resource,\n      as,\n      yaml,\n      initialModel,\n      liveModel,\n      mode,\n      value: model,\n      notFound,\n    };\n\n    for ( const key in out ) {\n      this[key] = out[key];\n    }\n\n    if ( this.mode === _CREATE ) {\n      this.value.applyDefaults(this, realMode);\n    }\n  },\n  data() {\n    return {\n      chartData:       null,\n      resourceSubtype: null,\n\n      // Set by fetch\n      hasGraph:        null,\n      hasCustomDetail: null,\n      hasCustomEdit:   null,\n      resource:        null,\n      asYaml:          null,\n      yaml:            null,\n      liveModel:       null,\n      initialModel:    null,\n      mode:            null,\n      as:              null,\n      value:           null,\n      model:           null,\n      notFound:        null,\n      canViewChart:    true,\n    };\n  },\n\n  computed: {\n    realMode() {\n      // There are 5 \"real\" modes that you can start in: view, edit, create, stage, clone\n      const realMode = modeFor(this.$route);\n\n      return realMode;\n    },\n\n    isView() {\n      return this.mode === _VIEW;\n    },\n\n    isYaml() {\n      return this.as === _YAML;\n    },\n\n    isDetail() {\n      return this.as === _DETAIL;\n    },\n\n    isGraph() {\n      return this.as === _GRAPH;\n    },\n\n    offerPreview() {\n      return this.as === _YAML && [_EDIT, _CLONE, _IMPORT, _STAGE].includes(this.mode);\n    },\n\n    showComponent() {\n      switch ( this.as ) {\n      case _DETAIL: return this.detailComponent;\n      case _CONFIG: return this.editComponent;\n      }\n\n      return null;\n    },\n  },\n\n  watch: {\n    '$route.query'(inNeu, inOld) {\n      const neu = clone(inNeu);\n      const old = clone(inOld);\n\n      delete neu[PREVIEW];\n      delete old[PREVIEW];\n\n      if ( !this.isView ) {\n        delete neu[AS];\n        delete old[AS];\n      }\n\n      const queryDiff = Object.keys(diff(neu, old));\n\n      if ( queryDiff.includes(MODE) || queryDiff.includes(AS)) {\n        this.$fetch();\n      }\n    },\n\n    // Auto refresh YAML when the model changes\n    async 'value.metadata.resourceVersion'(a, b) {\n      if ( this.mode === _VIEW && this.as === _YAML && a && b && a !== b) {\n        this.yaml = await getYaml(this.$store, this.liveModel);\n      }\n    }\n  },\n\n  created() {\n    // eslint-disable-next-line prefer-const\n    const id = this.$route.params.id;\n    const resource = this.resourceOverride || this.$route.params.resource;\n    const options = this.$store.getters[`type-map/optionsFor`](resource);\n\n    const detailResource = options.resourceDetail || options.resource || resource;\n    const editResource = options.resourceEdit || options.resource || resource;\n\n    // FIXME: These aren't right... signature is (rawType, subType).. not (rawType, resourceId)\n    // Remove id? How does subtype get in (cluster/node)\n    this.detailComponent = this.$store.getters['type-map/importDetail'](detailResource, id);\n    this.editComponent = this.$store.getters['type-map/importEdit'](editResource, id);\n  },\n\n  methods: {\n    setSubtype(subtype) {\n      this.resourceSubtype = subtype;\n    },\n\n    keyAction(act) {\n      const m = this.liveModel;\n\n      if ( m?.[act] ) {\n        m[act]();\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending || notFound\" />\n  <div v-else>\n    <Masthead\n      v-if=\"showMasthead\"\n      :resource=\"resource\"\n      :value=\"liveModel\"\n      :mode=\"mode\"\n      :real-mode=\"realMode\"\n      :as=\"as\"\n      :has-graph=\"hasGraph\"\n      :has-detail=\"hasCustomDetail\"\n      :has-edit=\"hasCustomEdit\"\n      :can-view-yaml=\"canViewYaml\"\n      :resource-subtype=\"resourceSubtype\"\n      :parent-route-override=\"parentRouteOverride\"\n      :store-override=\"storeOverride\"\n    >\n      <DetailTop\n        v-if=\"isView && isDetail\"\n        :value=\"liveModel\"\n      />\n    </Masthead>\n\n    <ForceDirectedTreeChart\n      v-if=\"isGraph && canViewChart\"\n      :data=\"chartData\"\n      :fdc-config=\"getGraphConfig\"\n    />\n\n    <ResourceYaml\n      v-else-if=\"isYaml\"\n      ref=\"resourceyaml\"\n      v-model=\"value\"\n      :mode=\"mode\"\n      :yaml=\"yaml\"\n      :offer-preview=\"offerPreview\"\n      :done-route=\"doneRoute\"\n      :done-override=\"value.doneOverride\"\n      :class=\"{'flex-content': flexContent}\"\n    />\n\n    <component\n      :is=\"showComponent\"\n      v-else\n      ref=\"comp\"\n      v-model=\"value\"\n      v-bind=\"_data\"\n      :done-params=\"doneParams\"\n      :done-route=\"doneRoute\"\n      :mode=\"mode\"\n      :initial-value=\"initialModel\"\n      :live-value=\"liveModel\"\n      :real-mode=\"realMode\"\n      :class=\"{'flex-content': flexContent}\"\n      @set-subtype=\"setSubtype\"\n    />\n\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','d']\"\n      :data-testid=\"componentTestid + '-detail'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToDetail')\"\n    />\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','c']\"\n      :data-testid=\"componentTestid + '-config'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToViewConfig')\"\n    />\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','y']\"\n      :data-testid=\"componentTestid + '-yaml'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToViewYaml')\"\n    />\n    <button\n      v-if=\"isView\"\n      v-shortkey.once=\"['shift','e']\"\n      :data-testid=\"componentTestid + '-edit'\"\n      class=\"hide\"\n      @shortkey=\"keyAction('goToEdit')\"\n    />\n  </div>\n</template>\n\n<style lang='scss' scoped>\n.flex-content {\n  display: flex;\n  flex-direction: column;\n  flex-grow: 1;\n}\n</style>\n"]}]}