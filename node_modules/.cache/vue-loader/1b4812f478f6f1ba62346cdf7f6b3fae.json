{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/dialog/AddCustomBadgeDialog.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/dialog/AddCustomBadgeDialog.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AddCustomBadgeDialog.vue"],"names":[],"mappingsfile":"AddCustomBadgeDialog.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\nimport { CLUSTER_BADGE } from '@shell/config/labels-annotations';\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { Card } from '@components/Card';\nimport { Banner } from '@components/Banner';\nimport ClusterBadge from '@shell/components/ClusterBadge';\nimport ClusterProviderIcon from '@shell/components/ClusterProviderIcon';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport ColorInput from '@shell/components/form/ColorInput';\nimport { parseColor, textColor } from '@shell/utils/color';\nimport { NORMAN } from '@shell/config/types';\nimport { abbreviateClusterName } from '@shell/utils/cluster';\nimport { _CREATE, _EDIT } from '@shell/config/query-params';\nimport ClusterIconMenu from '@shell/components/ClusterIconMenu';\n\nexport default {\n  name:       'AddCustomBadgeDialog',\n  components: {\n    Card,\n    AsyncButton,\n    Banner,\n    Checkbox,\n    LabeledInput,\n    ColorInput,\n    ClusterBadge,\n    ClusterIconMenu,\n    ClusterProviderIcon,\n  },\n  props: {\n    isCreate:        { type: Boolean, default: false },\n    clusterName:     { type: String, default: '' },\n    mode:            { type: String, default: _CREATE },\n    clusterExplorer: {\n      type:    Object,\n      default: null\n    },\n  },\n  data() {\n    return {\n      useCustomComment: null,\n      errors:           [],\n      badgeBgColor:     '',\n      badgeComment:     '',\n      badgeAsIcon:      null,\n      badgeColorPicker: false,\n      letter:           '',\n      cluster:          {},\n    };\n  },\n  created() {\n    if (this.clusterExplorer) {\n      this.setBadgeProperties(this.clusterExplorer);\n    }\n\n    if (this.isCreate) {\n      this.setBadgeProperties(this.getPreviewCluster);\n    }\n  },\n\n  async fetch() {\n    // INFO: Do not fetch the cluster object if it's a create or cluster explorer since it won't exist\n    if (this.isCreate || this.clusterExplorer) {\n      return;\n    }\n    // INFO: Fetch the cluster object if it's an edit\n    await this.$store.dispatch('rancher/find', { type: NORMAN.CLUSTER, id: this.currentCluster?.id });\n\n    if (this.currentCluster.metadata?.annotations) {\n      this.badgeComment = this.currentCluster.metadata?.annotations[CLUSTER_BADGE.TEXT];\n      this.useCustomComment = this.badgeComment?.length > 0;\n      this.badgeBgColor = this.currentCluster.metadata?.annotations[CLUSTER_BADGE.COLOR] || 'transparent';\n      this.badgeAsIcon = !!this.currentCluster.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || false;\n      this.badgeColorPicker = this.badgeBgColor !== 'transparent';\n      this.letter = this.currentCluster.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || abbreviateClusterName(this.currentCluster.nameDisplay);\n    }\n  },\n  watch: {\n    // INFO: If the user has a custom comment, set the badge text\n    useCustomComment: {\n      handler(neu, old) {\n        if (neu !== old) {\n          this.badgeComment = neu ? this.badgeComment : '';\n        }\n      },\n      immediate: true,\n    },\n    badgeColorPicker: {\n      handler() {\n        this.badgeBgColor = this.badgeColorPicker ? this.badgeBgColor : 'transparent';\n      },\n      immediate: true,\n    },\n    badgeAsIcon: {\n      handler(neu, old) {\n        if (neu !== old) {\n          this.letter = neu ? this.letter : abbreviateClusterName(this.clusterName);\n        }\n      },\n      immediate: true,\n    },\n  },\n  computed: {\n    ...mapGetters(['currentCluster']),\n    ...mapGetters('customisation', ['getPreviewCluster']),\n    canSubmit() {\n      if (this.mode === _CREATE) {\n        return this.badgeAsIcon || this.useCustomComment;\n      }\n\n      if (this.mode === _EDIT) {\n        if (this.useCustomComment && this.badgeComment.length <= 0) {\n          return false;\n        }\n\n        if (this.badgeAsIcon && this.letter.length <= 0) {\n          return false;\n        }\n\n        return true;\n      }\n\n      return this.badgeAsIcon !== this.currentCluster.metadata?.annotations[CLUSTER_BADGE.ICON_TEXT] || this.useCustomComment !== !!this.currentCluster.metadata?.annotations[CLUSTER_BADGE.TEXT] || (this.badgeAsIcon && this.letter.length > 1);\n    },\n    // Fake cluster object for use with badge component\n    previewCluster() {\n      return this.isCreate || !this.currentCluster ? this.generateBadgeObject(false, '', true) : this.generateBadgeObject(this.currentCluster.isLocal, this.currentCluster.providerNavLogo, this.currentCluster.ready);\n    },\n\n    displayClusterPrevIcon() {\n      return !this.badgeAsIcon ? { ...this.previewCluster.badge, iconText: null } : this.previewCluster?.badge;\n    },\n\n    previewName() {\n      if (this.isCreate || this.clusterExplorer) {\n        return this.clusterName;\n      }\n\n      return this.currentCluster?.nameDisplay || '';\n    },\n  },\n  methods: {\n    close() {\n      this.$emit('close');\n    },\n\n    // INFO: Set the badge properties based on the cluster object\n    setBadgeProperties(cluster) {\n      this.cluster = cluster;\n      this.badgeAsIcon = this.cluster?.badge?.iconText?.length > 0 || false;\n      this.letter = this.cluster?.badge?.iconText || abbreviateClusterName(this.clusterName);\n      this.useCustomComment = this.cluster?.badge?.text?.length > 0 || false;\n      this.badgeBgColor = this.cluster?.badge?.color || 'transparent';\n      this.badgeComment = this.cluster?.badge?.text || null;\n      this.badgeColorPicker = this.badgeBgColor !== 'transparent';\n    },\n\n    // INFO: Generate a badge object for the preview cluster\n    generateBadgeObject(isLocal, providerNavLogo, ready) {\n      return {\n        isLocal,\n        providerNavLogo,\n        ready:              ready ?? true,\n        removePreviewColor: !this.badgeAsIcon,\n        badge:              {\n          text:      this.badgeComment,\n          color:     this.badgeBgColor,\n          textColor: textColor(parseColor(this.badgeBgColor)),\n          iconText:  this.badgeAsIcon ? this.letter.toUpperCase() : abbreviateClusterName(this.previewName),\n        }\n      };\n    },\n\n    async apply(buttonDone) {\n      try {\n        // INFO: If we're editing a cluster, update the cluster object\n        if (!this.isCreate && !this.clusterExplorer) {\n          const norman = await this.$store.dispatch('rancher/find', { type: NORMAN.CLUSTER, id: this.currentCluster?.id });\n\n          delete norman.annotations[CLUSTER_BADGE.COLOR];\n          delete norman.annotations[CLUSTER_BADGE.ICON_TEXT];\n          delete norman.annotations[CLUSTER_BADGE.TEXT];\n\n          this.$set(norman.annotations, CLUSTER_BADGE.COLOR, this.badgeColorPicker ? this.badgeBgColor : 'transparent');\n          this.$set(norman.annotations, CLUSTER_BADGE.ICON_TEXT, this.letter.toUpperCase());\n          this.$set(norman.annotations, CLUSTER_BADGE.TEXT, this.badgeComment);\n\n          await norman.save();\n\n          buttonDone(true);\n          this.close();\n        } else {\n          // INFO: If it's a create, update the preview cluster object in the store.\n          this.$store.commit('customisation/setPreviewCluster', { ...this.previewCluster });\n\n          buttonDone(true);\n          this.close();\n        }\n      } catch (err) {\n        this.errors = exceptionToErrorsArray(err);\n        buttonDone(false);\n      }\n    }\n  }\n};\n</script>\n\n<template>\n  <Card\n    class=\"prompt-badge\"\n    :show-highlight-border=\"false\"\n  >\n    <h4\n      slot=\"title\"\n      class=\"text-default-text\"\n    >\n      {{ t('clusterBadge.modal.title') }}\n    </h4>\n\n    <div\n      slot=\"body\"\n      class=\"cluster-badge-body\"\n    >\n      <div>{{ t('clusterBadge.modal.previewTitle') }}</div>\n      <div class=\"badge-preview\">\n        <div class=\"badge-preview-sidenav\">\n          <p> {{ t('clusterBadge.modal.previewSide') }}</p>\n\n          <div>\n            <ClusterIconMenu :cluster=\"previewCluster\" />\n            <span>{{ clusterName }}</span>\n          </div>\n        </div>\n        <span class=\"badge-preview-separator\" />\n        <div class=\"badge-preview-header\">\n          <p> {{ t('clusterBadge.modal.previewHeader') }}</p>\n          <div\n            class=\"col span-12\"\n          >\n            <ClusterProviderIcon\n              :cluster=\"{...previewCluster, badge: displayClusterPrevIcon}\"\n            />\n            <div class=\"cluster-name\">\n              {{ previewName }}\n            </div>\n            <ClusterBadge\n              v-if=\"useCustomComment\"\n              :cluster=\"previewCluster\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <div class=\"badge-customisation\">\n        <!-- Badge abbreviation toggle & customisation -->\n        <div class=\"badge-customisation-badge\">\n          <Checkbox\n            v-model=\"badgeAsIcon\"\n            :label=\"t('clusterBadge.modal.badgeAsIcon')\"\n\n            :tooltip=\"t('clusterBadge.modal.maxCharsTooltip')\"\n          />\n\n          <LabeledInput\n            v-model.trim=\"letter\"\n            :disabled=\"!badgeAsIcon\"\n            class=\"badge-icon-text\"\n            :label=\"t('clusterBadge.modal.iconText')\"\n            :maxlength=\"3\"\n          />\n        </div>\n\n        <!-- Comment toggle & customisation section -->\n        <div>\n          <Checkbox\n            v-model=\"useCustomComment\"\n            :label=\"t('clusterBadge.modal.checkbox')\"\n          />\n\n          <LabeledInput\n            v-model.trim=\"badgeComment\"\n            :disabled=\"!useCustomComment\"\n            :label=\"t('clusterBadge.modal.comment')\"\n            :maxlength=\"32\"\n          />\n        </div>\n\n        <!-- Color toggle & customisation section -->\n        <div class=\"badge-customisation-color\">\n          <Checkbox\n            v-model=\"badgeColorPicker\"\n            :label=\"t('clusterBadge.modal.badgeBgColor')\"\n          />\n          <ColorInput\n            v-model=\"badgeBgColor\"\n            :disabled=\"!badgeColorPicker\"\n            :default-value=\"badgeBgColor\"\n          />\n        </div>\n      </div>\n    </div>\n\n    <div\n      slot=\"actions\"\n      class=\"bottom\"\n    >\n      <Banner\n        v-for=\"(err, i) in errors\"\n        :key=\"i\"\n        color=\"error\"\n        :label=\"err\"\n      />\n      <div class=\"buttons\">\n        <button\n          class=\"btn role-secondary mr-10\"\n          @click=\"close\"\n        >\n          {{ t('generic.cancel') }}\n        </button>\n        <AsyncButton\n          :action-label=\"t('clusterBadge.modal.buttonAction')\"\n          :disabled=\"!canSubmit\"\n          @click=\"apply\"\n        />\n      </div>\n    </div>\n  </Card>\n</template>\n<style lang='scss' scoped>\n.card-container {\n  padding: 1rem;\n}\n\n.badge-preview {\n  display: flex;\n  width: 100%;\n  gap: 40px;\n  padding: 10px 5px;\n  margin-bottom: 30px;\n  margin-top: 5px;\n  background: var(--body-bg);\n  border-radius: 5px;\n\n  p {\n    font-size: 11px;\n    font-weight: light;\n    padding: 5px 0;\n  }\n\n  &-sidenav {\n    display: flex;\n    flex-direction: column;\n\n    div {\n      display: flex;\n      gap: 10px;\n      align-items: center;\n    }\n  }\n\n  &-separator {\n    display: flex;\n    border-left: 1px solid var(--border);\n    width: 2px;\n    height: 30px;\n    align-self: end;\n  }\n\n   &-header {\n    display: flex;\n    flex-direction: column;\n\n    div {\n      display: flex;\n      min-height: 32px;\n      align-items: center;\n\n      .cluster-badge {\n        min-height: auto;\n      }\n    }\n  }\n}\n\n.prompt-badge {\n  margin: 0;\n\n  .cluster-badge-body {\n    min-height: 50px;\n    display: flex;\n    flex-direction: column;\n\n    .cluster-name {\n      margin: 0 10px;\n      font-size: 16px;\n    }\n\n    .cluster-badge-icon-preview {\n      width: 32px;\n      height: 32px;\n      display: flex;\n      align-items: center;\n      justify-content: center;\n      border-radius: 5px;\n      font-weight: bold;\n    }\n\n    .cluster-badge-preview {\n      cursor: default;\n      border-radius: 10px;\n      font-size: 12px;\n      padding: 2px 10px;\n    }\n\n    ::v-deep .badge-icon-text input {\n      text-transform: uppercase;\n    }\n  }\n}\n\n.badge-customisation {\n  display: flex;\n  gap: 10px;\n\n  div {\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n    gap: 10px;\n\n    .color-input {\n      display: flex;\n      padding: 6px 10px;\n      min-height: 61px;\n    }\n  }\n\n  &-color {\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n  }\n}\n\n.bottom {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n\n  .banner {\n    margin-top: 0;\n  }\n\n  .buttons {\n    display: flex;\n    justify-content: flex-end;\n    width: 100%;\n  }\n}\n</style>\n"]}]}