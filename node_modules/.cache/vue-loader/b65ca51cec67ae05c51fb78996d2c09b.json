{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/networking.k8s.io.ingress/index.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IGFsbEhhc2ggfSBmcm9tICdAc2hlbGwvdXRpbHMvcHJvbWlzZSc7CmltcG9ydCB7IFNFQ1JFVCwgU0VSVklDRSwgSU5HUkVTU19DTEFTUyB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgTmFtZU5zRGVzY3JpcHRpb24gZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybS9OYW1lTnNEZXNjcmlwdGlvbic7CmltcG9ydCBDcmVhdGVFZGl0VmlldyBmcm9tICdAc2hlbGwvbWl4aW5zL2NyZWF0ZS1lZGl0LXZpZXcnOwppbXBvcnQgRm9ybVZhbGlkYXRpb24gZnJvbSAnQHNoZWxsL21peGlucy9mb3JtLXZhbGlkYXRpb24nOwppbXBvcnQgVGFiIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1RhYmJlZC9UYWInOwppbXBvcnQgQ3J1UmVzb3VyY2UgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvQ3J1UmVzb3VyY2UnOwppbXBvcnQgTGFiZWxzIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vTGFiZWxzJzsKaW1wb3J0IEVycm9yIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2Zvcm0vRXJyb3InOwppbXBvcnQgVGFiYmVkIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1RhYmJlZCc7CmltcG9ydCB7IGdldCwgc2V0IH0gZnJvbSAnQHNoZWxsL3V0aWxzL29iamVjdCc7CmltcG9ydCB7IFNFQ1JFVF9UWVBFUyBhcyBUWVBFUyB9IGZyb20gJ0BzaGVsbC9jb25maWcvc2VjcmV0JzsKaW1wb3J0IERlZmF1bHRCYWNrZW5kIGZyb20gJy4vRGVmYXVsdEJhY2tlbmQnOwppbXBvcnQgQ2VydGlmaWNhdGVzIGZyb20gJy4vQ2VydGlmaWNhdGVzJzsKaW1wb3J0IFJ1bGVzIGZyb20gJy4vUnVsZXMnOwppbXBvcnQgSW5ncmVzc0NsYXNzIGZyb20gJy4vSW5ncmVzc0NsYXNzJzsKaW1wb3J0IExvYWRpbmcgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvTG9hZGluZyc7CmltcG9ydCB7IEZpbHRlckFyZ3MsIFBhZ2luYXRpb25QYXJhbUZpbHRlciB9IGZyb20gJ0BzaGVsbC90eXBlcy9zdG9yZS9wYWdpbmF0aW9uLnR5cGVzJzsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAgICAgICAnQ1JVSW5ncmVzcycsCiAgY29tcG9uZW50czogewogICAgSW5ncmVzc0NsYXNzLAogICAgQ2VydGlmaWNhdGVzLAogICAgQ3J1UmVzb3VyY2UsCiAgICBEZWZhdWx0QmFja2VuZCwKICAgIExhYmVscywKICAgIE5hbWVOc0Rlc2NyaXB0aW9uLAogICAgUnVsZXMsCiAgICBUYWIsCiAgICBUYWJiZWQsCiAgICBFcnJvciwKICAgIExvYWRpbmcsCiAgfSwKICBtaXhpbnM6IFtDcmVhdGVFZGl0VmlldywgRm9ybVZhbGlkYXRpb25dLAogIHByb3BzOiAgewogICAgdmFsdWU6IHsKICAgICAgdHlwZTogICAgT2JqZWN0LAogICAgICBkZWZhdWx0OiAoKSA9PiB7CiAgICAgICAgcmV0dXJuIHt9OwogICAgICB9CiAgICB9LAogICAgbW9kZTogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdlZGl0JwogICAgfQogIH0sCgogIGFzeW5jIGZldGNoKCkgewogICAgdGhpcy5pbmdyZXNzQ2xhc3NTY2hlbWEgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzW2BjbHVzdGVyL3NjaGVtYUZvcmBdKElOR1JFU1NfQ0xBU1MpOwoKICAgIGNvbnN0IHByb21pc2VzID0gewogICAgICBzZXJ2aWNlczogICAgICAgICAgICAgIHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7IHR5cGU6IFNFUlZJQ0UgfSksCiAgICAgIGluZ3Jlc3NDbGFzc2VzOiAgICAgICAgdGhpcy5pbmdyZXNzQ2xhc3NTY2hlbWEgPyB0aGlzLiRzdG9yZS5kaXNwYXRjaCgnY2x1c3Rlci9maW5kQWxsJywgeyB0eXBlOiBJTkdSRVNTX0NMQVNTIH0pIDogUHJvbWlzZS5yZXNvbHZlKFtdKSwKICAgICAgaW5ncmVzc1Jlc291cmNlRmllbGRzOiB0aGlzLnNjaGVtYS5mZXRjaFJlc291cmNlRmllbGRzKCksCiAgICB9OwoKICAgIHRoaXMuZmlsdGVyQnlBcGkgPSB0aGlzLiRzdG9yZS5nZXR0ZXJzW2BjbHVzdGVyL3BhZ2luYXRpb25FbmFibGVkYF0oU0VDUkVUKTsKCiAgICBpZiAodGhpcy5maWx0ZXJCeUFwaSkgewogICAgICBwcm9taXNlcy5maWx0ZXJlZFNlY3JldHMgPSB0aGlzLmZpbHRlclNlY3JldHNCeUFwaSgpOwogICAgfSBlbHNlIHsKICAgICAgcHJvbWlzZXMuc2VjcmV0cyA9IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7IHR5cGU6IFNFQ1JFVCB9KTsKICAgIH0KCiAgICBjb25zdCBoYXNoID0gYXdhaXQgYWxsSGFzaChwcm9taXNlcyk7CgogICAgdGhpcy5hbGxTZXJ2aWNlcyA9IGhhc2guc2VydmljZXM7CiAgICB0aGlzLmFsbFNlY3JldHMgPSBoYXNoLnNlY3JldHM7CiAgICB0aGlzLmZpbHRlcmVkU2VjcmV0cyA9IGhhc2guZmlsdGVyZWRTZWNyZXRzOwogICAgdGhpcy5hbGxJbmdyZXNzQ2xhc3NlcyA9IGhhc2guaW5ncmVzc0NsYXNzZXM7CiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZmlsdGVyQnlBcGk6ICAgICAgICBudWxsLAogICAgICBpbmdyZXNzQ2xhc3NTY2hlbWE6IG51bGwsCiAgICAgIGFsbFNlY3JldHM6ICAgICAgICAgbnVsbCwKICAgICAgZmlsdGVyZWRTZWNyZXRzOiAgICBudWxsLAogICAgICBhbGxTZXJ2aWNlczogICAgICAgIFtdLAogICAgICBhbGxJbmdyZXNzQ2xhc3NlczogIFtdLAogICAgICBmdkZvcm1SdWxlU2V0czogICAgIFsKICAgICAgICB7CiAgICAgICAgICBwYXRoOiAnbWV0YWRhdGEubmFtZScsIHJ1bGVzOiBbJ3JlcXVpcmVkJywgJ2hvc3RuYW1lJ10sIHRyYW5zbGF0aW9uS2V5OiAnbmFtZU5zRGVzY3JpcHRpb24ubmFtZS5sYWJlbCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHBhdGg6ICdzcGVjLnJ1bGVzLmhvc3QnLCBydWxlczogWyd3aWxkY2FyZEhvc3RuYW1lJ10sIHRyYW5zbGF0aW9uS2V5OiAnaW5ncmVzcy5ydWxlcy5yZXF1ZXN0SG9zdC5sYWJlbCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHBhdGg6ICdzcGVjLnJ1bGVzLmh0dHAucGF0aHMucGF0aCcsIHJ1bGVzOiBbJ2Fic29sdXRlUGF0aCddLCB0cmFuc2xhdGlvbktleTogJ2luZ3Jlc3MucnVsZXMucGF0aC5sYWJlbCcKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgIHBhdGg6ICdzcGVjLnJ1bGVzLmh0dHAucGF0aHMuYmFja2VuZC5zZXJ2aWNlLnBvcnQubnVtYmVyJywgcnVsZXM6IFsncmVxdWlyZWQnXSwgdHJhbnNsYXRpb25LZXk6ICdpbmdyZXNzLnJ1bGVzLnBvcnQubGFiZWwnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBwYXRoOiAnc3BlYy5ydWxlcy5odHRwLnBhdGhzLmJhY2tlbmQuc2VydmljZS5uYW1lJywgcnVsZXM6IFsncmVxdWlyZWQnXSwgdHJhbnNsYXRpb25LZXk6ICdpbmdyZXNzLnJ1bGVzLnRhcmdldC5sYWJlbCcKICAgICAgICB9LAogICAgICAgIHsgcGF0aDogJ3NwZWMnLCBydWxlczogWydiYWNrRW5kT3JSdWxlcyddIH0sCiAgICAgICAgewogICAgICAgICAgcGF0aDogJ3NwZWMuZGVmYXVsdEJhY2tlbmQuc2VydmljZS5uYW1lJywgcnVsZXM6IFsncmVxdWlyZWQnXSwgdHJhbnNsYXRpb25LZXk6ICdpbmdyZXNzLmRlZmF1bHRCYWNrZW5kLnRhcmdldFNlcnZpY2UubGFiZWwnCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICBwYXRoOiAnc3BlYy5kZWZhdWx0QmFja2VuZC5zZXJ2aWNlLnBvcnQubnVtYmVyJywgcnVsZXM6IFsncmVxdWlyZWQnLCAncmVxdWlyZWRJbnQnLCAncG9ydE51bWJlciddLCB0cmFuc2xhdGlvbktleTogJ2luZ3Jlc3MuZGVmYXVsdEJhY2tlbmQucG9ydC5sYWJlbCcKICAgICAgICB9LAogICAgICAgIHsgcGF0aDogJ3NwZWMudGxzLmhvc3RzJywgcnVsZXM6IFsncmVxdWlyZWQnLCAnd2lsZGNhcmRIb3N0bmFtZSddIH0KICAgICAgXSwKICAgICAgZnZSZXBvcnRlZFZhbGlkYXRpb25QYXRoczogWydzcGVjLnJ1bGVzLmh0dHAucGF0aHMuYmFja2VuZC5zZXJ2aWNlLnBvcnQubnVtYmVyJywgJ3NwZWMucnVsZXMuaHR0cC5wYXRocy5wYXRoJywgJ3NwZWMucnVsZXMuaHR0cC5wYXRocy5iYWNrZW5kLnNlcnZpY2UubmFtZSddCiAgICB9OwogIH0sCgogIHdhdGNoOiB7CiAgICBhc3luYyAndmFsdWUubWV0YWRhdGEubmFtZXNwYWNlJygpIHsKICAgICAgaWYgKHRoaXMuZmlsdGVyQnlBcGkpIHsKICAgICAgICB0aGlzLmZpbHRlcmVkU2VjcmV0cyA9IGF3YWl0IHRoaXMuZmlsdGVyU2VjcmV0c0J5QXBpKCk7CiAgICAgIH0KICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgZnZFeHRyYVJ1bGVzKCkgewogICAgICBjb25zdCBiYWNrRW5kT3JSdWxlcyA9IChzcGVjKSA9PiB7CiAgICAgICAgY29uc3QgeyBydWxlcyA9IFtdLCBkZWZhdWx0QmFja2VuZCB9ID0gc3BlYzsKCiAgICAgICAgY29uc3QgdmFsaWRSdWxlcyA9IHJ1bGVzLmxlbmd0aCA+IDA7CiAgICAgICAgY29uc3QgdmFsaWREZWZhdWx0QmFja2VuZCA9ICEhZGVmYXVsdEJhY2tlbmQ/LnNlcnZpY2U7CgogICAgICAgIGlmICghdmFsaWRSdWxlcyAmJiAhdmFsaWREZWZhdWx0QmFja2VuZCkgewogICAgICAgICAgcmV0dXJuIHRoaXMudCgnaW5ncmVzcy5ydWxlc09yQmFja2VuZFNwZWNpZmllZCcpOwogICAgICAgIH0KICAgICAgfTsKCiAgICAgIHJldHVybiB7IGJhY2tFbmRPclJ1bGVzIH07CiAgICB9LAogICAgdGFiRXJyb3JzKCkgewogICAgICByZXR1cm4gewogICAgICAgIHJ1bGVzOiAgICAgICAgICB0aGlzLmZ2R2V0UGF0aEVycm9ycyhbJ3NwZWMucnVsZXMuaG9zdCcsICdzcGVjLnJ1bGVzLmh0dHAucGF0aHMucGF0aCcsICdzcGVjLnJ1bGVzLmh0dHAucGF0aHMuYmFja2VuZC5zZXJ2aWNlLnBvcnQubnVtYmVyJywgJ3NwZWMucnVsZXMuaHR0cC5wYXRocy5iYWNrZW5kLnNlcnZpY2UubmFtZSddKT8ubGVuZ3RoID4gMCwKICAgICAgICBkZWZhdWx0QmFja2VuZDogdGhpcy5mdkdldFBhdGhFcnJvcnMoWydzcGVjLmRlZmF1bHRCYWNrZW5kLnNlcnZpY2UubmFtZScsICdzcGVjLmRlZmF1bHRCYWNrZW5kLnNlcnZpY2UucG9ydC5udW1iZXInXSk/Lmxlbmd0aCA+IDAKICAgICAgfTsKICAgIH0sCiAgICBydWxlc1BhdGhSdWxlcygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICByZXF1ZXN0SG9zdDogdGhpcy5mdkdldEFuZFJlcG9ydFBhdGhSdWxlcygnc3BlYy5ydWxlcy5ob3N0JyksCiAgICAgICAgcGF0aDogICAgICAgIHRoaXMuZnZHZXRBbmRSZXBvcnRQYXRoUnVsZXMoJ3NwZWMucnVsZXMuaHR0cC5wYXRocy5wYXRoJyksCiAgICAgICAgcG9ydDogICAgICAgIHRoaXMuZnZHZXRBbmRSZXBvcnRQYXRoUnVsZXMoJ3NwZWMucnVsZXMuaHR0cC5wYXRocy5iYWNrZW5kLnNlcnZpY2UucG9ydC5udW1iZXInKSwKICAgICAgICB0YXJnZXQ6ICAgICAgdGhpcy5mdkdldEFuZFJlcG9ydFBhdGhSdWxlcygnc3BlYy5ydWxlcy5odHRwLnBhdGhzLmJhY2tlbmQuc2VydmljZS5uYW1lJyksCgogICAgICB9OwogICAgfSwKICAgIGRlZmF1bHRCYWNrZW5kUGF0aFJ1bGVzKCkgewogICAgICBjb25zdCBydWxlc0V4aXN0ID0gKHRoaXMudmFsdWU/LnNwZWM/LnJ1bGVzIHx8IFtdKS5sZW5ndGggPiAwOwogICAgICBjb25zdCBkZWZhdWx0QmFja2VuZEV4aXN0ID0gISF0aGlzLnZhbHVlPy5zcGVjPy5kZWZhdWx0QmFja2VuZD8uc2VydmljZTsKCiAgICAgIGlmICghcnVsZXNFeGlzdCB8fCBkZWZhdWx0QmFja2VuZEV4aXN0KSB7CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIG5hbWU6IHRoaXMuZnZHZXRBbmRSZXBvcnRQYXRoUnVsZXMoJ3NwZWMuZGVmYXVsdEJhY2tlbmQuc2VydmljZS5uYW1lJyksCiAgICAgICAgICBwb3J0OiB0aGlzLmZ2R2V0QW5kUmVwb3J0UGF0aFJ1bGVzKCdzcGVjLmRlZmF1bHRCYWNrZW5kLnNlcnZpY2UucG9ydC5udW1iZXInKSwKICAgICAgICB9OwogICAgICB9CgogICAgICByZXR1cm4geyBuYW1lOiBbXSwgcG9ydDogW10gfTsKICAgIH0sCiAgICBzZXJ2aWNlVGFyZ2V0cygpIHsKICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyQnlDdXJyZW50UmVzb3VyY2VOYW1lc3BhY2UodGhpcy5hbGxTZXJ2aWNlcykKICAgICAgICAubWFwKChzZXJ2aWNlKSA9PiAoewogICAgICAgICAgbGFiZWw6IHNlcnZpY2UubWV0YWRhdGEubmFtZSwKICAgICAgICAgIHZhbHVlOiBzZXJ2aWNlLm1ldGFkYXRhLm5hbWUsCiAgICAgICAgICBwb3J0czogc2VydmljZS5zcGVjLnBvcnRzPy5tYXAoKHApID0+IHAucG9ydCkKICAgICAgICB9KSk7CiAgICB9LAogICAgZmlyc3RUYWJMYWJlbCgpIHsKICAgICAgcmV0dXJuIHRoaXMuaXNWaWV3ID8gdGhpcy50KCdpbmdyZXNzLnJ1bGVzQW5kQ2VydGlmaWNhdGVzLnRpdGxlJykgOiB0aGlzLnQoJ2luZ3Jlc3MucnVsZXMudGl0bGUnKTsKICAgIH0sCiAgICBjZXJ0aWZpY2F0ZXMoKSB7CiAgICAgIGxldCBmaWx0ZXJlZFNlY3JldHM7CgogICAgICBpZiAodGhpcy5maWx0ZXJlZFNlY3JldHMpIHsKICAgICAgICBmaWx0ZXJlZFNlY3JldHMgPSB0aGlzLmZpbHRlcmVkU2VjcmV0czsKICAgICAgfSBlbHNlIGlmICh0aGlzLmFsbFNlY3JldHMgKSB7CiAgICAgICAgZmlsdGVyZWRTZWNyZXRzID0gdGhpcy5maWx0ZXJCeUN1cnJlbnRSZXNvdXJjZU5hbWVzcGFjZSh0aGlzLmFsbFNlY3JldHMuZmlsdGVyKChzZWNyZXQpID0+IHNlY3JldC5fdHlwZSA9PT0gVFlQRVMuVExTKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIFtdOwogICAgICB9CgogICAgICByZXR1cm4gZmlsdGVyZWRTZWNyZXRzLm1hcCgoc2VjcmV0KSA9PiB7CiAgICAgICAgY29uc3QgeyBpZCB9ID0gc2VjcmV0OwoKICAgICAgICByZXR1cm4gaWQuc2xpY2UoaWQuaW5kZXhPZignLycpICsgMSk7CiAgICAgIH0pOwogICAgfSwKICAgIGluZ3Jlc3NDbGFzc2VzKCkgewogICAgICByZXR1cm4gdGhpcy5hbGxJbmdyZXNzQ2xhc3Nlcy5tYXAoKGluZ3Jlc3NDbGFzcykgPT4gKHsKICAgICAgICBsYWJlbDogaW5ncmVzc0NsYXNzLm1ldGFkYXRhLm5hbWUsCiAgICAgICAgdmFsdWU6IGluZ3Jlc3NDbGFzcy5tZXRhZGF0YS5uYW1lLAogICAgICB9KSk7CiAgICB9LAogIH0sCgogIGNyZWF0ZWQoKSB7CiAgICB0aGlzLiRzZXQodGhpcy52YWx1ZSwgJ3NwZWMnLCB0aGlzLnZhbHVlLnNwZWMgfHwge30pOwogICAgdGhpcy4kc2V0KHRoaXMudmFsdWUuc3BlYywgJ3J1bGVzJywgdGhpcy52YWx1ZS5zcGVjLnJ1bGVzIHx8IFt7fV0pOwogICAgdGhpcy4kc2V0KHRoaXMudmFsdWUuc3BlYywgJ2JhY2tlbmQnLCB0aGlzLnZhbHVlLnNwZWMuYmFja2VuZCB8fCB7fSk7CgogICAgaWYgKCF0aGlzLnZhbHVlLnNwZWMudGxzIHx8IE9iamVjdC5rZXlzKHRoaXMudmFsdWUuc3BlYy50bHNbMF0gfHwge30pLmxlbmd0aCA9PT0gMCkgewogICAgICB0aGlzLiRzZXQodGhpcy52YWx1ZS5zcGVjLCAndGxzJywgW10pOwogICAgfQoKICAgIHRoaXMucmVnaXN0ZXJCZWZvcmVIb29rKHRoaXMud2lsbFNhdmUsICd3aWxsU2F2ZScpOwogIH0sCgogIG1ldGhvZHM6IHsKICAgIGZpbHRlclNlY3JldHNCeUFwaSgpIHsKICAgICAgY29uc3QgZmluZFBhZ2VBcmdzID0geyAvLyBPZiB0eXBlIEFjdGlvbkZpbmRQYWdlQXJncwogICAgICAgIG5hbWVzcGFjZWQ6IHRoaXMudmFsdWUubWV0YWRhdGEubmFtZXNwYWNlLAogICAgICAgIHBhZ2luYXRpb246IG5ldyBGaWx0ZXJBcmdzKHsKICAgICAgICAgIGZpbHRlcnM6IFBhZ2luYXRpb25QYXJhbUZpbHRlci5jcmVhdGVTaW5nbGVGaWVsZCh7CiAgICAgICAgICAgIGZpZWxkOiAnbWV0YWRhdGEuZmllbGRzLjEnLAogICAgICAgICAgICB2YWx1ZTogVFlQRVMuVExTCiAgICAgICAgICB9KQogICAgICAgIH0pLAogICAgICB9OwoKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmRpc3BhdGNoKGBjbHVzdGVyL2ZpbmRQYWdlYCwgeyB0eXBlOiBTRUNSRVQsIG9wdDogZmluZFBhZ2VBcmdzIH0pOwogICAgfSwKCiAgICBmaWx0ZXJCeUN1cnJlbnRSZXNvdXJjZU5hbWVzcGFjZShyZXNvdXJjZXMpIHsKICAgICAgLy8gV2hlbiBjb25maWd1cmluZyBhbiBJbmdyZXNzLCB0aGUgb3B0aW9ucyBmb3IgU2VjcmV0cyBhbmQKICAgICAgLy8gZGVmYXVsdCBiYWNrZW5kIFNlcnZpY2VzIGFyZSBsaW1pdGVkIHRvIHRoZSBuYW1lc3BhY2Ugb2YgdGhlIEluZ3Jlc3MuCiAgICAgIHJldHVybiByZXNvdXJjZXMuZmlsdGVyKChyZXNvdXJjZSkgPT4gewogICAgICAgIHJldHVybiByZXNvdXJjZS5tZXRhZGF0YS5uYW1lc3BhY2UgPT09IHRoaXMudmFsdWUubWV0YWRhdGEubmFtZXNwYWNlOwogICAgICB9KTsKICAgIH0sCgogICAgd2lsbFNhdmUoKSB7CiAgICAgIGNvbnN0IGJhY2tlbmQgPSBnZXQodGhpcy52YWx1ZS5zcGVjLCB0aGlzLnZhbHVlLmRlZmF1bHRCYWNrZW5kUGF0aCk7CiAgICAgIGNvbnN0IHNlcnZpY2VOYW1lID0gZ2V0KGJhY2tlbmQsIHRoaXMudmFsdWUuc2VydmljZU5hbWVQYXRoKTsKICAgICAgY29uc3Qgc2VydmljZVBvcnQgPSBnZXQoYmFja2VuZCwgdGhpcy52YWx1ZS5zZXJ2aWNlUG9ydFBhdGgpOwoKICAgICAgaWYgKGJhY2tlbmQgJiYgKCFzZXJ2aWNlTmFtZSB8fCAhc2VydmljZVBvcnQpKSB7CiAgICAgICAgY29uc3QgcGF0aCA9IHRoaXMudmFsdWUuZGVmYXVsdEJhY2tlbmRQYXRoOwoKICAgICAgICBzZXQodGhpcy52YWx1ZS5zcGVjLCBwYXRoLCBudWxsKTsKICAgICAgfQogICAgfSwKICB9Cn07Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/edit/networking.k8s.io.ingress","sourcesContent":["<script>\nimport { allHash } from '@shell/utils/promise';\nimport { SECRET, SERVICE, INGRESS_CLASS } from '@shell/config/types';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport FormValidation from '@shell/mixins/form-validation';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport CruResource from '@shell/components/CruResource';\nimport Labels from '@shell/components/form/Labels';\nimport Error from '@shell/components/form/Error';\nimport Tabbed from '@shell/components/Tabbed';\nimport { get, set } from '@shell/utils/object';\nimport { SECRET_TYPES as TYPES } from '@shell/config/secret';\nimport DefaultBackend from './DefaultBackend';\nimport Certificates from './Certificates';\nimport Rules from './Rules';\nimport IngressClass from './IngressClass';\nimport Loading from '@shell/components/Loading';\nimport { FilterArgs, PaginationParamFilter } from '@shell/types/store/pagination.types';\n\nexport default {\n  name:       'CRUIngress',\n  components: {\n    IngressClass,\n    Certificates,\n    CruResource,\n    DefaultBackend,\n    Labels,\n    NameNsDescription,\n    Rules,\n    Tab,\n    Tabbed,\n    Error,\n    Loading,\n  },\n  mixins: [CreateEditView, FormValidation],\n  props:  {\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    },\n    mode: {\n      type:    String,\n      default: 'edit'\n    }\n  },\n\n  async fetch() {\n    this.ingressClassSchema = this.$store.getters[`cluster/schemaFor`](INGRESS_CLASS);\n\n    const promises = {\n      services:              this.$store.dispatch('cluster/findAll', { type: SERVICE }),\n      ingressClasses:        this.ingressClassSchema ? this.$store.dispatch('cluster/findAll', { type: INGRESS_CLASS }) : Promise.resolve([]),\n      ingressResourceFields: this.schema.fetchResourceFields(),\n    };\n\n    this.filterByApi = this.$store.getters[`cluster/paginationEnabled`](SECRET);\n\n    if (this.filterByApi) {\n      promises.filteredSecrets = this.filterSecretsByApi();\n    } else {\n      promises.secrets = this.$store.dispatch('cluster/findAll', { type: SECRET });\n    }\n\n    const hash = await allHash(promises);\n\n    this.allServices = hash.services;\n    this.allSecrets = hash.secrets;\n    this.filteredSecrets = hash.filteredSecrets;\n    this.allIngressClasses = hash.ingressClasses;\n  },\n  data() {\n    return {\n      filterByApi:        null,\n      ingressClassSchema: null,\n      allSecrets:         null,\n      filteredSecrets:    null,\n      allServices:        [],\n      allIngressClasses:  [],\n      fvFormRuleSets:     [\n        {\n          path: 'metadata.name', rules: ['required', 'hostname'], translationKey: 'nameNsDescription.name.label'\n        },\n        {\n          path: 'spec.rules.host', rules: ['wildcardHostname'], translationKey: 'ingress.rules.requestHost.label'\n        },\n        {\n          path: 'spec.rules.http.paths.path', rules: ['absolutePath'], translationKey: 'ingress.rules.path.label'\n        },\n        {\n          path: 'spec.rules.http.paths.backend.service.port.number', rules: ['required'], translationKey: 'ingress.rules.port.label'\n        },\n        {\n          path: 'spec.rules.http.paths.backend.service.name', rules: ['required'], translationKey: 'ingress.rules.target.label'\n        },\n        { path: 'spec', rules: ['backEndOrRules'] },\n        {\n          path: 'spec.defaultBackend.service.name', rules: ['required'], translationKey: 'ingress.defaultBackend.targetService.label'\n        },\n        {\n          path: 'spec.defaultBackend.service.port.number', rules: ['required', 'requiredInt', 'portNumber'], translationKey: 'ingress.defaultBackend.port.label'\n        },\n        { path: 'spec.tls.hosts', rules: ['required', 'wildcardHostname'] }\n      ],\n      fvReportedValidationPaths: ['spec.rules.http.paths.backend.service.port.number', 'spec.rules.http.paths.path', 'spec.rules.http.paths.backend.service.name']\n    };\n  },\n\n  watch: {\n    async 'value.metadata.namespace'() {\n      if (this.filterByApi) {\n        this.filteredSecrets = await this.filterSecretsByApi();\n      }\n    }\n  },\n\n  computed: {\n    fvExtraRules() {\n      const backEndOrRules = (spec) => {\n        const { rules = [], defaultBackend } = spec;\n\n        const validRules = rules.length > 0;\n        const validDefaultBackend = !!defaultBackend?.service;\n\n        if (!validRules && !validDefaultBackend) {\n          return this.t('ingress.rulesOrBackendSpecified');\n        }\n      };\n\n      return { backEndOrRules };\n    },\n    tabErrors() {\n      return {\n        rules:          this.fvGetPathErrors(['spec.rules.host', 'spec.rules.http.paths.path', 'spec.rules.http.paths.backend.service.port.number', 'spec.rules.http.paths.backend.service.name'])?.length > 0,\n        defaultBackend: this.fvGetPathErrors(['spec.defaultBackend.service.name', 'spec.defaultBackend.service.port.number'])?.length > 0\n      };\n    },\n    rulesPathRules() {\n      return {\n        requestHost: this.fvGetAndReportPathRules('spec.rules.host'),\n        path:        this.fvGetAndReportPathRules('spec.rules.http.paths.path'),\n        port:        this.fvGetAndReportPathRules('spec.rules.http.paths.backend.service.port.number'),\n        target:      this.fvGetAndReportPathRules('spec.rules.http.paths.backend.service.name'),\n\n      };\n    },\n    defaultBackendPathRules() {\n      const rulesExist = (this.value?.spec?.rules || []).length > 0;\n      const defaultBackendExist = !!this.value?.spec?.defaultBackend?.service;\n\n      if (!rulesExist || defaultBackendExist) {\n        return {\n          name: this.fvGetAndReportPathRules('spec.defaultBackend.service.name'),\n          port: this.fvGetAndReportPathRules('spec.defaultBackend.service.port.number'),\n        };\n      }\n\n      return { name: [], port: [] };\n    },\n    serviceTargets() {\n      return this.filterByCurrentResourceNamespace(this.allServices)\n        .map((service) => ({\n          label: service.metadata.name,\n          value: service.metadata.name,\n          ports: service.spec.ports?.map((p) => p.port)\n        }));\n    },\n    firstTabLabel() {\n      return this.isView ? this.t('ingress.rulesAndCertificates.title') : this.t('ingress.rules.title');\n    },\n    certificates() {\n      let filteredSecrets;\n\n      if (this.filteredSecrets) {\n        filteredSecrets = this.filteredSecrets;\n      } else if (this.allSecrets ) {\n        filteredSecrets = this.filterByCurrentResourceNamespace(this.allSecrets.filter((secret) => secret._type === TYPES.TLS));\n      } else {\n        return [];\n      }\n\n      return filteredSecrets.map((secret) => {\n        const { id } = secret;\n\n        return id.slice(id.indexOf('/') + 1);\n      });\n    },\n    ingressClasses() {\n      return this.allIngressClasses.map((ingressClass) => ({\n        label: ingressClass.metadata.name,\n        value: ingressClass.metadata.name,\n      }));\n    },\n  },\n\n  created() {\n    this.$set(this.value, 'spec', this.value.spec || {});\n    this.$set(this.value.spec, 'rules', this.value.spec.rules || [{}]);\n    this.$set(this.value.spec, 'backend', this.value.spec.backend || {});\n\n    if (!this.value.spec.tls || Object.keys(this.value.spec.tls[0] || {}).length === 0) {\n      this.$set(this.value.spec, 'tls', []);\n    }\n\n    this.registerBeforeHook(this.willSave, 'willSave');\n  },\n\n  methods: {\n    filterSecretsByApi() {\n      const findPageArgs = { // Of type ActionFindPageArgs\n        namespaced: this.value.metadata.namespace,\n        pagination: new FilterArgs({\n          filters: PaginationParamFilter.createSingleField({\n            field: 'metadata.fields.1',\n            value: TYPES.TLS\n          })\n        }),\n      };\n\n      return this.$store.dispatch(`cluster/findPage`, { type: SECRET, opt: findPageArgs });\n    },\n\n    filterByCurrentResourceNamespace(resources) {\n      // When configuring an Ingress, the options for Secrets and\n      // default backend Services are limited to the namespace of the Ingress.\n      return resources.filter((resource) => {\n        return resource.metadata.namespace === this.value.metadata.namespace;\n      });\n    },\n\n    willSave() {\n      const backend = get(this.value.spec, this.value.defaultBackendPath);\n      const serviceName = get(backend, this.value.serviceNamePath);\n      const servicePort = get(backend, this.value.servicePortPath);\n\n      if (backend && (!serviceName || !servicePort)) {\n        const path = this.value.defaultBackendPath;\n\n        set(this.value.spec, path, null);\n      }\n    },\n  }\n};\n</script>\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n  <CruResource\n    v-else\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"fvFormIsValid\"\n    :errors=\"fvUnreportedValidationErrors\"\n    :description=\"t('ingress.description')\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n    @cancel=\"done\"\n  >\n    <NameNsDescription\n      v-if=\"!isView\"\n      :value=\"value\"\n      :rules=\"{name: fvGetAndReportPathRules('metadata.name'), namespace: fvGetAndReportPathRules('metadata.namespace'), description: []}\"\n      :mode=\"mode\"\n      :register-before-hook=\"registerBeforeHook\"\n    />\n    <Error\n      :value=\"value.spec\"\n      :rules=\"fvGetAndReportPathRules('spec')\"\n      as-banner\n    />\n    <Tabbed :side-tabs=\"true\">\n      <Tab\n        :label=\"firstTabLabel\"\n        name=\"rules\"\n        :weight=\"4\"\n        :error=\"tabErrors.rules\"\n      >\n        <Rules\n          v-model=\"value\"\n          :mode=\"mode\"\n          :service-targets=\"serviceTargets\"\n          :certificates=\"certificates\"\n          :rules=\"rulesPathRules\"\n        />\n      </Tab>\n      <Tab\n        :label=\"t('ingress.defaultBackend.label')\"\n        name=\"default-backend\"\n        :weight=\"3\"\n        :error=\"tabErrors.defaultBackend\"\n      >\n        <DefaultBackend\n          v-model=\"value\"\n          :service-targets=\"serviceTargets\"\n          :mode=\"mode\"\n          :rules=\"defaultBackendPathRules\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isView\"\n        :label=\"t('ingress.certificates.label')\"\n        name=\"certificates\"\n        :weight=\"2\"\n      >\n        <Certificates\n          v-model=\"value\"\n          :mode=\"mode\"\n          :certificates=\"certificates\"\n          :rules=\"{host: fvGetAndReportPathRules('spec.tls.hosts')}\"\n        />\n      </Tab>\n      <Tab\n        :label=\"t('ingress.ingressClass.label')\"\n        name=\"ingress-class\"\n        :weight=\"1\"\n      >\n        <IngressClass\n          v-model=\"value\"\n          :mode=\"mode\"\n          :ingress-classes=\"ingressClasses\"\n        />\n      </Tab>\n      <Tab\n        v-if=\"!isView\"\n        name=\"labels-and-annotations\"\n        label-key=\"generic.labelsAndAnnotations\"\n        :weight=\"0\"\n      >\n        <Labels\n          default-container-class=\"labels-and-annotations-container\"\n          :value=\"value\"\n          :mode=\"mode\"\n          :display-side-by-side=\"false\"\n        />\n      </Tab>\n    </Tabbed>\n  </CruResource>\n</template>\n"]}]}