{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/CopyToClipboardText.vue?vue&type=style&index=0&id=324d9340&lang=scss&scoped=true","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/components/CopyToClipboardText.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb3B5LXRvLWNsaXBib2FyZC10ZXh0IHsKICAmLnBsYWluIHsKICAgIGNvbG9yOiB2YXIoLS1ib2R5LXRleHQpOwoKICAgICY6aG92ZXIgewogICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICB9CiAgfQoKICAmLmNvcGllZCB7CiAgICBwb2ludGVyLWV2ZW50czogbm9uZTsKICAgIGNvbG9yOiB2YXIoLS1zdWNjZXNzKTsKICB9Cn0K"},{"version":3,"sources":["CopyToClipboardText.vue"],"names":[],"mappings":";AA0EA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"CopyToClipboardText.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\nimport { copyTextToClipboard } from '@shell/utils/clipboard';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nexport default {\n  props: {\n    text: {\n      type:     String,\n      required: true,\n    },\n    // Show as plain - don't show in link style\n    plain: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  data() {\n    return { copied: false };\n  },\n\n  methods: {\n    clicked(event) {\n      if (!this.copied) {\n        event.preventDefault();\n        copyTextToClipboard(this.text).then(() => {\n          this.copied = true;\n\n          let t = event.target;\n\n          if (t.tagName === 'I') {\n            t = t.parentElement || t;\n          }\n          setTimeout(() => {\n            this.copied = false;\n          }, 500);\n        }).catch((e) => {\n          this.$emit('error', exceptionToErrorsArray(e));\n        });\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <a\n    class=\"copy-to-clipboard-text\"\n    :class=\"{ 'copied': copied, 'plain': plain}\"\n    href=\"#\"\n    @click=\"clicked\"\n  >\n    {{ text }} <i\n      class=\"icon\"\n      :class=\"{ 'icon-copy': !copied, 'icon-checkmark': copied}\"\n    />\n  </a>\n</template>\n<style lang=\"scss\" scoped>\n  .copy-to-clipboard-text {\n    &.plain {\n      color: var(--body-text);\n\n      &:hover {\n        text-decoration: none;\n      }\n    }\n\n    &.copied {\n      pointer-events: none;\n      color: var(--success);\n    }\n  }\n</style>\n"]}]}