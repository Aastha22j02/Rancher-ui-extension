{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/fleet.cattle.io.gitrepo.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/fleet.cattle.io.gitrepo.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["fleet.cattle.io.gitrepo.vue"],"names":[],"mappingsfile":"fleet.cattle.io.gitrepo.vue","sourceRoot":"node_modules/@rancher/shell/edit","sourcesContent":["<script>\nimport Vue from 'vue';\nimport { exceptionToErrorsArray } from '@shell/utils/error';\nimport { mapGetters } from 'vuex';\nimport {\n  AUTH_TYPE, FLEET, NORMAN, SECRET, VIRTUAL_HARVESTER_PROVIDER\n} from '@shell/config/types';\nimport { set } from '@shell/utils/object';\nimport ArrayList from '@shell/components/form/ArrayList';\nimport { Banner } from '@components/Banner';\nimport CreateEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport InputWithSelect from '@shell/components/form/InputWithSelect';\nimport jsyaml from 'js-yaml';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport Labels from '@shell/components/form/Labels';\nimport Loading from '@shell/components/Loading';\nimport NameNsDescription from '@shell/components/form/NameNsDescription';\nimport YamlEditor from '@shell/components/YamlEditor';\nimport { base64Decode, base64Encode } from '@shell/utils/crypto';\nimport SelectOrCreateAuthSecret from '@shell/components/form/SelectOrCreateAuthSecret';\nimport { _CREATE } from '@shell/config/query-params';\nimport { isHarvesterCluster } from '@shell/utils/cluster';\nimport { CAPI, CATALOG, FLEET as FLEET_LABELS } from '@shell/config/labels-annotations';\nimport { SECRET_TYPES } from '@shell/config/secret';\nimport { checkSchemasForFindAllHash } from '@shell/utils/auth';\nimport Checkbox from '@components/Form/Checkbox/Checkbox.vue';\n\nconst _VERIFY = 'verify';\nconst _SKIP = 'skip';\nconst _SPECIFY = 'specify';\n\nexport default {\n  name: 'CruGitRepo',\n\n  components: {\n    Checkbox,\n    ArrayList,\n    Banner,\n    CruResource,\n    InputWithSelect,\n    Labels,\n    LabeledInput,\n    LabeledSelect,\n    Loading,\n    NameNsDescription,\n    YamlEditor,\n    SelectOrCreateAuthSecret,\n  },\n\n  mixins: [CreateEditView],\n\n  async fetch() {\n    const hash = await checkSchemasForFindAllHash({\n      allClusters: {\n        inStoreType: 'management',\n        type:        FLEET.CLUSTER\n      },\n\n      allClusterGroups: {\n        inStoreType: 'management',\n        type:        FLEET.CLUSTER_GROUP\n      }\n    }, this.$store);\n\n    this.allClusters = hash.allClusters || [];\n    this.allClusterGroups = hash.allClusterGroups || [];\n\n    let tls = _VERIFY;\n\n    if ( this.value.spec.insecureSkipTLSVerify ) {\n      tls = _SKIP;\n    } else if ( this.value.spec.caBundle ) {\n      try {\n        this.caBundle = base64Decode(this.value.spec.caBundle);\n        tls = _SPECIFY;\n      } catch (e) {\n        // Hmm...\n      }\n    }\n\n    this.tlsMode = tls;\n\n    if (this.value.spec.correctDrift === undefined) {\n      Vue.set(this.value.spec, 'correctDrift', { enabled: false });\n    }\n\n    this.updateTargets();\n  },\n\n  data() {\n    const targetInfo = this.value.targetInfo;\n    const targetCluster = targetInfo.cluster;\n    const targetClusterGroup = targetInfo.clusterGroup;\n    const targetAdvanced = targetInfo.advanced;\n\n    const ref = ( this.value.spec?.revision ? 'revision' : 'branch' );\n    const refValue = this.value.spec?.[ref] || '';\n\n    let targetMode = targetInfo.mode;\n\n    if ( this.realMode === _CREATE ) {\n      targetMode = 'all';\n    } else if ( targetMode === 'cluster' ) {\n      targetMode = `cluster://${ targetCluster }`;\n    } else if ( targetMode === 'clusterGroup' ) {\n      targetMode = `group://${ targetClusterGroup }`;\n    }\n\n    const stepRepoInfo = {\n      name:           'stepRepoInfo',\n      title:          this.t('fleet.gitRepo.add.steps.repoInfo.title'),\n      label:          this.t('fleet.gitRepo.add.steps.repoInfo.label'),\n      subtext:        this.t('fleet.gitRepo.add.steps.repoInfo.subtext'),\n      descriptionKey: 'fleet.gitRepo.add.steps.repoInfo.description',\n      ready:          false,\n      weight:         30\n    };\n\n    const stepTargetInfo = {\n      name:           'stepTargetInfo',\n      title:          this.t('fleet.gitRepo.add.steps.targetInfo.title'),\n      label:          this.t('fleet.gitRepo.add.steps.targetInfo.label'),\n      subtext:        this.t('fleet.gitRepo.add.steps.targetInfo.subtext'),\n      descriptionKey: 'fleet.gitRepo.steps.add.targetInfo.description',\n      ready:          true,\n      weight:         30\n    };\n\n    const addRepositorySteps = [stepRepoInfo, stepTargetInfo].sort((a, b) => (b.weight || 0) - (a.weight || 0));\n\n    return {\n      allClusters:             [],\n      allClusterGroups:        [],\n      allWorkspaces:           [],\n      tempCachedValues:        {},\n      username:                null,\n      password:                null,\n      publicKey:               null,\n      privateKey:              null,\n      tlsMode:                 null,\n      caBundle:                null,\n      targetAdvancedErrors:    null,\n      matchingClusters:        null,\n      ref,\n      refValue,\n      targetMode,\n      targetCluster,\n      targetClusterGroup,\n      targetAdvanced,\n      stepRepoInfo,\n      stepTargetInfo,\n      addRepositorySteps,\n      displayHelmRepoURLRegex: false\n    };\n  },\n\n  computed: {\n    ...mapGetters(['workspace']),\n\n    _SPECIFY() {\n      return _SPECIFY;\n    },\n\n    isLocal() {\n      return this.value.metadata.namespace === 'fleet-local';\n    },\n\n    isTls() {\n      return !(this.value?.spec?.repo || '').startsWith('http://');\n    },\n\n    targetOptions() {\n      const out = [\n        {\n          label: 'No Clusters',\n          value: 'none'\n        },\n        {\n          label: 'All Clusters in the Workspace',\n          value: 'all',\n        },\n        {\n          label: 'Advanced',\n          value: 'advanced'\n        },\n      ];\n\n      const clusters = this.allClusters\n        .filter((x) => {\n          return x.metadata.namespace === this.value.metadata.namespace;\n        })\n        .filter((x) => !isHarvesterCluster(x))\n        .map((x) => {\n          return { label: x.nameDisplay, value: `cluster://${ x.metadata.name }` };\n        });\n\n      if ( clusters.length ) {\n        out.push({ kind: 'divider', disabled: true });\n        out.push({\n          kind:     'title',\n          label:    'Clusters',\n          disabled: true,\n        });\n\n        out.push(...clusters);\n      }\n\n      const groups = this.allClusterGroups\n        .filter((x) => x.metadata.namespace === this.value.metadata.namespace)\n        .map((x) => {\n          return { label: x.nameDisplay, value: `group://${ x.metadata.name }` };\n        });\n\n      if ( groups.length ) {\n        out.push({ kind: 'divider', disabled: true });\n        out.push({\n          kind:     'title',\n          label:    'Cluster Groups',\n          disabled: true\n        });\n\n        out.push(...groups);\n      }\n\n      return out;\n    },\n\n    clusterNames() {\n      const out = this.allClusters\n        .filter((x) => x.metadata.namespace === this.value.metadata.namespace)\n        .map((x) => x.metadata.name);\n\n      return out;\n    },\n\n    clusterGroupNames() {\n      const out = this.allClusterGroups\n        .filter((x) => x.metadata.namespace === this.value.metadata.namespace)\n        .map((x) => x.metadata.name);\n\n      return out;\n    },\n\n    tlsOptions() {\n      return [\n        { label: this.t('fleet.gitRepo.tls.verify'), value: _VERIFY },\n        { label: this.t('fleet.gitRepo.tls.specify'), value: _SPECIFY },\n        { label: this.t('fleet.gitRepo.tls.skip'), value: _SKIP },\n      ];\n    },\n\n    stepOneRequires() {\n      return !!this.value.metadata.name && !!this.refValue;\n    },\n  },\n\n  watch: {\n    'value.metadata.namespace': 'updateTargets',\n    targetMode:                 'updateTargets',\n    targetCluster:              'updateTargets',\n    targetClusterGroup:         'updateTargets',\n    targetAdvanced:             'updateTargets',\n    tlsMode:                    'updateTls',\n    caBundle:                   'updateTls',\n\n    workspace(neu) {\n      if ( this.isCreate ) {\n        set(this.value, 'metadata.namespace', neu);\n      }\n    },\n  },\n\n  created() {\n    this.registerBeforeHook(this.cleanTLS, 'cleanTLS');\n    this.registerBeforeHook(this.doCreateSecrets, `registerAuthSecrets${ new Date().getTime() }`, 99);\n  },\n\n  methods: {\n    set,\n\n    cleanTLS() {\n      if (!this.isTls) {\n        delete this.value.spec.insecureSkipTLSVerify;\n        delete this.value.spec.caBundle;\n      }\n    },\n\n    updateCachedAuthVal(val, key) {\n      this.tempCachedValues[key] = typeof val === 'string' ? { selected: val } : { ...val };\n\n      if (key === 'helmSecretName') {\n        this.toggleHelmRepoURLRegex(val && val.selected !== AUTH_TYPE._NONE);\n      }\n    },\n\n    updateAuth(val, key) {\n      const spec = this.value.spec;\n\n      if ( val ) {\n        spec[key] = val;\n      } else {\n        delete spec[key];\n      }\n\n      this.updateCachedAuthVal(val, key);\n    },\n\n    toggleHelmRepoURLRegex(active) {\n      this.displayHelmRepoURLRegex = active;\n\n      if (!active) {\n        delete this.value.spec?.helmRepoURLRegex;\n      }\n    },\n\n    updateTargets() {\n      const spec = this.value.spec;\n      const mode = this.targetMode;\n\n      let kind, value;\n      const match = mode.match(/([^:]+)(:\\/\\/(.*))?$/);\n\n      if ( match ) {\n        kind = match[1];\n        value = match[3];\n      }\n\n      if ( kind === 'all' ) {\n        spec.targets = [{\n          clusterSelector: {\n            matchExpressions: [{\n              key:      CAPI.PROVIDER,\n              operator: 'NotIn',\n              values:   [\n                VIRTUAL_HARVESTER_PROVIDER\n              ],\n            }],\n          },\n        }];\n      } else if ( kind === 'none' ) {\n        spec.targets = [];\n      } else if ( kind === 'cluster' ) {\n        spec.targets = [\n          { clusterName: value },\n        ];\n      } else if ( kind === 'group' ) {\n        spec.targets = [\n          { clusterGroup: value }\n        ];\n      } else if ( kind === 'advanced' ) {\n        try {\n          const parsed = jsyaml.load(this.targetAdvanced);\n\n          spec.targets = parsed;\n          this.targetAdvancedErrors = null;\n        } catch (e) {\n          this.targetAdvancedErrors = exceptionToErrorsArray(e);\n        }\n      } else {\n        spec.targets = [];\n      }\n\n      this.stepOneReady();\n    },\n\n    changeRef({ text, selected }) {\n      this.ref = selected;\n      this.refValue = text;\n      const spec = this.value.spec;\n\n      if ( selected === 'branch' ) {\n        spec.branch = text;\n        delete spec.revision;\n      } else {\n        delete spec.branch;\n        spec.revision = text;\n      }\n\n      this.stepOneReady();\n    },\n\n    async doCreateSecrets() {\n      if (this.tempCachedValues.clientSecretName) {\n        await this.doCreate('clientSecretName', this.tempCachedValues.clientSecretName);\n      }\n\n      if (this.tempCachedValues.helmSecretName) {\n        await this.doCreate('helmSecretName', this.tempCachedValues.helmSecretName);\n      }\n    },\n\n    async doCreate(name, credentials) {\n      const { selected, publicKey, privateKey } = credentials;\n\n      if ( ![AUTH_TYPE._SSH, AUTH_TYPE._BASIC, AUTH_TYPE._S3].includes(selected) ) {\n        return;\n      }\n\n      let secret;\n\n      if ( selected === AUTH_TYPE._S3 ) {\n        secret = await this.$store.dispatch(`rancher/create`, {\n          type:               NORMAN.CLOUD_CREDENTIAL,\n          s3credentialConfig: {\n            accessKey: publicKey,\n            secretKey: privateKey,\n          },\n        });\n      } else {\n        secret = await this.$store.dispatch(`${ CATALOG._MANAGEMENT }/create`, {\n          type:     SECRET,\n          metadata: {\n            namespace:    this.value.metadata.namespace,\n            generateName: 'auth-',\n            labels:       { [FLEET_LABELS.MANAGED]: 'true' }\n          }\n        });\n\n        let type, publicField, privateField;\n\n        switch ( selected ) {\n        case AUTH_TYPE._SSH:\n          type = SECRET_TYPES.SSH;\n          publicField = 'ssh-publickey';\n          privateField = 'ssh-privatekey';\n          break;\n        case AUTH_TYPE._BASIC:\n          type = SECRET_TYPES.BASIC;\n          publicField = 'username';\n          privateField = 'password';\n          break;\n        default:\n          throw new Error('Unknown type');\n        }\n\n        secret._type = type;\n        secret.data = {\n          [publicField]:  base64Encode(publicKey),\n          [privateField]: base64Encode(privateKey),\n        };\n      }\n\n      await secret.save();\n\n      await this.$nextTick(() => {\n        this.updateAuth(secret.metadata.name, name);\n      });\n\n      return secret;\n    },\n\n    updateTlsMode(event) {\n      this.tlsMode = event;\n    },\n\n    onUpdateRepoName() {\n      this.stepOneReady();\n    },\n\n    stepOneReady() {\n      this.$set(this.addRepositorySteps[0], 'ready', this.stepOneRequires);\n    },\n\n    updateTls() {\n      const spec = this.value.spec;\n\n      if ( this.tlsMode === _SPECIFY ) {\n        spec.insecureSkipTLSVerify = false;\n        const caBundle = (this.caBundle || '').trim();\n\n        if ( caBundle ) {\n          spec.caBundle = base64Encode(`${ caBundle }\\n`);\n        } else {\n          delete spec.caBundle;\n        }\n      } else {\n        if ( this.tlsMode === _SKIP ) {\n          spec.insecureSkipTLSVerify = true;\n        } else {\n          spec.insecureSkipTLSVerify = false;\n        }\n\n        if ( this.liveValue.caBundle ) {\n          spec.caBundle = this.liveValue.caBundle;\n        } else {\n          delete spec.caBundle;\n        }\n      }\n    },\n  }\n};\n</script>\n\n<template>\n  <Loading v-if=\"$fetchState.pending\" />\n\n  <CruResource\n    v-else\n    :done-route=\"doneRoute\"\n    :mode=\"mode\"\n    :resource=\"value\"\n    :subtypes=\"[]\"\n    :validation-passed=\"true\"\n    :errors=\"errors\"\n    :steps=\"addRepositorySteps\"\n    :edit-first-step=\"true\"\n    :finish-mode=\"'finish'\"\n    class=\"wizard\"\n    @cancel=\"done\"\n    @error=\"e=>errors = e\"\n    @finish=\"save\"\n  >\n    <template #noticeBanner>\n      <Banner\n        v-if=\"isLocal && mode === 'create'\"\n        color=\"info\"\n      >\n        {{ t('fleet.gitRepo.createLocalBanner') }}\n      </Banner>\n    </template>\n    <template #stepRepoInfo>\n      <NameNsDescription\n        v-if=\"!isView\"\n        v-model=\"value\"\n        :namespaced=\"false\"\n        :mode=\"mode\"\n        @change=\"onUpdateRepoName\"\n      />\n\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <Banner\n            color=\"info col span-6\"\n          >\n            <div>\n              {{ t('fleet.gitRepo.repo.protocolBanner') }}\n            </div>\n          </Banner>\n        </div>\n      </div>\n      <div\n        class=\"row\"\n        :class=\"{'mt-20': isView}\"\n      >\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.spec.repo\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.repo.label\"\n            :placeholder=\"t('fleet.gitRepo.repo.placeholder', null, true)\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <InputWithSelect\n            :data-testid=\"`gitrepo-${ref}`\"\n            :mode=\"mode\"\n            :select-label=\"t('fleet.gitRepo.ref.label')\"\n            :select-value=\"ref\"\n            :text-label=\"t(`fleet.gitRepo.ref.${ref}Label`)\"\n            :text-placeholder=\"t(`fleet.gitRepo.ref.${ref}Placeholder`)\"\n            :text-value=\"refValue\"\n            :text-required=\"true\"\n            :options=\"[{label: t('fleet.gitRepo.ref.branch'), value: 'branch'}, {label: t('fleet.gitRepo.ref.revision'), value: 'revision'}]\"\n            @input=\"changeRef($event)\"\n          />\n        </div>\n      </div>\n      <SelectOrCreateAuthSecret\n        :value=\"value.spec.clientSecretName\"\n        :register-before-hook=\"registerBeforeHook\"\n        :namespace=\"value.metadata.namespace\"\n        :delegate-create-to-parent=\"true\"\n        in-store=\"management\"\n        :pre-select=\"tempCachedValues.clientSecretName\"\n        :mode=\"mode\"\n        generate-name=\"gitrepo-auth-\"\n        label-key=\"fleet.gitRepo.auth.git\"\n        :cache-secrets=\"true\"\n        @input=\"updateAuth($event, 'clientSecretName')\"\n        @inputauthval=\"updateCachedAuthVal($event, 'clientSecretName')\"\n      />\n      <SelectOrCreateAuthSecret\n        data-testid=\"gitrepo-helm-auth\"\n        :value=\"value.spec.helmSecretName\"\n        :register-before-hook=\"registerBeforeHook\"\n        :namespace=\"value.metadata.namespace\"\n        :delegate-create-to-parent=\"true\"\n        in-store=\"management\"\n        :mode=\"mode\"\n        generate-name=\"helmrepo-auth-\"\n        label-key=\"fleet.gitRepo.auth.helm\"\n        :pre-select=\"tempCachedValues.helmSecretName\"\n        :cache-secrets=\"true\"\n        @input=\"updateAuth($event, 'helmSecretName')\"\n        @inputauthval=\"updateCachedAuthVal($event, 'helmSecretName')\"\n      />\n\n      <div\n        v-if=\"displayHelmRepoURLRegex\"\n        class=\"row mt-20\"\n      >\n        <div\n          class=\"col span-6\"\n          data-testid=\"gitrepo-helm-repo-url-regex\"\n        >\n          <LabeledInput\n            v-model=\"value.spec.helmRepoURLRegex\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.helmRepoURLRegex\"\n          />\n        </div>\n      </div>\n\n      <template v-if=\"isTls\">\n        <div class=\"spacer\" />\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              :label=\"t('fleet.gitRepo.tls.label')\"\n              :mode=\"mode\"\n              :value=\"tlsMode\"\n              :options=\"tlsOptions\"\n              @input=\"updateTlsMode($event)\"\n            />\n          </div>\n          <div\n            v-if=\"tlsMode === _SPECIFY\"\n            class=\"col span-6\"\n          >\n            <LabeledInput\n              v-model=\"caBundle\"\n              :mode=\"mode\"\n              type=\"multiline\"\n              label-key=\"fleet.gitRepo.caBundle.label\"\n              placeholder-key=\"fleet.gitRepo.caBundle.placeholder\"\n            />\n          </div>\n        </div>\n      </template>\n      <div class=\"spacer\" />\n      <h2 v-t=\"'fleet.gitRepo.resources.label'\" />\n      <div>\n        <Checkbox\n          v-model=\"value.spec.correctDrift.enabled\"\n          data-testid=\"GitRepo-correctDrift-checkbox\"\n          class=\"check\"\n          type=\"checkbox\"\n          label-key=\"fleet.gitRepo.resources.correctDrift\"\n          :mode=\"mode\"\n        />\n        <Banner\n          data-testid=\"GitRepo-correctDrift-banner\"\n          color=\"info\"\n        >\n          {{ t('fleet.gitRepo.resources.correctDriftBanner') }}\n        </Banner>\n      </div>\n\n      <Checkbox\n        v-model=\"value.spec.keepResources\"\n        class=\"check\"\n        type=\"checkbox\"\n        label-key=\"fleet.gitRepo.resources.keepResources\"\n        :mode=\"mode\"\n      />\n      <Banner\n        color=\"info\"\n      >\n        {{ t('fleet.gitRepo.resources.keepResourcesBanner') }}\n      </Banner>\n      <div class=\"spacer\" />\n      <h2 v-t=\"'fleet.gitRepo.paths.label'\" />\n      <ArrayList\n        v-model=\"value.spec.paths\"\n        data-testid=\"gitRepo-paths\"\n        :mode=\"mode\"\n        :initial-empty-row=\"false\"\n        :value-placeholder=\"t('fleet.gitRepo.paths.placeholder')\"\n        :add-label=\"t('fleet.gitRepo.paths.addLabel')\"\n      >\n        <template #empty>\n          <Banner label-key=\"fleet.gitRepo.paths.empty\" />\n        </template>\n      </ArrayList>\n    </template>\n    <template #stepTargetInfo>\n      <h2 v-t=\"isLocal ? 'fleet.gitRepo.target.labelLocal' : 'fleet.gitRepo.target.label'\" />\n\n      <template v-if=\"!isLocal\">\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              v-model=\"targetMode\"\n              :options=\"targetOptions\"\n              option-key=\"value\"\n              :mode=\"mode\"\n              :selectable=\"option => !option.disabled\"\n              :label=\"t('fleet.gitRepo.target.selectLabel')\"\n              data-testid=\"fleet-gitrepo-target-cluster\"\n            >\n              <template v-slot:option=\"opt\">\n                <hr v-if=\"opt.kind === 'divider'\">\n                <div v-else-if=\"opt.kind === 'title'\">\n                  {{ opt.label }}\n                </div>\n                <div v-else>\n                  {{ opt.label }}\n                </div>\n              </template>\n            </LabeledSelect>\n          </div>\n        </div>\n\n        <div\n          v-if=\"targetMode === 'advanced'\"\n          class=\"row mt-10\"\n        >\n          <div class=\"col span-12\">\n            <YamlEditor v-model=\"targetAdvanced\" />\n          </div>\n        </div>\n\n        <Banner\n          v-for=\"(err, i) in targetAdvancedErrors\"\n          :key=\"i\"\n          color=\"error\"\n          :label=\"err\"\n        />\n      </template>\n\n      <div class=\"row mt-20\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.spec.serviceAccount\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.serviceAccount.label\"\n            placeholder-key=\"fleet.gitRepo.serviceAccount.placeholder\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.spec.targetNamespace\"\n            :mode=\"mode\"\n            label-key=\"fleet.gitRepo.targetNamespace.label\"\n            placeholder-key=\"fleet.gitRepo.targetNamespace.placeholder\"\n            label=\"Target Namespace\"\n            placeholder=\"Optional: Require all resources to be in this namespace\"\n          />\n        </div>\n      </div>\n      <div class=\"spacer\" />\n      <Labels\n        :value=\"value\"\n        :mode=\"mode\"\n        :display-side-by-side=\"false\"\n      />\n    </template>\n  </CruResource>\n</template>\n"]}]}