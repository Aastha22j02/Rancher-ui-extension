{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/chart/monitoring/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/chart/monitoring/index.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"node_modules/@rancher/shell/chart/monitoring","sourcesContent":["<script>\nimport isEmpty from 'lodash/isEmpty';\nimport merge from 'lodash/merge';\n\nimport { mapGetters } from 'vuex';\n\nimport Alerting from '@shell/chart/monitoring/alerting';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport ClusterSelector from '@shell/chart/monitoring/ClusterSelector';\nimport Grafana from '@shell/chart/monitoring/grafana';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport Loading from '@shell/components/Loading';\nimport Prometheus from '@shell/chart/monitoring/prometheus';\nimport Tab from '@shell/components/Tabbed/Tab';\n\nimport { allHash } from '@shell/utils/promise';\nimport { STORAGE_CLASS, PVC, SECRET, WORKLOAD_TYPES } from '@shell/config/types';\nimport { CATTLE_MONITORING_NAMESPACE } from '@shell/utils/monitoring';\n\nexport default {\n  components: {\n    Alerting,\n    Checkbox,\n    ClusterSelector,\n    Grafana,\n    LabeledInput,\n    Loading,\n    Prometheus,\n    Tab\n  },\n\n  hasTabs: true,\n\n  props: {\n    chart: {\n      type:    Object,\n      default: () => ({}),\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n\n    value: {\n      type:    Object,\n      default: () => {\n        return {};\n      },\n    },\n  },\n\n  async fetch() {\n    const { $store } = this;\n\n    // Fetch all the resources required for all the tabs asyncronously up front\n    const hashPromises = {\n      namespaces:        $store.getters['namespaces'](),\n      pvcs:              $store.dispatch('cluster/findAll', { type: PVC }),\n      // Used in Alerting tab\n      monitoringSecrets: $store.dispatch('cluster/findAll', {\n        type: SECRET,\n        opt:  { namespaced: CATTLE_MONITORING_NAMESPACE }\n      }),\n      storageClasses: $store.dispatch('cluster/findAll', { type: STORAGE_CLASS }),\n    };\n\n    // Are we editing an existing chart?\n    // (ported from shell/chart/monitoring/prometheus/index.vue)\n    const { existing = false } = this.$attrs;\n\n    // If needed, fetch all the workloads that have prometheus operator like containers\n    this.workloadTypes = !existing ? Object.values(WORKLOAD_TYPES) : [];\n\n    this.workloadTypes.forEach((type) => {\n      // We'll use a filter to fetch the results. Atm there's no neat way to differentiate between ALL results and JUST filtered\n      // So to avoid calls to all getting these filtered (and vice-versa) forget type before and after\n      $store.dispatch('cluster/forgetType', type);\n      hashPromises[type] = $store.dispatch('cluster/findAll', {\n        type,\n        opt: {\n          watch:  false,\n          // We're only interested in images with operator like names (note: these will match partial strings)\n          filter: { 'spec.template.spec.containers.image': ['quay.io/coreos/prometheus-operator', 'rancher/coreos-prometheus-operator'] }\n        }\n      });\n    });\n\n    const hash = await allHash(hashPromises);\n\n    this.targetNamespace = hash.namespaces[this.chart.targetNamespace] || false;\n\n    if (!isEmpty(hash.storageClasses)) {\n      this.storageClasses = hash.storageClasses;\n    }\n\n    if (!isEmpty(hash.pvcs)) {\n      this.pvcs = hash.pvcs;\n    }\n\n    if (!isEmpty(hash.monitoringSecrets)) {\n      this.monitoringSecrets = hash.monitoringSecrets;\n    }\n\n    this.workloadTypes.forEach((type) => {\n      if (hash[type]) {\n        this.filteredWorkloads.push(...hash[type]);\n      }\n    });\n  },\n\n  beforeDestroy() {\n    this.workloadTypes.forEach((type) => {\n      this.$store.dispatch('cluster/forgetType', type);\n    });\n  },\n\n  data() {\n    return {\n      accessModes: [\n        {\n          id:    'ReadWriteOnce',\n          label: 'monitoring.accessModes.once',\n        },\n        {\n          id:    'ReadOnlyMany',\n          label: 'monitoring.accessModes.readOnlyMany',\n        },\n        {\n          id:    'ReadWriteMany',\n          label: 'monitoring.accessModes.many',\n        },\n      ],\n      clusterType:           {},\n      disableAggregateRoles: false,\n      prometheusResources:   [],\n      pvcs:                  [],\n      monitoringSecrets:     [],\n      storageClasses:        [],\n      targetNamespace:       null,\n      filteredWorkloads:     [],\n      workloadTypes:         []\n    };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    provider() {\n      return this.currentCluster.status.provider.toLowerCase();\n    },\n  },\n\n  watch: {\n    'value.global.rbac.userRoles.create'(createUserRoles) {\n      if (createUserRoles) {\n        this.disableAggregateRoles = false;\n      } else {\n        this.value.global.rbac.userRoles.aggregateToDefaultRoles = false;\n        this.disableAggregateRoles = true;\n      }\n    },\n  },\n\n  created() {\n    if (this.mode === 'create') {\n      // merge here doesn't work (existing values are lost when going from form to yaml and back again) so instead supply some better default values\n      // any changes here need to respect the order of properties (reflected in the yaml diff)\n      const extendedDefaults = {\n        global: {\n          rbac: {\n            userRoles: {\n              create:                  this.mergeValue(this.value?.global?.rbac?.userRoles?.create, true),\n              aggregateToDefaultRoles: this.mergeValue(this.value?.global?.rbac?.userRoles?.aggregateToDefaultRoles, true),\n            },\n          },\n        },\n        prometheus: {\n          prometheusSpec: {\n            scrapeInterval:     this.mergeValue(this.value?.prometheus?.prometheusSpec?.scrapeInterval, '1m'),\n            evaluationInterval: this.mergeValue(this.value?.prometheus?.prometheusSpec?.evaluationInterval, '1m'),\n            retention:          this.mergeValue(this.value?.prometheus?.prometheusSpec?.retention, '10d'),\n            retentionSize:      this.mergeValue(this.value?.prometheus?.prometheusSpec?.retentionSize, '50GiB'),\n            enableAdminAPI:     this.mergeValue(this.value?.prometheus?.prometheusSpec?.enableAdminAPI, false),\n          },\n        },\n      };\n\n      merge(this.value, extendedDefaults);\n\n      if (this.provider.startsWith('rke2')) {\n        this.$set(this.value.rke2IngressNginx, 'enabled', true);\n        this.$set(this.value.rke2Etcd, 'enabled', true);\n        this.$set(this.value.rkeEtcd, 'enabled', false);\n      } else if (this.provider.startsWith('rke')) {\n        this.$set(this.value, 'ingressNginx', this.value.ingressNginx || {});\n        this.$set(this.value.ingressNginx, 'enabled', true);\n      } else {\n        this.$set(this.value.rkeEtcd, 'enabled', false);\n      }\n    }\n\n    this.$emit('register-before-hook', this.willSave, 'willSave');\n  },\n\n  methods: {\n    willSave() {\n      const { prometheusSpec } = this.value.prometheus;\n      const selector =\n        prometheusSpec?.storageSpec?.volumeClaimTemplate?.spec?.selector;\n\n      // This works for UI editor installation\n      // However, it doesn't work for yaml editor installation\n      // Global values later merged again in charts/install.vue addGlobalValuesTo()\n      // We still need to remove the global values from charts/install.vue addGlobalValuesTo()\n      if (\n        selector &&\n        isEmpty(selector.matchExpressions) &&\n        isEmpty(selector.matchLabels)\n      ) {\n        delete this.value.prometheus.prometheusSpec.storageSpec\n          .volumeClaimTemplate.spec.selector;\n      }\n    },\n\n    mergeValue(value, defaultValue) {\n      return value === undefined || (typeof value === 'string' && !value.length) ? defaultValue : value;\n    }\n  },\n};\n</script>\n\n<template>\n  <Loading\n    v-if=\"$fetchState.pending\"\n    mode=\"relative\"\n  />\n  <div\n    v-else\n    class=\"config-monitoring-container\"\n  >\n    <Tab\n      name=\"general\"\n      :label=\"t('monitoring.tabs.general')\"\n      :weight=\"99\"\n    >\n      <div>\n        <div class=\"row mb-20\">\n          <div class=\"col span-6\">\n            <ClusterSelector\n              :value=\"value\"\n              :mode=\"mode\"\n              @onClusterTypeChanged=\"clusterType = $event\"\n            />\n          </div>\n        </div>\n        <div\n          v-if=\"clusterType.group === 'managed'\"\n          class=\"row mb-20\"\n        >\n          <Checkbox\n            v-model=\"value.prometheusOperator.hostNetwork\"\n            label-key=\"monitoring.hostNetwork.label\"\n            :tooltip=\"t('monitoring.hostNetwork.tip', {}, true)\"\n          />\n        </div>\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <Checkbox\n              v-model=\"value.global.rbac.userRoles.create\"\n              label-key=\"monitoring.createDefaultRoles.label\"\n              :tooltip=\"t('monitoring.createDefaultRoles.tip', {}, true)\"\n            />\n          </div>\n          <div class=\"col span-6\">\n            <Checkbox\n              v-model=\"value.global.rbac.userRoles.aggregateToDefaultRoles\"\n              label-key=\"monitoring.aggregateDefaultRoles.label\"\n              :tooltip=\"{\n                content: t('monitoring.aggregateDefaultRoles.tip', {}, true),\n                autoHide: false,\n              }\"\n              :disabled=\"disableAggregateRoles\"\n            />\n          </div>\n        </div>\n        <div\n          v-if=\"provider === 'rke' && value.rkeEtcd\"\n          class=\"row mt-20\"\n        >\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"value.rkeEtcd.clients.https.certDir\"\n              :label=\"t('monitoring.etcdNodeDirectory.label')\"\n              :tooltip=\"t('monitoring.etcdNodeDirectory.tooltip', {}, true)\"\n              :hover-tooltip=\"true\"\n              :mode=\"mode\"\n            />\n          </div>\n        </div>\n      </div>\n    </Tab>\n    <Tab\n      name=\"prometheus\"\n      :label=\"t('monitoring.tabs.prometheus')\"\n      :weight=\"98\"\n    >\n      <div>\n        <Prometheus\n          v-model=\"value\"\n          v-bind=\"$attrs\"\n          :access-modes=\"accessModes\"\n          :mode=\"mode\"\n          :storage-classes=\"storageClasses\"\n          :prometheus-pods=\"prometheusResources\"\n          :filteredWorkloads=\"filteredWorkloads\"\n        />\n      </div>\n    </Tab>\n    <Tab\n      name=\"alerting\"\n      :label=\"t('monitoring.tabs.alerting')\"\n      :weight=\"97\"\n    >\n      <div>\n        <Alerting\n          v-model=\"value\"\n          :mode=\"mode\"\n          :monitoringSecrets=\"monitoringSecrets\"\n        />\n      </div>\n    </Tab>\n    <Tab\n      name=\"grafana\"\n      :label=\"t('monitoring.tabs.grafana')\"\n      :weight=\"96\"\n    >\n      <div>\n        <Grafana\n          v-model=\"value\"\n          :access-modes=\"accessModes\"\n          :mode=\"mode\"\n          :pvcs=\"pvcs\"\n          :storage-classes=\"storageClasses\"\n        />\n      </div>\n    </Tab>\n  </div>\n</template>\n"]}]}