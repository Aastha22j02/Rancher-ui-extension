{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/list/management.cattle.io.user.vue?vue&type=style&index=0&id=e8ea5488&lang=scss","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/list/management.cattle.io.user.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/suseconf/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/suseconf/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5idG4tdXNlci1yZXRlbnRpb24gewogIGRpc3BsYXk6IGZsZXg7CiAgZ2FwOiAwLjI1cmVtOwogIHBhZGRpbmc6IDA7Cn0K"},{"version":3,"sources":["management.cattle.io.user.vue"],"names":[],"mappings":";AAmLA;AACA;AACA;AACA;AACA","file":"management.cattle.io.user.vue","sourceRoot":"node_modules/@rancher/shell/list","sourcesContent":["<script>\nimport AsyncButton from '@shell/components/AsyncButton';\nimport { NORMAN } from '@shell/config/types';\nimport { NAME } from '@shell/config/product/auth';\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Masthead from '@shell/components/ResourceList/Masthead';\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport { isAdminUser } from '@shell/store/type-map';\nimport TableDataUserIcon from '@shell/components/TableDataUserIcon';\n\nexport default {\n  components: {\n    AsyncButton,\n    ResourceTable,\n    Masthead,\n    TableDataUserIcon,\n  },\n  mixins: [ResourceFetch],\n  props:  {\n    resource: {\n      type:     String,\n      required: true,\n    },\n\n    loadIndeterminate: {\n      type:    Boolean,\n      default: false\n    },\n\n    incrementalLoadingIndicator: {\n      type:    Boolean,\n      default: false\n    },\n\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n  async fetch() {\n    const store = this.$store;\n\n    await store.dispatch(`rancher/findAll`, { type: NORMAN.USER });\n\n    await this.$fetchType(this.resource);\n\n    this.canRefreshAccess = await this.$store.dispatch('rancher/request', { url: '/v3/users?limit=0' })\n      .then((res) => !!res?.actions?.refreshauthprovideraccess);\n  },\n\n  data() {\n    const getters = this.$store.getters;\n\n    const schema = getters[`management/schemaFor`](this.resource);\n\n    return {\n      schema,\n      canRefreshAccess: false,\n    };\n  },\n\n  $loadingResources() {\n    // results are filtered so we wouldn't get the correct count on indicator...\n    return { loadIndeterminate: true };\n  },\n\n  computed: {\n    headers() {\n      return this.$store.getters['type-map/headersFor'](this.schema);\n    },\n\n    groupBy() {\n      return this.$store.getters['type-map/groupByFor'](this.schema);\n    },\n\n    users() {\n      if ( !this.rows ) {\n        return [];\n      }\n\n      // Update the list of users\n      // 1) Only show system users in explorer/users and not in auth/users\n      // 2) Supplement user with info to enable/disable the refresh group membership action (this is not persisted on save)\n      const params = { ...this.$route.params };\n      const requiredUsers = params.product === NAME ? this.rows.filter((a) => !a.isSystem) : this.rows;\n\n      requiredUsers.forEach((r) => {\n        r.canRefreshAccess = this.canRefreshAccess;\n      });\n\n      return requiredUsers;\n    },\n\n    isAdmin() {\n      return isAdminUser(this.$store.getters);\n    },\n  },\n\n  methods: {\n    async refreshGroupMemberships(buttonDone) {\n      try {\n        await this.$store.dispatch('rancher/collectionAction', {\n          type:       NORMAN.USER,\n          actionName: 'refreshauthprovideraccess',\n        });\n\n        buttonDone(true);\n      } catch (err) {\n        this.$store.dispatch('growl/fromError', { title: this.t('user.list.errorRefreshingGroupMemberships'), err }, { root: true });\n        buttonDone(false);\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div>\n    <Masthead\n      :schema=\"schema\"\n      :resource=\"resource\"\n      :show-incremental-loading-indicator=\"incrementalLoadingIndicator\"\n      :load-resources=\"loadResources\"\n      :load-indeterminate=\"loadIndeterminate\"\n    >\n      <template slot=\"extraActions\">\n        <AsyncButton\n          v-if=\"canRefreshAccess\"\n          mode=\"refresh\"\n          :action-label=\"t('authGroups.actions.refresh')\"\n          :waiting-label=\"t('authGroups.actions.refresh')\"\n          :success-label=\"t('authGroups.actions.refresh')\"\n          :error-label=\"t('authGroups.actions.refresh')\"\n          @click=\"refreshGroupMemberships\"\n        />\n      </template>\n      <template\n        v-if=\"isAdmin\"\n        #subHeader\n      >\n        <router-link\n          :to=\"{ name: 'c-cluster-auth-user.retention'}\"\n          class=\"btn role-link btn-sm btn-user-retention\"\n          data-testid=\"router-link-user-retention\"\n        >\n          <i class=\"icon icon-gear\" />\n          {{ t('user.retention.button.label') }}\n        </router-link>\n      </template>\n    </Masthead>\n\n    <ResourceTable\n      :schema=\"schema\"\n      :rows=\"users\"\n      :group-by=\"groupBy\"\n      :loading=\"loading\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      :force-update-live-and-delayed=\"forceUpdateLiveAndDelayed\"\n    >\n      <template #col:user-state=\"{row}\">\n        <td>\n          <TableDataUserIcon\n            :user-state=\"row.stateDisplay\"\n            :is-active=\"row.state === 'active'\"\n          />\n        </td>\n      </template>\n    </ResourceTable>\n  </div>\n</template>\n\n<style lang=\"scss\">\n  .btn-user-retention {\n    display: flex;\n    gap: 0.25rem;\n    padding: 0;\n  }\n</style>\n"]}]}