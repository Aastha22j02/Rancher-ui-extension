{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/components/MoveModal.vue?vue&type=style&index=0&id=41b4bd2e&lang=scss","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/components/MoveModal.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/suseconf/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/suseconf/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5tb3ZlLW1vZGFsIHsKICAubmFtZXNwYWNlcyB7CiAgICBtYXgtaGVpZ2h0OiAyMDBweDsKICAgIG92ZXJmbG93LXk6IHNjcm9sbDsKICB9CgogIC5tb3ZlLW1vZGFsLWNhcmQgewogICAgICBib3gtc2hhZG93OiBub25lOwoKICAgICAgYm9yZGVyLXJhZGl1czogdmFyKC0tYm9yZGVyLXJhZGl1cyk7CiAgfQoKICAuYWN0aW9ucyB7CiAgICB0ZXh0LWFsaWduOiByaWdodDsKICB9CiAgLmNhcmQtYWN0aW9ucyB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgfQp9Cg=="},{"version":3,"sources":["MoveModal.vue"],"names":[],"mappings":";AAsKA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"MoveModal.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script>\r\nimport { mapState, mapGetters } from 'vuex';\r\nimport { Card } from '@components/Card';\r\nimport AsyncButton from '@shell/components/AsyncButton';\r\nimport AppModal from '@shell/components/AppModal.vue';\r\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\r\nimport { MANAGEMENT } from '@shell/config/types';\r\nimport Loading from '@shell/components/Loading';\r\nimport { PROJECT } from '@shell/config/labels-annotations';\r\n\r\nexport default {\r\n  components: {\r\n    AsyncButton, Card, LabeledSelect, Loading, AppModal\r\n  },\r\n\r\n  async fetch() {\r\n    this.projects = await this.$store.dispatch('management/findAll', { type: MANAGEMENT.PROJECT });\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      modalName: 'move-modal', projects: [], targetProject: null, showModal: false\r\n    };\r\n  },\r\n\r\n  computed: {\r\n    ...mapState('action-menu', ['showPromptMove', 'toMove']),\r\n    ...mapGetters(['currentCluster']),\r\n\r\n    excludedProjects() {\r\n      return this.toMove.filter((namespace) => !!namespace.project).map((namespace) => namespace.project.shortId);\r\n    },\r\n\r\n    projectOptions() {\r\n      return this.projects.reduce((inCluster, project) => {\r\n        if (!this.excludedProjects.includes(project.shortId) && project.spec?.clusterName === this.currentCluster.id) {\r\n          inCluster.push({\r\n            value: project.shortId,\r\n            label: project.nameDisplay\r\n          });\r\n        }\r\n\r\n        return inCluster;\r\n      }, []);\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    showPromptMove(show) {\r\n      if (show) {\r\n        this.showModal = true;\r\n      } else {\r\n        this.showModal = false;\r\n      }\r\n    }\r\n  },\r\n\r\n  methods: {\r\n    close() {\r\n      this.$store.commit('action-menu/togglePromptMove');\r\n    },\r\n\r\n    async move(finish) {\r\n      const cluster = this.$store.getters['currentCluster'];\r\n      const clusterWithProjectId = `${ cluster.id }:${ this.targetProject }`;\r\n\r\n      const promises = this.toMove.map((namespace) => {\r\n        namespace.setLabel(PROJECT, this.targetProject);\r\n        namespace.setAnnotation(PROJECT, clusterWithProjectId);\r\n\r\n        return namespace.save();\r\n      });\r\n\r\n      try {\r\n        this.$emit('moving');\r\n        await Promise.all(promises);\r\n        finish(true);\r\n        this.targetProject = null;\r\n        this.close();\r\n      } catch (ex) {\r\n        finish(false);\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n<template>\r\n  <app-modal\r\n    v-if=\"showModal\"\r\n    class=\"move-modal\"\r\n    :name=\"modalName\"\r\n    :width=\"440\"\r\n    height=\"auto\"\r\n    @close=\"close\"\r\n  >\r\n    <Loading v-if=\"$fetchState.pending\" />\r\n    <Card\r\n      v-else\r\n      class=\"move-modal-card\"\r\n      :show-highlight-border=\"false\"\r\n    >\r\n      <h4\r\n        slot=\"title\"\r\n        class=\"text-default-text\"\r\n      >\r\n        {{ t('moveModal.title') }}\r\n      </h4>\r\n      <div slot=\"body\">\r\n        <div>\r\n          {{ t('moveModal.description') }}\r\n          <ul class=\"namespaces\">\r\n            <li\r\n              v-for=\"namespace in toMove\"\r\n              :key=\"namespace.id\"\r\n            >\r\n              {{ namespace.nameDisplay }}\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <LabeledSelect\r\n          v-model=\"targetProject\"\r\n          :options=\"projectOptions\"\r\n          :label=\"t('moveModal.targetProject')\"\r\n        />\r\n      </div>\r\n      <template #actions>\r\n        <button\r\n          class=\"btn role-secondary\"\r\n          @click=\"close\"\r\n        >\r\n          {{ t('generic.cancel') }}\r\n        </button>\r\n        <AsyncButton\r\n          :action-label=\"t('moveModal.moveButtonLabel')\"\r\n          class=\"btn bg-primary ml-10\"\r\n          :disabled=\"!targetProject\"\r\n          @click=\"move\"\r\n        />\r\n      </template>\r\n    </Card>\r\n  </app-modal>\r\n</template>\r\n\r\n<style lang='scss'>\r\n  .move-modal {\r\n    .namespaces {\r\n      max-height: 200px;\r\n      overflow-y: scroll;\r\n    }\r\n\r\n    .move-modal-card {\r\n        box-shadow: none;\r\n\r\n        border-radius: var(--border-radius);\r\n    }\r\n\r\n    .actions {\r\n      text-align: right;\r\n    }\r\n    .card-actions {\r\n      display: flex;\r\n      justify-content: center;\r\n    }\r\n  }\r\n</style>\r\n"]}]}