{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/components/PodSecurityAdmission.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/components/PodSecurityAdmission.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IGRlZmluZUNvbXBvbmVudCB9IGZyb20gJ3Z1ZSc7CmltcG9ydCB7IF9WSUVXLCBfQ1JFQVRFIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy9xdWVyeS1wYXJhbXMnOwppbXBvcnQgTGFiZWxlZFNlbGVjdCBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtL0xhYmVsZWRTZWxlY3QudnVlJzsKaW1wb3J0IENoZWNrYm94IGZyb20gJ0Bjb21wb25lbnRzL0Zvcm0vQ2hlY2tib3gvQ2hlY2tib3gudnVlJzsKaW1wb3J0IExhYmVsZWRJbnB1dCBmcm9tICdAY29tcG9uZW50cy9Gb3JtL0xhYmVsZWRJbnB1dC9MYWJlbGVkSW5wdXQudnVlJzsKaW1wb3J0IHsgUFNBRGltZW5zaW9uLCBQU0FNb2RlIH0gZnJvbSAnQHNoZWxsL3R5cGVzL3Jlc291cmNlcy9wb2Qtc2VjdXJpdHktYWRtaXNzaW9uJzsKaW1wb3J0IHsKICBQU0FEZWZhdWx0TGV2ZWwsCiAgUFNBRGVmYXVsdFZlcnNpb24sIFBTQURpbWVuc2lvbnMsIFBTQUxldmVscywgUFNBTW9kZXMKfSBmcm9tICdAc2hlbGwvY29uZmlnL3BvZC1zZWN1cml0eS1hZG1pc3Npb24nOwppbXBvcnQgeyBwaWNrQnksIHRvRGljdGlvbmFyeSB9IGZyb20gJ0BzaGVsbC91dGlscy9vYmplY3QnOwoKaW50ZXJmYWNlIFBTQUNvbnRyb2wgeyBhY3RpdmU6IGJvb2xlYW4sIGxldmVsOiBzdHJpbmcsIHZlcnNpb246IHN0cmluZyB9CmNvbnN0IGdldFBzYUNvbnRyb2wgPSAoKTogUFNBQ29udHJvbCA9PiAoewogIGFjdGl2ZTogIGZhbHNlLAogIGxldmVsOiAgIFBTQURlZmF1bHRMZXZlbCwKICB2ZXJzaW9uOiAnJwp9KTsKCi8vIFR5cGUgYW5kIGZ1bmN0aW9uIGZvciBleGVtcHRpb25zIGZvcm0gYnVpbGRlcgppbnRlcmZhY2UgUFNBRXhlbXB0aW9uQ29udHJvbCB7IGFjdGl2ZTogYm9vbGVhbiwgdmFsdWU6IHN0cmluZyB9CmNvbnN0IGdldEV4ZW1wdGlvbkNvbnRyb2wgPSAoKTogUFNBRXhlbXB0aW9uQ29udHJvbCA9PiAoewogIGFjdGl2ZTogZmFsc2UsCiAgdmFsdWU6ICAnJwp9KTsKCmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbXBvbmVudCh7CiAgY29tcG9uZW50czogewogICAgQ2hlY2tib3gsIExhYmVsZWRTZWxlY3QsIExhYmVsZWRJbnB1dAogIH0sCiAgcHJvcHM6IHsKICAgIC8qKgogICAgICogTGlzdCBvZiBsYWJlbHMgdXNlZCBmb3IgdGhlIHJlc291cmNlCiAgICAgKiBOb3RlOiBQU0EgbGFiZWxzIGFyZSBhbHdheXMgcGFpcmVkCiAgICAgKi8KICAgIGxhYmVsczogewogICAgICB0eXBlOiAgICBPYmplY3QgYXMgKCkgPT4gUmVjb3JkPHN0cmluZywgc3RyaW5nPiwKICAgICAgZGVmYXVsdDogKCkgPT4gKHt9KQogICAgfSwKCiAgICBsYWJlbHNBbHdheXNBY3RpdmU6IHsKICAgICAgdHlwZTogICAgQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCgogICAgLyoqCiAgICAgKiBNYXAgZWRpdGluZyBjYXBhYmlsaXRpZXMgdG8gdGhlIGNvbXBvbmVudAogICAgICovCiAgICBtb2RlOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiB0cnVlCiAgICB9LAoKICAgIC8qKgogICAgICogTGlzdCBvZiBleGVtcHRpb25zIHVzZWQgZm9yIHRoZSByZXNvdXJjZQogICAgICovCiAgICBleGVtcHRpb25zOiB7CiAgICAgIHR5cGU6ICAgIE9iamVjdCBhcyAoKSA9PiBSZWNvcmQ8UFNBRGltZW5zaW9uLCBzdHJpbmdbXT4sCiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSBhcyBSZWNvcmQ8UFNBRGltZW5zaW9uLCBzdHJpbmdbXT4pCiAgICB9LAoKICAgIC8qKgogICAgICogUHJlZml4IHVzZWQgZm9yIHNldHRpbmcgbGFiZWxzCiAgICAgKi8KICAgIGxhYmVsc1ByZWZpeDogewogICAgICB0eXBlOiAgICBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICcnCiAgICB9LAoKICAgIC8qKgogICAgICogSW5oZXJpdGVkIGdsb2JhbCBpZGVudGlmaWVyIHByZWZpeCBmb3IgdGVzdHMKICAgICAqIERlZmluZSBhIHRlcm0gYmFzZWQgb24gdGhlIHBhcmVudCBjb21wb25lbnQgdG8gYXZvaWQgY29uZmxpY3RzIG9uIG11bHRpcGxlIGNvbXBvbmVudHMKICAgICAqLwogICAgY29tcG9uZW50VGVzdGlkOiB7CiAgICAgIHR5cGU6ICAgIFN0cmluZywKICAgICAgZGVmYXVsdDogJ3BvZC1zZWN1cml0eS1hZG1pc3Npb24nCiAgICB9CiAgfSwKCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIC8vIEdlbmVyYXRlIFBTQSBmb3JtIGNvbnRyb2xzCiAgICAgIHBzYUNvbnRyb2xzOiAgICAgICAgICAgdG9EaWN0aW9uYXJ5KFBTQU1vZGVzLCBnZXRQc2FDb250cm9sKSBhcyBSZWNvcmQ8UFNBTW9kZSwgUFNBQ29udHJvbD4sCiAgICAgIHBzYUV4ZW1wdGlvbnNDb250cm9sczogdG9EaWN0aW9uYXJ5KFBTQURpbWVuc2lvbnMsIGdldEV4ZW1wdGlvbkNvbnRyb2wpIGFzIFJlY29yZDxQU0FEaW1lbnNpb24sIFBTQUV4ZW1wdGlvbkNvbnRyb2w+LAogICAgICBvcHRpb25zOiAgICAgICAgICAgICAgIFBTQUxldmVscy5tYXAoKGxldmVsKSA9PiAoewogICAgICAgIHZhbHVlOiBsZXZlbCwKICAgICAgICBsYWJlbDogdGhpcy50KGBwb2RTZWN1cml0eUFkbWlzc2lvbi5sYWJlbHMuJHsgbGV2ZWwgfWApCiAgICAgIH0pKSwKICAgIH07CiAgfSwKCiAgd2F0Y2g6IHt9LAoKICBjb21wdXRlZDogewogICAgaXNWaWV3KCk6IGJvb2xlYW4gewogICAgICByZXR1cm4gdGhpcy5tb2RlID09PSBfVklFVzsKICAgIH0sCgogICAgLyoqCiAgICAgKiBFbmFibGUgZXhlbXB0aW9uIGZvcm0gaWYgYW55CiAgICAgKi8KICAgIGhhc0V4ZW1wdGlvbnMoKTogYm9vbGVhbiB7CiAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmV4ZW1wdGlvbnMpLmxlbmd0aCA+IDA7CiAgICB9LAogIH0sCgogIGNyZWF0ZWQoKSB7CiAgICAvLyBBc3NpZ24gdmFsdWVzIHRvIHRoZSBmb3JtLCBvdmVycmlkaW5nIGV4aXN0aW5nIHZhbHVlcwogICAgdGhpcy5wc2FDb250cm9scyA9IHsKICAgICAgLi4udGhpcy5wc2FDb250cm9scywKICAgICAgLi4udGhpcy5nZXRQc2FDb250cm9scygpCiAgICB9OwoKICAgIHRoaXMucHNhRXhlbXB0aW9uc0NvbnRyb2xzID0gdGhpcy5nZXRQc2FFeGVtcHRpb25zKCk7CgogICAgLy8gRW1pdCBpbml0aWFsIHZhbHVlIG9uIGNyZWF0aW9uIGlmIGxhYmVscyBhbHdheXMgYWN0aXZlLCBhcyBkZWZhdWx0IHByZWRlZmluZWQgdmFsdWVzIGFyZSByZXF1aXJlZAogICAgaWYgKHRoaXMubW9kZSA9PT0gX0NSRUFURSAmJiB0aGlzLmxhYmVsc0Fsd2F5c0FjdGl2ZSkgewogICAgICB0aGlzLnVwZGF0ZUxhYmVscygpOwogICAgICB0aGlzLnVwZGF0ZUV4ZW1wdGlvbnMoKTsKICAgIH0KICB9LAoKICBtZXRob2RzOiB7CiAgICAvKioKICAgICAqIEZpbHRlciBvdXQgZXhpc3RpbmcgUFNBIGxhYmVscyBhbmQgZW1pdCBleGlzdGluZyBsYWJlbHMgd2l0aCBuZXcgUFNBIG9uZXMKICAgICAqLwogICAgdXBkYXRlTGFiZWxzKCk6IHZvaWQgewogICAgICBjb25zdCBub25QU0FMYWJlbHMgPSBwaWNrQnkodGhpcy5sYWJlbHMsIChfLCBrZXkpID0+ICFrZXkuaW5jbHVkZXModGhpcy5sYWJlbHNQcmVmaXgpKTsKICAgICAgY29uc3QgbGFiZWxzID0gUFNBTW9kZXMucmVkdWNlKChhY2MsIG1vZGUpID0+IHsKICAgICAgICByZXR1cm4gdGhpcy5wc2FDb250cm9sc1ttb2RlXS5hY3RpdmUgfHwgdGhpcy5sYWJlbHNBbHdheXNBY3RpdmUgPyB7CiAgICAgICAgICAuLi5hY2MsCiAgICAgICAgICAvLyBTZXQgZGVmYXVsdCBsZXZlbCBpZiBub25lCiAgICAgICAgICBbYCR7IHRoaXMubGFiZWxzUHJlZml4IH0keyBtb2RlIH1gXTogICAgICAgICB0aGlzLnBzYUNvbnRyb2xzW21vZGVdLmxldmVsIHx8IFBTQURlZmF1bHRMZXZlbCwKICAgICAgICAgIC8vIFNldCBkZWZhdWx0IHZlcnNpb24gaWYgbm9uZQogICAgICAgICAgW2AkeyB0aGlzLmxhYmVsc1ByZWZpeCB9JHsgbW9kZSB9LXZlcnNpb25gXTogdGhpcy5wc2FDb250cm9sc1ttb2RlXS52ZXJzaW9uIHx8IFBTQURlZmF1bHRWZXJzaW9uCiAgICAgICAgfSA6IGFjYzsKICAgICAgfSwgbm9uUFNBTGFiZWxzKTsKCiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUxhYmVscycsIGxhYmVscyk7CiAgICB9LAoKICAgIC8qKgogICAgICogRW1pdCBhY3RpdmUgZXhlbXB0aW9ucyBpbiByZXF1aXJlZCBmb3JtYXQKICAgICAqLwogICAgdXBkYXRlRXhlbXB0aW9ucygpOiB2b2lkIHsKICAgICAgY29uc3QgZXhlbXB0aW9ucyA9IFBTQURpbWVuc2lvbnMucmVkdWNlKChhY2MsIGRpbWVuc2lvbikgPT4gewogICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5wc2FFeGVtcHRpb25zQ29udHJvbHNbZGltZW5zaW9uXS52YWx1ZS5zcGxpdCgnLCcpLm1hcCgodmFsdWUpID0+IHZhbHVlLnRyaW0oKSk7CiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5wc2FFeGVtcHRpb25zQ29udHJvbHNbZGltZW5zaW9uXS5hY3RpdmU7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAuLi5hY2MsCiAgICAgICAgICBbZGltZW5zaW9uXTogYWN0aXZlICYmIHZhbHVlID8gdmFsdWUgOiBbXQogICAgICAgIH07CiAgICAgIH0sIHt9KTsKCiAgICAgIHRoaXMuJGVtaXQoJ3VwZGF0ZUV4ZW1wdGlvbnMnLCBleGVtcHRpb25zKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSBmb3JtIGNvbnRyb2xzIGJhc2VkIG9uIFBTQSBsYWJlbHMgaW4gdGhlIHByb3ZpZGVkIGRpY3Rpb25hcnkKICAgICAqLwogICAgZ2V0UHNhQ29udHJvbHMoKTogUmVjb3JkPFBTQU1vZGUsIFBTQUNvbnRyb2w+IHsKICAgICAgcmV0dXJuIFBTQU1vZGVzLnJlZHVjZSgoYWNjLCBtb2RlKSA9PiB7CiAgICAgICAgY29uc3QgbGV2ZWwgPSB0aGlzLmxhYmVsc1tgJHsgdGhpcy5sYWJlbHNQcmVmaXggfSR7IG1vZGUgfWBdOwogICAgICAgIC8vIFJldHJpZXZlIHZlcnNpb24sIGhpZGluZyB0aGUgdmFsdWUgJ2xhdGVzdCcgZnJvbSB0aGUgdXNlcgogICAgICAgIGNvbnN0IHZlcnNpb24gPSAodGhpcy5sYWJlbHNbYCR7IHRoaXMubGFiZWxzUHJlZml4IH0keyBtb2RlIH0tdmVyc2lvbmBdIHx8ICcnKS5yZXBsYWNlKFBTQURlZmF1bHRWZXJzaW9uLCAnJyk7CgogICAgICAgIHJldHVybiBsZXZlbCA/IHsKICAgICAgICAgIC4uLmFjYywKICAgICAgICAgIFttb2RlXTogewogICAgICAgICAgICBhY3RpdmU6IHRydWUsCiAgICAgICAgICAgIGxldmVsLAogICAgICAgICAgICB2ZXJzaW9uCiAgICAgICAgICB9CiAgICAgICAgfSA6IGFjYzsKICAgICAgfSwge30gYXMgUmVjb3JkPFBTQU1vZGUsIFBTQUNvbnRyb2w+KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBHZW5lcmF0ZSBmb3JtIGV4ZW1wdGlvbnMgYmFzZWQgb24gUFNBIGV4ZW1wdGlvbnMgcHJvdmlkZWQgZGljdGlvbmFyeQogICAgICovCiAgICBnZXRQc2FFeGVtcHRpb25zKCk6IFJlY29yZDxQU0FEaW1lbnNpb24sIFBTQUV4ZW1wdGlvbkNvbnRyb2w+IHsKICAgICAgcmV0dXJuIFBTQURpbWVuc2lvbnMucmVkdWNlKChhY2MsIGRpbWVuc2lvbikgPT4gewogICAgICAgIGNvbnN0IHZhbHVlcyA9ICh0aGlzLmV4ZW1wdGlvbnNbZGltZW5zaW9uXSB8fCBbXSkubWFwKCh2YWx1ZSkgPT4gdmFsdWUudHJpbSgpKS5qb2luKCcsJyk7CgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAuLi5hY2MsCiAgICAgICAgICBbZGltZW5zaW9uXTogewogICAgICAgICAgICBhY3RpdmU6ICEhdmFsdWVzLmxlbmd0aCwKICAgICAgICAgICAgdmFsdWU6ICB2YWx1ZXMKICAgICAgICAgIH0KICAgICAgICB9OwogICAgICB9LCB7fSkgYXMgUmVjb3JkPFBTQURpbWVuc2lvbiwgUFNBRXhlbXB0aW9uQ29udHJvbD47CiAgICB9LAoKICAgIC8qKgogICAgICogQWRkIGNoZWNrcyBvbiBpbnB1dCBmb3IgUFNBIGNvbnRyb2xzIHRvIGJlIGFjdGl2ZSBvciBub3QsIGFsbG93aW5nIHdoaXRlIGNhc2VzCiAgICAgKi8KICAgIGlzUHNhQ29udHJvbERpc2FibGVkKGFjdGl2ZTogYm9vbGVhbik6IGJvb2xlYW4gewogICAgICByZXR1cm4gIXRoaXMubGFiZWxzQWx3YXlzQWN0aXZlICYmICghYWN0aXZlIHx8IHRoaXMuaXNWaWV3KTsKICAgIH0KICB9Cn0pOwo="},{"version":3,"sources":["PodSecurityAdmission.vue"],"names":[],"mappingsfile":"PodSecurityAdmission.vue","sourceRoot":"node_modules/@rancher/shell/components","sourcesContent":["<script lang=\"ts\">\nimport { defineComponent } from 'vue';\nimport { _VIEW, _CREATE } from '@shell/config/query-params';\nimport LabeledSelect from '@shell/components/form/LabeledSelect.vue';\nimport Checkbox from '@components/Form/Checkbox/Checkbox.vue';\nimport LabeledInput from '@components/Form/LabeledInput/LabeledInput.vue';\nimport { PSADimension, PSAMode } from '@shell/types/resources/pod-security-admission';\nimport {\n  PSADefaultLevel,\n  PSADefaultVersion, PSADimensions, PSALevels, PSAModes\n} from '@shell/config/pod-security-admission';\nimport { pickBy, toDictionary } from '@shell/utils/object';\n\ninterface PSAControl { active: boolean, level: string, version: string }\nconst getPsaControl = (): PSAControl => ({\n  active:  false,\n  level:   PSADefaultLevel,\n  version: ''\n});\n\n// Type and function for exemptions form builder\ninterface PSAExemptionControl { active: boolean, value: string }\nconst getExemptionControl = (): PSAExemptionControl => ({\n  active: false,\n  value:  ''\n});\n\nexport default defineComponent({\n  components: {\n    Checkbox, LabeledSelect, LabeledInput\n  },\n  props: {\n    /**\n     * List of labels used for the resource\n     * Note: PSA labels are always paired\n     */\n    labels: {\n      type:    Object as () => Record<string, string>,\n      default: () => ({})\n    },\n\n    labelsAlwaysActive: {\n      type:    Boolean,\n      default: false\n    },\n\n    /**\n     * Map editing capabilities to the component\n     */\n    mode: {\n      type:     String,\n      required: true\n    },\n\n    /**\n     * List of exemptions used for the resource\n     */\n    exemptions: {\n      type:    Object as () => Record<PSADimension, string[]>,\n      default: () => ({} as Record<PSADimension, string[]>)\n    },\n\n    /**\n     * Prefix used for setting labels\n     */\n    labelsPrefix: {\n      type:    String,\n      default: ''\n    },\n\n    /**\n     * Inherited global identifier prefix for tests\n     * Define a term based on the parent component to avoid conflicts on multiple components\n     */\n    componentTestid: {\n      type:    String,\n      default: 'pod-security-admission'\n    }\n  },\n\n  data() {\n    return {\n      // Generate PSA form controls\n      psaControls:           toDictionary(PSAModes, getPsaControl) as Record<PSAMode, PSAControl>,\n      psaExemptionsControls: toDictionary(PSADimensions, getExemptionControl) as Record<PSADimension, PSAExemptionControl>,\n      options:               PSALevels.map((level) => ({\n        value: level,\n        label: this.t(`podSecurityAdmission.labels.${ level }`)\n      })),\n    };\n  },\n\n  watch: {},\n\n  computed: {\n    isView(): boolean {\n      return this.mode === _VIEW;\n    },\n\n    /**\n     * Enable exemption form if any\n     */\n    hasExemptions(): boolean {\n      return Object.keys(this.exemptions).length > 0;\n    },\n  },\n\n  created() {\n    // Assign values to the form, overriding existing values\n    this.psaControls = {\n      ...this.psaControls,\n      ...this.getPsaControls()\n    };\n\n    this.psaExemptionsControls = this.getPsaExemptions();\n\n    // Emit initial value on creation if labels always active, as default predefined values are required\n    if (this.mode === _CREATE && this.labelsAlwaysActive) {\n      this.updateLabels();\n      this.updateExemptions();\n    }\n  },\n\n  methods: {\n    /**\n     * Filter out existing PSA labels and emit existing labels with new PSA ones\n     */\n    updateLabels(): void {\n      const nonPSALabels = pickBy(this.labels, (_, key) => !key.includes(this.labelsPrefix));\n      const labels = PSAModes.reduce((acc, mode) => {\n        return this.psaControls[mode].active || this.labelsAlwaysActive ? {\n          ...acc,\n          // Set default level if none\n          [`${ this.labelsPrefix }${ mode }`]:         this.psaControls[mode].level || PSADefaultLevel,\n          // Set default version if none\n          [`${ this.labelsPrefix }${ mode }-version`]: this.psaControls[mode].version || PSADefaultVersion\n        } : acc;\n      }, nonPSALabels);\n\n      this.$emit('updateLabels', labels);\n    },\n\n    /**\n     * Emit active exemptions in required format\n     */\n    updateExemptions(): void {\n      const exemptions = PSADimensions.reduce((acc, dimension) => {\n        const value = this.psaExemptionsControls[dimension].value.split(',').map((value) => value.trim());\n        const active = this.psaExemptionsControls[dimension].active;\n\n        return {\n          ...acc,\n          [dimension]: active && value ? value : []\n        };\n      }, {});\n\n      this.$emit('updateExemptions', exemptions);\n    },\n\n    /**\n     * Generate form controls based on PSA labels in the provided dictionary\n     */\n    getPsaControls(): Record<PSAMode, PSAControl> {\n      return PSAModes.reduce((acc, mode) => {\n        const level = this.labels[`${ this.labelsPrefix }${ mode }`];\n        // Retrieve version, hiding the value 'latest' from the user\n        const version = (this.labels[`${ this.labelsPrefix }${ mode }-version`] || '').replace(PSADefaultVersion, '');\n\n        return level ? {\n          ...acc,\n          [mode]: {\n            active: true,\n            level,\n            version\n          }\n        } : acc;\n      }, {} as Record<PSAMode, PSAControl>);\n    },\n\n    /**\n     * Generate form exemptions based on PSA exemptions provided dictionary\n     */\n    getPsaExemptions(): Record<PSADimension, PSAExemptionControl> {\n      return PSADimensions.reduce((acc, dimension) => {\n        const values = (this.exemptions[dimension] || []).map((value) => value.trim()).join(',');\n\n        return {\n          ...acc,\n          [dimension]: {\n            active: !!values.length,\n            value:  values\n          }\n        };\n      }, {}) as Record<PSADimension, PSAExemptionControl>;\n    },\n\n    /**\n     * Add checks on input for PSA controls to be active or not, allowing white cases\n     */\n    isPsaControlDisabled(active: boolean): boolean {\n      return !this.labelsAlwaysActive && (!active || this.isView);\n    }\n  }\n});\n</script>\n\n<template>\n  <div class=\"psa\">\n    <!-- PSA -->\n    <p class=\"mb-30\">\n      <t k=\"podSecurityAdmission.description\" />\n    </p>\n\n    <div\n      v-for=\"(psaControl, level, i) in psaControls\"\n      :key=\"'psaControl-' + i\"\n      class=\"row row--y-center mb-20\"\n    >\n      <span class=\"col span-2\">\n        <Checkbox\n          v-if=\"!labelsAlwaysActive\"\n          v-model=\"psaControl.active\"\n          :data-testid=\"componentTestid + '--psaControl-' + i + '-active'\"\n          :label=\"level\"\n          :label-key=\"`podSecurityAdmission.labels.${ level }`\"\n          :disabled=\"isView\"\n          @input=\"updateLabels()\"\n        />\n        <p v-else>\n          <t :k=\"`podSecurityAdmission.labels.${level}`\" />\n        </p>\n      </span>\n\n      <span\n        class=\"\n          col\n          span-4\"\n      >\n        <LabeledSelect\n          v-model=\"psaControl.level\"\n          :data-testid=\"componentTestid + '--psaControl-' + i + '-level'\"\n          :disabled=\"isPsaControlDisabled(psaControl.active)\"\n          :options=\"options\"\n          :mode=\"mode\"\n          @input=\"updateLabels()\"\n        />\n      </span>\n\n      <span class=\"col span-4\">\n        <LabeledInput\n          v-model=\"psaControl.version\"\n          :data-testid=\"componentTestid + '--psaControl-' + i + '-version'\"\n          :disabled=\"isPsaControlDisabled(psaControl.active)\"\n          :options=\"options\"\n          :placeholder=\"t('podSecurityAdmission.version.placeholder', { psaControl: mode })\"\n          :mode=\"mode\"\n          @input=\"updateLabels()\"\n        />\n      </span>\n    </div>\n\n    <!-- Exemptions -->\n    <template v-if=\"hasExemptions\">\n      <slot name=\"title\">\n        <h3>\n          <t k=\"podSecurityAdmission.exemptions.title\" />\n        </h3>\n      </slot>\n      <p class=\"mb-30\">\n        <t k=\"podSecurityAdmission.exemptions.description\" />\n      </p>\n\n      <div\n        v-for=\"(psaExemptionsControl, dimension, i) in psaExemptionsControls\"\n        :key=\"'psaExemptionsControl-' + i\"\n        class=\"row row--y-center mb-20\"\n      >\n        <span class=\"col span-2\">\n          <Checkbox\n            v-model=\"psaExemptionsControl.active\"\n            :data-testid=\"componentTestid + '--psaExemptionsControl-' + i + '-active'\"\n            :label=\"dimension\"\n            :label-key=\"`podSecurityAdmission.labels.${ dimension }`\"\n            :disabled=\"isView\"\n            @input=\"updateExemptions()\"\n          />\n        </span>\n        <span class=\"col span-8\">\n          <LabeledInput\n            v-model=\"psaExemptionsControl.value\"\n            :data-testid=\"componentTestid + '--psaExemptionsControl-' + i + '-value'\"\n            :disabled=\"(isView || !psaExemptionsControl.active)\"\n            :options=\"options\"\n            :placeholder=\"t('podSecurityAdmission.exemptions.placeholder', { psaExemptionsControl: dimension })\"\n            :mode=\"mode\"\n            @input=\"updateExemptions()\"\n          />\n        </span>\n      </div>\n    </template>\n  </div>\n</template>\n"]}]}