{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/chart/monitoring/prometheus/index.vue?vue&type=style&index=0&id=30047cad&lang=scss","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/chart/monitoring/prometheus/index.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/suseconf/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/suseconf/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5wcm9tZXRoZXVzLWNvbmZpZyB7CiAgJiA+ICogewogICAgbWFyZ2luLXRvcDogMTBweDsKICB9Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAsXA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@rancher/shell/chart/monitoring/prometheus","sourcesContent":["<script>\nimport { mapGetters } from 'vuex';\n\nimport { Banner } from '@components/Banner';\nimport { Checkbox } from '@components/Form/Checkbox';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport MatchExpressions from '@shell/components/form/MatchExpressions';\nimport StorageClassSelector from '@shell/chart/monitoring/StorageClassSelector';\nimport { RadioGroup } from '@components/Form/Radio';\n\nimport { set } from '@shell/utils/object';\nimport { simplify, convert } from '@shell/utils/selector';\nimport { POD } from '@shell/config/types';\n\nexport default {\n  components: {\n    Banner,\n    Checkbox,\n    LabeledInput,\n    LabeledSelect,\n    MatchExpressions,\n    RadioGroup,\n    StorageClassSelector,\n  },\n\n  props: {\n    accessModes: {\n      type:     Array,\n      required: true,\n    },\n\n    mode: {\n      type:    String,\n      default: 'create',\n    },\n\n    prometheusPods: {\n      type:    Array,\n      default: () => ([]),\n    },\n\n    storageClasses: {\n      type:    Array,\n      default: () => ([]),\n    },\n\n    value: {\n      type:    Object,\n      default: () => ({}),\n    },\n\n    filteredWorkloads: {\n      type:    Array,\n      default: () => ([]),\n    },\n  },\n\n  data() {\n    return { enablePersistentStorage: !!this.value?.prometheus?.prometheusSpec?.storageSpec?.volumeClaimTemplate?.spec };\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n\n    matchExpressions: {\n      get() {\n        const selector = this.value?.prometheus?.prometheusSpec?.storageSpec?.volumeClaimTemplate?.spec?.selector;\n        let matchExpressions;\n\n        if (selector && selector?.matchExpressions) {\n          matchExpressions = convert((selector?.matchLabels || {}), selector?.matchExpressions);\n\n          return matchExpressions;\n        } else {\n          return [];\n        }\n      }\n    },\n\n    mappedFilteredWorkloads() {\n      return this.filteredWorkloads.map((wl) => ({\n        label: wl.id,\n        link:  {\n          name:   'c-cluster-product-resource-namespace-id',\n          params: {\n            cluster:   this.currentCluster.id,\n            product:   'explorer',\n            resource:  wl.type,\n            namespace: wl.metadata.namespace,\n            id:        wl.metadata.name\n          },\n        }\n      }));\n    },\n\n    podsAndNamespaces() {\n      const { prometheusPods } = this;\n      const pods = [];\n\n      prometheusPods.forEach((pod) => {\n        pods.push({\n          label: pod.id,\n          link:  {\n            name:   'c-cluster-product-resource-namespace-id',\n            params: {\n              cluster: this.currentCluster.id, product: 'explorer', resource: POD, namespace: pod.metadata.namespace, id: pod.metadata.name\n            },\n          }\n        });\n      });\n\n      return pods;\n    },\n\n    showStorageClasses() {\n      const { storageClasses } = this;\n\n      return (storageClasses || []).length >= 1;\n    },\n  },\n\n  watch: {\n    enablePersistentStorage(enabled) {\n      if (!!enabled) {\n        this.$set(\n          this.value.prometheus.prometheusSpec.storageSpec,\n          'volumeClaimTemplate',\n          {\n            spec: {\n              accessModes: ['ReadWriteOnce'],\n              resources:   { requests: { storage: '50Gi' } },\n            }\n          }\n        );\n      } else {\n        this.$delete(\n          this.value.prometheus.prometheusSpec.storageSpec,\n          'volumeClaimTemplate'\n        );\n      }\n    },\n  },\n\n  methods: {\n    set,\n\n    matchChanged(expressions) {\n      const { matchLabels, matchExpressions } = simplify(expressions);\n      const storageSpec = this.value.prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec;\n\n      if (!storageSpec?.selector) {\n        storageSpec['selector'] = { matchExpressions: [], matchLabels: {} };\n      }\n\n      this.$set(storageSpec.selector, 'matchLabels', matchLabels);\n      this.$set(storageSpec.selector, 'matchExpressions', matchExpressions);\n\n      // Remove an empty selector object if present\n      // User can add a selector and then remove the selector - this will leave an empty structure as above\n      // We want to ensure we remove .selector.matchExpressions, .selector.matchLabels, and .selector if empty\n      // See: https://github.com/rancher/dashboard/issues/10016\n\n      if (storageSpec.selector.matchExpressions?.length === 0) {\n        delete storageSpec.selector.matchExpressions;\n      }\n\n      if (storageSpec.selector.matchLabels && Object.keys(storageSpec.selector.matchLabels).length === 0) {\n        delete storageSpec.selector.matchLabels;\n      }\n\n      if (Object.keys(storageSpec.selector).length === 0) {\n        delete storageSpec.selector;\n      }\n    },\n  },\n};\n</script>\n\n<template>\n  <div>\n    <div class=\"title\">\n      <h3>{{ t('monitoring.prometheus.title') }}</h3>\n    </div>\n    <!-- https://github.com/rancher/dashboard/issues/1167 -->\n    <Banner\n      v-if=\"mappedFilteredWorkloads.length\"\n      color=\"warning\"\n    >\n      <template #default>\n        <t\n          k=\"monitoring.prometheus.warningInstalled\"\n          :raw=\"true\"\n        />\n        <div\n          v-for=\"wl in mappedFilteredWorkloads\"\n          :key=\"wl.id\"\n          class=\"mt-10\"\n        >\n          <router-link\n            :to=\"wl.link\"\n            class=\"btn role-tertiary\"\n          >\n            {{ wl.label }}\n          </router-link>\n        </div>\n      </template>\n    </Banner>\n    <div class=\"prometheus-config\">\n      <div class=\"row\">\n        <div class=\"col span-6 col-full-height\">\n          <Checkbox\n            v-model=\"value.prometheus.prometheusSpec.enableAdminAPI\"\n            :label=\"t('monitoring.prometheus.config.adminApi')\"\n          />\n        </div>\n        <div class=\"col span-6 col-full-height\">\n          <RadioGroup\n            v-model=\"value.prometheus.prometheusSpec.ignoreNamespaceSelectors\"\n            :mode=\"mode\"\n            name=\"ignoreNamespaceSelectors\"\n            label-key=\"monitoring.prometheus.config.ignoreNamespaceSelectors.label\"\n            :tooltip=\"t('monitoring.prometheus.config.ignoreNamespaceSelectors.help', {}, true)\"\n            :labels=\"[t('monitoring.prometheus.config.ignoreNamespaceSelectors.radio.enforced'),t('monitoring.prometheus.config.ignoreNamespaceSelectors.radio.ignored')]\"\n            :options=\"[false, true]\"\n          />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.scrapeInterval\"\n            :label=\"t('monitoring.prometheus.config.scrape')\"\n            :mode=\"mode\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.evaluationInterval\"\n            :label=\"t('monitoring.prometheus.config.evaluation')\"\n            :mode=\"mode\"\n          />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.retention\"\n            :label=\"t('monitoring.prometheus.config.retention')\"\n            :mode=\"mode\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.retentionSize\"\n            :label=\"t('monitoring.prometheus.config.retentionSize')\"\n            :mode=\"mode\"\n          />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col span-12 mt-5\">\n          <h4 class=\"mb-0\">\n            {{ t('monitoring.prometheus.config.resourceLimits') }}\n          </h4>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.resources.requests.cpu\"\n            :label=\"t('monitoring.prometheus.config.requests.cpu')\"\n            :mode=\"mode\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.resources.requests.memory\"\n            :label=\"t('monitoring.prometheus.config.requests.memory')\"\n            :mode=\"mode\"\n          />\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.resources.limits.cpu\"\n            :label=\"t('monitoring.prometheus.config.limits.cpu')\"\n            :mode=\"mode\"\n          />\n        </div>\n        <div class=\"col span-6\">\n          <LabeledInput\n            v-model=\"value.prometheus.prometheusSpec.resources.limits.memory\"\n            :label=\"t('monitoring.prometheus.config.limits.memory')\"\n            :mode=\"mode\"\n          />\n        </div>\n      </div>\n      <div\n        class=\"row row-full-height container-flex-center\"\n        style=\"min-height: 55px;\"\n      >\n        <div class=\"col span-6\">\n          <Checkbox\n            v-model=\"enablePersistentStorage\"\n            data-testid=\"checkbox-chart-enable-persistent-storage\"\n            :label=\"t('monitoring.prometheus.storage.label')\"\n          />\n        </div>\n      </div>\n      <template v-if=\"enablePersistentStorage\">\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <LabeledInput\n              v-model=\"value.prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.resources.requests.storage\"\n              :label=\"t('monitoring.prometheus.storage.size')\"\n              :mode=\"mode\"\n            />\n          </div>\n          <div class=\"col span-6\">\n            <div\n              v-if=\"showStorageClasses\"\n              data-testid=\"select-chart-prometheus-storage-class\"\n            >\n              <StorageClassSelector\n                :mode=\"mode\"\n                :options=\"storageClasses\"\n                :value=\"value.prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.storageClassName\"\n                :label=\"t('monitoring.prometheus.storage.className')\"\n                @updateName=\"(name) => $set(value.prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec, 'storageClassName', name)\"\n              />\n            </div>\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col span-6\">\n            <LabeledSelect\n              v-model=\"value.prometheus.prometheusSpec.storageSpec.volumeClaimTemplate.spec.accessModes\"\n              :label=\"t('monitoring.prometheus.storage.mode')\"\n              :localized-label=\"true\"\n              :mode=\"mode\"\n              :multiple=\"true\"\n              :options=\"accessModes\"\n              :reduce=\"({id})=> id\"\n            />\n          </div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col span-12\">\n            <div class=\"mb-5 mt-5\">\n              <h4 class=\" mb-10\">\n                {{ t('monitoring.prometheus.storage.selector') }}\n              </h4>\n            </div>\n            <Banner\n              color=\"warning\"\n              :label=\"t('monitoring.prometheus.storage.selectorWarning', {}, true)\"\n            />\n            <MatchExpressions\n              :initial-empty-row=\"false\"\n              :mode=\"mode\"\n              :value=\"matchExpressions\"\n              :show-remove=\"false\"\n              @input=\"matchChanged($event)\"\n            />\n          </div>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\">\n.prometheus-config {\n  & > * {\n    margin-top: 10px;\n  }\n}\n</style>\n"]}]}