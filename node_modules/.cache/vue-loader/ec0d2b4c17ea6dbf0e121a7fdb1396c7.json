{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/components/fleet/FleetRepos.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/components/fleet/FleetRepos.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBSZXNvdXJjZVRhYmxlIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL1Jlc291cmNlVGFibGUnOwppbXBvcnQgTGluayBmcm9tICdAc2hlbGwvY29tcG9uZW50cy9mb3JtYXR0ZXIvTGluayc7CmltcG9ydCBTaG9ydGVuZWQgZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybWF0dGVyL1Nob3J0ZW5lZCc7CmltcG9ydCBGbGVldEludHJvIGZyb20gJ0BzaGVsbC9jb21wb25lbnRzL2ZsZWV0L0ZsZWV0SW50cm8nOwoKaW1wb3J0IHsKICBBR0UsCiAgU1RBVEUsCiAgTkFNRSwKICBGTEVFVF9TVU1NQVJZLAogIEZMRUVUX1JFUE8sCiAgRkxFRVRfUkVQT19UQVJHRVQsCiAgRkxFRVRfUkVQT19DTFVTVEVSU19SRUFEWSwKICBGTEVFVF9SRVBPX0NMVVNURVJfU1VNTUFSWSwKICBGTEVFVF9SRVBPX1BFUl9DTFVTVEVSX1NUQVRFCgp9IGZyb20gJ0BzaGVsbC9jb25maWcvdGFibGUtaGVhZGVycyc7CmltcG9ydCB7IEZMRUVUIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy9sYWJlbHMtYW5ub3RhdGlvbnMnOwppbXBvcnQgeyBTVEFURVNfRU5VTSB9IGZyb20gJ0BzaGVsbC9wbHVnaW5zL2Rhc2hib2FyZC1zdG9yZS9yZXNvdXJjZS1jbGFzcyc7CgovLyBpMThuLWlnbm9yZSByZXBvRGlzcGxheQpleHBvcnQgZGVmYXVsdCB7CgogIG5hbWU6ICdGbGVldFJlcG9zJywKCiAgY29tcG9uZW50czogewogICAgUmVzb3VyY2VUYWJsZSwgTGluaywgU2hvcnRlbmVkLCBGbGVldEludHJvCiAgfSwKICBwcm9wczogewogICAgY2x1c3RlcklkOiB7CiAgICAgIHR5cGU6ICAgICBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogIG51bGwsCiAgICB9LAogICAgcm93czogewogICAgICB0eXBlOiAgICAgQXJyYXksCiAgICAgIHJlcXVpcmVkOiB0cnVlLAogICAgfSwKCiAgICBzY2hlbWE6IHsKICAgICAgdHlwZTogICAgIE9iamVjdCwKICAgICAgcmVxdWlyZWQ6IHRydWUsCiAgICB9LAoKICAgIGxvYWRpbmc6IHsKICAgICAgdHlwZTogICAgIEJvb2xlYW4sCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgIH0sCgogICAgdXNlUXVlcnlQYXJhbXNGb3JTaW1wbGVGaWx0ZXJpbmc6IHsKICAgICAgdHlwZTogICAgQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0KICB9LAoKICBjb21wdXRlZDogewogICAgZmlsdGVyZWRSb3dzKCkgewogICAgICBpZiAoIXRoaXMucm93cykgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQoKICAgICAgLy8gUmV0dXJucyBib29sZWFuIHsgW25hbWVzcGFjZV06IHRydWUgfQogICAgICBjb25zdCBzZWxlY3RlZFdvcmtzcGFjZSA9IHRoaXMuJHN0b3JlLmdldHRlcnNbJ25hbWVzcGFjZXMnXSgpOwoKICAgICAgcmV0dXJuIHRoaXMucm93cy5maWx0ZXIoKHJvdykgPT4gewogICAgICAgIHJldHVybiAhIXNlbGVjdGVkV29ya3NwYWNlW3Jvdy5tZXRhZGF0YS5uYW1lc3BhY2VdOwogICAgICB9KTsKICAgIH0sCgogICAgaXNDbHVzdGVyVmlldygpIHsKICAgICAgcmV0dXJuICEhdGhpcy5jbHVzdGVySWQ7CiAgICB9LAoKICAgIG5vUm93cygpIHsKICAgICAgcmV0dXJuICF0aGlzLmZpbHRlcmVkUm93cy5sZW5ndGg7CiAgICB9LAoKICAgIGhlYWRlcnMoKSB7CiAgICAgIC8vIENsdXN0ZXIgc3VtbWFyeSBpcyBvbmx5IHNob3duIGluIHRoZSBjbHVzdGVyIHZpZXcKICAgICAgY29uc3QgZmxlZXRDbHVzdGVyU3VtbWFyeSA9IHsKICAgICAgICAuLi5GTEVFVF9SRVBPX0NMVVNURVJfU1VNTUFSWSwKICAgICAgICBmb3JtYXR0ZXJPcHRzOiB7CiAgICAgICAgICAvLyBGbGVldCB1c2VzIGxhYmVscyB0byBpZGVudGlmeSBjbHVzdGVycwogICAgICAgICAgY2x1c3RlckxhYmVsOiB0aGlzLmNsdXN0ZXJJZAogICAgICAgIH0sCiAgICAgIH07CgogICAgICAvLyBpZiBoYXNQZXJDbHVzdGVyU3RhdGUgdGhlbiB1c2UgdGhlIHJlcG8gc3RhdGUKICAgICAgY29uc3QgZmxlZXRQZXJDbHVzdGVyU3RhdGUgPSB7CiAgICAgICAgLi4uRkxFRVRfUkVQT19QRVJfQ0xVU1RFUl9TVEFURSwKICAgICAgICB2YWx1ZTogKHJvdykgPT4gewogICAgICAgICAgY29uc3Qgc3RhdGVQZXJDbHVzdGVyID0gcm93LmNsdXN0ZXJSZXNvdXJjZVN0YXR1cz8uZmluZCgoYykgPT4gewogICAgICAgICAgICByZXR1cm4gYy5jbHVzdGVyTGFiZWwgPT09IHRoaXMuY2x1c3RlcklkOwogICAgICAgICAgfSk7CgogICAgICAgICAgcmV0dXJuIHN0YXRlUGVyQ2x1c3RlciA/IHN0YXRlUGVyQ2x1c3Rlcj8uc3RhdHVzPy5kaXNwbGF5U3RhdHVzIDogU1RBVEVTX0VOVU0uQUNUSVZFOwogICAgICAgIH0sCiAgICAgIH07CgogICAgICBjb25zdCBzdW1tYXJ5ID0gdGhpcy5pc0NsdXN0ZXJWaWV3ID8gW2ZsZWV0Q2x1c3RlclN1bW1hcnldIDogW0ZMRUVUX1JFUE9fQ0xVU1RFUlNfUkVBRFksIEZMRUVUX1NVTU1BUlldOwoKICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLmlzQ2x1c3RlclZpZXcgPyBmbGVldFBlckNsdXN0ZXJTdGF0ZSA6IFNUQVRFOwoKICAgICAgY29uc3Qgb3V0ID0gWwogICAgICAgIHN0YXRlLAogICAgICAgIE5BTUUsCiAgICAgICAgRkxFRVRfUkVQTywKICAgICAgICBGTEVFVF9SRVBPX1RBUkdFVCwKICAgICAgICAuLi5zdW1tYXJ5LAogICAgICAgIEFHRQogICAgICBdOwoKICAgICAgcmV0dXJuIG91dDsKICAgIH0sCiAgfSwKICBtZXRob2RzOiB7CiAgICBwYXJzZVRhcmdldE1vZGUocm93KSB7CiAgICAgIHJldHVybiByb3cudGFyZ2V0SW5mbz8ubW9kZSA9PT0gJ2NsdXN0ZXJHcm91cCcgPyB0aGlzLnQoJ2ZsZWV0LmdpdFJlcG8ud2FybmluZ1Rvb2x0aXAuY2x1c3Rlckdyb3VwJykgOiB0aGlzLnQoJ2ZsZWV0LmdpdFJlcG8ud2FybmluZ1Rvb2x0aXAuY2x1c3RlcicpOwogICAgfSwKCiAgICBjbHVzdGVyVmlld1Jlc291cmNlU3RhdHVzKHJvdykgewogICAgICByZXR1cm4gcm93LmNsdXN0ZXJSZXNvdXJjZVN0YXR1cy5maW5kKChjKSA9PiB7CiAgICAgICAgcmV0dXJuIGMubWV0YWRhdGE/LmxhYmVsc1tGTEVFVC5DTFVTVEVSX05BTUVdID09PSB0aGlzLmNsdXN0ZXJJZDsKICAgICAgfSk7CiAgICB9CiAgfSwKfTsK"},{"version":3,"sources":["FleetRepos.vue"],"names":[],"mappingsfile":"FleetRepos.vue","sourceRoot":"node_modules/@rancher/shell/components/fleet","sourcesContent":["<script>\nimport ResourceTable from '@shell/components/ResourceTable';\nimport Link from '@shell/components/formatter/Link';\nimport Shortened from '@shell/components/formatter/Shortened';\nimport FleetIntro from '@shell/components/fleet/FleetIntro';\n\nimport {\n  AGE,\n  STATE,\n  NAME,\n  FLEET_SUMMARY,\n  FLEET_REPO,\n  FLEET_REPO_TARGET,\n  FLEET_REPO_CLUSTERS_READY,\n  FLEET_REPO_CLUSTER_SUMMARY,\n  FLEET_REPO_PER_CLUSTER_STATE\n\n} from '@shell/config/table-headers';\nimport { FLEET } from '@shell/config/labels-annotations';\nimport { STATES_ENUM } from '@shell/plugins/dashboard-store/resource-class';\n\n// i18n-ignore repoDisplay\nexport default {\n\n  name: 'FleetRepos',\n\n  components: {\n    ResourceTable, Link, Shortened, FleetIntro\n  },\n  props: {\n    clusterId: {\n      type:     String,\n      required: false,\n      default:  null,\n    },\n    rows: {\n      type:     Array,\n      required: true,\n    },\n\n    schema: {\n      type:     Object,\n      required: true,\n    },\n\n    loading: {\n      type:     Boolean,\n      required: false,\n    },\n\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  computed: {\n    filteredRows() {\n      if (!this.rows) {\n        return [];\n      }\n\n      // Returns boolean { [namespace]: true }\n      const selectedWorkspace = this.$store.getters['namespaces']();\n\n      return this.rows.filter((row) => {\n        return !!selectedWorkspace[row.metadata.namespace];\n      });\n    },\n\n    isClusterView() {\n      return !!this.clusterId;\n    },\n\n    noRows() {\n      return !this.filteredRows.length;\n    },\n\n    headers() {\n      // Cluster summary is only shown in the cluster view\n      const fleetClusterSummary = {\n        ...FLEET_REPO_CLUSTER_SUMMARY,\n        formatterOpts: {\n          // Fleet uses labels to identify clusters\n          clusterLabel: this.clusterId\n        },\n      };\n\n      // if hasPerClusterState then use the repo state\n      const fleetPerClusterState = {\n        ...FLEET_REPO_PER_CLUSTER_STATE,\n        value: (row) => {\n          const statePerCluster = row.clusterResourceStatus?.find((c) => {\n            return c.clusterLabel === this.clusterId;\n          });\n\n          return statePerCluster ? statePerCluster?.status?.displayStatus : STATES_ENUM.ACTIVE;\n        },\n      };\n\n      const summary = this.isClusterView ? [fleetClusterSummary] : [FLEET_REPO_CLUSTERS_READY, FLEET_SUMMARY];\n\n      const state = this.isClusterView ? fleetPerClusterState : STATE;\n\n      const out = [\n        state,\n        NAME,\n        FLEET_REPO,\n        FLEET_REPO_TARGET,\n        ...summary,\n        AGE\n      ];\n\n      return out;\n    },\n  },\n  methods: {\n    parseTargetMode(row) {\n      return row.targetInfo?.mode === 'clusterGroup' ? this.t('fleet.gitRepo.warningTooltip.clusterGroup') : this.t('fleet.gitRepo.warningTooltip.cluster');\n    },\n\n    clusterViewResourceStatus(row) {\n      return row.clusterResourceStatus.find((c) => {\n        return c.metadata?.labels[FLEET.CLUSTER_NAME] === this.clusterId;\n      });\n    }\n  },\n};\n</script>\n\n<template>\n  <div>\n    <FleetIntro v-if=\"noRows && !loading\" />\n    <ResourceTable\n      v-if=\"!noRows\"\n      v-bind=\"$attrs\"\n      :schema=\"schema\"\n      :headers=\"headers\"\n      :rows=\"rows\"\n      :loading=\"loading\"\n      :use-query-params-for-simple-filtering=\"useQueryParamsForSimpleFiltering\"\n      key-field=\"_key\"\n      v-on=\"$listeners\"\n    >\n      <template #cell:repo=\"{ row }\">\n        <Link\n          :row=\"row\"\n          :value=\"row.spec.repo\"\n          label-key=\"repoDisplay\"\n          before-icon-key=\"repoIcon\"\n          url-key=\"spec.repo\"\n        />\n        {{ row.cluster }}\n        <template v-if=\"row.commitDisplay\">\n          <div class=\"text-muted\">\n            <Shortened\n              long-value-key=\"status.commit\"\n              :row=\"row\"\n              :value=\"row.commitDisplay\"\n            />\n          </div>\n        </template>\n      </template>\n\n      <template\n        v-if=\"!isClusterView\"\n        #cell:clustersReady=\"{ row }\"\n      >\n        <span\n          v-if=\"!row.clusterInfo\"\n          class=\"text-muted\"\n        >&mdash;</span>\n        <span\n          v-else-if=\"row.clusterInfo.unready\"\n          class=\"text-warning\"\n        >{{ row.clusterInfo.ready }}/{{\n          row.clusterInfo.total }}</span>\n        <span\n          v-else\n          class=\"cluster-count-info\"\n        >\n          {{ row.clusterInfo.ready }}/{{ row.clusterInfo.total }}\n          <i\n            v-if=\"!row.clusterInfo.total\"\n            v-clean-tooltip.bottom=\"parseTargetMode(row)\"\n            class=\"icon icon-warning\"\n          />\n        </span>\n      </template>\n\n      <template #cell:target=\"{ row }\">\n        {{ row.targetInfo.modeDisplay }}\n      </template>\n    </ResourceTable>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.cluster-count-info {\n  display: flex;\n  align-items: center;\n\n  i {\n    margin-left: 5px;\n    font-size: 22px;\n    color: var(--warning);\n  }\n}\n</style>\n"]}]}