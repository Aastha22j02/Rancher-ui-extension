{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/pages/c/_cluster/explorer/index.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/pages/c/_cluster/explorer/index.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"node_modules/@rancher/shell/pages/c/_cluster/explorer","sourcesContent":["<script>\nimport DashboardMetrics from '@shell/components/DashboardMetrics';\nimport { mapGetters } from 'vuex';\nimport {\n  CAPI,\n  ENDPOINTS,\n  EVENT,\n  NAMESPACE,\n  INGRESS,\n  MANAGEMENT,\n  METRIC,\n  NODE,\n  SERVICE,\n  PV,\n  WORKLOAD_TYPES,\n  COUNT,\n  CATALOG,\n  SECRET\n} from '@shell/config/types';\nimport { setPromiseResult } from '@shell/utils/promise';\nimport AlertTable from '@shell/components/AlertTable';\nimport { Banner } from '@components/Banner';\nimport { parseSi, createMemoryValues } from '@shell/utils/units';\nimport {\n  NAME,\n  ROLES,\n  STATE,\n} from '@shell/config/table-headers';\n\nimport { haveV1Monitoring, monitoringStatus, canViewGrafanaLink } from '@shell/utils/monitoring';\nimport Tabbed from '@shell/components/Tabbed';\nimport Tab from '@shell/components/Tabbed/Tab';\nimport { allDashboardsExist } from '@shell/utils/grafana';\nimport EtcdInfoBanner from '@shell/components/EtcdInfoBanner';\nimport metricPoller from '@shell/mixins/metric-poller';\nimport EmberPage from '@shell/components/EmberPage';\nimport ResourceSummary, { resourceCounts } from '@shell/components/ResourceSummary';\nimport HardwareResourceGauge from '@shell/components/HardwareResourceGauge';\nimport { isEmpty } from '@shell/utils/object';\nimport ConfigBadge from './ConfigBadge';\nimport EventsTable from './EventsTable';\nimport { fetchClusterResources } from './explorer-utils';\nimport SimpleBox from '@shell/components/SimpleBox';\nimport { ExtensionPoint, CardLocation } from '@shell/core/types';\nimport { getApplicableExtensionEnhancements } from '@shell/core/plugin-helpers';\nimport Certificates from '@shell/components/Certificates';\nimport { NAME as EXPLORER } from '@shell/config/product/explorer';\n\nexport const RESOURCES = [NAMESPACE, INGRESS, PV, WORKLOAD_TYPES.DEPLOYMENT, WORKLOAD_TYPES.STATEFUL_SET, WORKLOAD_TYPES.JOB, WORKLOAD_TYPES.DAEMON_SET, SERVICE];\n\nconst CLUSTER_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-cluster-nodes-1/rancher-cluster-nodes?orgId=1';\nconst CLUSTER_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-cluster-1/rancher-cluster?orgId=1';\nconst K8S_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-k8s-components-nodes-1/rancher-kubernetes-components-nodes?orgId=1';\nconst K8S_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-k8s-components-1/rancher-kubernetes-components?orgId=1';\nconst ETCD_METRICS_DETAIL_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-etcd-nodes-1/rancher-etcd-nodes?orgId=1';\nconst ETCD_METRICS_SUMMARY_URL = '/api/v1/namespaces/cattle-monitoring-system/services/http:rancher-monitoring-grafana:80/proxy/d/rancher-etcd-1/rancher-etcd?orgId=1';\n\nconst COMPONENT_STATUS = [\n  'etcd',\n  'scheduler',\n  'controller-manager',\n];\n\nexport default {\n  name: 'ClusterExplorerIndexPage',\n\n  components: {\n    EtcdInfoBanner,\n    DashboardMetrics,\n    HardwareResourceGauge,\n    ResourceSummary,\n    Tab,\n    Tabbed,\n    AlertTable,\n    Banner,\n    EmberPage,\n    ConfigBadge,\n    EventsTable,\n    SimpleBox,\n    Certificates\n  },\n\n  mixins: [metricPoller],\n\n  fetch() {\n    fetchClusterResources(this.$store, NODE);\n\n    if (this.currentCluster) {\n      setPromiseResult(\n        allDashboardsExist(this.$store, this.currentCluster.id, [CLUSTER_METRICS_DETAIL_URL, CLUSTER_METRICS_SUMMARY_URL]),\n        this,\n        'showClusterMetrics',\n        `Determine cluster metrics`\n      );\n      setPromiseResult(\n        allDashboardsExist(this.$store, this.currentCluster.id, [K8S_METRICS_DETAIL_URL, K8S_METRICS_SUMMARY_URL]),\n        this,\n        'showK8sMetrics',\n        `Determine k8s metrics`\n      );\n      setPromiseResult(\n        allDashboardsExist(this.$store, this.currentCluster.id, [ETCD_METRICS_DETAIL_URL, ETCD_METRICS_SUMMARY_URL]),\n        this,\n        'showEtcdMetrics',\n        `Determine etcd metrics`\n      );\n\n      // It's not enough to check that the grafana links are working for the current user; embedded cluster-level dashboards should only be shown if the user can view the grafana endpoint\n      // https://github.com/rancher/dashboard/issues/9792\n      setPromiseResult(canViewGrafanaLink(this.$store), this, 'canViewMetrics', 'Determine Grafana Permission');\n\n      if (this.currentCluster.isLocal && this.$store.getters['management/schemaFor'](MANAGEMENT.NODE)) {\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE });\n      }\n    }\n  },\n\n  data() {\n    const clusterCounts = this.$store.getters[`cluster/all`](COUNT);\n    const nodeHeaders = [\n      STATE,\n      NAME,\n      ROLES,\n    ];\n\n    return {\n      nodeHeaders,\n      constraints:        [],\n      events:             [],\n      nodeMetrics:        [],\n      showClusterMetrics: false,\n      showK8sMetrics:     false,\n      showEtcdMetrics:    false,\n      canViewMetrics:     false,\n      CLUSTER_METRICS_DETAIL_URL,\n      CLUSTER_METRICS_SUMMARY_URL,\n      K8S_METRICS_DETAIL_URL,\n      K8S_METRICS_SUMMARY_URL,\n      ETCD_METRICS_DETAIL_URL,\n      ETCD_METRICS_SUMMARY_URL,\n      clusterCounts,\n      selectedTab:        'cluster-events',\n      extensionCards:     getApplicableExtensionEnhancements(this, ExtensionPoint.CARD, CardLocation.CLUSTER_DASHBOARD_CARD, this.$route),\n    };\n  },\n\n  beforeDestroy() {\n    // Remove the data and stop watching resources that were fetched in this page\n    // Events in particular can lead to change messages having to be processed when we are no longer interested in events\n    this.$store.dispatch('cluster/forgetType', EVENT);\n    this.$store.dispatch('cluster/forgetType', NODE);\n    this.$store.dispatch('cluster/forgetType', ENDPOINTS); // Used by AlertTable to get alerts when v2 monitoring is installed\n    this.$store.dispatch('cluster/forgetType', METRIC.NODE);\n    this.$store.dispatch('cluster/forgetType', MANAGEMENT.NODE);\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    ...monitoringStatus(),\n\n    nodes() {\n      return this.$store.getters['cluster/all'](NODE);\n    },\n\n    mgmtNodes() {\n      return this.$store.getters['management/all'](MANAGEMENT.CLUSTER);\n    },\n\n    hasV1Monitoring() {\n      return haveV1Monitoring(this.$store.getters);\n    },\n\n    v1MonitoringURL() {\n      return `/k/${ this.currentCluster.id }/monitoring`;\n    },\n\n    displayProvider() {\n      const other = 'other';\n\n      let provider = this.currentCluster?.status?.provider || other;\n\n      if (provider === 'rke.windows') {\n        provider = 'rkeWindows';\n      }\n\n      if (!this.$store.getters['i18n/exists'](`cluster.provider.${ provider }`)) {\n        provider = 'other';\n      }\n\n      return this.t(`cluster.provider.${ provider }`);\n    },\n\n    isHarvesterCluster() {\n      return this.currentCluster?.isHarvester;\n    },\n\n    isRKE() {\n      return ['rke', 'rke.windows', 'rke2', 'rke2.windows'].includes((this.currentCluster.status.provider || '').toLowerCase());\n    },\n\n    accessibleResources() {\n      // This is a list of IDs for allowed resources counts.\n      const defaultAllowedResources = Object.keys(this.clusterCounts?.[0]?.counts || {}).filter((typeId) => {\n        return this.$store.getters['type-map/isIgnored']({ id: typeId });\n      });\n\n      // Merge with RESOURCES list\n      const allowedResources = [...new Set([...defaultAllowedResources, ...RESOURCES])];\n\n      return allowedResources.filter((resource) => this.$store.getters['cluster/schemaFor'](resource));\n    },\n\n    componentServices() {\n      const status = [];\n\n      COMPONENT_STATUS.forEach((cs) => {\n        status.push({\n          name:     cs,\n          healthy:  this.isComponentStatusHealthy(cs),\n          labelKey: `clusterIndexPage.sections.componentStatus.${ cs }`,\n        });\n      });\n\n      return status;\n    },\n\n    totalCountGaugeInput() {\n      const totalInput = {\n        name:         this.t('clusterIndexPage.resourceGauge.totalResources'),\n        total:        0,\n        useful:       0,\n        warningCount: 0,\n        errorCount:   0\n      };\n\n      this.accessibleResources.forEach((resource) => {\n        const counts = resourceCounts(this.$store, resource);\n\n        Object.entries(counts).forEach((entry) => {\n          totalInput[entry[0]] += entry[1];\n        });\n      });\n\n      return totalInput;\n    },\n\n    hasStats() {\n      return this.currentCluster?.status?.allocatable && this.currentCluster?.status?.requested;\n    },\n\n    cpuReserved() {\n      const total = parseSi(this.currentCluster?.status?.allocatable?.cpu);\n\n      return {\n        total,\n        useful: parseSi(this.currentCluster?.status?.requested?.cpu),\n        units:  this.t('clusterIndexPage.hardwareResourceGauge.units.cores', { count: total })\n      };\n    },\n\n    podsUsed() {\n      return {\n        total:  parseSi(this.currentCluster?.status?.allocatable?.pods || '0'),\n        useful: parseSi(this.currentCluster?.status?.requested?.pods || '0'),\n      };\n    },\n\n    ramReserved() {\n      return createMemoryValues(this.currentCluster?.status?.allocatable?.memory, this.currentCluster?.status?.requested?.memory);\n    },\n\n    metricAggregations() {\n      let checkNodes = this.nodes;\n\n      // Special case local cluster\n      if (this.currentCluster.isLocal) {\n        const nodeNames = this.nodes.reduce((acc, n) => {\n          acc[n.id] = n;\n\n          return acc;\n        }, {});\n\n        checkNodes = this.mgmtNodes.filter((n) => {\n          const nodeName = n.metadata?.labels?.['management.cattle.io/nodename'] || n.id;\n\n          return !!nodeNames[nodeName];\n        });\n      }\n\n      const someNonWorkerRoles = checkNodes.some((node) => node.hasARole && !node.isWorker);\n      const metrics = this.nodeMetrics.filter((nodeMetrics) => {\n        const node = this.nodes.find((nd) => nd.id === nodeMetrics.id);\n\n        return node && (!someNonWorkerRoles || node.isWorker);\n      });\n      const initialAggregation = {\n        cpu:    0,\n        memory: 0\n      };\n\n      if (isEmpty(metrics)) {\n        return null;\n      }\n\n      return metrics.reduce((agg, metric) => {\n        agg.cpu += parseSi(metric.usage.cpu);\n        agg.memory += parseSi(metric.usage.memory);\n\n        return agg;\n      }, initialAggregation);\n    },\n\n    cpuUsed() {\n      const total = parseSi(this.currentCluster?.status?.capacity?.cpu);\n\n      return {\n        total,\n        useful: this.metricAggregations?.cpu,\n        units:  this.t('clusterIndexPage.hardwareResourceGauge.units.cores', { count: total })\n      };\n    },\n\n    ramUsed() {\n      return createMemoryValues(this.currentCluster?.status?.capacity?.memory, this.metricAggregations?.memory);\n    },\n\n    hasMonitoring() {\n      return !!this.clusterCounts?.[0]?.counts?.[CATALOG.APP]?.namespaces?.['cattle-monitoring-system'];\n    },\n\n    canAccessNodes() {\n      return !!this.clusterCounts?.[0]?.counts?.[NODE];\n    },\n\n    canAccessDeployments() {\n      return !!this.clusterCounts?.[0]?.counts?.[WORKLOAD_TYPES.DEPLOYMENT];\n    },\n\n    hasMetricsTabs() {\n      return this.canViewMetrics && ( this.showClusterMetrics || this.showK8sMetrics || this.showEtcdMetrics);\n    },\n\n    hasBadge() {\n      return !!this.currentCluster?.badge;\n    },\n\n    hasDescription() {\n      return !!this.currentCluster?.spec?.description;\n    },\n\n    allEventsLink() {\n      return {\n        name:   'c-cluster-product-resource',\n        params: {\n          product:  EXPLORER,\n          resource: EVENT,\n        }\n      };\n    },\n\n    allSecretsLink() {\n      return {\n        name:   'c-cluster-product-resource',\n        params: {\n          product:  EXPLORER,\n          resource: SECRET,\n        }\n      };\n    }\n  },\n\n  methods: {\n    // Ported from Ember\n    isComponentStatusHealthy(field) {\n      const matching = (this.currentCluster?.status?.componentStatuses || []).filter((s) => s.name.startsWith(field));\n\n      // If there's no matching component status, it's \"healthy\"\n      if ( !matching.length ) {\n        return true;\n      }\n\n      const count = matching.reduce((acc, status) => {\n        const conditions = status.conditions.find((c) => c.status !== 'True');\n\n        return !conditions ? acc : acc + 1;\n      }, 0);\n\n      return count === 0;\n    },\n\n    showActions() {\n      this.$store.commit('action-menu/show', {\n        resources: this.currentCluster,\n        elem:      this.$refs['cluster-actions'],\n      });\n    },\n\n    // Used by metric-poller mixin\n    async loadMetrics() {\n      this.nodeMetrics = await fetchClusterResources(this.$store, METRIC.NODE, { force: true } );\n    },\n\n    // Events/Alerts tab changed\n    tabChange(neu) {\n      this.selectedTab = neu?.selectedName;\n    },\n\n    async goToHarvesterCluster() {\n      try {\n        const provClusters = await this.$store.dispatch('management/findAll', { type: CAPI.RANCHER_CLUSTER });\n        const provCluster = provClusters.find((p) => p.mgmt.id === this.currentCluster.id);\n\n        await provCluster.goToHarvesterCluster();\n      } catch {\n      }\n    }\n  },\n};\n</script>\n\n<template>\n  <section class=\"dashboard\">\n    <header>\n      <div class=\"title\">\n        <h1>\n          <t k=\"clusterIndexPage.header\" />\n        </h1>\n        <div>\n          <span v-if=\"hasDescription\">{{ currentCluster.spec.description }}</span>\n        </div>\n      </div>\n    </header>\n    <div\n      class=\"cluster-dashboard-glance\"\n    >\n      <div>\n        <label>{{ t('glance.provider') }}: </label>\n        <span v-if=\"isHarvesterCluster\">\n          <a\n            role=\"button\"\n            @click=\"goToHarvesterCluster\"\n          >\n            {{ displayProvider }}\n          </a>\n        </span>\n        <span v-else>\n          {{ displayProvider }}\n        </span>\n      </div>\n      <div>\n        <label>{{ t('glance.version') }}: </label>\n        <span>{{ currentCluster.kubernetesVersionBase }}</span>\n        <span\n          v-if=\"currentCluster.kubernetesVersionExtension\"\n          style=\"font-size: 0.75em\"\n        >{{ currentCluster.kubernetesVersionExtension }}</span>\n      </div>\n      <div>\n        <label>{{ t('glance.created') }}: </label>\n        <span><LiveDate\n          :value=\"currentCluster.metadata.creationTimestamp\"\n          :add-suffix=\"true\"\n          :show-tooltip=\"true\"\n        /></span>\n      </div>\n      <div :style=\"{'flex':1}\" />\n      <div v-if=\"!monitoringStatus.v2 && !monitoringStatus.v1\">\n        <n-link\n          :to=\"{name: 'c-cluster-explorer-tools'}\"\n          class=\"monitoring-install\"\n        >\n          <i class=\"icon icon-gear\" />\n          <span>{{ t('glance.installMonitoring') }}</span>\n        </n-link>\n      </div>\n      <div v-if=\"monitoringStatus.v1\">\n        <span>{{ t('glance.v1MonitoringInstalled') }}</span>\n      </div>\n      <ConfigBadge\n        v-if=\"currentCluster.canUpdate\"\n        :cluster=\"currentCluster\"\n      />\n    </div>\n\n    <div class=\"resource-gauges\">\n      <ResourceSummary :spoofed-counts=\"totalCountGaugeInput\" />\n      <ResourceSummary\n        v-if=\"canAccessNodes\"\n        resource=\"node\"\n      />\n      <ResourceSummary\n        v-if=\"canAccessDeployments\"\n        resource=\"apps.deployment\"\n      />\n    </div>\n\n    <!-- extension cards -->\n    <div\n      v-if=\"extensionCards.length\"\n      class=\"extension-card-container mt-20\"\n    >\n      <SimpleBox\n        v-for=\"item, i in extensionCards\"\n        :key=\"`extensionCards${i}`\"\n        class=\"extension-card\"\n        :style=\"item.style\"\n      >\n        <h3>\n          {{ item.label }}\n        </h3>\n        <component\n          :is=\"item.component\"\n          :resource=\"currentCluster\"\n        />\n      </SimpleBox>\n    </div>\n\n    <h3\n      v-if=\"!hasV1Monitoring && hasStats\"\n      class=\"mt-40\"\n    >\n      {{ t('clusterIndexPage.sections.capacity.label') }}\n    </h3>\n    <div\n      v-if=\"!hasV1Monitoring && hasStats\"\n      class=\"hardware-resource-gauges\"\n    >\n      <HardwareResourceGauge\n        :name=\"t('clusterIndexPage.hardwareResourceGauge.pods')\"\n        :used=\"podsUsed\"\n      />\n      <HardwareResourceGauge\n        :name=\"t('clusterIndexPage.hardwareResourceGauge.cores')\"\n        :reserved=\"cpuReserved\"\n        :used=\"cpuUsed\"\n        :units=\"cpuReserved.units\"\n      />\n      <HardwareResourceGauge\n        :name=\"t('clusterIndexPage.hardwareResourceGauge.ram')\"\n        :reserved=\"ramReserved\"\n        :used=\"ramUsed\"\n        :units=\"ramReserved.units\"\n      />\n    </div>\n\n    <div v-if=\"!hasV1Monitoring && componentServices\">\n      <div\n        v-for=\"status in componentServices\"\n        :key=\"status.name\"\n        class=\"k8s-component-status\"\n        :class=\"{'k8s-component-status-healthy': status.healthy, 'k8s-component-status-unhealthy': !status.healthy}\"\n      >\n        <i\n          v-if=\"status.healthy\"\n          class=\"icon icon-checkmark\"\n        />\n        <i\n          v-else\n          class=\"icon icon-warning\"\n        />\n        <div>{{ t(status.labelKey) }}</div>\n      </div>\n    </div>\n\n    <div\n      v-if=\"hasV1Monitoring\"\n      id=\"ember-anchor\"\n      class=\"mt-20\"\n    >\n      <EmberPage\n        inline=\"ember-anchor\"\n        :src=\"v1MonitoringURL\"\n      />\n    </div>\n\n    <div class=\"mt-30\">\n      <Tabbed @changed=\"tabChange\">\n        <Tab\n          name=\"cluster-events\"\n          :label=\"t('clusterIndexPage.sections.events.label')\"\n          :weight=\"2\"\n        >\n          <span class=\"events-table-link\">\n            <n-link :to=\"allEventsLink\">\n              <span>{{ t('glance.eventsTable') }}</span>\n            </n-link>\n          </span>\n          <EventsTable />\n        </Tab>\n        <Tab\n          v-if=\"hasMonitoring\"\n          name=\"cluster-alerts\"\n          :label=\"t('clusterIndexPage.sections.alerts.label')\"\n          :weight=\"1\"\n        >\n          <AlertTable v-if=\"selectedTab === 'cluster-alerts'\" />\n        </Tab>\n        <Tab\n          name=\"cluster-certs\"\n          :label=\"t('clusterIndexPage.sections.certs.label')\"\n          :weight=\"1\"\n        >\n          <span class=\"events-table-link\">\n            <n-link :to=\"allSecretsLink\">\n              <span>{{ t('glance.secretsTable') }}</span>\n            </n-link>\n          </span>\n          <Certificates v-if=\"selectedTab === 'cluster-certs'\" />\n        </Tab>\n      </Tabbed>\n    </div>\n    <Tabbed\n      v-if=\"hasMetricsTabs\"\n      default-tab=\"cluster-metrics\"\n      :use-hash=\"false\"\n      class=\"mt-30\"\n    >\n      <Tab\n        v-if=\"showClusterMetrics\"\n        name=\"cluster-metrics\"\n        :label=\"t('clusterIndexPage.sections.clusterMetrics.label')\"\n        :weight=\"2\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"CLUSTER_METRICS_DETAIL_URL\"\n            :summary-url=\"CLUSTER_METRICS_SUMMARY_URL\"\n            graph-height=\"825px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        v-if=\"showK8sMetrics\"\n        name=\"k8s-metrics\"\n        :label=\"t('clusterIndexPage.sections.k8sMetrics.label')\"\n        :weight=\"1\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            :detail-url=\"K8S_METRICS_DETAIL_URL\"\n            :summary-url=\"K8S_METRICS_SUMMARY_URL\"\n            graph-height=\"550px\"\n          />\n        </template>\n      </Tab>\n      <Tab\n        v-if=\"showEtcdMetrics\"\n        name=\"etcd-metrics\"\n        :label=\"t('clusterIndexPage.sections.etcdMetrics.label')\"\n        :weight=\"0\"\n      >\n        <template #default=\"props\">\n          <DashboardMetrics\n            v-if=\"props.active\"\n            class=\"etcd-metrics\"\n            :detail-url=\"ETCD_METRICS_DETAIL_URL\"\n            :summary-url=\"ETCD_METRICS_SUMMARY_URL\"\n            graph-height=\"550px\"\n          >\n            <EtcdInfoBanner />\n          </DashboardMetrics>\n        </template>\n      </Tab>\n    </Tabbed>\n  </section>\n</template>\n\n<style lang=\"scss\" scoped>\n.extension-card-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(calc((100%/3) - 40px), 1fr));\n  grid-column-gap: 15px;\n  grid-row-gap: 20px;\n}\n\n@media only screen and (max-width: map-get($breakpoints, \"--viewport-9\")) {\n  .extension-card-container {\n    grid-template-columns: 1fr !important;\n  }\n}\n\n.cluster-dashboard-glance {\n  border-top: 1px solid var(--border);\n  border-bottom: 1px solid var(--border);\n  padding: 20px 0px;\n  display: flex;\n\n  &>*:not(:nth-last-child(-n+2)) {\n    margin-right: 40px;\n\n    & SPAN {\n       font-weight: bold\n    }\n  }\n}\n\n.title h1 {\n  margin: 0;\n}\n\n.actions-span {\n  align-self: center;\n}\n\n.events {\n  margin-top: 30px;\n}\n\n.graph-options {\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n}\n\n.etcd-metrics ::v-deep .external-link {\n  top: -107px;\n}\n\n.cluster-tools-tip {\n  margin-top: 0;\n}\n\n.monitoring-install {\n  display: flex;\n  margin-left: 10px;\n\n  > I {\n    line-height: inherit;\n    margin-right: 4px;\n  }\n\n  &:focus {\n    outline: 0;\n  }\n}\n\n.events-table-link {\n  display: flex;\n  justify-content: flex-end;\n  margin-bottom: 20px;\n}\n\n.k8s-component-status {\n  align-items: center;\n  display: inline-flex;\n  border: 1px solid;\n  margin-top: 20px;\n\n  &:not(:last-child) {\n    margin-right: 20px;\n  }\n\n  > div {\n    padding: 5px 20px;\n  }\n\n  > I {\n    text-align: center;\n    padding: 5px 10px;\n    border-right: 1px solid var(--border);\n  }\n\n  &.k8s-component-status-unhealthy {\n    border-color: var(--error-border);\n\n    > I {\n      color: var(--error)\n    }\n  }\n\n  &.k8s-component-status-healthy {\n    border-color: var(--border);\n\n    > I {\n      color: var(--success)\n    }\n  }\n}\n</style>\n"]}]}