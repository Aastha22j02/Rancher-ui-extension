{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/helm.cattle.io.projecthelmchart.vue?vue&type=style&index=0&id=688459a9&lang=scss&scoped=true","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/helm.cattle.io.projecthelmchart.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/suseconf/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/suseconf/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5yb3cgewogIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0K"},{"version":3,"sources":["helm.cattle.io.projecthelmchart.vue"],"names":[],"mappings":";AA6JA;AACA;AACA","file":"helm.cattle.io.projecthelmchart.vue","sourceRoot":"node_modules/@rancher/shell/edit","sourcesContent":["<script>\nimport Tabbed from '@shell/components/Tabbed';\nimport createEditView from '@shell/mixins/create-edit-view';\nimport CruResource from '@shell/components/CruResource';\nimport Questions from '@shell/components/Questions';\nimport { CONFIG_MAP, NAMESPACE } from '@shell/config/types';\nimport LabeledSelect from '@shell/components/form/LabeledSelect';\nimport { LabeledInput } from '@components/Form/LabeledInput';\nimport Loading from '@shell/components/Loading';\nimport jsyaml from 'js-yaml';\n\nexport default {\n  components: {\n    CruResource,\n    LabeledSelect,\n    LabeledInput,\n    Tabbed,\n    Questions,\n    Loading\n  },\n\n  mixins: [createEditView],\n\n  props: {\n    value: {\n      type:     Object,\n      required: true,\n    },\n  },\n\n  async fetch() {\n    await this.$store.dispatch('catalog/load');\n    const inStore = this.$store.getters['currentStore'](NAMESPACE);\n    const federatorSystemNamespacesConfigMap = await this.$store.dispatch('cluster/find', { type: CONFIG_MAP, id: 'cattle-monitoring-system/prometheus-federator-system-namespaces' });\n\n    this.systemNamespaces = JSON.parse(federatorSystemNamespacesConfigMap?.data?.['system-namespaces.json']);\n\n    this.namespaces = this.$store.getters[`${ inStore }/all`](NAMESPACE)\n      .filter(this.namespaceFilter)\n      .map(this.namespaceMapper);\n\n    this.loading = false;\n  },\n\n  data() {\n    if (!this.value.spec.values) {\n      this.$set(this.value.spec, 'values', {});\n    }\n\n    return {\n      systemNamespaces:           null,\n      namespaces:                 [],\n      loading:                    true,\n      inStore:                    this.$store.getters['currentStore'](),\n      selectedNamespaceQuestions: null,\n    };\n  },\n\n  watch: {\n    /**\n     * Given the current namespace, fetch a specific secret from within which will contain a questions.yaml\n     */\n    async currentNamespace(neu, old) {\n      if (!neu) {\n        return;\n      }\n\n      const configMapRelationship = neu.metadata?.relationships.find((relationship) => relationship?.toType === CONFIG_MAP);\n\n      if (!configMapRelationship?.toId) {\n        return;\n      }\n\n      const res = await this.$store.dispatch(`${ this.inStore }/find`, { type: CONFIG_MAP, id: configMapRelationship.toId });\n      const questionsYaml = res?.data?.['questions.yaml'];\n\n      if (!questionsYaml) {\n        return;\n      }\n      this.selectedNamespaceQuestions = jsyaml.load(questionsYaml)?.questions;\n    }\n  },\n\n  computed: {\n    currentNamespace() {\n      return this.namespaces.find((namespace) => namespace.id === this.value?.metadata?.namespace);\n    }\n  },\n\n  methods: {\n    getNamespaceConfigMapId(namespace) {\n      return this.currentNamespace?.metadata?.relationships.find((relationship) => relationship?.toType === 'configmap')?.toId;\n    },\n    namespaceFilter(namespace) {\n      const excludeProjects = [...this.systemNamespaces?.systemProjectLabelValues || [], this.systemNamespaces?.projectReleaseLabelValue];\n\n      return namespace?.project && namespace?.metadata?.labels?.['helm.cattle.io/helm-project-operated'] && !excludeProjects.includes(namespace.projectId);\n    },\n    namespaceMapper(namespace) {\n      return {\n        ...namespace,\n        configMapId: this.getNamespaceConfigMapId(namespace),\n        label:       namespace?.project?.spec?.displayName,\n        value:       namespace?.id,\n      };\n    }\n  }\n};\n</script>\n\n<template>\n  <CruResource\n    v-if=\"!loading\"\n    :done-route=\"doneRoute\"\n    :resource=\"value\"\n    :mode=\"mode\"\n    :errors=\"errors\"\n    :apply-hooks=\"applyHooks\"\n    @finish=\"save\"\n  >\n    <div class=\"row\">\n      <div class=\"col span-6\">\n        <LabeledSelect\n          v-model=\"value.metadata.namespace\"\n          :label=\"t('namespace.project.label')\"\n          :options=\"namespaces\"\n          required\n        />\n      </div>\n      <div class=\"col span-6\">\n        <LabeledInput\n          v-model=\"value.metadata.description\"\n          :label=\"t('nameNsDescription.description.label')\"\n        />\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col span-12\">\n        <Tabbed\n          v-if=\"!!currentNamespace && selectedNamespaceQuestions\"\n          ref=\"tabs\"\n          :side-tabs=\"true\"\n        >\n          <Questions\n            v-model=\"value.spec.values\"\n            tabbed=\"multiple\"\n            :target-namespace=\"value.metadata.namespace\"\n            :source=\"selectedNamespaceQuestions\"\n          />\n        </Tabbed>\n      </div>\n    </div>\n  </CruResource>\n  <Loading v-else />\n</template>\n\n<style lang=\"scss\" scoped>\n.row {\n  margin-bottom: 20px;\n}\n</style>\n"]}]}