{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue?vue&type=style&index=0&id=87ed4550&lang=scss&scoped=true","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/dialog/ScaleMachineDownDialog.vue","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/css-loader/dist/cjs.js","mtime":1725271300564},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1725271300920},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/postcss-loader/src/index.js","mtime":1725271300857},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/sass-loader/dist/cjs.js","mtime":1725271288422},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5ib2R5IHsKICBkaXY6bm90KDpsYXN0LW9mLXR5cGUpIHsKICAgIHBhZGRpbmctYm90dG9tOiAxNXB4OwogIH0KICAucmV0YWluZWQtbWFjaGluZSB7CiAgICBkaXNwbGF5OiBmbGV4OwogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICB9Cn0K"},{"version":3,"sources":["ScaleMachineDownDialog.vue"],"names":[],"mappings":";AA2JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ScaleMachineDownDialog.vue","sourceRoot":"node_modules/@rancher/shell/dialog","sourcesContent":["<script>\nimport { CAPI as CAPI_LABELS } from '@shell/config/labels-annotations';\nimport { MANAGEMENT, CAPI } from '@shell/config/types';\nimport GenericPrompt from './GenericPrompt';\n\nexport default {\n  components: { GenericPrompt },\n\n  props: {\n    resources: {\n      type:     Array,\n      required: true\n    }\n  },\n\n  async fetch() {\n    if (this.isRke2) {\n      await Promise.all([\n        this.$store.dispatch('management/findAll', { type: CAPI.MACHINE_DEPLOYMENT }),\n        this.$store.dispatch('management/findAll', { type: CAPI.MACHINE })\n      ]);\n    } else {\n      await Promise.all([\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE_POOL }),\n        this.$store.dispatch('management/findAll', { type: MANAGEMENT.NODE })\n      ]);\n    }\n  },\n\n  data() {\n    const isRke2 = this.resources[0].cluster?.isRke2;\n    const cluster = isRke2 ? this.resources[0].cluster : this.resources[0].provisioningCluster;\n\n    // Not all machines can be deleted, there must always be at least one left for roles control plane and etcd\n    // First ensure that at least one control plane exists... and then check from the remaining machines that at least one etcd exists\n    // This isn't optimisied, there may be cases that retaining a single machine with both roles would be better than retaining two with single roles\n    const [ignoredControlPlane, safeControlePlaneMachinesToDelete] = this.deleteType('isControlPlane', this.resources, cluster, isRke2);\n    const [ignoredEtcd, safeMachinesToDelete] = this.deleteType('isEtcd', safeControlePlaneMachinesToDelete, cluster, isRke2);\n    const ignored = [ignoredControlPlane, ignoredEtcd].filter((i) => !!i);\n\n    return {\n      cluster,\n      isRke2,\n      allToDelete: this.resources,\n      safeMachinesToDelete,\n      ignored,\n      type:        this.$store.getters['type-map/labelFor'](this.resources[0].schema, this.resources.length),\n      config:      {\n        title:       this.t('promptRemove.title'),\n        applyMode:   'delete',\n        applyAction: this.remove,\n      }\n    };\n  },\n\n  methods: {\n    deleteType(type, allToDelete, cluster, isRke2) {\n      const allToDeleteByType = allToDelete.reduce((res, m) => {\n        if (m[type]) {\n          res.typed.push(m);\n        } else {\n          res.others.push(m);\n        }\n\n        return res;\n      }, { typed: [], others: [] });\n\n      const machines = isRke2 ? cluster.machines : cluster.nodes;\n      const totalTypes = machines.filter((m) => m[type]).length;\n      const typesToDelete = allToDeleteByType.typed.length;\n      // If we're attempting to remove all control plan machines.... ignore one\n      const ignoredType = totalTypes - typesToDelete === 0 ? allToDeleteByType.typed.pop() : undefined;\n      const safeMachinesToDelete = [...allToDeleteByType.typed, ...allToDeleteByType.others];\n\n      return [ignoredType, safeMachinesToDelete];\n    },\n\n    async remove() {\n      if (!this.isRke2) {\n        await Promise.all(this.safeMachinesToDelete.map((node) => {\n          return node.norman?.doAction('scaledown');\n        }));\n\n        return;\n      }\n\n      // Group machines into pools\n      const poolInfo = this.safeMachinesToDelete.reduce((res, m) => {\n        res.set(m.pool, res.get(m.pool) || []);\n        res.get(m.pool).push(m);\n\n        return res;\n      }, new Map());\n\n      // Mark all machines for deletion and then scale down their pool to the new size\n      const flatArray = Array.from(poolInfo.entries());\n\n      await Promise.all(flatArray.map(([pool, machines]) => {\n        return Promise\n          .all(machines.map((m) => {\n            m.setAnnotation(CAPI_LABELS.DELETE_MACHINE, 'true');\n\n            return m.save();\n          }))\n          .then(() => pool.scalePool(-machines.length, false));\n      }));\n\n      // Pool scale info is kept in the cluster itself, so now we've made the changes we can save them\n      await this.cluster.save();\n    }\n  }\n};\n</script>\n\n<template>\n  <GenericPrompt\n    v-bind=\"config\"\n    @close=\"$emit('close')\"\n  >\n    <template slot=\"body\">\n      <div class=\"pl-10 pr-10 mt-20 mb-20 body\">\n        <div v-if=\"allToDelete.length === 1\">\n          {{ t('promptRemove.attemptingToRemove', { type }) }} <b>{{ safeMachinesToDelete[0].nameDisplay }}</b>\n        </div>\n        <div v-else>\n          {{ t('promptScaleMachineDown.attemptingToRemove', { type, count: allToDelete.length }, true) }}\n        </div>\n        <div\n          v-if=\"ignored.length\"\n          class=\"retained-machine\"\n        >\n          <span class=\"mb-20\">{{ t('promptScaleMachineDown.retainedMachine1') }}</span>\n          <span\n            v-for=\"i in ignored\"\n            :key=\"i.nameDisplay\"\n            v-clean-html=\"t('promptScaleMachineDown.retainedMachine2', { name: i.nameDisplay }, true)\"\n          />\n        </div>\n      </div>\n    </template>\n  </GenericPrompt>\n</template>\n\n<style lang='scss' scoped>\n  .body {\n    div:not(:last-of-type) {\n      padding-bottom: 15px;\n    }\n    .retained-machine {\n      display: flex;\n      flex-direction: column;\n    }\n  }\n</style>\n"]}]}