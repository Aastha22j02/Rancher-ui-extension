{"remainingRequest":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/components/formatter/IngressTarget.vue?vue&type=script&lang=js","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/components/formatter/IngressTarget.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCB7IElOR1JFU1MsIFdPUktMT0FEX1RZUEVTIH0gZnJvbSAnQHNoZWxsL2NvbmZpZy90eXBlcyc7CmltcG9ydCBJbmdyZXNzRnVsbFBhdGggZnJvbSAnQHNoZWxsL2NvbXBvbmVudHMvZm9ybWF0dGVyL0luZ3Jlc3NGdWxsUGF0aCc7CgpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogeyBJbmdyZXNzRnVsbFBhdGggfSwKICBwcm9wczogICAgICB7CiAgICB2YWx1ZTogewogICAgICB0eXBlOiAgICAgT2JqZWN0LAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIHJvdzogewogICAgICB0eXBlOiAgICBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+IHsKICAgICAgICByZXR1cm4ge307CiAgICAgIH0KICAgIH0KICB9LAoKICBhc3luYyBmZXRjaCgpIHsKICAgIGxldCBwcm9taXNlcyA9IFtdOwoKICAgIGlmICghdGhpcy4kc3RvcmUuZ2V0dGVyc1tgY2x1c3Rlci9wYWdpbmF0aW9uRW5hYmxlZGBdKCkpIHsKICAgICAgLy8gVGhpcyBpcyBvbmx5IHVzZWQgYnkgc2hlbGwvbW9kZWxzL25ldHdvcmtpbmcuazhzLmlvLmluZ3Jlc3MuanMgYHRhcmdldFRvYCwgd2hlcmUgd2UgZG8gc29tZSBkb2RneSBtYXRjaGluZyBvZiB3b3JrbG9hZHMgd2l0aCBuYW1lICdpbmdyZXNzLScKICAgICAgcHJvbWlzZXMgPSBPYmplY3QudmFsdWVzKFdPUktMT0FEX1RZUEVTKS5tYXAoKHR5cGUpID0+IHRoaXMuJHN0b3JlLmRpc3BhdGNoKCdjbHVzdGVyL2ZpbmRBbGwnLCB7IHR5cGUgfSkpOwogICAgfQogICAgY29uc3QgaW5ncmVzc1NjaGVtYSA9IHRoaXMuJHN0b3JlLmdldHRlcnNbYGNsdXN0ZXIvc2NoZW1hRm9yYF0oSU5HUkVTUyk7CgogICAgaWYgKGluZ3Jlc3NTY2hlbWEpIHsKICAgICAgcHJvbWlzZXMucHVzaChpbmdyZXNzU2NoZW1hLmZldGNoUmVzb3VyY2VGaWVsZHMoKSk7CiAgICB9CiAgICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7CiAgfSwKCiAgY29tcHV0ZWQ6IHsKICAgIHdvcmtsb2FkcygpIHsKICAgICAgcmV0dXJuIE9iamVjdC52YWx1ZXMoV09SS0xPQURfVFlQRVMpLmZsYXRNYXAoKHR5cGUpID0+IHRoaXMuJHN0b3JlLmdldHRlcnNbJ2NsdXN0ZXIvYWxsJ10odHlwZSkpOwogICAgfSwKICAgIHBhdGhzKCkgewogICAgICByZXR1cm4gdGhpcy5yb3cuY3JlYXRlUnVsZXNGb3JMaXN0UGFnZSh0aGlzLndvcmtsb2Fkcyk7CiAgICB9LAogICAgZGVmYXVsdFNlcnZpY2UoKSB7CiAgICAgIHJldHVybiB0aGlzLnJvdy5jcmVhdGVEZWZhdWx0U2VydmljZSh0aGlzLndvcmtsb2Fkcyk7CiAgICB9CiAgfQp9Owo="},{"version":3,"sources":["IngressTarget.vue"],"names":[],"mappings":";AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"IngressTarget.vue","sourceRoot":"node_modules/@rancher/shell/components/formatter","sourcesContent":["<script>\nimport { INGRESS, WORKLOAD_TYPES } from '@shell/config/types';\nimport IngressFullPath from '@shell/components/formatter/IngressFullPath';\n\nexport default {\n  components: { IngressFullPath },\n  props:      {\n    value: {\n      type:     Object,\n      required: true\n    },\n    row: {\n      type:    Object,\n      default: () => {\n        return {};\n      }\n    }\n  },\n\n  async fetch() {\n    let promises = [];\n\n    if (!this.$store.getters[`cluster/paginationEnabled`]()) {\n      // This is only used by shell/models/networking.k8s.io.ingress.js `targetTo`, where we do some dodgy matching of workloads with name 'ingress-'\n      promises = Object.values(WORKLOAD_TYPES).map((type) => this.$store.dispatch('cluster/findAll', { type }));\n    }\n    const ingressSchema = this.$store.getters[`cluster/schemaFor`](INGRESS);\n\n    if (ingressSchema) {\n      promises.push(ingressSchema.fetchResourceFields());\n    }\n    await Promise.all(promises);\n  },\n\n  computed: {\n    workloads() {\n      return Object.values(WORKLOAD_TYPES).flatMap((type) => this.$store.getters['cluster/all'](type));\n    },\n    paths() {\n      return this.row.createRulesForListPage(this.workloads);\n    },\n    defaultService() {\n      return this.row.createDefaultService(this.workloads);\n    }\n  }\n};\n</script>\n\n<template>\n  <div\n    v-if=\"value && !$fetchState.pending\"\n    class=\"ingress-target\"\n    :reactivity=\"workloads.length\"\n  >\n    <div\n      v-for=\"(path, i) in paths\"\n      :key=\"i\"\n      class=\"target\"\n    >\n      <IngressFullPath :row=\"path\" />\n      <i class=\"icon icon-chevron-right\" />\n      <router-link\n        v-if=\"path.serviceName && path.serviceTargetTo\"\n        :to=\"path.serviceTargetTo\"\n      >\n        {{ path.serviceName }}\n      </router-link>\n      <span v-else-if=\"path.serviceName\">\n        {{ path.serviceName }}\n      </span>\n    </div>\n    <div\n      v-if=\"defaultService\"\n      class=\"target\"\n    >\n      {{ t('ingress.target.default') }} <i class=\"icon icon-chevron-right\" />\n      <router-link\n        v-if=\"defaultService.targetTo\"\n        :to=\"defaultService.targetTo\"\n      >\n        {{ defaultService.name }}\n      </router-link>\n      <span v-else>\n        {{ defaultService.name }}\n      </span>\n    </div>\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\n.ingress-target {\n  .target:not(:last-child) {\n    margin-bottom: 5px;\n  }\n}\n</style>\n"]}]}