{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/models/steve-schema.ts"],"names":[],"mappings":"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","sourcesContent":["import { STEVE } from '@shell/config/types';\nimport Schema from './schema';\nimport { wait } from '@shell/utils/async';\n\ninterface ResourceField {\n  type: string,\n  description: string,\n}\ntype ResourceFields = { [id: string]: ResourceField }\n\ninterface SchemaDefinition {\n  type: string,\n  description: string,\n  resourceFields: ResourceFields\n}\ntype SchemaDefinitions = { [definitionId: string]: SchemaDefinition }\n\ntype SchemaId = {\n  self: string;\n  others: string[];\n}\ntype SchemaIds = { [schemaId: string]: SchemaId }\n\ninterface SchemaDefinitionResponse {\n  definitions: SchemaDefinitions,\n  definitionType: string,\n}\n\nconst SchemaDefinitionCache: { [store: string]: {\n  ids: SchemaIds,\n  definitions: SchemaDefinitions,\n} } = {};\n\n/**\n * Steve Schema specific functionality\n */\nexport default class SteveSchema extends Schema {\n  static reset(store: string): void {\n    delete SchemaDefinitionCache[store];\n  }\n\n  _resourceFields?: ResourceFields;\n\n  /**\n   * If resourceFields have not been provided, they are required to be fetched aka schemaDefinition world\n   */\n  requiresResourceFields: boolean;\n\n  // These are just for typing, eventually we'll get them when Schema is fully converted to typescript\n  id?: string;\n  type?: string;\n  links?: any;\n  $ctx?: any;\n\n  /**\n   * This should match the root Schema ctor (...args throws ts error)\n   */\n  constructor(data: unknown, ctx: unknown, rehydrateNamespace?: null | undefined, setClone?: boolean) {\n    super(data, ctx, rehydrateNamespace, setClone);\n\n    if (!SchemaDefinitionCache[this.store]) {\n      SchemaDefinitionCache[this.store] = {\n        ids:         {},\n        definitions: {}\n      };\n    }\n\n    this.requiresResourceFields = this._resourceFields === null; // This is set pre ctor via `set'er, but TS complains that it's not initialised\n  }\n\n  // Notes on Schemas, resourceFields and schemaDefinitions\n  // - Schemas previously contained a `resourceFields` collection, which is now null\n  // - resourceFields now come from a new `schemaDefinitions` endpoint\n  // - for neatness / safety / compatibility with norman resources... we fetch schemaDefinitions and return their resourceFields in a resourceFields getter\n\n  /******************\n   * Resource Fields\n   ****************** /\n\n  /**\n   * Is the property `resourceFields` available\n   *\n   * If the schema definition is required and it hasn't been fetched this will be false\n   *\n   * This is a non-erroring request, unlike the resourceFields getter which will error if schema definition is required but missing\n   */\n  get hasResourceFields(): boolean {\n    if (this.requiresResourceFields) {\n      return !!this.schemaDefinition?.resourceFields;\n    }\n\n    return !!this._resourceFields;\n  }\n\n  /**\n   * Fields associated with instances of this schema\n   *\n   * This will either come directly from the schema or from the schema's definition\n   */\n  get resourceFields(): ResourceFields {\n    if (this.requiresResourceFields) {\n      if (!this.schemaDefinitionsIds) {\n        throw new Error(`Cannot find resourceFields for Schema ${ this.id } (schemaDefinitions have not been fetched) `);\n      }\n\n      if (!this.schemaDefinition) {\n        throw new Error(`No schemaDefinition for ${ this.id } found (not in schemaDefinition response) `);\n      }\n\n      return this.schemaDefinition.resourceFields;\n    }\n\n    return this._resourceFields as ResourceFields;\n  }\n\n  /**\n   * Apply the original `resourceFields` param (if it exists). If it does not then we'll need to fetch the schema definition\n   */\n  set resourceFields(resourceFields: ResourceFields) {\n    this._resourceFields = resourceFields;\n    this.requiresResourceFields = this._resourceFields === null;\n  }\n\n  /**\n   * Ensure this schema has a populated `resourceFields` property\n   *\n   * This happens via making a request to fetch the schema definition\n   */\n  async fetchResourceFields(depth = 0): Promise<SchemaDefinition | null | undefined> {\n    if (!this.requiresResourceFields) {\n      // Not needed, no-op\n      return;\n    }\n\n    if (this.schemaDefinition) {\n      // Already have it, no-op\n      return this.schemaDefinition;\n    }\n\n    const url = this.schemaDefinitionUrl;\n\n    if (!url) {\n      console.warn(`Unable to fetch schema definitions for ${ this.id } (failed to find url of schema definition)`); // eslint-disable-line no-console\n\n      return;\n    }\n\n    if (depth >= 4) {\n      console.warn(`Unable to fetch schema definitions for ${ this.id } (too many failed requests)`); // eslint-disable-line no-console\n\n      return;\n    }\n\n    let res;\n\n    try {\n      // Make a direct request to fetch the schema definition\n      res = await this.$dispatch('request', {\n        type: STEVE.SCHEMA_DEFINITION,\n        url\n      });\n    } catch (e: any) {\n      if ( e?._status === 500) {\n        // Rancher could be updating it's definition cache, attempt a few times\n        await wait(2000);\n\n        return this.fetchResourceFields(++depth);\n      }\n\n      console.warn(`Unable to fetch schema definitions for ${ this.id }`, e); // eslint-disable-line no-console\n\n      return;\n    }\n\n    this.cacheSchemaDefinitionResponse(res);\n\n    return this.schemaDefinition;\n  }\n\n  /**\n   * Convert collection of schema definitions for this schema into objects we can store\n   *\n   * Split out for unit testing purposes\n   */\n  private cacheSchemaDefinitionResponse(res: SchemaDefinitionResponse): void {\n    const { [res.definitionType]: self, ...others } = res.definitions;\n    const store = this.store;\n\n    SchemaDefinitionCache[store].ids[this.id as string] = { self: self.type, others: Object.keys(others) };\n    Object.entries(res.definitions).forEach(([type, sd]) => {\n      SchemaDefinitionCache[store].definitions[type] = sd;\n    });\n  }\n\n  /*********************\n   * Schema Definitions\n   ********************* /\n\n  /**\n   * Store this schema's definition and a collection of associated definitions (all ids)\n   */\n\n  /**\n   * The schema definition for this schema\n   */\n  get schemaDefinition(): SchemaDefinition | null {\n    if (!this.schemaDefinitionsIds) {\n      return null;\n    }\n\n    return SchemaDefinitionCache[this.store].definitions[this.schemaDefinitionsIds.self];\n  }\n\n  /**\n   * The schema definitions for this schema definition's resourceFields\n   */\n  get schemaDefinitions(): SchemaDefinitions | null {\n    if (!this.schemaDefinitionsIds) {\n      return null;\n    }\n\n    return this.schemaDefinitionsIds.others.reduce((res, d) => {\n      res[d] = SchemaDefinitionCache[this.store].definitions[d];\n\n      return res;\n    }, {} as SchemaDefinitions);\n  }\n\n  /**\n   * URL to fetch this schema's definition\n   */\n  get schemaDefinitionUrl(): string {\n    return this.links?.self?.replace('/schemas/', '/schemaDefinitions/');\n  }\n\n  /*********************\n   * Local Properties\n   *\n   * This could be set in the ctor, however are removed in `replaceResource` when there are socket updates..\n   * ... so use getters instead\n   *\n   *********************/\n\n  /**\n   * The name (namespace) of the vuex store this schema lives in (i.e. cluster, management, etc)\n   */\n  private get store(): string {\n    return this.$ctx.state?.config?.namespace;\n  }\n\n  private get schemaDefinitionsIds(): SchemaId | undefined {\n    return SchemaDefinitionCache[this.store]?.ids[this.id as string];\n  }\n}\n"]}]}