{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue?vue&type=script&lang=ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js","mtime":1725271300920}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue.tsx","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/ubuntu/suseconf/node_modules/@vue/cli-service/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/ubuntu/suseconf/node_modules/@rancher/shell/list/node.vue?vue&type=script&lang=ts"],"names":[],"mappings":"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","sourcesContent":["\nimport ResourceTable from '@shell/components/ResourceTable.vue';\nimport Tag from '@shell/components/Tag.vue';\nimport { Banner } from '@components/Banner';\nimport { PODS } from '@shell/config/table-headers';\nimport metricPoller from '@shell/mixins/metric-poller';\n\nimport { CAPI as CAPI_ANNOTATIONS } from '@shell/config/labels-annotations.js';\n\nimport { defineComponent } from 'vue';\nimport { ActionFindPageArgs } from '@shell/types/store/dashboard-store.types';\nimport { FilterArgs, PaginationFilterField, PaginationParamFilter } from '@shell/types/store/pagination.types';\n\nimport {\n  CAPI,\n  MANAGEMENT, METRIC, NODE, NORMAN, POD\n} from '@shell/config/types';\nimport { allHash } from '@shell/utils/promise';\nimport { GROUP_RESOURCES, mapPref } from '@shell/store/prefs';\nimport { COLUMN_BREAKPOINTS } from '@shell/types/store/type-map';\n\nimport ResourceFetch from '@shell/mixins/resource-fetch';\nimport { mapGetters } from 'vuex';\n\nexport default defineComponent({\n  name:       'ListNode',\n  components: {\n    ResourceTable,\n    Tag,\n    Banner\n  },\n  mixins: [metricPoller, ResourceFetch],\n\n  props: {\n    resource: {\n      type:     String,\n      required: true,\n    },\n    schema: {\n      type:     Object,\n      required: true,\n    },\n    useQueryParamsForSimpleFiltering: {\n      type:    Boolean,\n      default: false\n    },\n\n    listComponent: {\n      type:    Boolean,\n      default: false\n    }\n  },\n\n  async fetch() {\n    this.$initializeFetchData(this.resource);\n\n    await allHash({\n      kubeNodes: this.$fetchType(this.resource),\n      ...this.fetchSecondaryResources(),\n    });\n  },\n\n  data() {\n    return {\n      // Pods required for `Pods` column's running pods metrics\n      // podConsumedUsage = podConsumed / podConsumedUsage. podConsumed --> pods. allPods.filter((pod) => pod.spec.nodeName === this.name)\n      canViewPods:        !!this.$store.getters[`cluster/schemaFor`](POD),\n      // Norman node required for Drain/Cordon/Uncordon action\n      canViewNormanNodes: !!this.$store.getters[`rancher/schemaFor`](NORMAN.NODE),\n      // Mgmt Node required to find Norman node\n      canViewMgmtNodes:   !!this.$store.getters[`management/schemaFor`](MANAGEMENT.NODE),\n      // Required for ssh / download key actions\n      canViewMachines:    !!this.$store.getters[`management/schemaFor`](CAPI.MACHINE),\n      // Required for CPU and RAM columns\n      canViewNodeMetrics: !!this.$store.getters['cluster/schemaFor'](METRIC.NODE),\n    };\n  },\n\n  beforeDestroy() {\n    // Stop watching pods, nodes and node metrics\n    if (this.canViewPods) {\n      this.$store.dispatch('cluster/forgetType', POD);\n    }\n\n    this.$store.dispatch('cluster/forgetType', NODE);\n    this.$store.dispatch('cluster/forgetType', METRIC.NODE);\n  },\n\n  computed: {\n    ...mapGetters(['currentCluster']),\n    hasWindowsNodes() {\n      // Note if server side pagination is used this is only applicable to the current page\n      return (this.rows || []).some((node: any) => node.status.nodeInfo.operatingSystem === 'windows');\n    },\n\n    tableGroup: mapPref(GROUP_RESOURCES),\n\n    headers() {\n      // This is all about adding the pods column... if the user can see pods\n\n      if (this.canPaginate) {\n        const paginationHeaders = [...this.$store.getters['type-map/headersFor'](this.schema, true)];\n\n        if (paginationHeaders) {\n          if (this.canViewPods) {\n            paginationHeaders.splice(paginationHeaders.length - 1, 0, {\n              ...PODS,\n              breakpoint: COLUMN_BREAKPOINTS.DESKTOP,\n              sort:       false,\n              search:     false,\n              getValue:   (row: any) => row.podConsumedUsage\n            });\n          }\n\n          return paginationHeaders;\n        } else {\n          console.warn('Nodes list expects pagination headers but none found'); // eslint-disable-line no-console\n\n          return [];\n        }\n      }\n\n      const headers = [...this.$store.getters['type-map/headersFor'](this.schema, false)];\n\n      if (this.canViewPods) {\n        headers.splice(headers.length - 1, 0, {\n          ...PODS,\n          breakpoint: COLUMN_BREAKPOINTS.DESKTOP,\n          getValue:   (row: any) => row.podConsumedUsage\n        });\n      }\n\n      return headers;\n    },\n  },\n\n  methods: {\n    async loadMetrics() {\n      if (!this.canViewNodeMetrics) {\n        return;\n      }\n\n      if (this.canPaginate) {\n        if (!this.rows.length) {\n          return;\n        }\n\n        const opt: ActionFindPageArgs = {\n          force:      true,\n          pagination: new FilterArgs({\n            filters: new PaginationParamFilter({\n              fields: this.rows.map((r: any) => new PaginationFilterField({\n                field: 'metadata.name',\n                value: r.id\n              }))\n            })\n          })\n        };\n\n        await this.$store.dispatch('cluster/findPage', {\n          type: METRIC.NODE,\n          opt\n        });\n      } else {\n        await this.$store.dispatch('cluster/findAll', {\n          type: METRIC.NODE,\n          opt:  { force: true }\n        });\n      }\n\n      this.$forceUpdate();\n    },\n\n    toggleLabels(row: any) {\n      this.$set(row, 'displayLabels', !row.displayLabels);\n    },\n\n    fetchSecondaryResources(): { [key: string]: Promise<any>} {\n      if (this.canPaginate) {\n        return {};\n      }\n\n      const hash: { [key: string]: Promise<any>} = {};\n\n      if (this.canViewMgmtNodes) {\n        hash.mgmtNodes = this.$fetchType(MANAGEMENT.NODE, [], 'management');\n      }\n\n      if (this.canViewNormanNodes) {\n        hash.normanNodes = this.$fetchType(NORMAN.NODE, [], 'rancher');\n      }\n\n      if (this.canViewMachines) {\n        hash.machines = this.$fetchType(CAPI.MACHINE, [], 'management');\n      }\n\n      if (this.canViewPods) {\n        // No need to block on this\n        this.$fetchType(POD);\n      }\n\n      return hash;\n    },\n\n    /**\n     * Nodes columns need other resources in order to show data in some columns\n     *\n     * In the paginated world we want to resrict the fetch of those resources to only the one's we need\n     *\n     * So when we have a page.... use those entries as filters when fetching the other resources\n     */\n    async fetchPageSecondaryResources(force = false) {\n      if (!this.rows?.length) {\n        return;\n      }\n\n      if (this.canViewMgmtNodes && this.canViewNormanNodes) {\n        // We only fetch mgmt node to get norman node. We only fetch node to get node actions\n        // See https://github.com/rancher/dashboard/issues/10743\n        const opt: ActionFindPageArgs = {\n          force,\n          pagination: new FilterArgs({\n            filters: PaginationParamFilter.createMultipleFields(this.rows.map((r: any) => new PaginationFilterField({\n              field: 'status.nodeName',\n              value: r.id\n            }))),\n          })\n        };\n\n        this.$store.dispatch(`management/findPage`, { type: MANAGEMENT.NODE, opt })\n          .then(() => {\n            this.$store.dispatch(`rancher/findAll`, { type: NORMAN.NODE, opt: { force } });\n          });\n      }\n\n      if (this.canViewMachines) {\n        const namespace = this.currentCluster.provClusterId?.split('/')[0];\n\n        if (namespace) {\n          const opt: ActionFindPageArgs = {\n            force,\n            namespaced: namespace,\n            pagination: new FilterArgs({\n              filters: PaginationParamFilter.createMultipleFields(\n                this.rows.reduce((res: PaginationFilterField[], r: any ) => {\n                  const name = r.metadata?.annotations?.[CAPI_ANNOTATIONS.MACHINE_NAME];\n\n                  if (name) {\n                    res.push(new PaginationFilterField({\n                      field: 'metadata.name',\n                      value: name,\n                    }));\n                  }\n\n                  return res;\n                }, [])\n              )\n            })\n          };\n\n          this.$store.dispatch(`management/findPage`, { type: CAPI.MACHINE, opt });\n        }\n      }\n\n      if (this.canViewPods) {\n        // Note - fetching pods for current page could be a LOT still (probably max of 3k - 300 pods per node x 100 nodes in a page)\n        const opt: ActionFindPageArgs = {\n          force,\n          pagination: new FilterArgs({\n            filters: PaginationParamFilter.createMultipleFields(\n              this.rows.map((r: any) => new PaginationFilterField({\n                field: 'spec.nodeName',\n                value: r.id,\n              }))\n            )\n          })\n        };\n\n        this.$store.dispatch(`cluster/findPage`, { type: POD, opt });\n      }\n\n      // Fetch metrics given the current page\n      this.loadMetrics();\n    },\n  },\n});\n"]}]}