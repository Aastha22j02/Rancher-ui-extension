{"remainingRequest":"/home/ubuntu/susecon-2024-ext-demo/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/__tests__/provisioning.cattle.io.cluster.test.ts","dependencies":[{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/__tests__/provisioning.cattle.io.cluster.test.ts","mtime":1725271280091},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/susecon-2024-ext-demo/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/__tests__/provisioning.cattle.io.cluster.test.ts","sourceRoot":"","sources":["/home/ubuntu/susecon-2024-ext-demo/node_modules/@rancher/shell/models/__tests__/provisioning.cattle.io.cluster.test.ts"],"names":[],"mappings":"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","sourcesContent":["import ProvCluster from '@shell/models/provisioning.cattle.io.cluster';\n\ndescribe('class ProvCluster', () => {\n  const importedClusterInfo = {\n    clusterName: 'test', provisioner: 'imported', mgmt: { spec: { gkeConfig: {} } }, spec: {}\n  };\n  const importedGkeClusterInfo = {\n    clusterName: 'test', provisioner: 'rke2', mgmt: { spec: { gkeConfig: { imported: true } } }\n  };\n  const importedAksClusterInfo = {\n    clusterName: 'test', provisioner: 'rke2', mgmt: { spec: { aksConfig: { imported: true } } }\n  };\n  const importedEksClusterInfo = {\n    clusterName: 'test', provisioner: 'rke2', mgmt: { spec: { eksConfig: { imported: true } } }\n  };\n  const notImportedGkeClusterInfo = {\n    clusterName: 'test', provisioner: 'rke2', mgmt: { spec: { gkeConfig: { imported: false } }, rkeConfig: {} }\n  };\n  const importedClusterInfoWithProviderForEmberParam = {\n    clusterName: 'test', provisioner: 'rke2', mgmt: { providerForEmberParam: 'import' }\n  };\n  const localClusterInfo = {\n    clusterName: 'test', provisioner: 'imported', mgmt: { isLocal: true, spec: { gkeConfig: {} } }, spec: {}\n  };\n  const doRke2Info = {\n    clusterName: 'test', provisioner: 'rke2', mgmt: { isLocal: false, providerForEmberParam: 'import' }, spec: { rkeConfig: {} }\n  };\n\n  const gkeClusterWithPrivateEndpoint = {\n    clusterName: 'test',\n    provisioner: 'GKE',\n    spec:        { rkeConfig: {} },\n    mgmt:        { spec: { gkeConfig: { privateClusterConfig: { enablePrivateEndpoint: true } } } }\n  };\n\n  const eksClusterWithPrivateEndpoint = {\n    clusterName: 'test',\n    provisioner: 'EKS',\n    spec:        { rkeConfig: {} },\n    mgmt:        { spec: { eksConfig: { privateAccess: true } } }\n  };\n\n  const aksClusterWithPrivateEndpoint = {\n    clusterName: 'test',\n    provisioner: 'AKS',\n    spec:        { rkeConfig: {} },\n    mgmt:        { spec: { aksConfig: { privateCluster: true } } }\n  };\n\n  // Related to https://github.com/rancher/dashboard/issues/9402\n  describe('isHostedKubernetesProvider + isPrivateHostedProvider', () => {\n    const testCases = [\n      [gkeClusterWithPrivateEndpoint, true],\n      [eksClusterWithPrivateEndpoint, true],\n      [aksClusterWithPrivateEndpoint, true],\n    ];\n    const resetMocks = () => {\n      // Clear all mock function calls:\n      jest.clearAllMocks();\n    };\n\n    it.each(testCases)('should return the isHostedKubernetesProvider and isPrivateHostedProvider values properly based on the props data', (clusterData: Object, expected: Boolean) => {\n      const cluster = new ProvCluster({ spec: clusterData.spec });\n\n      jest.spyOn(cluster, 'mgmt', 'get').mockReturnValue(\n        clusterData.mgmt\n      );\n      jest.spyOn(cluster, 'provisioner', 'get').mockReturnValue(\n        clusterData.provisioner\n      );\n\n      expect(cluster.isRke2).toBe(expected);\n      expect(cluster.isHostedKubernetesProvider).toBe(expected);\n      expect(cluster.isPrivateHostedProvider).toBe(expected);\n      resetMocks();\n    });\n  });\n\n  describe('isImported', () => {\n    const testCases = [\n      [importedClusterInfo, true],\n      [importedGkeClusterInfo, true],\n      [importedAksClusterInfo, true],\n      [importedEksClusterInfo, true],\n      [notImportedGkeClusterInfo, false],\n      [importedClusterInfoWithProviderForEmberParam, true],\n      [localClusterInfo, false],\n      [doRke2Info, false],\n      [{}, false],\n    ];\n    const resetMocks = () => {\n      // Clear all mock function calls:\n      jest.clearAllMocks();\n    };\n\n    it.each(testCases)('should return the isImported value properly based on the props data', (clusterData: Object, expected: Boolean) => {\n      const cluster = new ProvCluster({ spec: clusterData.spec });\n\n      jest.spyOn(cluster, 'mgmt', 'get').mockReturnValue(\n        clusterData.mgmt\n      );\n      jest.spyOn(cluster, 'provisioner', 'get').mockReturnValue(\n        clusterData.provisioner\n      );\n\n      expect(cluster.isImported).toBe(expected);\n      resetMocks();\n    }\n    );\n  });\n\n  describe('mgmt', () => {\n    const testCases = [\n      [importedClusterInfo, importedClusterInfo.mgmt],\n      [importedGkeClusterInfo, importedGkeClusterInfo.mgmt],\n      [importedAksClusterInfo, importedAksClusterInfo.mgmt],\n      [importedEksClusterInfo, importedEksClusterInfo.mgmt],\n      [notImportedGkeClusterInfo, notImportedGkeClusterInfo.mgmt],\n      [importedClusterInfoWithProviderForEmberParam, importedClusterInfoWithProviderForEmberParam.mgmt],\n      [localClusterInfo, localClusterInfo.mgmt],\n      [doRke2Info, doRke2Info.mgmt],\n      [{}, null],\n    ];\n\n    const resetMocks = () => {\n      // Clear all mock function calls:\n      jest.clearAllMocks();\n    };\n\n    it.each(testCases)('should return the isImported value properly based on the props data', (clusterData: Object, expected: Object) => {\n      const clusterMock = jest.fn(() => clusterData.mgmt);\n      const ctx = { rootGetters: { 'management/byId': clusterMock } };\n      const cluster = new ProvCluster({ status: { clusterName: clusterData.clusterName } }, ctx);\n\n      expect(cluster.mgmt).toBe(expected);\n      resetMocks();\n    });\n  });\n\n  describe('hasError', () => {\n    const conditionsWithoutError = [\n      {\n        error:          false,\n        lastUpdateTime: '2022-10-17T23:09:15Z',\n        status:         'True',\n        transitioning:  false,\n        type:           'Ready'\n      },\n    ];\n\n    const conditionsWithoutReady = [\n      {\n        error:          true,\n        lastUpdateTime: '2022-10-17T23:09:15Z',\n        status:         'False',\n        message:        'some-error-message',\n        transitioning:  false,\n        type:           'Pending'\n      },\n    ];\n\n    const noConditions:[] = [];\n\n    const conditionsWithReadyLatest = [\n      {\n        error:          true,\n        lastUpdateTime: '2022-10-17T23:09:15Z',\n        status:         'False',\n        message:        'some-error-message',\n        transitioning:  false,\n        type:           'Pending'\n      },\n      {\n        error:          false,\n        lastUpdateTime: '2023-10-17T23:09:15Z',\n        status:         'True',\n        transitioning:  false,\n        type:           'Ready'\n      }\n    ];\n\n    const conditionsWithErrorLatest = [\n      {\n        error:          false,\n        lastUpdateTime: '2022-10-17T23:09:15Z',\n        status:         'True',\n        transitioning:  false,\n        type:           'Ready'\n      },\n      {\n        error:          true,\n        lastUpdateTime: '2023-10-17T23:09:15Z',\n        status:         'False',\n        message:        'some-error-message',\n        transitioning:  false,\n        type:           'Pending'\n      }\n    ];\n\n    const conditionsWithProblemInLastUpdateTimeProp = [\n      {\n        error:          true,\n        lastUpdateTime: '',\n        status:         'False',\n        message:        'some-error-message',\n        transitioning:  false,\n        type:           'Pending'\n      },\n      {\n        error:          false,\n        lastUpdateTime: '2023-10-17T23:09:15Z',\n        status:         'True',\n        transitioning:  false,\n        type:           'Ready'\n      }\n    ];\n\n    const testCases = [\n      ['conditionsWithoutError', conditionsWithoutError, false],\n      ['conditionsWithoutReady', conditionsWithoutReady, true],\n      ['noConditions', noConditions, false],\n      ['conditionsWithReadyLatest', conditionsWithReadyLatest, false],\n      ['conditionsWithErrorLatest', conditionsWithErrorLatest, true],\n      ['conditionsWithProblemInLastUpdateTimeProp', conditionsWithProblemInLastUpdateTimeProp, false],\n    ];\n\n    const resetMocks = () => {\n      // Clear all mock function calls\n      jest.clearAllMocks();\n    };\n\n    it.each(testCases)('should return the hasError value properly based on the \"status.conditions\" props data for testcase %p', (testName: string, conditions: Array, expected: Boolean) => {\n      const ctx = { rootGetters: { 'management/byId': jest.fn() } };\n      const cluster = new ProvCluster({ status: { conditions } }, ctx);\n\n      expect(cluster.hasError).toBe(expected);\n      resetMocks();\n    }\n    );\n  });\n});\n"]}]}