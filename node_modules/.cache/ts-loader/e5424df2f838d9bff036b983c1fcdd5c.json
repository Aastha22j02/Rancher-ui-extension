{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/models/__tests__/steve-schema.test.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/__tests__/steve-schema.test.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IFN0ZXZlU2NoZW1hIGZyb20gJ0BzaGVsbC9tb2RlbHMvc3RldmUtc2NoZW1hJzsKaW1wb3J0IHsgcmVwbGFjZSB9IGZyb20gJ0BzaGVsbC9wbHVnaW5zL2Rhc2hib2FyZC1zdG9yZS9tdXRhdGlvbnMnOwpkZXNjcmliZSgnY2xhc3MgU3RldmVTY2hlbWEnLCAoKSA9PiB7CiAgICBkZXNjcmliZSgnc2NoZW1hIGRpZXQnLCAoKSA9PiB7CiAgICAgICAgaXQoJ3NjaGVtYSBEZWZpbml0aW9ucycsIGFzeW5jICgpID0+IHsKICAgICAgICAgICAgY29uc3Qgc3RvcmUgPSAnY2x1c3Rlcic7CiAgICAgICAgICAgIGNvbnN0IHNjaGVtYU5hbWUgPSAnc3RldmVUZXN0JzsKICAgICAgICAgICAgU3RldmVTY2hlbWEucmVzZXQoc3RvcmUpOwogICAgICAgICAgICBjb25zdCB0ZXN0U2NoZW1hID0gewogICAgICAgICAgICAgICAgaWQ6IHNjaGVtYU5hbWUsCiAgICAgICAgICAgICAgICBtZXRhZGF0YTogeyBuYW1lOiBzY2hlbWFOYW1lIH0sCiAgICAgICAgICAgICAgICByZXNvdXJjZUZpZWxkczogbnVsbCwKICAgICAgICAgICAgICAgIGxpbmtzOiB7IHNlbGY6IGAvdjEvc2NoZW1hcy8ke3NjaGVtYU5hbWV9YCB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IHRlc3RTY2hlbWFEZWZpbml0aW9uID0gewogICAgICAgICAgICAgICAgdHlwZTogc2NoZW1hTmFtZSwKICAgICAgICAgICAgICAgIHJlc291cmNlRmllbGRzOiB7CiAgICAgICAgICAgICAgICAgICAgYToge30sCiAgICAgICAgICAgICAgICAgICAgYjoge30sCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IHRlc3RTZWNvbmRhcnlTY2hlbWFEZWZpbml0aW9ucyA9IHsKICAgICAgICAgICAgICAgIGE6IHsgdHlwZTogJ2EnIH0sCiAgICAgICAgICAgICAgICBiOiB7IHR5cGU6ICdiJyB9CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGNvbnN0IHNjaGVtYU1vZGVsID0gbmV3IFN0ZXZlU2NoZW1hKHRlc3RTY2hlbWEsIHsKICAgICAgICAgICAgICAgIGRpc3BhdGNoOiBqZXN0LmZuKCkubW9ja0ltcGxlbWVudGF0aW9uKChhY3Rpb24sIG9wdHMpID0+IHsKICAgICAgICAgICAgICAgICAgICBleHBlY3QoYWN0aW9uKS50b0JlKCdyZXF1ZXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgZXhwZWN0KG9wdHMudHlwZSkudG9CZSgnc2NoZW1hRGVmaW5pdGlvbicpOwogICAgICAgICAgICAgICAgICAgIGV4cGVjdChvcHRzLnVybCkudG9CZShgL3YxL3NjaGVtYURlZmluaXRpb25zLyR7c2NoZW1hTmFtZX1gKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uVHlwZTogc2NoZW1hTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtzY2hlbWFOYW1lXTogdGVzdFNjaGVtYURlZmluaXRpb24sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi50ZXN0U2Vjb25kYXJ5U2NoZW1hRGVmaW5pdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICBzdGF0ZTogeyBjb25maWc6IHsgbmFtZXNwYWNlOiBzdG9yZSB9IH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIC8vIFdlIGhhdmUgbm8gc2NoZW1hIGRlZmluaXRpb24gaW5mbywgaG93ZXZlciB3ZSBrbm93IHRoYXQgc2NoZW1hIGRlZmluaXRpb25zIHNob3VsZCBiZSBmZXRjaGVkCiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5zY2hlbWFEZWZpbml0aW9uKS50b0JlTnVsbCgpOwogICAgICAgICAgICBleHBlY3Qoc2NoZW1hTW9kZWwuc2NoZW1hRGVmaW5pdGlvbnMpLnRvQmVOdWxsKCk7CiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5yZXF1aXJlc1Jlc291cmNlRmllbGRzKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5oYXNSZXNvdXJjZUZpZWxkcykudG9CZUZhbHN5KCk7CiAgICAgICAgICAgIC8vIEZldGNoIHNjaGVtYSBkZWZpbml0aW9uCiAgICAgICAgICAgIGF3YWl0IHNjaGVtYU1vZGVsLmZldGNoUmVzb3VyY2VGaWVsZHMoKTsKICAgICAgICAgICAgLy8gV2UgaGF2ZSBzY2hlbWEgZGVmaW5pdGlvbiBpbmZvCiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5zY2hlbWFEZWZpbml0aW9uKS50b1N0cmljdEVxdWFsKHRlc3RTY2hlbWFEZWZpbml0aW9uKTsKICAgICAgICAgICAgZXhwZWN0KHNjaGVtYU1vZGVsLnNjaGVtYURlZmluaXRpb25zKS50b1N0cmljdEVxdWFsKHRlc3RTZWNvbmRhcnlTY2hlbWFEZWZpbml0aW9ucyk7CiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5yZXF1aXJlc1Jlc291cmNlRmllbGRzKS50b0JlVHJ1dGh5KCk7CiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5oYXNSZXNvdXJjZUZpZWxkcykudG9CZVRydXRoeSgpOwogICAgICAgICAgICAvLyBVaG9oLCB0aGVyZSdzIGJlZW4gYW4gdXBkYXRlIG92ZXIgc29ja2V0LiBTb2NrZXQgcHJvY2VzcyBjYWxscyB0aGUgYGxvYWRgIG11dGF0b3Igd2hpY2ggdGhlbiBjYWxscyBgcmVwbGFjZWAuCiAgICAgICAgICAgIC8vIFRoaXMgd2lwZXMgb3V0IEFMTCBwcm9wZXJ0aWVzIG9uIG91ciBwb29yIHNjaGVtYSBtb2RlbCBhbmQgYXBwbGllcyBldmVyeXRoaW5nIGZyb20gdGhlIG9uZSB3ZSBnZXQgb3ZlciBzb2NrZXQKICAgICAgICAgICAgcmVwbGFjZShzY2hlbWFNb2RlbCwgeyAuLi50ZXN0U2NoZW1hIH0pOwogICAgICAgICAgICAvLyBBbGwgc2NoZW1hIGRlZmluaXRpb24gaW5mbyBzaG91bGQgc3RpbGwgd29yayAodGhpcyBtYXRjaGVzIGFib3ZlKQogICAgICAgICAgICBleHBlY3Qoc2NoZW1hTW9kZWwuc2NoZW1hRGVmaW5pdGlvbikudG9TdHJpY3RFcXVhbCh0ZXN0U2NoZW1hRGVmaW5pdGlvbik7CiAgICAgICAgICAgIGV4cGVjdChzY2hlbWFNb2RlbC5zY2hlbWFEZWZpbml0aW9ucykudG9TdHJpY3RFcXVhbCh0ZXN0U2Vjb25kYXJ5U2NoZW1hRGVmaW5pdGlvbnMpOwogICAgICAgICAgICBleHBlY3Qoc2NoZW1hTW9kZWwucmVxdWlyZXNSZXNvdXJjZUZpZWxkcykudG9CZVRydXRoeSgpOwogICAgICAgICAgICBleHBlY3Qoc2NoZW1hTW9kZWwuaGFzUmVzb3VyY2VGaWVsZHMpLnRvQmVUcnV0aHkoKTsKICAgICAgICB9KTsKICAgIH0pOwp9KTsK"},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/models/__tests__/steve-schema.test.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/models/__tests__/steve-schema.test.ts"],"names":[],"mappings":"AAAA,OAAO,WAAW,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,OAAO,EAAE,MAAM,0CAA0C,CAAC;AAEnE,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,oBAAoB,EAAE,KAAK,IAAG,EAAE;YACjC,MAAM,KAAK,GAAG,SAAS,CAAC;YACxB,MAAM,UAAU,GAAG,WAAW,CAAC;YAE/B,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YAEzB,MAAM,UAAU,GAAG;gBACjB,EAAE,EAAc,UAAU;gBAC1B,QAAQ,EAAQ,EAAE,IAAI,EAAE,UAAU,EAAE;gBACpC,cAAc,EAAE,IAAI;gBACpB,KAAK,EAAW,EAAE,IAAI,EAAE,eAAgB,UAAW,EAAE,EAAE;aACxD,CAAC;YACF,MAAM,oBAAoB,GAAG;gBAC3B,IAAI,EAAY,UAAU;gBAC1B,cAAc,EAAE;oBACd,CAAC,EAAE,EAAE;oBACL,CAAC,EAAE,EAAE;iBACN;aACF,CAAC;YACF,MAAM,8BAA8B,GAAG;gBACrC,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;gBAChB,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE;aACjB,CAAC;YAEF,MAAM,WAAW,GAAG,IAAI,WAAW,CAAC,UAAU,EAAE;gBAC9C,QAAQ,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,MAAM,EAAE,IAAI,EAAE,EAAE;oBACtD,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;oBAC/B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;oBAC3C,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,yBAA0B,UAAW,EAAE,CAAC,CAAC;oBAE/D,OAAO;wBACL,cAAc,EAAE,UAAU;wBAC1B,WAAW,EAAK;4BACd,CAAC,UAAU,CAAC,EAAE,oBAAoB;4BAClC,GAAG,8BAA8B;yBAClC;qBACF,CAAC;gBACJ,CAAC,CAAC;gBACF,KAAK,EAAE,EAAE,MAAM,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE;aACxC,CAAC,CAAC;YAEH,+FAA+F;YAC/F,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,QAAQ,EAAE,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,QAAQ,EAAE,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC,UAAU,EAAE,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,SAAS,EAAE,CAAC;YAElD,0BAA0B;YAC1B,MAAM,WAAW,CAAC,mBAAmB,EAAE,CAAC;YAExC,iCAAiC;YACjC,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAAC,8BAA8B,CAAC,CAAC;YACpF,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC,UAAU,EAAE,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,UAAU,EAAE,CAAC;YAEnD,gHAAgH;YAChH,gHAAgH;YAChH,OAAO,CAAC,WAAW,EAAE,EAAE,GAAG,UAAU,EAAE,CAAC,CAAC;YAExC,oEAAoE;YACpE,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,aAAa,CAAC,oBAAoB,CAAC,CAAC;YACzE,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,aAAa,CAAC,8BAA8B,CAAC,CAAC;YACpF,MAAM,CAAC,WAAW,CAAC,sBAAsB,CAAC,CAAC,UAAU,EAAE,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC,UAAU,EAAE,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import SteveSchema from '@shell/models/steve-schema';\nimport { replace } from '@shell/plugins/dashboard-store/mutations';\n\ndescribe('class SteveSchema', () => {\n  describe('schema diet', () => {\n    it('schema Definitions', async() => {\n      const store = 'cluster';\n      const schemaName = 'steveTest';\n\n      SteveSchema.reset(store);\n\n      const testSchema = {\n        id:             schemaName,\n        metadata:       { name: schemaName },\n        resourceFields: null,\n        links:          { self: `/v1/schemas/${ schemaName }` }\n      };\n      const testSchemaDefinition = {\n        type:           schemaName,\n        resourceFields: {\n          a: {},\n          b: {},\n        }\n      };\n      const testSecondarySchemaDefinitions = {\n        a: { type: 'a' },\n        b: { type: 'b' }\n      };\n\n      const schemaModel = new SteveSchema(testSchema, {\n        dispatch: jest.fn().mockImplementation((action, opts) => {\n          expect(action).toBe('request');\n          expect(opts.type).toBe('schemaDefinition');\n          expect(opts.url).toBe(`/v1/schemaDefinitions/${ schemaName }`);\n\n          return {\n            definitionType: schemaName,\n            definitions:    {\n              [schemaName]: testSchemaDefinition,\n              ...testSecondarySchemaDefinitions,\n            }\n          };\n        }),\n        state: { config: { namespace: store } }\n      });\n\n      // We have no schema definition info, however we know that schema definitions should be fetched\n      expect(schemaModel.schemaDefinition).toBeNull();\n      expect(schemaModel.schemaDefinitions).toBeNull();\n      expect(schemaModel.requiresResourceFields).toBeTruthy();\n      expect(schemaModel.hasResourceFields).toBeFalsy();\n\n      // Fetch schema definition\n      await schemaModel.fetchResourceFields();\n\n      // We have schema definition info\n      expect(schemaModel.schemaDefinition).toStrictEqual(testSchemaDefinition);\n      expect(schemaModel.schemaDefinitions).toStrictEqual(testSecondarySchemaDefinitions);\n      expect(schemaModel.requiresResourceFields).toBeTruthy();\n      expect(schemaModel.hasResourceFields).toBeTruthy();\n\n      // Uhoh, there's been an update over socket. Socket process calls the `load` mutator which then calls `replace`.\n      // This wipes out ALL properties on our poor schema model and applies everything from the one we get over socket\n      replace(schemaModel, { ...testSchema });\n\n      // All schema definition info should still work (this matches above)\n      expect(schemaModel.schemaDefinition).toStrictEqual(testSchemaDefinition);\n      expect(schemaModel.schemaDefinitions).toStrictEqual(testSecondarySchemaDefinitions);\n      expect(schemaModel.requiresResourceFields).toBeTruthy();\n      expect(schemaModel.hasResourceFields).toBeTruthy();\n    });\n  });\n});\n"]}]}