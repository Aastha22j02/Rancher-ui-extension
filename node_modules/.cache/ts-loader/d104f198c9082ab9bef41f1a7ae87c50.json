{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/types/store/pagination.types.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/types/store/pagination.types.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/types/store/pagination.types.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/types/store/pagination.types.ts"],"names":[],"mappings":"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","sourcesContent":["import { NAMESPACE_FILTER_NS_FULL_PREFIX, NAMESPACE_FILTER_P_FULL_PREFIX } from '@shell/utils/namespace-filter';\n\n// Pagination Typing\n// These structures are designed to offer both convenience and flexibility based on a common structure and are\n// converted to the url param format as per https://github.com/rancher/steve.\n//\n// Simple use cases such as filtering by a single param should be easy to use.\n// More complex filtering (and'ing and 'or'ing multiple fields) is also supported.\n//\n// The top level object `PaginationArgs` contains all properties that will be converted to url params\n//\n// The two important / complex params are currently\n// - `filter` https://github.com/rancher/steve?tab=readme-ov-file#filter\n//   - represented by `PaginationParamFilter extends PaginationParam`\n//   - Examples\n//     - filter=metadata.name=123\n//     - filter=metadata.name=123,metadata.name=456 (name is 123 OR 456)\n//     - filter=metadata.name=123&filter=metadata.namespace=abc (name 123 AND namespace abc)\n// - `projectsornamespaces` https://github.com/rancher/steve?tab=readme-ov-file#projectsornamespaces\n//   - represented by `PaginationParamProjectOrNamespace extends PaginationParam`\n//   - Examples\n//     - projectsornamespaces=123\n//     - projectsornamespaces=123,456 (projects or namespaces that have id 123 OR 456)\n//\n//\n// Some of the types below are defined using classes instead of TS types/interfaces\n// - Avoid making complex json objects by using clearer instance constructors\n//   - Better documented\n//   - Defaults (a lot of the time convenience > utility)\n// - Adds some kind of typing in pure js docs\n//   - class ctor links to definition, instead of object just being a random json blob)\n//   - helps VSCode jsdoc highlighting\n\n/**\n * Sort the pagination result\n *\n * For more information regarding the API see https://github.com/rancher/steve?tab=readme-ov-file#sort\n */\nexport interface PaginationSort {\n  /**\n   * Name of field within the object to sort by\n   */\n  field: string,\n  asc: boolean\n}\n\n/**\n * Filter the pagination result by these specific fields\n *\n * For example\n *\n * - metadata.name=test\n * - metadata.namespace!=system\n *\n * For more information regarding the API see https://github.com/rancher/steve?tab=readme-ov-file#query-parameters\n */\nexport class PaginationFilterField {\n  /**\n   * Name of field within the object to filter by for example the x of x=y\n   *\n   * This can be optional for some (projectsornamespaces)\n   */\n  field?: string;\n  /**\n   * Value of field within the object to filter by for example the y of x=y\n   */\n  value: string;\n  /**\n   * Equality field within the object to filter by for example the `=` or `!=` of x=y\n   */\n  equals: boolean;\n  /**\n   * Match the field exactly. False for partial matches\n   *\n   * Value: pod1\n   * Exact: true. \"p\" no, \"pod\", no, \"pod1\" yes\n   * Exact: false. \"p\" yes, \"pod\", yes, \"pod1\" yes\n   */\n  exact: boolean;\n\n  constructor(\n    {\n      field, value, equals = true, exact = true\n    }:\n    { field?: string; value: string; equals?: boolean; exact?: boolean;}\n  ) {\n    this.field = field;\n    this.value = value;\n    this.equals = equals;\n    this.exact = exact;\n  }\n}\n\n/**\n * Represents filter like params, for example\n *\n * - `filter=abc!=xyz&def=123`\n * - `projectsornamespace!=p-3456`\n *\n * ### Params\n * #### Filter\n * - For more information regarding the API see https://github.com/rancher/steve?tab=readme-ov-file#filter\n *\n * #### Projects Or Namespace\n * - For more information regarding the API see https://github.com/rancher/steve?tab=readme-ov-file#projectsornamespaces\n *\n * ### Combining Params\n * Params can be combined in two logical ways\n *\n * 1) AND\n *    - Used when you would like to filter by something like a=1 AND b=2 AND c=3\n *    - To do this multiple instances of `PaginationParam` are used in an array\n *      - Object Structure\n *        ```\n *        [\n *          PaginationParam,\n *          PaginationParam,\n *          PaginationParam\n *        ]\n *        ```\n *      - Results in url\n *        ```\n *        filter=a=1&filter=b=2&filter=c=3\n *        ```\n *      - Examples\n *        - `filter=metadata.namespace=abc&filter=metadata.name=123,property=123`\n * 2) OR\n *    - Used when you would like to filter by something like a=1 OR b=2 OR c=3\n *    - To do this multiple fields within a single PaginationParam is used\n *      - Object Structure\n *        ```\n *        [\n *          PaginationParam {\n *            PaginationFilterField,\n *            PaginationFilterField,\n *            PaginationFilterField\n *          }\n *        ]\n *        ```\n *      - Results in url\n *        ```\n *        filter=a=1,b=2,c=3\n *        ```\n *\n *      - For example `filter=a=1,b=2,c=3`\n *\n *\n * This structure should give enough flexibility to cover all uses.\n *\n *\n */\nexport abstract class PaginationParam {\n  /**\n   * Query Param. For example `filter` or `projectsornamespaces`\n   */\n  param: string;\n  /**\n   * should fields equal param.\n   *\n   * For example projectsornamexspaces=x or projectsornamexspaces!=x\n   */\n  equals: boolean;\n  /**\n   * Fields to filter by\n   *\n   * For example metadata.namespace=abc OR metadata.namespace=xyz\n   */\n  fields: PaginationFilterField[];\n\n  constructor(\n    { param, equals = true, fields = [] }:\n    {\n      param: string;\n      /**\n       * should param equal fields\n       *\n       * For definition see {@link PaginationParam} `equals`\n       */\n      equals?: boolean;\n      /**\n       * Collection of fields to filter by\n       *\n       * For definition see {@link PaginationParam} `fields`\n       */\n      fields?: PaginationFilterField[];\n  }) {\n    this.param = param;\n    this.equals = equals;\n    this.fields = fields;\n  }\n}\n\n/**\n * This is a convenience class for the `filter` param which works some magic, adds defaults and converts to the required PaginationParam format\n *\n * See description for {@link PaginationParam} for how multiple of these can be combined together to AND or OR together\n *\n * For more information regarding the API see https://github.com/rancher/steve?tab=readme-ov-file#filter\n */\nexport class PaginationParamFilter extends PaginationParam {\n  constructor(\n    { equals = true, fields = [] }:\n    {\n      /**\n       * should param equal fields\n       *\n       * For definition see {@link PaginationParam} `equals`\n       */\n      equals?: boolean;\n      /**\n       * Collection of fields to filter by.\n       *\n       * Fields are ORd together\n       *\n       * For definition see {@link PaginationParam} `fields`\n       */\n      fields?: PaginationFilterField[];\n    }\n  ) {\n    super({\n      param: 'filter',\n      equals,\n      fields\n    });\n  }\n\n  /**\n   * Convenience method when you just want an instance of {@link PaginationParamFilter} with a simple `filter=x=y` param\n   */\n  static createSingleField(field: { field?: string; value: string; equals?: boolean; }): PaginationParam {\n    return new PaginationParamFilter({ fields: [new PaginationFilterField(field)] });\n  }\n\n  /**\n   * Convenience method when you just want an instance of {@link PaginationParamFilter} with a simple `filter=a=1,b=2,c=3` PaginationParam\n   *\n   * These will be OR'd together\n   */\n  static createMultipleFields(fields: PaginationFilterField[]): PaginationParam {\n    return new PaginationParamFilter({ fields });\n  }\n}\n\n/**\n * This is a convenience class for the `projectsornamespaces` param which works some magic, adds defaults and converts to the required PaginationParam format\n *\n * See description for {@link PaginationParam} for how multiple of these can be combined together to AND or OR together\n *\n * For more information regarding the API see https://github.com/rancher/steve?tab=readme-ov-file#projectsornamespaces\n */\nexport class PaginationParamProjectOrNamespace extends PaginationParam {\n  constructor(\n    { equals = true, projectOrNamespace = [] }:\n    {\n      /**\n       * should param equal fields\n       * For definition see {@link PaginationParam} `equals`\n       */\n      equals?: boolean;\n       /**\n       * Collection of projects / namespace id's to filter by\n       *\n       * These are OR'd together\n       *\n       * For clarification on definition see {@link PaginationFilterField}\n       */\n      projectOrNamespace?: string[];\n    }\n  ) {\n    const safeFields = projectOrNamespace.map((f) => {\n      return new PaginationFilterField({\n        value: f\n          .replace(NAMESPACE_FILTER_NS_FULL_PREFIX, '')\n          .replace(NAMESPACE_FILTER_P_FULL_PREFIX, '')\n      });\n    });\n\n    super({\n      param:  'projectsornamespaces',\n      equals,\n      fields: safeFields\n    });\n  }\n}\n\n/**\n * Pagination settings sent to actions and persisted to store\n *\n * Use this for making pagination requests that utilise the new vai cache backed API\n */\nexport class PaginationArgs {\n  /**\n   * Page number to fetch\n   */\n  page: number | null;\n  /**\n   * Number of results in the page\n   */\n  pageSize?: number | null;\n  /**\n   * Sort the results\n   *\n   * For more info see {@link PaginationSort}\n   */\n  sort: PaginationSort[];\n  /**\n   * A collection of `filter` params\n   *\n   * For more info see {@link PaginationParamFilter}\n   */\n  filters: PaginationParamFilter[];\n  /**\n   * A collection of `projectsornamespace` params\n   *\n   * For more info see {@link PaginationParamProjectOrNamespace}\n   */\n  projectsOrNamespaces: PaginationParamProjectOrNamespace[];\n\n  /**\n   * Creates an instance of PaginationArgs.\n   *\n   * Contains defaults to avoid creating complex json objects all the time\n   */\n  constructor({\n    page = 1,\n    pageSize = 10,\n    sort = [],\n    filters = [],\n    projectsOrNamespaces = [],\n  }:\n  // This would be neater as just Partial<PaginationArgs> but we lose all jsdoc\n  {\n    /**\n     * For definition see {@link PaginationArgs} `page`\n     */\n    page?: number | null,\n    /**\n     * For definition see {@link PaginationArgs} `pageSize`\n     */\n    pageSize?: number | null,\n    /**\n     * For definition see {@link PaginationArgs} `sort`\n     */\n    sort?: PaginationSort[],\n    /**\n     * Automatically wrap if not an array\n     *\n     * For definition see {@link PaginationArgs} `filters`\n     */\n    filters?: PaginationParamFilter | PaginationParamFilter[],\n    /**\n     * Automatically wrap if not an array\n     *\n     * For definition see {@link PaginationArgs} `projectsOrNamespaces`\n     */\n    projectsOrNamespaces?: PaginationParamProjectOrNamespace | PaginationParamProjectOrNamespace[],\n  }) {\n    this.page = page;\n    this.pageSize = pageSize;\n    this.sort = sort;\n    if (filters) {\n      this.filters = Array.isArray(filters) ? filters : [filters];\n    } else {\n      this.filters = [];\n    }\n    if (projectsOrNamespaces) {\n      this.projectsOrNamespaces = Array.isArray(projectsOrNamespaces) ? projectsOrNamespaces : [projectsOrNamespaces];\n    } else {\n      this.projectsOrNamespaces = [];\n    }\n  }\n}\n\n/**\n * Wrapper around {@link PaginationArgs}\n *\n * Use this for making requests that utilise filtering backed by the new vai cache backed API\n */\nexport class FilterArgs extends PaginationArgs {\n  /**\n     * Creates an instance of PaginationArgs.\n     *\n     * Contains defaults to avoid creating complex json objects all the time\n     */\n  constructor({\n    sort = [],\n    filters = [],\n    projectsOrNamespaces = [],\n  }:\n  // This would be neater as just Partial<PaginationArgs> but we lose all jsdoc\n  {\n    /**\n     * For definition see {@link PaginationArgs} `sort`\n     */\n    sort?: PaginationSort[],\n    /**\n     * Automatically wrap if not an array\n     *\n     * For definition see {@link PaginationArgs} `filters`\n     */\n    filters?: PaginationParamFilter | PaginationParamFilter[],\n    /**\n     * Automatically wrap if not an array\n     *\n     * For definition see {@link PaginationArgs} `projectsOrNamespaces`\n     */\n    projectsOrNamespaces?: PaginationParamProjectOrNamespace | PaginationParamProjectOrNamespace[],\n  }) {\n    super({\n      page: null, pageSize: null, sort, filters, projectsOrNamespaces\n    });\n  }\n}\n\n/**\n * Overall result of a pagination request.\n *\n * Does not contain actual resources but overall stats (count, pages, etc)\n */\nexport interface StorePaginationResult {\n  count: number,\n  pages: number,\n  /**\n   * The last time the resource was updated. Used to assist list watching for changes\n   */\n  timestamp: number,\n}\n\nexport interface StorePaginationRequest {\n  /**\n   * The single namespace to filter results by (as part of url path, not pagination params)\n   */\n  namespace?: string,\n  /**\n   * The set of pagination args used to create the request\n   */\n  pagination: PaginationArgs\n}\n\n/**\n * Pagination settings\n * - what was requested\n * - what was received (minus actual resources)\n *\n * Object is persisted to store\n */\nexport interface StorePagination {\n  /**\n   * Collection of args that is used to make the request\n   */\n  request: StorePaginationRequest,\n\n  /**\n   * Information in the response outside of the actual resources returned\n   */\n  result: StorePaginationResult\n}\n"]}]}