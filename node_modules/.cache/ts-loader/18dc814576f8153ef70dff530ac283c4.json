{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/settings.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/settings.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgTUFOQUdFTUVOVCB9IGZyb20gJ0BzaGVsbC9jb25maWcvdHlwZXMnOwppbXBvcnQgeyBERUZBVUxUX1BFUkZfU0VUVElORywgU0VUVElORyB9IGZyb20gJ0BzaGVsbC9jb25maWcvc2V0dGluZ3MnOwppbXBvcnQgeyBwbHVyYWxpemUgfSBmcm9tICdAc2hlbGwvdXRpbHMvc3RyaW5nJzsKaW1wb3J0IHsgX01VTFRJIH0gZnJvbSAnQHNoZWxsL3BsdWdpbnMvZGFzaGJvYXJkLXN0b3JlL2FjdGlvbnMnOwpleHBvcnQgY29uc3QgZmV0Y2hPckNyZWF0ZVNldHRpbmcgPSBhc3luYyAoc3RvcmUsIGlkLCB2YWwsIHNhdmUgPSB0cnVlKSA9PiB7CiAgICBsZXQgc2V0dGluZzsKICAgIHRyeSB7CiAgICAgICAgc2V0dGluZyA9IGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmQnLCB7IHR5cGU6IE1BTkFHRU1FTlQuU0VUVElORywgaWQgfSk7CiAgICB9CiAgICBjYXRjaCAoX2EpIHsKICAgICAgICBjb25zdCBzY2hlbWEgPSBzdG9yZS5nZXR0ZXJzWydtYW5hZ2VtZW50L3NjaGVtYUZvciddKE1BTkFHRU1FTlQuU0VUVElORyk7CiAgICAgICAgY29uc3QgdXJsID0gc2NoZW1hLmxpbmtGb3IoJ2NvbGxlY3Rpb24nKTsKICAgICAgICBzZXR0aW5nID0gYXdhaXQgc3RvcmUuZGlzcGF0Y2goJ21hbmFnZW1lbnQvY3JlYXRlJywgewogICAgICAgICAgICB0eXBlOiBNQU5BR0VNRU5ULlNFVFRJTkcsIG1ldGFkYXRhOiB7IG5hbWU6IGlkIH0sIHZhbHVlOiB2YWwsIGRlZmF1bHQ6IHZhbCB8fCAnJwogICAgICAgIH0pOwogICAgICAgIGlmIChzYXZlKSB7CiAgICAgICAgICAgIGF3YWl0IHNldHRpbmcuc2F2ZSh7IHVybCB9KTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gc2V0dGluZzsKfTsKLyoqCiAgKiBGZXRjaCBhIHNwZWNpZmljIHNldHRpbmcgdGhhdCBtaWdodCBub3QgZXhpc3QKICAqIFdlIGZldGNoIGFsbCBzZXR0aW5ncyAtIHJlYWxpdHkgaXMgUmFuY2hlciB3aWxsIGhhdmUgZG9uZSB0aGlzIGFscmVhZHksIHNvIHRoZXJlJ3Mgbm8gb3ZlcmhlYWQgaW4gZG9pbmcKICAqIHRoaXMgLSBidXQgaWYgd2UgZmV0Y2ggYSBzcGVjaWZpYyBzZXR0aW5nIHRoYXQgZG9lcyBub3QgZXhpc3QsIHdlIHdpbGwgZ2V0IGEgNDA0LCB3aGljaCB3ZSBkb24ndCB3YW50CiAgKi8KZXhwb3J0IGNvbnN0IGZldGNoU2V0dGluZyA9IGFzeW5jIChzdG9yZSwgaWQpID0+IHsKICAgIGNvbnN0IGFsbCA9IGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7IHR5cGU6IE1BTkFHRU1FTlQuU0VUVElORyB9KTsKICAgIGNvbnN0IHNldHRpbmcgPSAoYWxsIHx8IFtdKS5maW5kKChzZXR0aW5nKSA9PiBzZXR0aW5nLmlkID09PSBpZCk7CiAgICByZXR1cm4gc2V0dGluZzsKfTsKLyoqCiAqIENhcmVmdWxseSBmZXRjaCBtZ210IHNldHRpbmdzCiAqCiAqIEVuc3VyZXMgdGhhdAogKiAtIENvbmN1cnJlbnQgY2FsbHMgdG8gdGhpcyBmdW5jdGlvbiB3aWxsIG9ubHkgcmVzdWx0IGluIGEgc2luZ2xlIGh0dHAgcmVxdWVzdAogKiAtIFN1YnNlcXVlbnQgY2FsbHMsIHdoZW4gZWl0aGVyIGxvZ2dlZCBpbiBvciBsb2dnZWQgb3V0LCB3aWxsIG9ubHkgcmVzdWx0IGluIGEgc2luZ2xlIGh0dHAgcmVxdWVzdAogKiAtIExvZ2dlZCBvdXQgY2FsbCB3aWxsIGZldGNoIHBhcnRpYWwgc2V0dGluZ3MsIGFmdGVyIGxvZ2dpbmcgaW4gYW5vdGhlciBjYWxsIHdpbGwgZmV0Y2ggYWxsIHNldHRpbmdzCiAqCiAqIFdpbGwgYmUgdXNlZCBpbiBtYW55IHBsYWNlcywgcGFydGljdWxhcmx5IG11bHRpcGxlIHRpbWVzIHdoZW4gbG9hZGluZyB0aGUgZGFzaGJvYXJkCiAqCiAqIE5vdGUgLSBXZSBuZWVkIHRvIHNwZWNpZnkgdGhlIHVybCBmb3IgY2FzZXMgd2hlcmUgaXQgY2FuJ3QgYmUgZGV0ZXJtaW5lZCAoaS5lLiB3ZSBoYXZlbid0IGZldGNoZWQgc2NoZW1hcykKICovCmV4cG9ydCBjb25zdCBmZXRjaEluaXRpYWxTZXR0aW5ncyA9IGFzeW5jIChzdG9yZSkgPT4gewogICAgY29uc3QgZ2VuZXJhdGlvbiA9IHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvZ2VuZXJhdGlvbiddKE1BTkFHRU1FTlQuU0VUVElORyk7CiAgICAvLyBXZSB1c2UgdGhpcyBhcyBpdCBjb3BpZXMgdGhlIHByZXZpb3VzIG1lY2hhbmlzbSB0aGlzIHdhcyBiYXNlZCBvbiAoaW4gZmluZEFsbCkKICAgIC8vIFRoZXJlIGlzIHRoZSBnZXR0ZXIgYGF1dGgvbG9nZ2VkSW5Bc2AgKHdoaWNoIGlzIHNldCBnaXZlbiBgZnJvbUhlYWRlcmApLCBidXQgdGhhdCdzIGluaXRpYWxpc2VkIGFmdGVyIHRoZSBmaXJzdCBjYWxsIHRvIGhlcmUgKHNlZSBgYXV0aGVudGljYXRlZGApCiAgICBjb25zdCBoZWFkZXIgPSBzdG9yZS5nZXR0ZXJzWydhdXRoL2Zyb21IZWFkZXInXTsKICAgIGNvbnN0IGF1dGhlZCA9IGAke2hlYWRlcn1gID09PSAndHJ1ZScgfHwgYCR7aGVhZGVyfWAgPT09ICdub25lJzsKICAgIGlmIChhdXRoZWQpIHsKICAgICAgICAvLyBXZSdyZSBhdXRoZWQsIHdlIHdpbGwgYWx3YXlzIGdldCB0aGUgZnVsbCBsaXN0CiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7CiAgICAgICAgICAgIHR5cGU6IE1BTkFHRU1FTlQuU0VUVElORywKICAgICAgICAgICAgb3B0OiB7IHVybDogYC92MS8ke3BsdXJhbGl6ZShNQU5BR0VNRU5ULlNFVFRJTkcpfWAgfQogICAgICAgIH0pOwogICAgfQogICAgaWYgKCFnZW5lcmF0aW9uKSB7CiAgICAgICAgLy8gV2UncmUgbm90IGF1dGhlZCwgYW5kIGhhdmVuJ3QgcHJldmlvdXNseSBmZXRjaGVkIHNldHRpbmdzIChubyBnZW5lcmF0aW9uKQogICAgICAgIC8vIEZldGNoIHNldHRpbmdzLCBwdXQgdGhlbSBpbiB0aGUgc3RvcmUsIGJ1dCBkb24ndCBzYXkgd2UndmUgZ290IGFsbCB5ZXQgKHNvIHN1YnNlcXVlbnQgY2FsbHMgd2lsbCBydW4pCiAgICAgICAgcmV0dXJuIGF3YWl0IHN0b3JlLmRpc3BhdGNoKCdtYW5hZ2VtZW50L2ZpbmRBbGwnLCB7CiAgICAgICAgICAgIHR5cGU6IE1BTkFHRU1FTlQuU0VUVElORywKICAgICAgICAgICAgb3B0OiB7CiAgICAgICAgICAgICAgICB1cmw6IGAvdjEvJHtwbHVyYWxpemUoTUFOQUdFTUVOVC5TRVRUSU5HKX1gLAogICAgICAgICAgICAgICAgbG9hZDogX01VTFRJLAogICAgICAgICAgICAgICAgcmVkaXJlY3RVbmF1dGhvcml6ZWQ6IGZhbHNlCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIC8vIFdlJ3JlIG5vdCBhdXRoZWQsIGJ1dCBoYXZlIGEgcHJldmlvdXMgdmFsdWUsIG5vIG5lZWQgdG8gbWFrZSBhIGh0dHAgcmVxdWVzdCB0byBmZXRjaCBhZ2FpbgogICAgcmV0dXJuIHN0b3JlLmdldHRlcnNbJ21hbmFnZW1lbnQvYWxsJ10oTUFOQUdFTUVOVC5TRVRUSU5HKTsKfTsKZXhwb3J0IGNvbnN0IHNldFNldHRpbmcgPSBhc3luYyAoc3RvcmUsIGlkLCB2YWwpID0+IHsKICAgIGNvbnN0IHNldHRpbmcgPSBhd2FpdCBmZXRjaE9yQ3JlYXRlU2V0dGluZyhzdG9yZSwgaWQsIHZhbCwgZmFsc2UpOwogICAgc2V0dGluZy52YWx1ZSA9IHZhbDsKICAgIGF3YWl0IHNldHRpbmcuc2F2ZSgpOwogICAgcmV0dXJuIHNldHRpbmc7Cn07CmV4cG9ydCBjb25zdCBnZXRQZXJmb3JtYW5jZVNldHRpbmcgPSAocm9vdEdldHRlcnMpID0+IHsKICAgIGNvbnN0IHBlcmZTZXR0aW5nUmVzb3VyY2UgPSByb290R2V0dGVyc1snbWFuYWdlbWVudC9ieUlkJ10oTUFOQUdFTUVOVC5TRVRUSU5HLCBTRVRUSU5HLlVJX1BFUkZPUk1BTkNFKTsKICAgIGxldCBwZXJmU2V0dGluZyA9IHt9OwogICAgaWYgKHBlcmZTZXR0aW5nUmVzb3VyY2UgPT09IG51bGwgfHwgcGVyZlNldHRpbmdSZXNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogcGVyZlNldHRpbmdSZXNvdXJjZS52YWx1ZSkgewogICAgICAgIHRyeSB7CiAgICAgICAgICAgIHBlcmZTZXR0aW5nID0gSlNPTi5wYXJzZShwZXJmU2V0dGluZ1Jlc291cmNlLnZhbHVlKTsKICAgICAgICB9CiAgICAgICAgY2F0Y2ggKGUpIHsKICAgICAgICAgICAgY29uc29sZS53YXJuKCd1aS1wZXJmb3JtYW5jZSBzZXR0aW5nIGNvbnRhaW5zIGludmFsaWQgZGF0YScpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWNvbnNvbGUKICAgICAgICB9CiAgICB9CiAgICAvLyBTdGFydCB3aXRoIHRoZSBkZWZhdWx0IGFuZCBvdmVyd3JpdGUgdGhlIHZhbHVlcyBmcm9tIHRoZSBzZXR0aW5nIC0gZW5zdXJlcyB3ZSBoYXZlIGRlZmF1bHRzIGZvciBuZXdseSBhZGRlZCBvcHRpb25zCiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihERUZBVUxUX1BFUkZfU0VUVElORywgcGVyZlNldHRpbmcgfHwge30pOwp9Owo="},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/settings.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/utils/settings.ts"],"names":[],"mappings":"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","sourcesContent":["import { MANAGEMENT } from '@shell/config/types';\nimport { Store } from 'vuex';\nimport { DEFAULT_PERF_SETTING, PerfSettings, SETTING } from '@shell/config/settings';\nimport { pluralize } from '@shell/utils/string';\nimport { _MULTI } from '@shell/plugins/dashboard-store/actions';\n\nexport const fetchOrCreateSetting = async(store: Store<any>, id: string, val: string, save = true): Promise<any> => {\n  let setting;\n\n  try {\n    setting = await store.dispatch('management/find', { type: MANAGEMENT.SETTING, id });\n  } catch {\n    const schema = store.getters['management/schemaFor'](MANAGEMENT.SETTING);\n    const url = schema.linkFor('collection');\n\n    setting = await store.dispatch('management/create', {\n      type: MANAGEMENT.SETTING, metadata: { name: id }, value: val, default: val || ''\n    });\n    if ( save ) {\n      await setting.save({ url });\n    }\n  }\n\n  return setting;\n};\n\n/**\n  * Fetch a specific setting that might not exist\n  * We fetch all settings - reality is Rancher will have done this already, so there's no overhead in doing\n  * this - but if we fetch a specific setting that does not exist, we will get a 404, which we don't want\n  */\nexport const fetchSetting = async(store: Store<any>, id: string): Promise<any> => {\n  const all = await store.dispatch('management/findAll', { type: MANAGEMENT.SETTING });\n  const setting = (all || []).find((setting: any) => setting.id === id);\n\n  return setting;\n};\n\n/**\n * Carefully fetch mgmt settings\n *\n * Ensures that\n * - Concurrent calls to this function will only result in a single http request\n * - Subsequent calls, when either logged in or logged out, will only result in a single http request\n * - Logged out call will fetch partial settings, after logging in another call will fetch all settings\n *\n * Will be used in many places, particularly multiple times when loading the dashboard\n *\n * Note - We need to specify the url for cases where it can't be determined (i.e. we haven't fetched schemas)\n */\nexport const fetchInitialSettings = async(store: Store<any>): Promise<any> => {\n  const generation = store.getters['management/generation'](MANAGEMENT.SETTING);\n  // We use this as it copies the previous mechanism this was based on (in findAll)\n  // There is the getter `auth/loggedInAs` (which is set given `fromHeader`), but that's initialised after the first call to here (see `authenticated`)\n  const header = store.getters['auth/fromHeader'];\n  const authed = `${ header }` === 'true' || `${ header }` === 'none';\n\n  if (authed) {\n    // We're authed, we will always get the full list\n    return await store.dispatch('management/findAll', {\n      type: MANAGEMENT.SETTING,\n      opt:  { url: `/v1/${ pluralize(MANAGEMENT.SETTING) }` }\n    } );\n  }\n\n  if (!generation) {\n    // We're not authed, and haven't previously fetched settings (no generation)\n    // Fetch settings, put them in the store, but don't say we've got all yet (so subsequent calls will run)\n    return await store.dispatch('management/findAll', {\n      type: MANAGEMENT.SETTING,\n      opt:  {\n        url:                  `/v1/${ pluralize(MANAGEMENT.SETTING) }`,\n        load:                 _MULTI,\n        redirectUnauthorized: false\n      }\n    });\n  }\n\n  // We're not authed, but have a previous value, no need to make a http request to fetch again\n  return store.getters['management/all'](MANAGEMENT.SETTING);\n};\n\nexport const setSetting = async(store: Store<any>, id: string, val: string): Promise<any> => {\n  const setting = await fetchOrCreateSetting(store, id, val, false);\n\n  setting.value = val;\n  await setting.save();\n\n  return setting;\n};\n\nexport const getPerformanceSetting = (rootGetters: Record<string, (arg0: string, arg1: string) => any>): PerfSettings => {\n  const perfSettingResource = rootGetters['management/byId'](MANAGEMENT.SETTING, SETTING.UI_PERFORMANCE);\n  let perfSetting = {};\n\n  if (perfSettingResource?.value) {\n    try {\n      perfSetting = JSON.parse(perfSettingResource.value);\n    } catch (e) {\n      console.warn('ui-performance setting contains invalid data'); // eslint-disable-line no-console\n    }\n  }\n\n  // Start with the default and overwrite the values from the setting - ensures we have defaults for newly added options\n  return Object.assign(DEFAULT_PERF_SETTING, perfSetting || {});\n};\n"]}]}