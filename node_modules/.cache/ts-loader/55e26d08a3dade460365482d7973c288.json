{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/Advanced.test.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/Advanced.test.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/Advanced.test.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/edit/provisioning.cattle.io.cluster/__tests__/Advanced.test.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable jest/no-hooks */\nimport { mount, Wrapper } from '@vue/test-utils';\nimport Advanced from '@shell/edit/provisioning.cattle.io.cluster/tabs/Advanced.vue';\nimport { _EDIT, _YAML, _VIEW } from '@shell/config/query-params';\nimport { clone } from '@shell/utils/object';\nimport { PROV_CLUSTER, VERSION_CLUSTER } from '@shell/edit/provisioning.cattle.io.cluster/__tests__/utils/cluster';\n\ndescribe('component: Advanced', () => {\n  let wrapper: Wrapper<InstanceType<typeof Advanced>>;\n\n  const mountOptions = {\n    propsData: {\n      value:           {},\n      mode:            _VIEW,\n      haveArgInfo:     true,\n      selectedVersion: VERSION_CLUSTER\n    },\n    mocks: {\n      $store: {\n        getters: {\n          currentStore:              () => 'current_store',\n          'current_store/schemaFor': jest.fn(),\n          'current_store/all':       jest.fn(),\n          'i18n/t':                  jest.fn(),\n          'i18n/exists':             jest.fn(),\n        }\n      },\n      $route:  { query: { AS: _YAML } },\n      $router: { applyQuery: jest.fn() },\n    }\n  };\n\n  describe('cluster configurations', () => {\n    it(`should support empty machineSelectorConfig`, () => {\n      const value = clone(PROV_CLUSTER);\n\n      value.spec.rkeConfig.machineSelectorConfig = [];\n\n      mountOptions.propsData.value = value;\n\n      wrapper = mount(\n        Advanced,\n        mountOptions\n      );\n\n      const inputElem = wrapper.find('[data-testid=\"array-list-box0\"]').element as HTMLElement;\n\n      expect(inputElem).toBeUndefined();\n    });\n\n    it(`should support undefined machineSelectorConfig.config`, () => {\n      const value = clone(PROV_CLUSTER);\n\n      value.spec.rkeConfig.machineSelectorConfig[0].config = undefined;\n\n      mountOptions.propsData.value = value;\n\n      wrapper = mount(\n        Advanced,\n        mountOptions\n      );\n\n      const inputElem = wrapper.find('[data-testid=\"array-list-box0\"]').element as HTMLElement;\n\n      expect(inputElem.textContent).toContain('—');\n    });\n\n    describe(`'protect-kernel-defaults'`, () => {\n      it(`should show value from machineGlobalConfig`, () => {\n        const value = clone(PROV_CLUSTER);\n\n        value.spec.rkeConfig.machineGlobalConfig['protect-kernel-defaults'] = true;\n        value.spec.rkeConfig.machineSelectorConfig = [{\n          config:               {},\n          machineLabelSelector: {\n            matchExpressions: [{\n              key:      'foo',\n              operator: 'In',\n              values:   ['bar'],\n            }],\n            matchLabels: { foo1: 'bar1' },\n          }\n        }];\n\n        mountOptions.propsData.mode = _VIEW;\n        mountOptions.propsData.value = value;\n\n        wrapper = mount(\n          Advanced,\n          mountOptions\n        );\n\n        const checkbox = wrapper.find('[data-testid=\"protect-kernel-defaults\"]').find('[type=\"checkbox\"]').element as HTMLInputElement;\n\n        expect(checkbox.value).toBe('true');\n      });\n\n      it(`should show value from machineSelectorConfig.config`, () => {\n        const value = clone(PROV_CLUSTER);\n\n        value.spec.rkeConfig.machineGlobalConfig['protect-kernel-defaults'] = false;\n        value.spec.rkeConfig.machineSelectorConfig = [{\n          config:               {},\n          machineLabelSelector: {\n            config:           { 'protect-kernel-defaults': true },\n            matchExpressions: [{\n              key:      'foo',\n              operator: 'In',\n              values:   ['bar'],\n            }],\n            matchLabels: { foo1: 'bar1' },\n          }\n        }];\n\n        mountOptions.propsData.mode = _VIEW;\n        mountOptions.propsData.value = value;\n\n        wrapper = mount(\n          Advanced,\n          mountOptions\n        );\n\n        const checkbox = wrapper.find('[data-testid=\"protect-kernel-defaults\"]').find('[type=\"checkbox\"]').element as HTMLInputElement;\n\n        expect(checkbox.value).toBe('true');\n      });\n    });\n\n    describe(`'kubelet-arg'`, () => {\n      describe.each([\n        _VIEW,\n        _EDIT\n      ])(`mode: %s`, (mode) => {\n        it(`should show value from machineSelectorConfig only`, () => {\n          const value = clone(PROV_CLUSTER);\n\n          value.spec.rkeConfig.machineSelectorConfig[0].config['kubelet-arg'] = ['config-from-machineSelectorConfig'];\n\n          mountOptions.propsData.mode = mode;\n          mountOptions.propsData.value = value;\n\n          wrapper = mount(\n            Advanced,\n            mountOptions\n          );\n\n          const globalContainer = wrapper.find('[data-testid=\"global-kubelet-arg\"]');\n          const selectorContainer = wrapper.find('[data-testid=\"selector-kubelet-arg\"]');\n\n          const globalInputElem = globalContainer.element as HTMLInputElement;\n          const selectorInputElem = selectorContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n\n          expect(globalInputElem).toBeUndefined();\n          expect(selectorInputElem.value).toContain('config-from-machineSelectorConfig');\n        });\n\n        it(`should show value from machineGlobalConfig only`, () => {\n          const value = clone(PROV_CLUSTER);\n\n          value.spec.rkeConfig.machineGlobalConfig['kubelet-arg'] = ['config-from-machineGlobalConfig'];\n\n          mountOptions.propsData.mode = mode;\n          mountOptions.propsData.value = value;\n\n          wrapper = mount(\n            Advanced,\n            mountOptions\n          );\n\n          const globalContainer = wrapper.find('[data-testid=\"global-kubelet-arg\"]');\n          const selectorContainer = wrapper.find('[data-testid=\"selector-kubelet-arg\"]');\n\n          const selectorInputElem = selectorContainer.element as HTMLInputElement;\n          const globalInputElem = globalContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n\n          expect(selectorInputElem).toBeUndefined();\n          expect(globalInputElem.value).toContain('config-from-machineGlobalConfig');\n        });\n\n        it(`should show value from machineGlobalConfig and machineSelectorConfig`, () => {\n          const value = clone(PROV_CLUSTER);\n\n          value.spec.rkeConfig.machineSelectorConfig[0].config['kubelet-arg'] = ['config-from-machineSelectorConfig'];\n          value.spec.rkeConfig.machineGlobalConfig['kubelet-arg'] = ['config-from-machineGlobalConfig'];\n\n          mountOptions.propsData.mode = mode;\n          mountOptions.propsData.value = value;\n\n          wrapper = mount(\n            Advanced,\n            mountOptions\n          );\n\n          const globalContainer = wrapper.find('[data-testid=\"global-kubelet-arg\"]');\n          const selectorContainer = wrapper.find('[data-testid=\"selector-kubelet-arg\"]');\n\n          const selectorInputElem = selectorContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n          const globalInputElem = globalContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n\n          expect(selectorInputElem.value).toContain('config-from-machineSelectorConfig');\n          expect(globalInputElem.value).toContain('config-from-machineGlobalConfig');\n        });\n      });\n\n      it(`mode: edit, should show empty value'`, () => {\n        const value = clone(PROV_CLUSTER);\n\n        value.spec.rkeConfig.machineSelectorConfig[0].config['kubelet-arg'] = [];\n        value.spec.rkeConfig.machineGlobalConfig['kubelet-arg'] = [];\n\n        mountOptions.propsData.mode = 'view';\n        mountOptions.propsData.value = value;\n\n        wrapper = mount(\n          Advanced,\n          mountOptions\n        );\n\n        const globalContainer = wrapper.find('[data-testid=\"global-kubelet-arg\"]');\n        const selectorContainer = wrapper.find('[data-testid=\"selector-kubelet-arg\"]');\n\n        const selectorInputElem = selectorContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n        const globalInputElem = globalContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n\n        const emptyCharacter = wrapper.find('.info-box').find('.text-muted').element;\n\n        const globalAddButton = globalContainer.find('[data-testid=\"array-list-button\"]').element;\n        const selectorAddButton = selectorContainer.find('[data-testid=\"array-list-button\"]').element;\n\n        const removeButtonConfig = globalContainer.find('[data-testid=\"remove-item-0\"]').element;\n\n        expect(selectorInputElem).toBeUndefined();\n        expect(globalInputElem).toBeUndefined();\n        expect(globalAddButton).toBeUndefined();\n        expect(selectorAddButton).toBeUndefined();\n        expect(emptyCharacter).toBeDefined();\n        expect(removeButtonConfig).toBeFalsy();\n      });\n\n      it(`mode: view, should show empty value'`, () => {\n        const value = clone(PROV_CLUSTER);\n\n        value.spec.rkeConfig.machineSelectorConfig[0].config['kubelet-arg'] = [];\n        value.spec.rkeConfig.machineGlobalConfig['kubelet-arg'] = [];\n\n        mountOptions.propsData.mode = 'edit';\n        mountOptions.propsData.value = value;\n\n        wrapper = mount(\n          Advanced,\n          mountOptions\n        );\n\n        const globalContainer = wrapper.find('[data-testid=\"global-kubelet-arg\"]');\n        const selectorContainer = wrapper.find('[data-testid=\"selector-kubelet-arg\"]');\n\n        const selectorInputElem = selectorContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n        const globalInputElem = globalContainer.find('[data-testid=\"input-0\"]').element as HTMLInputElement;\n\n        const emptyCharacter = wrapper.find('.info-box').find('.text-muted').element;\n\n        const globalAddButton = globalContainer.find('[data-testid=\"array-list-button\"]').element;\n        const selectorAddButton = selectorContainer.find('[data-testid=\"array-list-button\"]').element;\n\n        const removeButtonConfig = globalContainer.find('[data-testid=\"remove-item-0\"]').element;\n\n        expect(selectorInputElem).toBeUndefined();\n        expect(globalInputElem).toBeUndefined();\n        expect(globalAddButton).toBeDefined();\n        expect(selectorAddButton).toBeDefined();\n        expect(emptyCharacter).toBeUndefined();\n        expect(removeButtonConfig).toBeFalsy();\n      });\n    });\n  });\n});\n"]}]}