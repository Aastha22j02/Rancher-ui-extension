{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/detail/__tests__/service.test.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/detail/__tests__/service.test.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHNlcnZpY2UgZnJvbSAnQHNoZWxsL2RldGFpbC9zZXJ2aWNlLnZ1ZSc7CmltcG9ydCB7IHNoYWxsb3dNb3VudCB9IGZyb20gJ0B2dWUvdGVzdC11dGlscyc7CmRlc2NyaWJlKCd2aWV3OiBzZXJ2aWNlJywgKCkgPT4gewogICAgY29uc3QgbW9ja1N0b3JlID0gewogICAgICAgIGdldHRlcnM6IHsKICAgICAgICAgICAgJ2NsdXN0ZXIvc2NoZW1hRm9yJzogKCkgPT4geyB9LAogICAgICAgICAgICAndHlwZS1tYXAvaGVhZGVyc0Zvcic6IGplc3QuZm4oKSwKICAgICAgICAgICAgJ2kxOG4vdCc6ICh0ZXh0KSA9PiB0ZXh0LAogICAgICAgIH0sCiAgICB9OwogICAgY29uc3QgbW9ja3MgPSB7ICRzdG9yZTogbW9ja1N0b3JlIH07CiAgICBpdCgnc2hvdWxkIHJldHVybiBkZWZhdWx0IGVtcHR5IGFycmF5IG9mIHBvcnRzIGlmIHRoZSBwb3J0cyBhcmUgbm90IGNvbmZpZ3VyZWQnLCAoKSA9PiB7CiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3dNb3VudChzZXJ2aWNlLCB7CiAgICAgICAgICAgIG1vY2tzLAogICAgICAgICAgICBwcm9wc0RhdGE6IHsKICAgICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICAgICAgc3BlYzoge30sIG1ldGFkYXRhOiB7fSwgcG9kczogW10KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgICBleHBlY3Qod3JhcHBlci52bS5wb3J0cykudG9TdHJpY3RFcXVhbChbXSk7CiAgICB9KTsKICAgIGl0KCdzaG91bGQgcmV0dXJuIGVtcHR5IGFycmF5IG9mIHBvcnRzIGlmIHBvcnRzIGFyZSBzZXQgdG8gZW1wdHkgYXJyYXknLCAoKSA9PiB7CiAgICAgICAgY29uc3Qgd3JhcHBlciA9IHNoYWxsb3dNb3VudChzZXJ2aWNlLCB7CiAgICAgICAgICAgIG1vY2tzLAogICAgICAgICAgICBwcm9wc0RhdGE6IHsKICAgICAgICAgICAgICAgIHZhbHVlOiB7CiAgICAgICAgICAgICAgICAgICAgc3BlYzogeyBwb3J0czogW10gfSwgbWV0YWRhdGE6IHt9LCBwb2RzOiBbXQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgIH0pOwogICAgICAgIGV4cGVjdCh3cmFwcGVyLnZtLnBvcnRzKS50b1N0cmljdEVxdWFsKFtdKTsKICAgIH0pOwogICAgaXQoJ3Nob3VsZCByZXR1cm4gdGhlIGNvcnJlY3QgYXJyYXkgb2YgcG9ydHMgaWYgdGhlIHBvcnRzIGFyZSBjb25maWd1cmVkJywgKCkgPT4gewogICAgICAgIGNvbnN0IHBvcnRzID0gWwogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAndGVzdDEnLCBwb3J0OiA4MCwgcHJvdG9jb2w6ICdUQ1AnLCB0YXJnZXRQb3J0OiA4MAogICAgICAgICAgICB9LAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBuYW1lOiAndGVzdDInLCBwb3J0OiA4MSwgcHJvdG9jb2w6ICdUQ1AnLCB0YXJnZXRQb3J0OiA4MQogICAgICAgICAgICB9CiAgICAgICAgXTsKICAgICAgICBjb25zdCB3cmFwcGVyID0gc2hhbGxvd01vdW50KHNlcnZpY2UsIHsKICAgICAgICAgICAgbW9ja3MsCiAgICAgICAgICAgIHByb3BzRGF0YTogewogICAgICAgICAgICAgICAgdmFsdWU6IHsKICAgICAgICAgICAgICAgICAgICBzcGVjOiB7IHBvcnRzIH0sIG1ldGFkYXRhOiB7fSwgcG9kczogW10KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICB9KTsKICAgICAgICBleHBlY3Qod3JhcHBlci52bS5wb3J0cykudG9TdHJpY3RFcXVhbChwb3J0cy5tYXAoKHApID0+ICh7IC4uLnAsIHB1YmxpY1BvcnRzOiBbXSB9KSkpOwogICAgfSk7Cn0pOwo="},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/detail/__tests__/service.test.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/detail/__tests__/service.test.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,2BAA2B,CAAC;AAChD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,QAAQ,CAAC,eAAe,EAAE,GAAG,EAAE;IAC7B,MAAM,SAAS,GAAG;QAChB,OAAO,EAAE;YACP,mBAAmB,EAAI,GAAG,EAAE,GAAE,CAAC;YAC/B,qBAAqB,EAAE,IAAI,CAAC,EAAE,EAAE;YAChC,QAAQ,EAAe,CAAC,IAAY,EAAE,EAAE,CAAC,IAAI;SAC9C;KACF,CAAC;IAEF,MAAM,KAAK,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;IAEpC,EAAE,CAAC,4EAA4E,EAAE,GAAG,EAAE;QACpF,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,EAAE;YACpC,KAAK;YACL,SAAS,EAAE;gBACT,KAAK,EAAE;oBACL,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE;iBACjC;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oEAAoE,EAAE,GAAG,EAAE;QAC5E,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,EAAE;YACpC,KAAK;YACL,SAAS,EAAE;gBACT,KAAK,EAAE;oBACL,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE;iBAC5C;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,sEAAsE,EAAE,GAAG,EAAE;QAC9E,MAAM,KAAK,GAAG;YACZ;gBACE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE;aACzD;YACD;gBACE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,UAAU,EAAE,EAAE;aACzD;SACF,CAAC;QAEF,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,EAAE;YACpC,KAAK;YACL,SAAS,EAAE;gBACT,KAAK,EAAE;oBACL,IAAI,EAAE,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,IAAI,EAAE,EAAE;iBACxC;aACF;SACF,CAAC,CAAC;QAEH,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import service from '@shell/detail/service.vue';\nimport { shallowMount } from '@vue/test-utils';\n\ndescribe('view: service', () => {\n  const mockStore = {\n    getters: {\n      'cluster/schemaFor':   () => {},\n      'type-map/headersFor': jest.fn(),\n      'i18n/t':              (text: string) => text,\n    },\n  };\n\n  const mocks = { $store: mockStore };\n\n  it('should return default empty array of ports if the ports are not configured', () => {\n    const wrapper = shallowMount(service, {\n      mocks,\n      propsData: {\n        value: {\n          spec: {}, metadata: {}, pods: []\n        }\n      },\n    });\n\n    expect(wrapper.vm.ports).toStrictEqual([]);\n  });\n\n  it('should return empty array of ports if ports are set to empty array', () => {\n    const wrapper = shallowMount(service, {\n      mocks,\n      propsData: {\n        value: {\n          spec: { ports: [] }, metadata: {}, pods: []\n        }\n      },\n    });\n\n    expect(wrapper.vm.ports).toStrictEqual([]);\n  });\n\n  it('should return the correct array of ports if the ports are configured', () => {\n    const ports = [\n      {\n        name: 'test1', port: 80, protocol: 'TCP', targetPort: 80\n      },\n      {\n        name: 'test2', port: 81, protocol: 'TCP', targetPort: 81\n      }\n    ];\n\n    const wrapper = shallowMount(service, {\n      mocks,\n      propsData: {\n        value: {\n          spec: { ports }, metadata: {}, pods: []\n        }\n      },\n    });\n\n    expect(wrapper.vm.ports).toStrictEqual(ports.map((p) => ({ ...p, publicPorts: [] })));\n  });\n});\n"]}]}