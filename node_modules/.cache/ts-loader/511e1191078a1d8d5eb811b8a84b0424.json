{"remainingRequest":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js??ref--17-1!/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts","dependencies":[{"path":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts","mtime":1725338146566},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/babel-loader/lib/index.js","mtime":1725271298942},{"path":"/home/ubuntu/suseconf/node_modules/cache-loader/dist/cjs.js","mtime":1725271299021},{"path":"/home/ubuntu/suseconf/node_modules/ts-loader/index.js","mtime":1725271299135}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"file":"/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts","sourceRoot":"","sources":["/home/ubuntu/suseconf/node_modules/@rancher/shell/plugins/steve/steve-pagination-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionFindPageArgs } from '@shell/types/store/dashboard-store.types';\nimport { PaginationParam, PaginationFilterField, PaginationParamProjectOrNamespace, PaginationParamFilter } from '@shell/types/store/pagination.types';\nimport { NAMESPACE_FILTER_ALL_SYSTEM, NAMESPACE_FILTER_ALL_USER, NAMESPACE_FILTER_P_FULL_PREFIX } from '@shell/utils/namespace-filter';\nimport Namespace from '@shell/models/namespace';\nimport { uniq } from '@shell/utils/array';\nimport {\n  CONFIG_MAP, MANAGEMENT, NAMESPACE, NODE, POD\n} from '@shell/config/types';\nimport { Schema } from 'plugins/steve/schema';\n\nclass NamespaceProjectFilters {\n  /**\n   * User needs all resources.... except if there's some settings which should remove resources in specific circumstances\n   */\n  protected handlePrefAndSettingFilter(allNamespaces: Namespace[], showDynamicRancherNamespaces: boolean, productHidesSystemNamespaces: boolean): PaginationParamFilter[] {\n    // These are AND'd together\n    // Not ns 1 AND ns 2\n    return allNamespaces.reduce((res, ns) => {\n      // Links to ns.isObscure and covers things like `c-`, `user-`, etc (see OBSCURE_NAMESPACE_PREFIX)\n      const hideObscure = showDynamicRancherNamespaces ? false : ns.isObscure;\n      // Links to ns.isSystem and covers things like ns with system annotation, hardcoded list, etc\n      const hideSystem = productHidesSystemNamespaces ? ns.isSystem : false;\n\n      if (hideObscure || hideSystem) {\n        res.push(PaginationParamFilter.createSingleField({\n          field: 'metadata.namespace', value: ns.name, equals: false\n        }));\n      }\n\n      return res;\n    }, [] as PaginationParamFilter[]);\n  }\n\n  /**\n   * User needs either all user resources... or all system\n   *\n   * System resources revolve around the namespace's isSystem property\n   *\n   * Users resources are those not in system namespaces\n   */\n  protected handleSystemOrUserFilter(allNamespaces: Namespace[], isAllSystem: boolean, isAllUser: boolean) {\n    const allSystem = allNamespaces.filter((ns) => ns.isSystem);\n\n    // > Neither of these use projectsOrNamespaces to avoid scenarios where the local cluster provides a namespace which has\n    // > a matching project... which could lead to results in the user project resource being included in the system filter\n    if (isAllSystem) {\n      // return resources in system ns 1 OR in system ns 2 ...\n      // &filter=metadata.namespace=system ns 1,metadata.namespace=system ns 2\n      return [PaginationParamFilter.createMultipleFields(\n        allSystem.map(\n          (ns) => new PaginationFilterField({ field: 'metadata.namespace', value: ns.name })\n        )\n      )];\n    } else { // if isAllUser\n      // return resources not in system ns 1 AND not in system ns 2 ...\n      // &filter=metadata.namespace!=system ns 1&filter=metadata.namespace!=system ns 2\n      return allSystem.map((ns) => PaginationParamFilter.createSingleField({\n        field: 'metadata.namespace', value: ns.name, equals: false\n      }));\n    }\n  }\n\n  /**\n   * User needs resources in a set of projects or namespaces\n   */\n  protected handleSelectionFilter(neu: string[], isLocalCluster: boolean) {\n    // User has one or more projects or namespaces. We can pass this straight through to projectsornamespaces\n\n    // return resources in project 1 OR namespace 2\n    // &projectsornamespaces=project 1,namespace 2\n    const projectsOrNamespaces = [\n      new PaginationParamProjectOrNamespace({ projectOrNamespace: neu })\n    ];\n\n    if (isLocalCluster) {\n      // > As per `handleSystemOrUserFilter` above, we need to be careful of the local cluster where there's namespaces related to projects with the same id\n      // > In this case\n      // - We're including resources in the project and it's related namespace (via projectsornamespaces)\n      // - We're also then excluding resources in the related namespace (via below `filter`)\n\n      // Exclude resources NOT in projects namespace 1 AND not in projects namespace 2\n      // &filter=metadata.namespace!=pn1&filter=metadata.namespace!=pn2\n      return {\n        projectsOrNamespaces,\n        filters: neu\n          .filter((selection) => selection.startsWith(NAMESPACE_FILTER_P_FULL_PREFIX))\n          .map((projects) => PaginationParamFilter.createSingleField({\n            field: 'metadata.namespace', value: projects.replace(NAMESPACE_FILTER_P_FULL_PREFIX, ''), equals: false\n          }))\n      };\n    }\n\n    return { projectsOrNamespaces, filters: [] };\n  }\n}\n\n/**\n * Helper functions for steve pagination\n */\nclass StevePaginationUtils extends NamespaceProjectFilters {\n  /**\n   * Filtering with the vai cache supports specific fields\n   * 1) Those listed here\n   * 2) Those references in the schema's attributes.fields list (which is used by generic lists)\n   */\n  static VALID_FIELDS: { [type: string]: { field: string, startsWith?: boolean }[]} = {\n    '': [// all types\n      { field: 'metadata.name' },\n      { field: 'metadata.namespace' },\n      // { field: 'id' }, // Pending API support\n      // { field: 'metadata.state.name' }, // Pending API support\n      { field: 'metadata.creationTimestamp' },\n    ],\n    [NODE]: [\n      { field: 'status.nodeInfo.kubeletVersion' },\n      { field: 'status.nodeInfo.operatingSystem' },\n    ],\n    [POD]: [\n      { field: 'spec.containers.image' },\n      { field: 'spec.nodeName' },\n    ],\n    [MANAGEMENT.NODE]: [\n      { field: 'status.nodeName' },\n    ],\n    [CONFIG_MAP]: [\n      { field: 'metadata.labels[harvesterhci.io/cloud-init-template]' }\n    ],\n    [NAMESPACE]: [\n      { field: 'metadata.labels[field.cattle.io/projectId]' }\n    ]\n  }\n\n  private convertArrayPath(path: string): string {\n    if (path.startsWith('metadata.fields.')) {\n      return `metadata.fields[${ path.substring(16) }]`;\n    }\n\n    return path;\n  }\n\n  public createSortForPagination(sortByPath: string): string {\n    return this.convertArrayPath(sortByPath);\n  }\n\n  /**\n   * Given the selection of projects or namespaces come up with `filter` and `projectsornamespace` query params\n   */\n  public createParamsFromNsFilter({\n    allNamespaces,\n    selection,\n    isAllNamespaces,\n    isLocalCluster,\n    showDynamicRancherNamespaces,\n    productHidesSystemNamespaces,\n  }: {\n    allNamespaces: Namespace[],\n    selection: string[],\n    /**\n     * There is no user provided filter\n     */\n    isAllNamespaces: boolean,\n    /**\n     * Weird things be happening if the target cluster is local / upstream. Uses this to check what cluster we're in\n     */\n    isLocalCluster: boolean,\n    /**\n     * Links to ns.isObscure and covers things like `c-`, `user-`, etc (see OBSCURE_NAMESPACE_PREFIX)\n     */\n    showDynamicRancherNamespaces: boolean,\n    /**\n     * Links to ns.isSystem and covers things like ns with system annotation, hardcoded list, etc\n     */\n    productHidesSystemNamespaces: boolean,\n  }): {\n    projectsOrNamespaces: PaginationParamProjectOrNamespace[],\n    filters: PaginationParamFilter[]\n  } {\n    // Hold up, why are we doing yet another way to convert the user's project / namespace filter to a set of something?\n    // - When doing this for local pagination `getActiveNamespaces` provides a full list of applicable namespaces.\n    //   Lists then filter resource locally using those namespaces\n    // - Pagination cannot take this approach of 'gimme all resources in these namespaces' primarily for the 'Only User Namespaces' case\n    //   - User could have 2k namespaces. This would result in 2k+ namespaces added to the url (namespace=1,namespace=2,namespace=3, etc)\n    // - Instead we do\n    //   - All but not given settings - Gimme resources NOT in system or obscure namespaces\n    //   - Only System Namespaces - Gimme resources in the system namespaces (which shouldn't be many namespaces)\n    //   - Only User Namespaces - Gimme resources NOT in system namespaces\n    //   - User selection - Gimme resources in specific Projects or Namespaces\n    if (isAllNamespaces && (showDynamicRancherNamespaces && !productHidesSystemNamespaces)) {\n      // No-op. Everything is returned\n      return {\n        projectsOrNamespaces: [],\n        filters:              []\n      };\n    }\n\n    // used to return resources in / not in projects/namespaces (entries are checked in both types)\n    // &projectsornamespaces=project 1,namespace 2\n    let projectsOrNamespaces: PaginationParamProjectOrNamespace[] = [];\n    // used to return resources in / not in namespaces\n    // &filter=metadata.namespace=abc\n    let filters: PaginationParamFilter[] = [];\n\n    if (!showDynamicRancherNamespaces || productHidesSystemNamespaces) {\n      // We need to hide dynamic namespaces ('c-', 'p-', etc) OR system namespaces\n      filters = this.handlePrefAndSettingFilter(allNamespaces, showDynamicRancherNamespaces, productHidesSystemNamespaces);\n    }\n\n    const isAllSystem = selection[0] === NAMESPACE_FILTER_ALL_SYSTEM;\n    const isAllUser = selection[0] === NAMESPACE_FILTER_ALL_USER;\n\n    if (selection.length === 1 && (isAllSystem || isAllUser)) {\n      // Filter by resources either in or not in system namespaces\n      filters.push(...this.handleSystemOrUserFilter(allNamespaces, isAllSystem, isAllUser ));\n    } else {\n      // User has one or more projects or namespaces\n      const res = this.handleSelectionFilter(selection, isLocalCluster);\n\n      projectsOrNamespaces = res.projectsOrNamespaces;\n      filters.push(...res.filters);\n    }\n\n    return {\n      projectsOrNamespaces,\n      filters\n    };\n  }\n\n  public createParamsForPagination(schema: Schema, opt: ActionFindPageArgs): string | undefined {\n    if (!opt.pagination) {\n      return;\n    }\n\n    const params: string[] = [];\n    const namespaceParam = this.convertPaginationParams(schema, opt.pagination.projectsOrNamespaces);\n\n    if (namespaceParam) {\n      params.push(namespaceParam);\n    }\n\n    if (opt.pagination.page) {\n      params.push(`page=${ opt.pagination.page }`);\n    }\n\n    if (opt.pagination.pageSize) {\n      params.push(`pagesize=${ opt.pagination.pageSize }`);\n    }\n\n    if (opt.pagination.sort?.length) {\n      const validateFields = {\n        checked: new Array<string>(),\n        invalid: new Array<string>(),\n      };\n\n      const joined = opt.pagination.sort\n        .map((s) => {\n          this.validateField(validateFields, schema, s.field);\n\n          return `${ s.asc ? '' : '-' }${ this.convertArrayPath(s.field) }`;\n        })\n        .join(',');\n\n      params.push(`sort=${ joined }`);\n\n      if (validateFields.invalid.length) {\n        console.warn(`Pagination API does not support sorting '${ schema.id }' by the requested fields: ${ uniq(validateFields.invalid).join(', ') }`); // eslint-disable-line no-console\n      }\n    }\n\n    if (opt.pagination.filters?.length) {\n      const filters = this.convertPaginationParams(schema, opt.pagination.filters);\n\n      if (filters) {\n        params.push(filters);\n      }\n    }\n\n    // Note - There is a `limit` property that is by default 100,000. This can be disabled by using `limit=-1`,\n    // but we shouldn't be fetching any pages big enough to exceed the default\n\n    return params.join('&');\n  }\n\n  /**\n   * Check if the API supports filtering by this field\n   */\n  private validateField(state: { checked: string[], invalid: string[]}, schema: Schema, field?: string) {\n    if (!field) {\n      return; // no field, so not invalid\n    }\n\n    if (state.checked.includes(field)) {\n      return; // already checked, exit early\n    }\n\n    state.checked.push(field);\n\n    // First check in our hardcoded list of supported filters\n    if ([\n      StevePaginationUtils.VALID_FIELDS[''], // Global\n      StevePaginationUtils.VALID_FIELDS[schema.id], // Type specific\n    ].find((fields) => fields?.find((f) => {\n      if (f.startsWith) {\n        if (field.startsWith(f.field)) {\n          return true;\n        }\n      } else {\n        return field === f.field;\n      }\n    }))) {\n      return;\n    }\n\n    // Then check in schema (the api automatically supports these)\n    if (!!schema?.attributes.columns.find(\n      // This isn't the most performant, but the string is tiny\n      (at) => at.field.replace('$.', '').replace('[', '.').replace(']', '') === field\n    )) {\n      return;\n    }\n\n    state.invalid.push(field);\n  }\n\n  /**\n   * Convert our {@link PaginationParam} definition of params to a set of url params\n   */\n  private convertPaginationParams(schema: Schema, filters: PaginationParam[] = []): string {\n    const validateFields = {\n      checked: new Array<string>(),\n      invalid: new Array<string>(),\n    };\n    const filterStrings = filters\n      .filter((filter) => !!filter.fields.length)\n      .map((filter) => {\n        const joined = filter.fields\n          .map((field) => {\n            if (field.field) {\n              // Check if the API supports filtering by this field\n              this.validateField(validateFields, schema, field.field);\n\n              const exactPartial = field.exact ? `'${ field.value }'` : field.value;\n\n              return `${ this.convertArrayPath(field.field) }${ field.equals ? '=' : '!=' }${ exactPartial }`;\n            }\n\n            return field.value;\n          })\n          .join(','); // This means OR\n\n        return `${ filter.param }${ filter.equals ? '=' : '!=' }${ joined }`;\n      });\n    const unique = filterStrings.reduce((res, s) => {\n      res[s] = true;\n\n      return res;\n    }, { } as {[filterString: string] : boolean });\n\n    const res = Object.keys(unique).join('&'); // This means AND\n\n    if (validateFields.invalid.length) {\n      console.warn(`Pagination API does not support filtering '${ schema.id }' by the requested fields: ${ uniq(validateFields.invalid).join(', ') }`); // eslint-disable-line no-console\n    }\n\n    return res;\n  }\n}\n\nexport default new StevePaginationUtils();\n"]}]}